{"version":3,"sources":["webpack:///./src/templates/tag.js"],"names":["PageTitle","styled","Title","Tags","edges","data","allMarkdownRemark","pageContext","currentPage","numPages","tag","title","meta","name","content","map","node","key","fields","slug","prefix","query"],"mappings":"2FACA,0JASMA,EAAYC,YAAOC,KAAV,iEAAGD,CAAH,2CAwCAE,UAnCF,SAAC,GAKP,IAHkBC,EAGnB,EAJJC,KACEC,kBAAqBF,MAGnB,IADJG,YAAeC,EACX,EADWA,YAAaC,EACxB,EADwBA,SAAUC,EAClC,EADkCA,IAEtC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,MAAK,aAAeD,EACpBE,KAAM,CACJ,CACEC,KAAM,SACNC,QAAS,qBAKf,kBAAC,IAAD,KACE,kBAACd,EAAD,8BAAqCU,EAArC,KAECN,EAAMW,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OACT,kBAAC,IAAD,CAASC,IAAKD,EAAKE,OAAOC,KAAMH,KAAMA,OAGxC,kBAAC,IAAD,CACER,YAAaA,EACbC,SAAUA,EACVW,OAAM,OAASV,OASlB,IAAMW,EAAK","file":"component---src-templates-tag-js-37944ec4ec91a7d47898.js","sourcesContent":["import { graphql } from \"gatsby\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport Summary from \"../components/article-summary\";\nimport Container from \"../components/container\";\nimport Layout from \"../components/layout\";\nimport Pagination from \"../components/pagination\";\nimport SEO from \"../components/seo\";\nimport { Title } from \"../components/typograph\";\n\nconst PageTitle = styled(Title)`\n  margin-bottom: 64px;\n  text-align: center;\n`;\n\nconst Tags = ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n  pageContext: { currentPage, numPages, tag },\n}) => {\n  return (\n    <Layout>\n      <SEO\n        title={`Posts com ${tag}`}\n        meta={[\n          {\n            name: \"robots\",\n            content: \"noindex,follow\",\n          },\n        ]}\n      />\n\n      <Container>\n        <PageTitle>{`Posts dispon√≠veis em \"${tag}\"`}</PageTitle>\n\n        {edges.map(({ node }) => (\n          <Summary key={node.fields.slug} node={node} />\n        ))}\n\n        <Pagination\n          currentPage={currentPage}\n          numPages={numPages}\n          prefix={`tag/${tag}`}\n        />\n      </Container>\n    </Layout>\n  );\n};\n\nexport default Tags;\n\nexport const query = graphql`\n  query TagsQuery($skip: Int!, $limit: Int!, $tag: String!) {\n    allMarkdownRemark(\n      limit: $limit\n      sort: { fields: [frontmatter___date], order: DESC }\n      skip: $skip\n      filter: { frontmatter: { tags: { eq: $tag } } }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            date\n            title\n            thumbnail {\n              childImageSharp {\n                fixed(width: 150, height: 150) {\n                  ...GatsbyImageSharpFixed\n                }\n              }\n            }\n          }\n          excerpt(pruneLength: 125)\n          fields {\n            readingTime {\n              minutes\n            }\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}