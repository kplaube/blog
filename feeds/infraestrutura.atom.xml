<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Klaus Laube - infraestrutura</title><link href="https://klauslaube.com.br/" rel="alternate"></link><link href="https://klauslaube.com.br/feeds/infraestrutura.atom.xml" rel="self"></link><id>https://klauslaube.com.br/</id><updated>2017-08-11T18:00:00-03:00</updated><subtitle>Python, Django e desenvolvimento Web</subtitle><entry><title>Uma ode ao Docker - Parte 3</title><link href="https://klauslaube.com.br/2017/08/11/uma-ode-ao-docker-parte-3.html" rel="alternate"></link><published>2017-08-11T18:00:00-03:00</published><updated>2017-08-11T18:00:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2017-08-11:/2017/08/11/uma-ode-ao-docker-parte-3.html</id><summary type="html">&lt;p&gt;Nos &lt;a href="https://klauslaube.com.br/2017/01/14/uma-ode-ao-docker-parte-1.html" title="Uma ode ao Docker - Parte 1"&gt;&lt;em&gt;posts&lt;/em&gt;&lt;/a&gt;
&lt;a href="https://klauslaube.com.br/2017/05/01/uma-ode-ao-docker-parte-2.html" title="Uma ode ao Docker - Parte 2"&gt;anteriores&lt;/a&gt;
arranhamos um pouco o conceito por trás do &lt;a href="https://klauslaube.com.br/tag/docker.html" title="Leia mais sobre Docker"&gt;&lt;em&gt;Docker&lt;/em&gt;&lt;/a&gt;,
bem como introduzimos o utilitário de linha de comando &lt;code&gt;docker&lt;/code&gt;. Nesse último artigo da série, vamos
explorar como usar o &lt;em&gt;Dockerfile&lt;/em&gt; no empacotamento de uma aplicação &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Se você ainda tem dúvidas em como "encaixar" o &lt;em&gt;Docker&lt;/em&gt; no …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Nos &lt;a href="https://klauslaube.com.br/2017/01/14/uma-ode-ao-docker-parte-1.html" title="Uma ode ao Docker - Parte 1"&gt;&lt;em&gt;posts&lt;/em&gt;&lt;/a&gt;
&lt;a href="https://klauslaube.com.br/2017/05/01/uma-ode-ao-docker-parte-2.html" title="Uma ode ao Docker - Parte 2"&gt;anteriores&lt;/a&gt;
arranhamos um pouco o conceito por trás do &lt;a href="https://klauslaube.com.br/tag/docker.html" title="Leia mais sobre Docker"&gt;&lt;em&gt;Docker&lt;/em&gt;&lt;/a&gt;,
bem como introduzimos o utilitário de linha de comando &lt;code&gt;docker&lt;/code&gt;. Nesse último artigo da série, vamos
explorar como usar o &lt;em&gt;Dockerfile&lt;/em&gt; no empacotamento de uma aplicação &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Se você ainda tem dúvidas em como "encaixar" o &lt;em&gt;Docker&lt;/em&gt; no seu fluxo de desenvolvimento,
o artigo &lt;a href="http://www.patricksoftwareblog.com/why-i-switched-from-a-traditional-deployment-to-using-docker/" title="Leia na íntegra"&gt;"Why I Switched from a Traditional Deployment to Using Docker"&lt;/a&gt;
pode ser uma boa leitura.&lt;/p&gt;
&lt;h2&gt;Configurando a aplicação Django&lt;/h2&gt;
&lt;p&gt;Vamos configurar uma aplicação de exemplo para sermos capazes de dar os passos necessários
na criação do &lt;code&gt;Dockerfile&lt;/code&gt;. Primeiramente, vamos criar
&lt;em&gt;&lt;a href="https://klauslaube.com.br/tag/virtualenv.html" title="Leia mais sobre virtualenv"&gt;virtualenv&lt;/a&gt; Python&lt;/em&gt; com &lt;a href="https://klauslaube.com.br/tag/pyenv.html" title="Leia mais sobre Pyenv"&gt;&lt;em&gt;pyenv&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pyenv virtualenv &lt;span class="m"&gt;3&lt;/span&gt;.6.1 helloworld-django-docker
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Criamos o diretório para o projeto:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir ~/Workspace/helloworld
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/Workspace/helloworld/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ativamos o &lt;em&gt;virtualenv&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pyenv activate helloworld-django-docker
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Instalamos as dependências &lt;em&gt;Django&lt;/em&gt; e iniciamos o projeto:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install django gunicorn
&lt;span class="o"&gt;(&lt;/span&gt;...&lt;span class="o"&gt;)&lt;/span&gt;

$ pip freeze &amp;gt; requirements.txt
$ django-admin startproject helloworld ~/Workspace/helloworld
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Rodamos o &lt;code&gt;python manage.py runserver&lt;/code&gt; só para termos certeza que está tudo ok:&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/django-it-worked.png" width="680" height="131" title="It worked" alt="It worked"&gt;&lt;/p&gt;
&lt;p&gt;Além disso, garantimos que o &lt;code&gt;gunicorn&lt;/code&gt; rodará sem maiores problemas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gunicorn helloworld.wsgi:application &lt;span class="se"&gt;\&lt;/span&gt;
    --bind &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:8000 &lt;span class="se"&gt;\&lt;/span&gt;
    --workers &lt;span class="m"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para saber mais sobre o &lt;em&gt;Gunicorn&lt;/em&gt;, leia a &lt;a href="http://docs.gunicorn.org/en/stable/design.html" title="Documentação do Gunicorn"&gt;documentação oficial&lt;/a&gt; do projeto.&lt;/p&gt;
&lt;h2&gt;Entra o Dockerfile&lt;/h2&gt;
&lt;p&gt;Com o &lt;a href="https://docs.docker.com/engine/installation/" title="Instalando o Docker"&gt;&lt;em&gt;Docker&lt;/em&gt; instalado&lt;/a&gt;,
vamos começar a escrever o &lt;code&gt;Dockerfile&lt;/code&gt;. O &lt;a href="http://www.mundodocker.com.br/o-que-e-dockerfile/" title="O que é o Dockerfile"&gt;&lt;em&gt;Mundo Docker&lt;/em&gt;&lt;/a&gt; define o arquivo como:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(...) um arquivo de definição onde é possível realizar ou preparar todo ambiente a
partir de um script de execução. Em resumo, o Dockerfile é um arquivo texto
com instruções, comandos e passos que você executaria manualmente, basicamente
o Docker executa uma receita de bolo.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;É nesse arquivo que escreveremos todos os procedimentos que o &lt;em&gt;Docker&lt;/em&gt; executará para criar
a imagem da nossa aplicação.&lt;/p&gt;
&lt;h3&gt;Por partes, como diria Jack&lt;/h3&gt;
&lt;p&gt;Começamos especificando qual será a "imagem base" da nossa imagem/&lt;em&gt;container&lt;/em&gt;. Faremos isso
através da expressão &lt;code&gt;FROM&lt;/code&gt;. Poderíamos dizer aqui que queremos estender a imagem &lt;a href="https://hub.docker.com/_/debian/" title="Imagem Debian no Dockerhub"&gt;_/debian&lt;/a&gt;
e realizar toda a instalação do &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;.
Mas felizmente já existem imagens prontas com a linguagem no &lt;em&gt;Docker Hub&lt;/em&gt;.
Vamos com a &lt;a href="https://hub.docker.com/_/python/" title="Imagem Python no Docker Hub"&gt;imagem oficial&lt;/a&gt; como base:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;# Dockerfile&lt;/span&gt;

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Quando "buildarmos", o &lt;em&gt;Docker&lt;/em&gt; baixará a imagem do &lt;em&gt;Python&lt;/em&gt; do repositório (se ela já não existir localmente
em sua máquina), e dará sequência às instruções encontradas no &lt;code&gt;Dockerfile&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Uma boa prática é "fecharmos o escopo" de trabalho ao setar explicitamente qual será o
diretório no qual iremos realizar demais operações como cópia de arquivos ou execução de binários. Para isso
temos o comando &lt;code&gt;WORKDIR&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:3&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /usr/src/app&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora podemos instalar o &lt;em&gt;Django&lt;/em&gt; e o &lt;em&gt;Gunicorn&lt;/em&gt;, assim como fizemos no início desse artigo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:3&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /usr/src/app&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt; requirements.txt ./
&lt;span class="k"&gt;RUN&lt;/span&gt; pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Você já deve ter reparado um padrão na escrita do &lt;code&gt;Dockerfile&lt;/code&gt;, certo? Os comandos (em maiúsculo)
determinam qual operação será realizada. Os parâmetros (em minúsculo) determinam como isso irá ocorrer.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/docker-dory-whale.jpg" width="640" height="320" title="Escrever Dockerfile é tipo falar baleiês (insidethemagic.net)" alt="Escrever Dockerfile é tipo falar baleiês (insidethemagic.net)"&gt;&lt;/p&gt;
&lt;p&gt;No caso do comando &lt;code&gt;COPY&lt;/code&gt;, passamos o arquivo &lt;code&gt;requirements.txt&lt;/code&gt; da nossa "máquina local" para
o &lt;em&gt;container&lt;/em&gt;, assim o &lt;em&gt;Docker&lt;/em&gt; será capaz de encontrar o arquivo e realizar a instalação das dependências
através do comando &lt;code&gt;pip&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Para finalizar, podemos copiar o resto do projeto e executar o servidor &lt;em&gt;WSGI&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:3&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /usr/src/app&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt; requirements.txt ./
&lt;span class="k"&gt;RUN&lt;/span&gt; pip install -r requirements.txt

&lt;span class="k"&gt;COPY&lt;/span&gt; . .

&lt;span class="k"&gt;CMD&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gunicorn&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;helloworld.wsgi:application&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--bind=0.0.0.0:8000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--workers=3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Comandos &lt;code&gt;RUN&lt;/code&gt; serão executados em tempo de &lt;em&gt;build&lt;/em&gt;. São essenciais para a construção do ambiente,
e são responsáveis pelos "layers" discutidos nos &lt;em&gt;posts&lt;/em&gt; anteriores. Portanto é bem comum
vermos comandos como &lt;code&gt;RUN apt-get dist-upgrade -y&lt;/code&gt;. Já o &lt;code&gt;CMD&lt;/code&gt; será executado no momento que a sua
imagem for executada.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://goinbigdata.com/docker-run-vs-cmd-vs-entrypoint/" title="Docker RUN vs CMD vs ENTRYPOINT"&gt;Diferença entre &lt;code&gt;RUN&lt;/code&gt;, &lt;code&gt;CMD&lt;/code&gt; e &lt;code&gt;ENTRYPONT&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;E se você está se perguntando o motivo de termos dois &lt;code&gt;COPY&lt;/code&gt;, essa prática é útil para o mecanismo de &lt;em&gt;caching&lt;/em&gt;
do &lt;em&gt;Docker&lt;/em&gt; e invalidação do mesmo, como pode ser visto no &lt;a href="https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#add-or-copy" title="Dockerfile best practices"&gt;guia de boas práticas&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;"Build" é quase BIRL!&lt;/h3&gt;
&lt;p&gt;Hora de "buildar"! Execute o seguinte comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker build -t &amp;lt;docker-hub-user&amp;gt;/helloworld-django-docker .
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Onde:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;build&lt;/code&gt;: É o comando para criar uma imagem &lt;em&gt;Docker&lt;/em&gt; a partir de um &lt;em&gt;Dockerfile&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-t&lt;/code&gt;: O parâmetro &lt;code&gt;-t&lt;/code&gt; é utilizado para nomear e tagear a imagem em questão.
  É interessante usar o padrão &lt;code&gt;&amp;lt;usuario-ou-repositorio&amp;gt;/nome-da-imagem&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt;: O caminho onde encontra-se o &lt;em&gt;Dockerfile&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Se tudo der certo, será possível listar a imagem recém criada:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker images

REPOSITORY                         TAG    IMAGE ID
kplaube/helloworld-django-docker   latest b8d3b0c234a9
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora sim seremos capazes de executar a aplicação &lt;em&gt;Django&lt;/em&gt; através de um &lt;em&gt;container&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker run -it -p &lt;span class="m"&gt;8000&lt;/span&gt;:8000 &amp;lt;docker-hub-user&amp;gt;/helloworld-django-docker
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E mais uma vez seremos capazes de ver o "It worked!" em &lt;code&gt;http://localhost:8000&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Belezura! Uma vez que a imagem esteja ok, podemos publicá-la no &lt;em&gt;Docker Hub&lt;/em&gt; (afinal,
propaganda é a alma do negócio):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker push &amp;lt;docker-hub-user&amp;gt;/helloworld-django-docker
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E... &lt;em&gt;voilá&lt;/em&gt;! A imagem foi publicada no &lt;a href="https://hub.docker.com/r/kplaube/helloworld-django-docker/"&gt;&lt;em&gt;Docker Hub&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Antes de ir: Efêmero&lt;/h3&gt;
&lt;p&gt;Nos &lt;em&gt;posts&lt;/em&gt; anteriores demos uma pincelada numa das características dos &lt;em&gt;containers&lt;/em&gt;
que é a sua "efemeridade". Isso significa que, a cada nova versão da sua &lt;em&gt;app Django&lt;/em&gt;
você terá que "buildar" uma nova versão da imagem &lt;em&gt;Docker&lt;/em&gt;. A boa notícia é que com
o mecanismo de &lt;em&gt;caching&lt;/em&gt; do &lt;em&gt;Docker&lt;/em&gt; essa operação deverá ser ligeiramente mais
rápida do que da primeira vez.&lt;/p&gt;
&lt;p&gt;Além disso, mesmo que você tenha uma leve camada de escrita ao executar um &lt;em&gt;container&lt;/em&gt;,
a informação será perdida ao parar/reiniciar o mesmo. Portanto, o uso de &lt;a href="https://docs.docker.com/engine/admin/volumes/volumes/" title="Use volumes"&gt;&lt;em&gt;Docker Volumes&lt;/em&gt;&lt;/a&gt;
é essencial quando se faz necessária a persistência de dados.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Com esse &lt;em&gt;post&lt;/em&gt; fechamos essa pequena ode ao &lt;em&gt;Docker&lt;/em&gt;. Sem dúvida, uma ferramenta que vem mudando
paradigmas (o mais recente deles com o &lt;a href="https://www.opencontainers.org/announcement/2017/07/19/open-container-initiative-oci-releases-v1-0-of-container-standards" title="Open Container Initiative (OCI) Releases v1.0 of Container Standards"&gt;lançamento da versão 1.0&lt;/a&gt; do &lt;em&gt;Container Standards&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Pretendo abordar mais sobre &lt;em&gt;Docker&lt;/em&gt; aqui no &lt;em&gt;blog&lt;/em&gt;, principalmente detalhando melhor
o uso do mesmo no &lt;a href="https://klauslaube.com.br/tag/deploy.html" title="Leia mais sobre deploy"&gt;&lt;em&gt;deploy&lt;/em&gt;&lt;/a&gt; de aplicações &lt;em&gt;Django&lt;/em&gt;.
Com a adoção de conteinerização por serviços &lt;em&gt;PaaS&lt;/em&gt; como &lt;em&gt;Heroku&lt;/em&gt; e &lt;em&gt;Openshift&lt;/em&gt;,
há muito assunto a ser explorado nessa seara.&lt;/p&gt;
&lt;p&gt;Até a próxima!&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/"&gt;Docker Docs - Best practices for writing Dockerfiles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://flaviosilveira.com/2017/criando-seu-container-com-dockerfile/"&gt;Flavio Silveira - Criando Seu Container Com Dockerfile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.mundodocker.com.br/o-que-e-dockerfile/"&gt;Mundo Docker - O que é Dockerfile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.patricksoftwareblog.com/how-to-use-docker-and-docker-compose-to-create-a-flask-application/"&gt;Patrick's Software Blog - How to use Docker and Docker Compose to Create a Flask Application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://semaphoreci.com/community/tutorials/dockerizing-a-python-django-web-application"&gt;Semaphore - Dockerizing a Python Django web Application&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="infraestrutura"></category><category term="virtualizacao"></category><category term="containerizacao"></category><category term="docker"></category><category term="nginx"></category><category term="python"></category><category term="django"></category></entry><entry><title>Uma ode ao Docker - Parte 2</title><link href="https://klauslaube.com.br/2017/05/01/uma-ode-ao-docker-parte-2.html" rel="alternate"></link><published>2017-05-01T22:25:00-03:00</published><updated>2017-05-01T22:25:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2017-05-01:/2017/05/01/uma-ode-ao-docker-parte-2.html</id><summary type="html">&lt;p&gt;No &lt;a href="https://klauslaube.com.br/2017/01/14/uma-ode-ao-docker-parte-1.html" title="Uma ode ao Docker - Parte 1"&gt;&lt;em&gt;post&lt;/em&gt; anterior&lt;/a&gt;
falamos sobre o &lt;em&gt;Docker&lt;/em&gt;, e arranhamos um pouco sobre a diferença entre
virtualização com &lt;em&gt;Hypervisor&lt;/em&gt; e &lt;em&gt;Container&lt;/em&gt;. Nesse &lt;em&gt;post&lt;/em&gt;,
vamos explorar um pouquinho mais alguns conceitos, mostrando como funciona essa
ferramenta que é sensação quando o assunto é &lt;em&gt;virtual machines&lt;/em&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Mas antes, vamos relembrar o que é …&lt;/p&gt;</summary><content type="html">&lt;p&gt;No &lt;a href="https://klauslaube.com.br/2017/01/14/uma-ode-ao-docker-parte-1.html" title="Uma ode ao Docker - Parte 1"&gt;&lt;em&gt;post&lt;/em&gt; anterior&lt;/a&gt;
falamos sobre o &lt;em&gt;Docker&lt;/em&gt;, e arranhamos um pouco sobre a diferença entre
virtualização com &lt;em&gt;Hypervisor&lt;/em&gt; e &lt;em&gt;Container&lt;/em&gt;. Nesse &lt;em&gt;post&lt;/em&gt;,
vamos explorar um pouquinho mais alguns conceitos, mostrando como funciona essa
ferramenta que é sensação quando o assunto é &lt;em&gt;virtual machines&lt;/em&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Mas antes, vamos relembrar o que é o &lt;em&gt;Docker&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Docker is an open platform for building, shipping and running distributed
applications. It gives programmers, development teams, and operations engineers
the common toolbox they need to take advantage of the distributed and networked
nature of modern applications."&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Em uma linguagem mais simples, &lt;em&gt;Docker&lt;/em&gt; lhe dá a habilidade de executar
aplicações dentro de um ambiente controlado, conhecido como &lt;em&gt;Container&lt;/em&gt;.
&lt;em&gt;Containers&lt;/em&gt; são similares às tradicionais máquinas virtuais, contudo, eles
compartilham o mesmo sistema operacional e provém um conjunto de comandos
que permitem a execução e controle da sua aplicação ou processo.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=pGYAg7TMmp0" title="Docker Tutorial - What is Docker &amp;amp; Docker Containers, Images, etc?"&gt;Veja a diferença entre &lt;em&gt;Vagrant&lt;/em&gt; e &lt;em&gt;Docker&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Instalando&lt;/h2&gt;
&lt;p&gt;Talvez você se depare com alguns artigos na &lt;em&gt;Internet&lt;/em&gt;, que ao falar sobre a
instalação do &lt;em&gt;Docker&lt;/em&gt;, também mencionem &lt;strong&gt;boot2docker&lt;/strong&gt; ou a necessidade do
&lt;strong&gt;docker-machine&lt;/strong&gt;. Houve um tempo onde utilizar &lt;em&gt;Docker&lt;/em&gt; em máquinas
&lt;em&gt;Windows&lt;/em&gt; ou &lt;em&gt;OSX&lt;/em&gt; não era tão trivial assim... mas esse tempo ficou para trás.&lt;/p&gt;
&lt;p&gt;Hoje, basta acessar a &lt;a href="https://www.docker.com/community-edition#/download" title="Baixe o Docker Community Edition"&gt;página de &lt;em&gt;download&lt;/em&gt;&lt;/a&gt;,
selecionar o seu sistema operacional, e seguir o passo a passo
(que geralmente consiste em uma série de "next-next-finish").&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.docker.com/docker-for-mac/docker-toolbox/" title="Docker for Mac vs. Docker Toolbox"&gt;Entenda a diferença entre o Docker Toolbox e Docker for Mac&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Uma vez instalado, através do terminal execute o seguinte comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker images

REPOSITORY   TAG   IMAGE  ID   CREATED   SIZE
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esse é o momento ideal para falarmos de outro conceito muito importante dentro
do &lt;em&gt;Docker&lt;/em&gt;: &lt;strong&gt;Images&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Imagens&lt;/h2&gt;
&lt;p&gt;Segundo a documentação oficial:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An image is a lightweight, stand-alone, executable package that includes
everything needed to run a piece of software, including the code, a runtime,
libraries, environment variables, and config files.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ou seja, um &lt;em&gt;Docker Image&lt;/em&gt; é um binário que inclui todos os requisitos
necessários para rodar um &lt;em&gt;Container&lt;/em&gt;. Podemos pensar sobre esse
conceito como uma tecnologia para empacotamento (ou até mesmo como uma espécie &lt;em&gt;snapshot&lt;/em&gt;),
onde não só definimos nossa distribuição &lt;em&gt;Linux&lt;/em&gt; ou serviços utilizados
(como &lt;em&gt;Postgres&lt;/em&gt; ou &lt;em&gt;Nginx&lt;/em&gt;, por exemplo), como também adicionamos a nossa própria aplicação
ao pacote.&lt;/p&gt;
&lt;p&gt;Uma imagem é imutável, ou seja, &lt;em&gt;read only&lt;/em&gt;. Imagens
geralmente são compostas por outras camadas de imagens (&lt;em&gt;image layers&lt;/em&gt;). Isso é um
&lt;em&gt;approach&lt;/em&gt; interessante, já que uma vez que uma camada seja baixada ela não precisará ser
baixada novamente, mesmo se outras imagens utilizarem da mesma camada:&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/docker-image-container.jpg" width="610" height="424" title="Esquema representando o Sistema de Arquivo (docs.docker.com)" alt="Esquema representando o Sistema de Arquivo (docs.docker.com)"&gt;&lt;/p&gt;
&lt;p&gt;Um &lt;em&gt;Docker Container&lt;/em&gt; em vias práticas é uma "instância" da imagem... é o que a imagem se torna em memória
ao ser executada. De forma preguiçosa, podemos fazer a analogia com a &lt;a href="https://klauslaube.com.br/tag/oop.html" title="Leia mais sobre OOP"&gt;Orientação a Objetos&lt;/a&gt;,
onde a imagem pode ser comparada com uma classe, e a instância com um &lt;em&gt;Container&lt;/em&gt;. Podemos ter
tantos &lt;em&gt;containers&lt;/em&gt; quanto necessário para uma mesma imagem.&lt;/p&gt;
&lt;h2&gt;Um pouco de prática&lt;/h2&gt;
&lt;p&gt;Vamos baixar a nossa primeira imagem &lt;em&gt;Docker&lt;/em&gt;. Para isso, execute o seguinte comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker pull docker/whalesay
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O comando &lt;code&gt;docker pull&lt;/code&gt; fará o &lt;em&gt;download&lt;/em&gt; da imagem &lt;code&gt;docker/whalesay&lt;/code&gt;
para o seu computador. Essa imagem está hospedada (por padrão) no &lt;a href="https://hub.docker.com/r/docker/whalesay/"&gt;&lt;em&gt;Docker Hub&lt;/em&gt;&lt;/a&gt;,
uma espécie de "Github para imagens Docker".&lt;/p&gt;
&lt;p&gt;&lt;a href="https://hub.docker.com/" title="Docker Hub"&gt;Leia mais sobre o &lt;em&gt;Docker Hub&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;É possível visualizarmos a imagem através do comando &lt;code&gt;docker images&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker images

REPOSITORY         TAG       IMAGE ID        CREATED          SIZE
docker/whalesay    latest    6b362a9f73eb    &lt;span class="m"&gt;23&lt;/span&gt; months ago    &lt;span class="m"&gt;247&lt;/span&gt; MB
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;É uma prática comum o repositório/nome da imagem ser chamado de
&lt;code&gt;&amp;lt;repositório&amp;gt;/&amp;lt;nome de imagem&amp;gt;&lt;/code&gt;. Isso evita que haja duplicidade no &lt;em&gt;Docker Hub&lt;/em&gt;. Para
executar a imagem (e por consequência criar um &lt;em&gt;Container&lt;/em&gt;), temos o comando &lt;code&gt;docker run&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker run docker/whalesay cowsay boo
 _____
&amp;lt; boo &amp;gt;
 -----
    &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="se"&gt;\&lt;/span&gt;
      &lt;span class="se"&gt;\&lt;/span&gt;
                    &lt;span class="c1"&gt;##        .&lt;/span&gt;
              &lt;span class="c1"&gt;## ## ##       ==&lt;/span&gt;
           &lt;span class="c1"&gt;## ## ## ##      ===&lt;/span&gt;
       /&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;___/ &lt;span class="o"&gt;===&lt;/span&gt;
  ~~~ &lt;span class="o"&gt;{&lt;/span&gt;~~ ~~~~ ~~~ ~~~~ ~~ ~ /  &lt;span class="o"&gt;===&lt;/span&gt;- ~~~
       &lt;span class="se"&gt;\_&lt;/span&gt;_____ o          __/
        &lt;span class="se"&gt;\ &lt;/span&gt;   &lt;span class="se"&gt;\ &lt;/span&gt;       __/
          &lt;span class="se"&gt;\_&lt;/span&gt;___&lt;span class="se"&gt;\_&lt;/span&gt;_____/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Também é possível executarmos através do &lt;code&gt;ID&lt;/code&gt; da imagem:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker run 6b362a9f73eb cowsay boo2
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Welcome to Nginx!&lt;/h2&gt;
&lt;p&gt;É claro que o &lt;em&gt;Docker&lt;/em&gt; é muito mais poderoso do que isso. Por exemplo, vamos baixar o
&lt;a href="https://klauslaube.com.br/tag/nginx.html" title="Leia mais sobre o Nginx"&gt;&lt;em&gt;Nginx&lt;/em&gt;&lt;/a&gt; e ver como podemos receber uma simpática tela de "It's working":&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker pull nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notou a ausência do &lt;code&gt;&amp;lt;repositório&amp;gt;/&lt;/code&gt;? Repositórios oficiais no &lt;em&gt;Docker Hub&lt;/em&gt; não necessitam
de um prefixo, e você pode encontrá-los na interface &lt;em&gt;web&lt;/em&gt; através do &lt;em&gt;path&lt;/em&gt; &lt;code&gt;_/&amp;lt;nome da imagem&amp;gt;&lt;/code&gt;.
Por exemplo, o endereço do &lt;em&gt;Nginx&lt;/em&gt; no &lt;em&gt;Docker Hub&lt;/em&gt; é &lt;a href="https://hub.docker.com/_/nginx/"&gt;https://hub.docker.com/_/nginx/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/memento-docker.png" width="610" height="458" title="Assim como em Memento, o Docker também depende de imagens e tem memória curta (problemasfilosoficos.blogspot.com.br)" alt="Assim como em Memento, o Docker também depende de imagens e tem memória curta (problemasfilosoficos.blogspot.com.br)"&gt;&lt;/p&gt;
&lt;p&gt;Vamos executar o &lt;em&gt;Nginx&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker run -p &lt;span class="m"&gt;5000&lt;/span&gt;:80 nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mapemos a porta &lt;code&gt;5000&lt;/code&gt; da nossa máquina para apontar para a porta &lt;code&gt;80&lt;/code&gt; do &lt;em&gt;Container&lt;/em&gt;. Logo, ao acessarmos
o &lt;code&gt;http://localhost:5000&lt;/code&gt;, recebemos a simpática tela de boas vindas ao &lt;em&gt;Nginx&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Podemos dar um nome ao processo, e ainda executá-lo em modo &lt;em&gt;daemon&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker run --name docker-nginx -p &lt;span class="m"&gt;5000&lt;/span&gt;:80 -d nginx

796ab2f0a662c045d0cfc99ff836a364a384406b8c6eaf03bcfb65e6cfd87751
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O valor de retorno é o &lt;em&gt;ID&lt;/em&gt; do &lt;em&gt;Container&lt;/em&gt;. Note a presença dos parâmetros &lt;code&gt;--name&lt;/code&gt; e &lt;code&gt;-d&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Para listar os &lt;em&gt;Containers&lt;/em&gt; ativos, usamos o comando &lt;code&gt;ps&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker ps

CONTAINER ID    IMAGE    COMMAND
796ab2f0a662    nginx    &lt;span class="s2"&gt;&amp;quot;nginx -g &amp;#39;daemon ...&amp;quot;&lt;/span&gt;
CREATED           STATUS           PORTS                  NAMES
&lt;span class="m"&gt;12&lt;/span&gt; seconds ago    Up &lt;span class="m"&gt;11&lt;/span&gt; seconds    &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:5000-&amp;gt;80/tcp   docker-nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para parar o serviço:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker stop docker-nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pronto! Simples como as melhores coisas da vida.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Lembro até hoje do momento em que ouvi falar sobre &lt;em&gt;Docker&lt;/em&gt; pela primeira vez,
e me questionei: Onde é que eu encaixo a minha ferramenta de provisionamento?&lt;/p&gt;
&lt;p&gt;Pois bem, não se faz necessário ter uma ferramenta de provisionamento uma vez que a sua
aplicação seja empacotada em uma imagem &lt;em&gt;Docker&lt;/em&gt;. A forma de pensar no &lt;em&gt;deploy&lt;/em&gt; da
aplicação muda, uma vez que ela esteja "containerizada".&lt;/p&gt;
&lt;p&gt;No próximo &lt;em&gt;post&lt;/em&gt; da série vamos utilizar &lt;em&gt;Docker&lt;/em&gt; em uma aplicação &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;
e &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt;, e nos deparar com
algumas peculiaridades de ambientes &lt;em&gt;Docker&lt;/em&gt; (como por exemplo, os ambiente efêmeros).&lt;/p&gt;
&lt;p&gt;Até a próxima!&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/get-started/"&gt;&lt;em&gt;Docker Docs&lt;/em&gt; - &lt;em&gt;Get started, Part 1: Orientation and Setup&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.mundodocker.com.br/o-que-e-uma-imagem/"&gt;&lt;em&gt;MundoDocker&lt;/em&gt; - O que é uma imagem?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.openshift.com/enterprise/3.0/architecture/core_concepts/containers_and_images.html#docker-images"&gt;&lt;em&gt;Openshift&lt;/em&gt; - &lt;em&gt;Docker images&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://semaphoreci.com/community/tutorials/dockerizing-a-python-django-web-application"&gt;&lt;em&gt;Semaphore&lt;/em&gt; - &lt;em&gt;Dockerizing a Python Django web Application&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/23735149/docker-image-vs-container"&gt;&lt;em&gt;Stackoverflow&lt;/em&gt; - &lt;em&gt;Docker image vs container&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="infraestrutura"></category><category term="virtualizacao"></category><category term="containerizacao"></category><category term="docker"></category><category term="nginx"></category></entry><entry><title>Uma ode ao Docker - Parte 1</title><link href="https://klauslaube.com.br/2017/01/14/uma-ode-ao-docker-parte-1.html" rel="alternate"></link><published>2017-01-14T18:20:00-02:00</published><updated>2017-01-14T18:20:00-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2017-01-14:/2017/01/14/uma-ode-ao-docker-parte-1.html</id><summary type="html">&lt;p&gt;Virtualização é um dos assuntos que mais evoluiu nesses últimos anos de TI. Mas
foi o termo "containerização" que teve um "boom" de popularidade recentemente. Isso graças
ao &lt;a href="https://www.docker.com/" title="Build, ship, run"&gt;&lt;em&gt;Docker&lt;/em&gt;&lt;/a&gt;, popular ferramenta que tem
tornado a virtualização/containerização em uma &lt;em&gt;commodity&lt;/em&gt; no universo de desenvolvimento de &lt;em&gt;Software&lt;/em&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Para ser sincero, eu …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Virtualização é um dos assuntos que mais evoluiu nesses últimos anos de TI. Mas
foi o termo "containerização" que teve um "boom" de popularidade recentemente. Isso graças
ao &lt;a href="https://www.docker.com/" title="Build, ship, run"&gt;&lt;em&gt;Docker&lt;/em&gt;&lt;/a&gt;, popular ferramenta que tem
tornado a virtualização/containerização em uma &lt;em&gt;commodity&lt;/em&gt; no universo de desenvolvimento de &lt;em&gt;Software&lt;/em&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Para ser sincero, eu só "parei para olhar" o &lt;em&gt;Docker&lt;/em&gt; no final do ano passado,
através de um
&lt;a href="https://www.udemy.com/docker-tutorial-for-devops-run-docker-containers/learn/v4/overview" title="The Complete Docker Course for DevOps and Developers"&gt;excelente curso do &lt;em&gt;Udemy&lt;/em&gt;&lt;/a&gt;.
Se você assim como eu ainda não teve tempo para ver "qualé", vem comigo que eu te mostro :)&lt;/p&gt;
&lt;h2&gt;Antes do Docker: Containers&lt;/h2&gt;
&lt;p&gt;Eu só comecei a entender realmente o que era o &lt;em&gt;Docker&lt;/em&gt; a partir do momento
que compreendi o que é um container.&lt;/p&gt;
&lt;p&gt;No mundo "pré-virtualização", quando lidávamos com problemas como escalabilidade ou isolamento,
precisávamos adquirir uma nova máquina física, instalar e configurar o Sistema Operacional,
bem como instalar e configurar a própria aplicação:&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/docker-pre-virtualization.png" width="400" height="292" title="Diagrama de era pré-virtualização (udemy.com)" alt="Diagrama de era pré-virtualização (udemy.com)"&gt;&lt;/p&gt;
&lt;p&gt;Além do custo altíssimo para replicar a arquitetura acima, o tempo para solicitar uma
nova máquina e realizar uma possível migração eram absurdamente altos. Além disso,
há um incrível desperdício de recursos, já que não é necessário um &lt;em&gt;hardware&lt;/em&gt;
exclusivo para servir uma aplicação &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt; simples.&lt;/p&gt;
&lt;h3&gt;Hypervisor&lt;/h3&gt;
&lt;p&gt;O conceito de &lt;a href="https://klauslaube.com.br/tag/virtualizacao.html" title="Leia mais sobre virtualização"&gt;máquina virtual&lt;/a&gt; vem bem a calhar para sanar o problema acima: Através de uma
configuração de &lt;em&gt;hardware&lt;/em&gt;, ser possível servir de forma isolada diferentes aplicações.&lt;/p&gt;
&lt;p&gt;Quando falamos de máquinas virtuais &lt;a href="https://klauslaube.com.br/tag/virtualbox.html" title="Leia mais sobre Virtualbox"&gt;&lt;em&gt;Virtualbox&lt;/em&gt;&lt;/a&gt; ou &lt;em&gt;VMWare&lt;/em&gt;,
estamos nos referindo ao &lt;em&gt;Hypervisor-based Virtualization&lt;/em&gt;. Nessa modalidade temos uma ferramenta responsável
por abstrair diferentes Sistemas Operacionais funcionando dentro de um mesmo &lt;em&gt;hardware&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/docker-hypervisor-virtualization.png" width="400" height="499" title="Diagrama de virtualização por hypervisor (udemy.com)" alt="Diagrama de virtualização por hypervisor (udemy.com)"&gt;&lt;/p&gt;
&lt;p&gt;Para cada máquina virtual, é necessário um Sistema Operacional instalado e configurado, bem como
a própria aplicação.&lt;/p&gt;
&lt;p&gt;Agora somos capazes de reaproveitar o processador, memória e banda de rede, reduzindo consideravelmente o custo.
Essa "abstração" que há entre a aplicação e o &lt;em&gt;hardware&lt;/em&gt; permite maior flexibilidade quando houver a necessidade
de escalar ou migrar a aplicação para outra máquina física.&lt;/p&gt;
&lt;p&gt;Bom! Mas e se pudéssemos compartilhar o mesmo Sistema Operacional para as 3 &lt;em&gt;apps&lt;/em&gt; ilustradas acima, mas ainda assim
mantê-las isoladas?&lt;/p&gt;
&lt;h3&gt;Containers&lt;/h3&gt;
&lt;p&gt;Segundo o &lt;em&gt;ZDNet&lt;/em&gt;, &lt;em&gt;containers&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(...) use shared operating systems. That means they are much more efficient than hypervisors
in system resource terms. Instead of virtualizing hardware, containers rest on top of a single
Linux instance. This in turn means you can leave behind the useless 99.9% VM junk, leaving you
with a small, neat capsule containing your application.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Através de &lt;em&gt;Containers&lt;/em&gt; é possível utilizar o conceito de virtualização, só que de uma
maneira diferente: Não temos mais um Sistema Operacional por ambiente virtualizado,
e sim compartilhamos os mesmos recursos do Sistema Operacional da máquina hospedeira:&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/docker-containers.png" width="400" height="239" title="Diagrama de containerização (udemy.com)" alt="Diagrama de containerização (udemy.com)"&gt;&lt;/p&gt;
&lt;p&gt;Com isso reduzimos ainda mais os custos de operação, além de proporcionar um tempo ainda menor
de &lt;em&gt;deployment&lt;/em&gt; de uma nova aplicação. Agora, do ponto de vista da aplicação, precisamos apenas
do &lt;em&gt;app&lt;/em&gt; instalado e configurado.&lt;/p&gt;
&lt;h2&gt;Enfim: O que é Docker?&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Docker&lt;/em&gt; é uma ferramenta &lt;em&gt;open source&lt;/em&gt;, responsável por tornar fácil a criação, &lt;em&gt;deploy&lt;/em&gt; e execução
de aplicações através do uso de &lt;em&gt;containers&lt;/em&gt;. Com a containerização &lt;em&gt;Docker&lt;/em&gt;, o desenvolver pode
empacotar a aplicação com todas as suas dependências, e distribuí-la através de um pacote único. Esse
pacote único executará em qualquer máquina &lt;em&gt;Linux&lt;/em&gt; (com &lt;em&gt;Docker&lt;/em&gt;, claro), podendo ser o seu ambiente
de desenvolvimento local, seu &lt;a href="https://klauslaube.com.br/2011/03/07/diferentes-ambientes.html" title="Development, staging e production"&gt;ambiente de testes e homologação&lt;/a&gt;,
ou até mesmo o ambiente de produção.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center" src="/images/blog/iron-man-containers.png" width="640" height="342" title="Vim falar de Docker mas só encontrei containers (marvelcinematicuniverse.wikia.com)" alt="Vim falar de Docker mas só encontrei containers (marvelcinematicuniverse.wikia.com)"&gt;&lt;/p&gt;
&lt;p&gt;Se até aqui você achou o &lt;em&gt;Docker&lt;/em&gt; semelhante ao &lt;a href="https://klauslaube.com.br/2015/10/03/esse-e-mais-um-post-sobre-vagrant.html" title="Esse é mais um post sobre Vagrant"&gt;&lt;em&gt;Vagrant&lt;/em&gt;&lt;/a&gt;,
você não está de todo errado. A principal diferença é justamente o conceito de &lt;em&gt;containers&lt;/em&gt;: &lt;em&gt;Docker&lt;/em&gt; permite
que aplicações utilizem o mesmo &lt;em&gt;kernel&lt;/em&gt; &lt;em&gt;Linux&lt;/em&gt; da máquina hospedeira, reduzindo drasticamente o
tamanho da aplicação e reduzindo o consumo de recursos da máquina hospedeira.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Docker&lt;/em&gt; é no fim das contas uma ferramenta extremamente útil, e que possui umas das comunidades mais
ativas e empenhadas no momento. Ferramentas de &lt;em&gt;PaaS&lt;/em&gt; como o &lt;a href="https://tsuru.io/" title="Extensible and open source Platform as a Service"&gt;&lt;em&gt;Tsuru&lt;/em&gt;&lt;/a&gt;
utilizam &lt;em&gt;Docker&lt;/em&gt; ativamente e servem inúmeros serviços e aplicações nesse exato momento.&lt;/p&gt;
&lt;p&gt;Se até aqui você não está bem certo sobre o que é de fato o &lt;em&gt;Docker&lt;/em&gt;, não se preocupe! Na parte 2 falaremos mais
sobre a ferramenta (e menos sobre o conceito) de uma forma bem prática.&lt;/p&gt;
&lt;p&gt;Até a próxima.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://opensource.com/resources/what-docker"&gt;&lt;em&gt;Opensource.com - What is Docker?&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://searchservervirtualization.techtarget.com/definition/hypervisor"&gt;&lt;em&gt;TechTarget - Hypervisor definition&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.zdnet.com/article/what-is-docker-and-why-is-it-so-darn-popular/"&gt;&lt;em&gt;ZDNet - What is Docker and why is it so darn popular?&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="infraestrutura"></category><category term="virtualizacao"></category><category term="containerizacao"></category><category term="docker"></category></entry><entry><title>Supervisor: Aumentando a disponibilidade das suas aplicações Web</title><link href="https://klauslaube.com.br/2012/01/23/supervisor-gerencie-os-processos-seu-servidor-web.html" rel="alternate"></link><published>2012-01-23T21:28:00-02:00</published><updated>2012-01-23T21:28:00-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2012-01-23:/2012/01/23/supervisor-gerencie-os-processos-seu-servidor-web.html</id><summary type="html">&lt;p&gt;E se você pudesse controlar uma série de processos
através de um comando? Ou de garantir que serviços “down” sejam
reiniciados automaticamente? Ou ainda, agrupar seus serviços e poder
reiniciá-los com um simples comando de terminal?&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;O &lt;strong&gt;&lt;em&gt;Supervisor&lt;/em&gt;&lt;/strong&gt; aparece para facilitar muito a vida de quem precisa
administrar servidores &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web …&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;E se você pudesse controlar uma série de processos
através de um comando? Ou de garantir que serviços “down” sejam
reiniciados automaticamente? Ou ainda, agrupar seus serviços e poder
reiniciá-los com um simples comando de terminal?&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;O &lt;strong&gt;&lt;em&gt;Supervisor&lt;/em&gt;&lt;/strong&gt; aparece para facilitar muito a vida de quem precisa
administrar servidores &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt;, e não tem muito tempo a perder com
criação de rotinas, ou mesmo com trabalho manual.&lt;/p&gt;
&lt;h2&gt;Afinal, o que é o Supervisor?&lt;/h2&gt;
&lt;p&gt;A proposta do &lt;a href="http://supervisord.org/" title="Conheça o projeto Supervisor"&gt;&lt;em&gt;Supervisor&lt;/em&gt;&lt;/a&gt; é simples: permitir que usuários possam
controlar e monitorar processos (e grupos de processos) em um sistema
&lt;em&gt;Unix-like&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Em suma, o &lt;em&gt;Supervisor&lt;/em&gt; é um programa escrito em &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;, capaz de
iniciar, reiniciar e parar outros programas. Mas, o que me chamou mais a
atenção, é que ele é capaz de reiniciar programas “crashados”
automaticamente.&lt;/p&gt;
&lt;p&gt;Isso é possível pois, por baixo dos panos, o &lt;em&gt;Supervisor&lt;/em&gt; é um serviço
que inicia todos os demais como subprocessos. Desse modo, é capaz de
monitorar o estado dos mesmos, e numa eventual “queda”, reiniciar um
determinado processo/serviço imediatamente.&lt;/p&gt;
&lt;p&gt;Ou seja, funciona como uma ferramenta centralizadora e de monitoramento.
E que ainda serve uma &lt;em&gt;API&lt;/em&gt; para gerenciamento remoto, &lt;a href="http://supervisord.org/api.html" title="Leia mais sobre a API do Supervisor"&gt;através de &lt;em&gt;XML-RPC&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Instalar para administrar&lt;/h2&gt;
&lt;p&gt;Para instalar, basta utilizar o &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install supervisor
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos gerar um arquivo de configuração básico:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ echo_supervisord_conf &amp;gt; /etc/supervisord.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos aproveitar que &lt;a href="https://klauslaube.com.br/2011/12/19/nginx-poderoso-rapido-facil.html" title="Nginx: Poderoso, rápido e fácil"&gt;falamos recentemente sobre a instalação do &lt;em&gt;Nginx&lt;/em&gt;&lt;/a&gt;,
para demonstrar o princípio do &lt;em&gt;Supervisor&lt;/em&gt;. Adicione as
seguintes linhas ao arquivo &lt;code&gt;/etc/supervisord.conf&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[program:nginx]&lt;/span&gt;
&lt;span class="s"&gt;command=/usr/local/nginx/sbin/nginx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora iniciamos o serviço do &lt;em&gt;Supervisor&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ supervisord
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E através do &lt;code&gt;supervisorctl&lt;/code&gt;, vamos iniciar e parar o &lt;em&gt;Nginx&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ supervisorctl start all
nginx: started

$ ps aux &lt;span class="p"&gt;|&lt;/span&gt; grep nginx
root      &lt;span class="m"&gt;1863&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;0&lt;/span&gt;.1 &lt;span class="o"&gt;(&lt;/span&gt;...&lt;span class="o"&gt;)&lt;/span&gt; /usr/local/nginx/sbin/nginx

$ supervisorctl stop nginx
nginx: stopped
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E agora, o “pulo do gato”. Com o &lt;em&gt;Nginx&lt;/em&gt; iniciado via &lt;em&gt;Supervisor&lt;/em&gt;,
vamos fechá-lo através de um comando &lt;code&gt;kill&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ supervisorctl start nginx
nginx: started

$ killall nginx

$ ps aux &lt;span class="p"&gt;|&lt;/span&gt; grep nginx
root      &lt;span class="m"&gt;1917&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;0&lt;/span&gt;.1 &lt;span class="o"&gt;(&lt;/span&gt;...&lt;span class="o"&gt;)&lt;/span&gt; /usr/local/nginx/sbin/nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Magia? Que nada! É a ferramenta garantindo que os nossos processos não
fiquem “down”. &lt;a href="http://brandonkonkle.com/blog/2010/sep/14/django-uwsgi-and-nginx/" title="Django on uWSGI and Nginx"&gt;&lt;em&gt;Brandon Konkle&lt;/em&gt;&lt;/a&gt; e &lt;a href="http://senko.net/en/django-nginx-gunicorn/" title="A Django setup using Nginx and Gunicorn"&gt;&lt;em&gt;Senko Rasic&lt;/em&gt;&lt;/a&gt; possuem exemplos
utilizando um cenário real com &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt; e &lt;a href="https://klauslaube.com.br/tag/nginx.html" title="Leia mais sobre Nginx"&gt;&lt;em&gt;Nginx&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Embora o &lt;em&gt;Supervisor&lt;/em&gt; seja uma ferramenta espetacular, acredito que
muitos profissionais já possuam intimidade com os seus servidores, bem
como já tenham construído &lt;em&gt;sets&lt;/em&gt; de &lt;em&gt;scripts&lt;/em&gt;, e atalhos em geral. Isso,
de fato, faz a gente questionar a utilidade dela.&lt;/p&gt;
&lt;p&gt;A possibilidade de monitorar e garantir a disponibilidade dos processos
foi o que mais me agradou. Se você tem “poderes administrativos” na sua
hospedagem, talvez o &lt;em&gt;Supervisor&lt;/em&gt; seja a ferramenta que faltava para
você possa dormir mais tranquilo.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://supervisord.org/" title="Supervisor - A process control system"&gt;&lt;em&gt;Supervisor&lt;/em&gt; – Documentação oficial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://brandonkonkle.com/blog/2010/sep/14/django-uwsgi-and-nginx/" title="Saiba como montar um servidor Nginx com Django, uWSGI e Supervisor"&gt;&lt;em&gt;Brandon Konkle – Django on uWSGI and Nginx&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.plope.com/static/misc/supervisor-pycon2008.pdf" title="Apresentação para a PyCon 2008, sobre Supervisor"&gt;&lt;em&gt;Mike Naberezny – Supervisor as a Platform&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://senko.net/en/django-nginx-gunicorn/" title="Um ótimo exemplo de uso do Nginx, Django e Supervisor"&gt;&lt;em&gt;Senko’s Blog – A Django setup using Nginx and Gunicorn&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="infraestrutura"></category><category term="ambiente-de-desenvolvimento"></category><category term="web"></category><category term="supervisor"></category><category term="linux"></category></entry><entry><title>Nginx: Poderoso, rápido e fácil</title><link href="https://klauslaube.com.br/2011/12/19/nginx-poderoso-rapido-facil.html" rel="alternate"></link><published>2011-12-19T20:41:00-02:00</published><updated>2011-12-19T20:41:00-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2011-12-19:/2011/12/19/nginx-poderoso-rapido-facil.html</id><summary type="html">&lt;p&gt;Para quem (assim como eu) começou com o &lt;a href="https://klauslaube.com.br/tag/php.html" title="Leia mais sobre PHP"&gt;&lt;em&gt;PHP&lt;/em&gt;&lt;/a&gt;, uma das opções mais viáveis
para servir projetos na &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt; sempre foi o &lt;a href="http://httpd.apache.org/" title="Página oficial do projeto Apache"&gt;&lt;em&gt;Apache&lt;/em&gt;&lt;/a&gt;. &lt;em&gt;Open source&lt;/em&gt;,
prático e disponível em quase toda hospedagem de respeito (afinal, ele vem por
padrão em quase toda distro &lt;a href="https://klauslaube.com.br/tag/linux.html" title="Leia mais sobre Linux"&gt;&lt;em&gt;Linux&lt;/em&gt;&lt;/a&gt;), há anos que ele faz a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Para quem (assim como eu) começou com o &lt;a href="https://klauslaube.com.br/tag/php.html" title="Leia mais sobre PHP"&gt;&lt;em&gt;PHP&lt;/em&gt;&lt;/a&gt;, uma das opções mais viáveis
para servir projetos na &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt; sempre foi o &lt;a href="http://httpd.apache.org/" title="Página oficial do projeto Apache"&gt;&lt;em&gt;Apache&lt;/em&gt;&lt;/a&gt;. &lt;em&gt;Open source&lt;/em&gt;,
prático e disponível em quase toda hospedagem de respeito (afinal, ele vem por
padrão em quase toda distro &lt;a href="https://klauslaube.com.br/tag/linux.html" title="Leia mais sobre Linux"&gt;&lt;em&gt;Linux&lt;/em&gt;&lt;/a&gt;), há anos que ele faz a famosa
tríade "AMP" (&lt;em&gt;Apache&lt;/em&gt;, &lt;a href="http://www.mysql.com/" title="Conheça o banco de dados open source mais popular do mundo"&gt;&lt;em&gt;MySQL&lt;/em&gt;&lt;/a&gt; e &lt;em&gt;PHP&lt;/em&gt;).&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Acontece que com as demandas recentes que a &lt;em&gt;internet&lt;/em&gt; tem exigido de
algumas aplicações &lt;em&gt;web&lt;/em&gt; (como &lt;em&gt;Twitter&lt;/em&gt; e &lt;em&gt;Facebook&lt;/em&gt;), a necessidade
por performance começou a ser uma grande premissa em determinados tipos
de projetos. E é apoiado nesse cenário que o &lt;em&gt;Nginx&lt;/em&gt; vem ganhando
cada vez mais força no mercado. Afinal, não é a toa que ele é conhecido
por “aguentar porrada”.&lt;/p&gt;
&lt;h2&gt;A verdade sobre o Nginx (ou não)&lt;/h2&gt;
&lt;p&gt;O &lt;a href="http://nginx.org/" title="Conheça o Nginx!"&gt;&lt;em&gt;Nginx&lt;/em&gt;&lt;/a&gt; é um &lt;a href="http://pt.wikipedia.org/wiki/Servidor_web" title="Entenda o que é um servidor Web"&gt;&lt;strong&gt;servidor Web&lt;/strong&gt;&lt;/a&gt;, &lt;a href="http://pt.wikipedia.org/wiki/Proxy_reverso" title="Entenda o que é um Proxy Reverso"&gt;&lt;strong&gt;proxy reverso&lt;/strong&gt;&lt;/a&gt;,
&lt;strong&gt;proxy balanceador de carga&lt;/strong&gt;, e faz praticamente tudo que o &lt;em&gt;Apache&lt;/em&gt;
faz, só que muito mais rápido!&lt;/p&gt;
&lt;p&gt;Técnicamente, o &lt;em&gt;Nginx&lt;/em&gt; consome menos memória que o &lt;em&gt;Apache&lt;/em&gt;, pois lida
com requisições &lt;em&gt;web&lt;/em&gt; através do conceito de “event-based web server“,
já o &lt;em&gt;Apache&lt;/em&gt; é baseado no conceito “process-based server“. &lt;em&gt;David E.
Chen&lt;/em&gt; faz uma excelente analogia entre os dois conceitos em seu artigo
“&lt;a href="http://daverecycles.com/post/3104767110/explain-event-driven-web-servers-to-your-grandma" title="Leia esta boa analogia entre os conceitos"&gt;Explain “Event-Driven” Web Servers to Your Grandma&lt;/a&gt;“.&lt;/p&gt;
&lt;p&gt;Eles não são necessariamente “concorrentes”, &lt;em&gt;Apache&lt;/em&gt; e &lt;em&gt;Nginx&lt;/em&gt; podem
trabalhar juntos! &lt;em&gt;Paulo Higa&lt;/em&gt;, através do seu artigo
&lt;a href="http://paulohiga.com/posts/nginx-proxy-reverso-php-apache.php" title="Aprenda como fazer o Nginx tornar-se um proxy reverso"&gt;“Usando Nginx como proxy reverso e diminuindo o consumo do servidor&lt;/a&gt;“, nos mostra
como ele diminuiu o consumo de memória do &lt;em&gt;Apache&lt;/em&gt; fazendo com que as
requisições &lt;em&gt;web&lt;/em&gt; passassem primeiro pelo &lt;em&gt;Nginx&lt;/em&gt;. Desse modo, o
&lt;em&gt;Apache&lt;/em&gt; não precisou servir arquivos estáticos, e pode depender do bom
controle de &lt;em&gt;cache&lt;/em&gt; feito pelo &lt;em&gt;Nginx&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Bom, a intenção não é denegrir a imagem do &lt;em&gt;Apache&lt;/em&gt; (até parece que um
simples mortal como eu conseguiria tal feito), então vamos adiante.&lt;/p&gt;
&lt;h2&gt;Fácil?! Instalando e sendo bem recebido&lt;/h2&gt;
&lt;p&gt;Estou utilizando o &lt;a href="http://www.slackware.com/" title="Conheça e delicie-se com o Slackware Linux"&gt;&lt;em&gt;Slackware 13.37&lt;/em&gt;&lt;/a&gt; para realizar os procedimentos
abaixo, mas acredito que eles possam ser executados em qualquer
distribuição &lt;em&gt;Linux&lt;/em&gt;, sem maiores problemas.&lt;/p&gt;
&lt;p&gt;Vamos começar fazendo o &lt;em&gt;download&lt;/em&gt; da versão mais recente (até então),
direto do site oficial do &lt;em&gt;Nginx&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ wget http://nginx.org/download/nginx-1.0.11.tar.gz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O procedimento de instalação não difere em nada do método tradicional
que estamos acostumados no &lt;em&gt;Linux&lt;/em&gt;. Apenas lembre-se de executar o
&lt;code&gt;make install&lt;/code&gt; como &lt;code&gt;root&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tar -zxvf nginx-1.0.11.tar.gz&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; nginx-1.0.11
$ ./configure
$ make
$ make install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O &lt;em&gt;Nginx&lt;/em&gt; será instalado em &lt;code&gt;/usr/local/nginx/&lt;/code&gt;. Você pode iniciar o
serviço através do comando (como &lt;code&gt;root&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ /usr/local/nginx/sbin/nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Acessando o seu &lt;code&gt;localhost&lt;/code&gt;, o serviço estará pronto e dando boas
vindas!&lt;/p&gt;
&lt;h2&gt;Configurando um servidor simples&lt;/h2&gt;
&lt;p&gt;Para homenagear o nosso amigo &lt;em&gt;Apache&lt;/em&gt;, vamos fazer o &lt;em&gt;Nginx&lt;/em&gt; servir um
&lt;a href="https://klauslaube.com.br/tag/html5.html" title="Leia mais sobre HTML5"&gt;&lt;em&gt;HTML&lt;/em&gt;&lt;/a&gt; com a clássica mensagem “It works“, em outra porta e &lt;em&gt;path&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Abra (como &lt;code&gt;root&lt;/code&gt;) o arquivo &lt;code&gt;/usr/local/nginx/conf/nginx.conf&lt;/code&gt;, no
final do arquivo, adicione a seguinte expressão antes do fechamento das
chaves:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;include&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esta expressão importará o arquivo &lt;code&gt;/usr/local/nginx/conf/example&lt;/code&gt;,
que criaremos a seguir:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt;        &lt;span class="n"&gt;127.0.0.1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server_name&lt;/span&gt;   &lt;span class="s"&gt;example&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;access_log&lt;/span&gt;    &lt;span class="s"&gt;/usr/local/nginx/logs/example.access.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;error_log&lt;/span&gt;     &lt;span class="s"&gt;/usr/local/nginx/logs/example.error.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;root&lt;/span&gt;  &lt;span class="s"&gt;/var/www/example&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;index&lt;/span&gt; &lt;span class="s"&gt;index.html&lt;/span&gt; &lt;span class="s"&gt;index.htm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Intuitivo não?! Vamos criar o &lt;em&gt;path&lt;/em&gt; onde armazenaremos o &lt;em&gt;HTML&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir /var/www/example
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;It works! &amp;quot;&lt;/span&gt; &amp;gt; /var/www/example/index.html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Basta acessar o endereço &lt;code&gt;localhost:8080&lt;/code&gt;, e pronto!&lt;/p&gt;
&lt;p&gt;Como é possível perceber, os arquivos de configuração do &lt;em&gt;Nginx&lt;/em&gt; são
simples e intuitivos. Existem várias referências na &lt;em&gt;web&lt;/em&gt; ensinando a
montar &lt;em&gt;proxy&lt;/em&gt; reverso, servir páginas dinâmicas com &lt;em&gt;FastCGI&lt;/em&gt; ou
&lt;em&gt;WSGI&lt;/em&gt;, utilizar &lt;em&gt;SSL&lt;/em&gt;, etc. Nada que o bom amigo &lt;em&gt;Google&lt;/em&gt; não possa
resolver.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Quer dizer que agora eu tenho que largar tudo e correr para utilizar o
&lt;em&gt;Nginx&lt;/em&gt;? A resposta é &lt;strong&gt;não&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Gosto dos ensinamentos do pessoal da &lt;a href="http://37signals.com/" title="Você não sabe o que é a 37Signals?"&gt;&lt;em&gt;37Signals&lt;/em&gt;&lt;/a&gt;, e um deles é para
deixarmos a preocupação com performance para quando isto for realmente
um problema (caso contrário, ninguém começaria projetos em &lt;em&gt;Ruby&lt;/em&gt; ou
&lt;em&gt;Python&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Portanto, se você tem um &lt;em&gt;blog&lt;/em&gt; em &lt;em&gt;WordPress&lt;/em&gt; servido através de um
&lt;em&gt;Apache&lt;/em&gt;... deixe estar. Garanto que o &lt;em&gt;Apache&lt;/em&gt; é a melhor solução para
você neste momento. E caso você venha a ter problemas com performance,
garanto que instalar e configurar um &lt;em&gt;Nginx&lt;/em&gt; dentro da sua
infraestrutura será o menor dos seus problemas.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nginx.org/" title="Conheça, instale e use agora o Nginx!"&gt;Site oficial do projeto &lt;em&gt;Nginx&lt;/em&gt; (em Inglês)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://daverecycles.com/post/3104767110/explain-event-driven-web-servers-to-your-grandma" title="Entenda a diferença entre o webserver baseado em eventos, e outro baseado em processos"&gt;&lt;em&gt;Daverecycles.com – Explain “Event-Driven” Web Servers to Your Grandma&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.linuxjournal.com/article/10108" title="Excelente artigo sobre o Nginx"&gt;&lt;em&gt;Linux Journal – Nginx: the High-Performance Web Server and Reverse Proxy&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://paulohiga.com/posts/nginx-proxy-reverso-php-apache.php" title="Artigo de Paulo Higa sobre Nginx e proxy reverso, com Apache"&gt;&lt;em&gt;Paulo Higa&lt;/em&gt; – Usando o &lt;em&gt;nginx&lt;/em&gt; como &lt;em&gt;proxy&lt;/em&gt; reverso e diminuindo o consumo do servidor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pt.wikipedia.org/wiki/Proxy_reverso" title="Leia mais na Wikipedia"&gt;&lt;em&gt;Wikipedia&lt;/em&gt; – &lt;em&gt;Proxy&lt;/em&gt; reverso&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pt.wikipedia.org/wiki/Servidor_web" title="Leia mais na Wikipedia"&gt;&lt;em&gt;Wikipedia&lt;/em&gt; – Servidor &lt;em&gt;Web&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wikivs.com/wiki/Apache_vs_nginx" title="Entenda um pouco mais a diferença entre Apache e Nginx"&gt;&lt;em&gt;WikiVS – Apache vs Nginx&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="infraestrutura"></category><category term="ambiente-de-desenvolvimento"></category><category term="nginx"></category><category term="linux"></category><category term="slackware"></category></entry><entry><title>Diferentes ambientes: Development, Testing, Staging e Production</title><link href="https://klauslaube.com.br/2011/03/07/diferentes-ambientes.html" rel="alternate"></link><published>2011-03-07T12:37:00-03:00</published><updated>2011-03-07T12:37:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2011-03-07:/2011/03/07/diferentes-ambientes.html</id><summary type="html">&lt;p&gt;Uma das práticas mais interessantes nessa
“nova onda” de qualidade que está “encrostada” nas práticas &lt;a href="https://klauslaube.com.br/tag/agile.html" title="Leia mais sobre Agile"&gt;&lt;em&gt;agile&lt;/em&gt;&lt;/a&gt;
de desenvolvimento de &lt;em&gt;software&lt;/em&gt;, é o uso de diferentes ambientes para
diferentes estágios do ciclo de vida de uma aplicação.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Com auxílio da &lt;a href="{virtualbox-uma-maneira-interessante-de-possuir-varios-sos-em-uma-maquina-so.md" title="Virtualbox: Uma maneira interessante de possuir vários SOs em uma máquina só"&gt;virtualização&lt;/a&gt;, podemos implementar (sem dificuldades)
estes ambientes em qualquer empresa que …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Uma das práticas mais interessantes nessa
“nova onda” de qualidade que está “encrostada” nas práticas &lt;a href="https://klauslaube.com.br/tag/agile.html" title="Leia mais sobre Agile"&gt;&lt;em&gt;agile&lt;/em&gt;&lt;/a&gt;
de desenvolvimento de &lt;em&gt;software&lt;/em&gt;, é o uso de diferentes ambientes para
diferentes estágios do ciclo de vida de uma aplicação.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Com auxílio da &lt;a href="{virtualbox-uma-maneira-interessante-de-possuir-varios-sos-em-uma-maquina-so.md" title="Virtualbox: Uma maneira interessante de possuir vários SOs em uma máquina só"&gt;virtualização&lt;/a&gt;, podemos implementar (sem dificuldades)
estes ambientes em qualquer empresa que tenha como cultura entregar
&lt;em&gt;software&lt;/em&gt; de qualidade.&lt;/p&gt;
&lt;h2&gt;Development&lt;/h2&gt;
&lt;p&gt;Ter um ambiente isolado só seu, onde você possa codificar sem se
preocupar com o resto da equipe. Essa é a premissa do ambiente de
desenvolvimento.&lt;/p&gt;
&lt;p&gt;Em &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;, é muito simples construirmos um &lt;a href="http://blog.triveos.com.br/2010/04/25/trabalhando-com-python-e-django/" title="Trabalhando com Python e Django"&gt;ambiente isolado&lt;/a&gt; em
nossas máquinas, isolado até mesmo do nosso SO. Podemos codificar,
testar, errar e corrigir, sem afetar diretamente os outros membros da
equipe.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.setinet.com.br/" title="Setinet, Internet Controlada"&gt;Onde eu trabalho atualmente&lt;/a&gt;, o ambiente de desenvolvimento é
totalmente construído em uma máquina virtual, devido as fortes
dependências entre ferramentas como &lt;a href="http://www.nagios.org/" title="Monitore a sua infraestrutura com Nagios"&gt;&lt;em&gt;Nagios&lt;/em&gt;&lt;/a&gt; e &lt;a href="http://www.mrtg.org/rrdtool/" title="Data logging e gráficos com RRDTools"&gt;&lt;em&gt;RRDTools&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ao fim do dia (ou de uma &lt;em&gt;feature&lt;/em&gt;), você pode “comitar” suas alterações
para uma máquina central, comumente chamada de “Integration” (podendo
ser o responsável por manter um servidor &lt;a href="http://subversion.tigris.org/" title="Versionamento de projetos com Subversion"&gt;&lt;em&gt;SVN&lt;/em&gt;&lt;/a&gt; ou um repositório
central quando for um &lt;a href="http://en.wikipedia.org/wiki/Distributed_Version_Control_System" title="Leia mais sobre Distributed Version Control System no Wikipedia"&gt;&lt;em&gt;DVCS&lt;/em&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Antes de implantar o método descrito acima, o ambiente de
desenvolvimento era um servidor compartilhado onde os membros da equipe
trabalhavam simultaneamente (no mesmo ambiente). Funcionou e tenho
certeza que funcionaria até hoje, mas acredito que ambientes isolado
sejam mais organizados e seguros.&lt;/p&gt;
&lt;h2&gt;Testing&lt;/h2&gt;
&lt;p&gt;Quando você possui uma equipe de testes em seu projeto, nada melhor do
que montar um servidor onde você possa por à prova as últimas
modificações inseridas em sua aplicação.&lt;/p&gt;
&lt;p&gt;Como eu nunca tive a oportunidade de trabalhar com pessoas dedicadas a
testes, geralmente utilizo o próprio ambiente de &lt;em&gt;staging&lt;/em&gt; para testes.&lt;/p&gt;
&lt;p&gt;Embora &lt;a href="https://klauslaube.com.br/tag/tdd.html" title="Leia mais sobre TDD"&gt;testes unitários&lt;/a&gt; e de &lt;a href="https://klauslaube.com.br/tag/bdd.html" title="Leia mais sobre BDD"&gt;aceitação&lt;/a&gt; sejam amplamente
executados em ambiente de desenvolvimento, quando o projeto ficar
gigante, executar todos os testes do projeto a cada nova feature
desenvolvida pode lhe consumir muito tempo. Neste caso é interessante
você construir um &lt;a href="http://blog.caelum.com.br/integracao-continua/" title="Leia artigo da Caelum falando sobre Continuous Integration"&gt;servidor de integração contínua&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Na &lt;a href="http://uptimetecnologia.com.br/" title="Uptime, garantindo a sua segurança na internet"&gt;&lt;em&gt;Uptime&lt;/em&gt;&lt;/a&gt;, trabalhávamos da seguinte maneira: Existia um servidor
que era responsável apenas por clonar o repositório central e executar
os testes automatizados. Quando um teste falhava, um membro da equipe
era notificado, e ele designava alguém para resolver conflitos e
problemas. O conceito é o mesmo apresentado no &lt;em&gt;link&lt;/em&gt; acima, a exceção é
que esse processo era uma tarefa agendada e executava em determinada
hora do dia (e não diretamente a cada &lt;em&gt;commit&lt;/em&gt; ou em um determinado
momento do processo de integração).&lt;/p&gt;
&lt;h2&gt;Staging&lt;/h2&gt;
&lt;p&gt;O papel do ambiente de &lt;em&gt;staging&lt;/em&gt; é ser o mais próximo da realidade, ou
seja, ele deve ser uma réplica perfeita do ambiente de produção.
Tratando-se de desenvolvimento &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt;, deve-se utilizar o mesmo
serviço &lt;em&gt;web&lt;/em&gt;, o mesmo banco de dados, os mesmos módulos e &lt;em&gt;plugins&lt;/em&gt;.
Isso garantirá um &lt;em&gt;deploy&lt;/em&gt; muito mais “suave” para o ambiente de
produção.&lt;/p&gt;
&lt;p&gt;No meu caso específico, utilizei o ambiente de &lt;em&gt;staging&lt;/em&gt; para, além de
testar a aplicação em um ambiente mais “real”, demonstrar as &lt;em&gt;features&lt;/em&gt;
para o cliente. Logo, ele tinha algo real, e com dados que faziam
sentido, antes mesmo do projeto ir para o ar.&lt;/p&gt;
&lt;p&gt;Ficou mais simples determinar se a solução soluciona o seu problema ou
não.&lt;/p&gt;
&lt;h2&gt;Production&lt;/h2&gt;
&lt;p&gt;E finalmente, o ambiente de produção.&lt;/p&gt;
&lt;p&gt;É neste ambiente que a sua aplicação ganha vida e enfrenta a dura
realidade do mundo :)&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://spacebug.com/effective_development_environments/" title="Uma excelente referência, um artigo bem escrito e objetivo."&gt;&lt;em&gt;Effective Development Environments: Development, Test, Staging/Pre-prod and Production Environments&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.caelum.com.br/integracao-continua/" title="A Caelum é uma das melhores referências do país sobre agile e desenvolvimento em geral."&gt;&lt;em&gt;Caelum&lt;/em&gt;: Integração Contínua&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://devagil.wordpress.com/2007/04/14/4611-integracao-continua/" title="Excelente artigo sobre Integração Contínua dentro do contexto de agile."&gt;Integração Contínua&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.dotkernel.com/php-development/php-environment-development-staging-production/" title="Um artigo claro e objetivo sobre os ambientes de Development, Staging e Production."&gt;&lt;em&gt;PHP Environment: Development Staging Production&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dltj.org/article/software-development-practice/" title="Um post muito bom sobre desenvolvimento de software com qualidade."&gt;&lt;em&gt;Traditional Development/Integration/Staging/Production Practice for Software Development&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Acompanhe a produção dos posts da série &lt;a href="{filename}03-montando-seu-ambiente-de-desenvolvimento-django-no-linux.md" title="Saiba como montar o seu ambiente de desenvolvimento para trabalhar com Django"&gt;Montando seu ambiente de
desenvolvimento &lt;em&gt;Django&lt;/em&gt; no &lt;em&gt;Linux&lt;/em&gt;&lt;/a&gt; assinando o &lt;a href="https://klauslaube.com.br/feed/rss.xml" title="Leia os posts deste blog no seu leitor RSS favorito"&gt;&lt;em&gt;Feeds RSS&lt;/em&gt;&lt;/a&gt; ou me
seguindo no &lt;a href="http://www.twitter.com/kplaube" title="Siga-me no Twitter"&gt;&lt;em&gt;Twitter&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Até a próxima…&lt;/p&gt;</content><category term="desenvolvimento"></category><category term="infraestrutura"></category><category term="agile"></category><category term="ambiente-de-desenvolvimento"></category><category term="qualidade"></category><category term="testes"></category></entry><entry><title>Virtualbox: Uma maneira interessante de possuir vários SOs em uma máquina só</title><link href="https://klauslaube.com.br/2010/12/01/virtualbox-varios-sos-numa-maquina-so.html" rel="alternate"></link><published>2010-12-01T21:14:00-02:00</published><updated>2010-12-01T21:14:00-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2010-12-01:/2010/12/01/virtualbox-varios-sos-numa-maquina-so.html</id><summary type="html">&lt;p&gt;Sabe quando você quer testar uma distribuição (ou &lt;em&gt;SO&lt;/em&gt;) diferente mas não quer mexer diretamente no
particionamento do seu &lt;em&gt;HD&lt;/em&gt;? Ou quando você precisar propor uma máquina
individual para serviços &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt;, mas não tem &lt;em&gt;hardware&lt;/em&gt; sobrando para
isto? Ou quando você precisa ficar movendo um ambiente completo entre
máquinas ou …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Sabe quando você quer testar uma distribuição (ou &lt;em&gt;SO&lt;/em&gt;) diferente mas não quer mexer diretamente no
particionamento do seu &lt;em&gt;HD&lt;/em&gt;? Ou quando você precisar propor uma máquina
individual para serviços &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt;, mas não tem &lt;em&gt;hardware&lt;/em&gt; sobrando para
isto? Ou quando você precisa ficar movendo um ambiente completo entre
máquinas ou locais?&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Virtualização pode ser a resposta para os seus problemas!&lt;/p&gt;
&lt;h2&gt;Virtualização? What the hell?&lt;/h2&gt;
&lt;p&gt;Segundo o nosso bom e velho &lt;a href="http://pt.wikipedia.org/wiki/Virtualiza%C3%A7%C3%A3o" title="Leia mais sobre Virtualização na Wikipedia"&gt;&lt;em&gt;Wikipedia&lt;/em&gt;&lt;/a&gt;, virtualização é:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(…) uma forma de esconder as características físicas de uma plataforma
computacional dos utilizadores, mostrando outro hardware virtual,
emulando um ou mais ambientes isolados.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Em outras palavras, é a capacidade de você executar um ou mais sistemas
operacionais através de plataformas que são emuladas através de um
segundo sistema operativo… não ajudei né? Então vamos para a forma
“vulgar”:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;É o conceito ou &lt;em&gt;software&lt;/em&gt; que permite a você executar &lt;em&gt;Ubuntu&lt;/em&gt;, &lt;em&gt;Mac OS
X&lt;/em&gt; e &lt;em&gt;FreeBSD&lt;/em&gt; em seu &lt;em&gt;Windows XP&lt;/em&gt; sem necessitar particionar seu &lt;em&gt;HD&lt;/em&gt;,
e ao mesmo tempo. Neste caso, um &lt;em&gt;hardware&lt;/em&gt; virtual é criado e você
opera (instala, configura, usa) o &lt;em&gt;SO&lt;/em&gt; normalmente, como se estivesse em
uma “máquina física”.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;O &lt;a href="http://pt.wikipedia.org/wiki/Virtualiza%C3%A7%C3%A3o" title="Leia mais sobre Virtualização na Wikipedia"&gt;artigo no &lt;em&gt;Wikipedia&lt;/em&gt; sobre virtualização&lt;/a&gt; está bem
bacana, inclusive citando vantagens e inconvenientes.&lt;/p&gt;
&lt;h2&gt;O Virtualbox&lt;/h2&gt;
&lt;p&gt;&lt;img class="align-left" src="/images/blog/virtualbox-logo.png" width="174" height="180" title="Logotipo do Virtualbox" alt="Logotipo do Virtualbox"&gt;&lt;/p&gt;
&lt;p&gt;Existem diversas formas e ferramentas para virtualizar ambientes em seu &lt;em&gt;desktop&lt;/em&gt;
ou servidor. A ferramenta que tenho utilizado com muito sucesso
(em meu &lt;em&gt;desktop&lt;/em&gt;, sou programador e não &lt;em&gt;expert&lt;/em&gt; em infra (: ) é o
&lt;strong&gt;&lt;em&gt;Virtualbox&lt;/em&gt;&lt;/strong&gt; (também chamado de &lt;strong&gt;&lt;em&gt;Virtualbox OSE&lt;/em&gt;&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;Hoje mantido pela &lt;em&gt;Oracle&lt;/em&gt; (que adquiriu a &lt;em&gt;Sun Microsystems&lt;/em&gt;), o
&lt;em&gt;Virtualbox&lt;/em&gt; é uma solução ágil e objetiva no que diz respeito a
virtualização. Não sei a opinião dos profissionais de infraestrutura
sobre esta ferramenta, mas já passei por duas empresas especializadas em
serviços/produtos focados em servidores, e o &lt;em&gt;Virtualbox&lt;/em&gt; estava lá
atendendo a demanda.&lt;/p&gt;
&lt;p&gt;O que me chamou a atenção foi a facilidade de uso. Como programador,
utilizo-o para criar &lt;em&gt;sandboxes&lt;/em&gt; e máquinas de testes. Na empresa onde
trabalho atualmente, utilizamos o programa para manter nossos
&lt;em&gt;workspaces&lt;/em&gt; isolados (já que a aplicação em que eu trabalho é
empacotada como uma verdadeira distribuição &lt;em&gt;Linux&lt;/em&gt;). Já no meu
computador pessoal, tenho &lt;em&gt;VMs&lt;/em&gt; (&lt;em&gt;Virtual Machines&lt;/em&gt; – Máquinas Virtuais)
para testar distribuições como o &lt;em&gt;Debian&lt;/em&gt;, &lt;em&gt;Slackware&lt;/em&gt; e até mesmo o
&lt;em&gt;Android&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Instalando o Virtualbox&lt;/h2&gt;
&lt;p&gt;Existem milhares de tutoriais que ensinam a instalar o &lt;em&gt;Virtualbox&lt;/em&gt;. Não
vou “reinventar a roda”… vou apenas indicar alguns tutoriais:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.vivaolinux.com.br/artigo/Instalando-o-VirtualBox-no-Ubuntu-10.04/" title="Artigo de Leandro Bruno para o Viva o Linux sobre Virtualbox no Ubuntu-10.04"&gt;&lt;em&gt;Viva o Linux&lt;/em&gt;: Instalando o &lt;em&gt;Virtualbox&lt;/em&gt; no &lt;em&gt;Ubuntu 10.04&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.vivaolinux.com.br/dica/Instalacao-do-Virtualbox-no-Debian-Etch-4-Linux" title="Artigo de Ronnie Robson Campos para o Viva o Linux sobre o Virtualbox no Debian Etch"&gt;&lt;em&gt;Viva o Linux&lt;/em&gt;: Instalação do &lt;em&gt;Virtualbox&lt;/em&gt; no &lt;em&gt;Debian (Etch)&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.brunorusso.eti.br/virtualizacao/instalando-o-virtualbox-em-uma-maquina-com-slackware/" title="Um excelente post de Bruno Russo sobre Virtualbox em Slackware"&gt;&lt;em&gt;Bruno Russo&lt;/em&gt;: Instalando o &lt;em&gt;Virtualbox&lt;/em&gt; em uma máquina com
  &lt;em&gt;Slackware&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blogdovicente.com/2009/03/04/como-instalar-e-usar-o-virtualbox/" title="Post feito pelo Vicente sobre o Virtualbox no Windows"&gt;&lt;em&gt;Blog do Vicente&lt;/em&gt;: Como instalar e usar o &lt;em&gt;Virtualbox&lt;/em&gt;
  (&lt;em&gt;Windows&lt;/em&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Até a próxima…&lt;/p&gt;</content><category term="infraestrutura"></category><category term="sistemas-operacionais"></category><category term="virtualizacao"></category><category term="virtualbox"></category></entry></feed>